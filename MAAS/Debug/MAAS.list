
MAAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a294  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800a494  0800a494  0000b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab00  0800ab00  0000c0bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab00  0800ab00  0000bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab08  0800ab08  0000c0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab08  0800ab08  0000bb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800ab10  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035c8  200000bc  0800abcc  0000c0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003684  0800abcc  0000c684  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e20  00000000  00000000  0000c0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003110  00000000  00000000  0001ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7a  00000000  00000000  000232f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aecf  00000000  00000000  0002416a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d48  00000000  00000000  0004f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6e7  00000000  00000000  00068d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  001664ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0016ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000bc 	.word	0x200000bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a47c 	.word	0x0800a47c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c0 	.word	0x200000c0
 800023c:	0800a47c 	.word	0x0800a47c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sd_card_init>:
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0x7d, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x80, 0xa9, 0x03, 0x00};
static uint32_t wav_file_size;
static uint8_t first_time = 0;

void sd_card_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	uint8_t file_name[] = "test.txt";
	uint8_t temp_number;
	uint8_t test_text[] = "Hola, esto es un texto de prueba.";
	*/
	// montando una tarjeta SD
	sd_result = f_mount(&sdCard,"",0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <sd_card_init+0x38>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <sd_card_init+0x3c>)
 80005da:	f008 f831 	bl	8008640 <f_mount>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <sd_card_init+0x40>)
 80005e4:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <sd_card_init+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <sd_card_init+0x2e>
		printf("Error montando la tarjeta SD: %d \n", sd_result);
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <sd_card_init+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <sd_card_init+0x44>)
 80005f6:	f009 f875 	bl	80096e4 <iprintf>
		while(1);
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <sd_card_init+0x2a>
	}
	else {
		printf("Tarjeta SD montada \n");
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <sd_card_init+0x48>)
 8000600:	f009 f8d8 	bl	80097b4 <puts>
	else {
		printf("Contenido del archivo escrito: %d \n", temp_number);
	}
	f_close(&testFile);
	*/
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	0800a494 	.word	0x0800a494
 800060c:	200000dc 	.word	0x200000dc
 8000610:	200000d8 	.word	0x200000d8
 8000614:	0800a498 	.word	0x0800a498
 8000618:	0800a4bc 	.word	0x0800a4bc

0800061c <start_recording>:

void start_recording (uint32_t frequency) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	static char file_name[] = "MAAS_000.wav";
	static uint8_t file_counter = 1;
	int file_number_digits = file_counter;
 8000624:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <start_recording+0x134>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t) frequency;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b47      	ldr	r3, [pc, #284]	@ (8000754 <start_recording+0x138>)
 8000636:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b45      	ldr	r3, [pc, #276]	@ (8000754 <start_recording+0x138>)
 8000640:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b42      	ldr	r3, [pc, #264]	@ (8000754 <start_recording+0x138>)
 800064a:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b40      	ldr	r3, [pc, #256]	@ (8000754 <start_recording+0x138>)
 8000654:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t) byte_rate;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <start_recording+0x138>)
 800065c:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b3b      	ldr	r3, [pc, #236]	@ (8000754 <start_recording+0x138>)
 8000666:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <start_recording+0x138>)
 8000670:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	0e1b      	lsrs	r3, r3, #24
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b36      	ldr	r3, [pc, #216]	@ (8000754 <start_recording+0x138>)
 800067a:	77da      	strb	r2, [r3, #31]

	// definiendo el nombre del archivo
	file_name[7] = file_number_digits % 10 + 48;
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <start_recording+0x13c>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	1099      	asrs	r1, r3, #2
 8000686:	17d3      	asrs	r3, r2, #31
 8000688:	1ac9      	subs	r1, r1, r3
 800068a:	460b      	mov	r3, r1
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	1ad1      	subs	r1, r2, r3
 8000694:	b2cb      	uxtb	r3, r1
 8000696:	3330      	adds	r3, #48	@ 0x30
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b30      	ldr	r3, [pc, #192]	@ (800075c <start_recording+0x140>)
 800069c:	71da      	strb	r2, [r3, #7]
	file_number_digits /= 10;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000758 <start_recording+0x13c>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	1092      	asrs	r2, r2, #2
 80006a8:	17db      	asrs	r3, r3, #31
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	60fb      	str	r3, [r7, #12]
	file_name[6] = file_number_digits % 10 + 48;
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <start_recording+0x13c>)
 80006b2:	fb83 1302 	smull	r1, r3, r3, r2
 80006b6:	1099      	asrs	r1, r3, #2
 80006b8:	17d3      	asrs	r3, r2, #31
 80006ba:	1ac9      	subs	r1, r1, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ad1      	subs	r1, r2, r3
 80006c6:	b2cb      	uxtb	r3, r1
 80006c8:	3330      	adds	r3, #48	@ 0x30
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <start_recording+0x140>)
 80006ce:	719a      	strb	r2, [r3, #6]
	file_number_digits /= 10;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <start_recording+0x13c>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	60fb      	str	r3, [r7, #12]
	file_name[5] = file_number_digits % 10 + 48;
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <start_recording+0x13c>)
 80006e4:	fb83 1302 	smull	r1, r3, r3, r2
 80006e8:	1099      	asrs	r1, r3, #2
 80006ea:	17d3      	asrs	r3, r2, #31
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ad1      	subs	r1, r2, r3
 80006f8:	b2cb      	uxtb	r3, r1
 80006fa:	3330      	adds	r3, #48	@ 0x30
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <start_recording+0x140>)
 8000700:	715a      	strb	r2, [r3, #5]
	file_counter++;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <start_recording+0x134>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <start_recording+0x134>)
 800070c:	701a      	strb	r2, [r3, #0]

	// creando el archivo
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 800070e:	220a      	movs	r2, #10
 8000710:	4912      	ldr	r1, [pc, #72]	@ (800075c <start_recording+0x140>)
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <start_recording+0x144>)
 8000714:	f007 ffda 	bl	80086cc <f_open>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <start_recording+0x148>)
 800071e:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <start_recording+0x148>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <start_recording+0x11c>
		printf("Error creando un archivo: %d \n", sd_result);
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <start_recording+0x148>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <start_recording+0x14c>)
 8000730:	f008 ffd8 	bl	80096e4 <iprintf>
		while(1);
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <start_recording+0x118>
	}
	else {
		printf("Archivo de audio %s creado \n", file_name);
 8000738:	4908      	ldr	r1, [pc, #32]	@ (800075c <start_recording+0x140>)
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <start_recording+0x150>)
 800073c:	f008 ffd2 	bl	80096e4 <iprintf>
	}
	wav_file_size = 0;
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <start_recording+0x154>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	20000000 	.word	0x20000000
 8000758:	66666667 	.word	0x66666667
 800075c:	20000030 	.word	0x20000030
 8000760:	20001114 	.word	0x20001114
 8000764:	200000d8 	.word	0x200000d8
 8000768:	0800a4d0 	.word	0x0800a4d0
 800076c:	0800a4f0 	.word	0x0800a4f0
 8000770:	20002144 	.word	0x20002144

08000774 <write2wave_file>:

void write2wave_file (uint8_t *data, uint16_t data_size) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	if(first_time == 0)
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <write2wave_file+0x84>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d116      	bne.n	80007b6 <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00a      	b.n	80007a4 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	4919      	ldr	r1, [pc, #100]	@ (80007fc <write2wave_file+0x88>)
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	440a      	add	r2, r1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80007a8:	ddf1      	ble.n	800078e <write2wave_file+0x1a>
		}
		first_time = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <write2wave_file+0x84>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
		printf("El encabezado ha sido escrito. \n");
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <write2wave_file+0x8c>)
 80007b2:	f008 ffff 	bl	80097b4 <puts>
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <write2wave_file+0x90>)
 80007c0:	f008 f94c 	bl	8008a5c <f_write>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <write2wave_file+0x94>)
 80007ca:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0) {
 80007cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <write2wave_file+0x94>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d007      	beq.n	80007e4 <write2wave_file+0x70>
		printf("Error escribiendo al archivo: %d \n", sd_result);
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <write2wave_file+0x94>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <write2wave_file+0x98>)
 80007dc:	f008 ff82 	bl	80096e4 <iprintf>
		while(1);
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 80007e4:	887a      	ldrh	r2, [r7, #2]
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <write2wave_file+0x9c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <write2wave_file+0x9c>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20002148 	.word	0x20002148
 80007fc:	20000000 	.word	0x20000000
 8000800:	0800a510 	.word	0x0800a510
 8000804:	20001114 	.word	0x20001114
 8000808:	200000d8 	.word	0x200000d8
 800080c:	0800a530 	.word	0x0800a530
 8000810:	20002144 	.word	0x20002144

08000814 <stop_recording>:

void stop_recording () {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// actualizando el tamaño de archivo
	wav_file_size -= 8;
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <stop_recording+0xc4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3b08      	subs	r3, #8
 8000820:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <stop_recording+0xc4>)
 8000822:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <stop_recording+0xc4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <stop_recording+0xc8>)
 800082c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <stop_recording+0xc4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <stop_recording+0xc8>)
 8000838:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <stop_recording+0xc4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <stop_recording+0xc8>)
 8000844:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <stop_recording+0xc4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <stop_recording+0xc8>)
 8000850:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <stop_recording+0xc4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b24      	subs	r3, #36	@ 0x24
 8000858:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <stop_recording+0xc4>)
 800085a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <stop_recording+0xc4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <stop_recording+0xc8>)
 8000864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <stop_recording+0xc4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <stop_recording+0xc8>)
 8000872:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <stop_recording+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <stop_recording+0xc8>)
 8000880:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <stop_recording+0xc4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	0e1b      	lsrs	r3, r3, #24
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <stop_recording+0xc8>)
 800088e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// regresar al encabezado para actualizar el formato de archivo
	f_lseek(&wavFile, 0);
 8000892:	2100      	movs	r1, #0
 8000894:	4812      	ldr	r0, [pc, #72]	@ (80008e0 <stop_recording+0xcc>)
 8000896:	f008 fb1d 	bl	8008ed4 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	222c      	movs	r2, #44	@ 0x2c
 800089e:	490f      	ldr	r1, [pc, #60]	@ (80008dc <stop_recording+0xc8>)
 80008a0:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <stop_recording+0xcc>)
 80008a2:	f008 f8db 	bl	8008a5c <f_write>
	if(sd_result != 0)
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <stop_recording+0xd0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <stop_recording+0xaa>
	{
		printf("Error al actualizar el primer sector: %d \n", sd_result);
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <stop_recording+0xd0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <stop_recording+0xd4>)
 80008b6:	f008 ff15 	bl	80096e4 <iprintf>
		while(1);
 80008ba:	bf00      	nop
 80008bc:	e7fd      	b.n	80008ba <stop_recording+0xa6>
	}
	f_close(&wavFile);
 80008be:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <stop_recording+0xcc>)
 80008c0:	f008 fade 	bl	8008e80 <f_close>
	first_time = 0;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <stop_recording+0xd8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	printf("Archivo de audio cerrado. \n");
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <stop_recording+0xdc>)
 80008cc:	f008 ff72 	bl	80097b4 <puts>

}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20002144 	.word	0x20002144
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20001114 	.word	0x20001114
 80008e4:	200000d8 	.word	0x200000d8
 80008e8:	0800a554 	.word	0x0800a554
 80008ec:	20002148 	.word	0x20002148
 80008f0:	0800a580 	.word	0x0800a580

080008f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <SELECT+0x1c>)
 8000900:	f002 faa6 	bl	8002e50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 fb61 	bl	8001fcc <HAL_Delay>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <DESELECT+0x1c>)
 8000920:	f002 fa96 	bl	8002e50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f001 fb51 	bl	8001fcc <HAL_Delay>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020400 	.word	0x40020400

08000934 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800093e:	bf00      	nop
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <SPI_TxByte+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1f8      	bne.n	8000940 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800094e:	1df9      	adds	r1, r7, #7
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	2201      	movs	r2, #1
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <SPI_TxByte+0x30>)
 8000956:	f003 ff22 	bl	800479e <HAL_SPI_Transmit>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200021f0 	.word	0x200021f0

08000968 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000974:	bf00      	nop
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <SPI_TxBuffer+0x30>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b02      	cmp	r3, #2
 8000982:	d1f8      	bne.n	8000976 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	2364      	movs	r3, #100	@ 0x64
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <SPI_TxBuffer+0x30>)
 800098c:	f003 ff07 	bl	800479e <HAL_SPI_Transmit>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200021f0 	.word	0x200021f0

0800099c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009a2:	23ff      	movs	r3, #255	@ 0xff
 80009a4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009a6:	bf00      	nop
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <SPI_RxByte+0x34>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d1f8      	bne.n	80009a8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009b6:	1dba      	adds	r2, r7, #6
 80009b8:	1df9      	adds	r1, r7, #7
 80009ba:	2364      	movs	r3, #100	@ 0x64
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <SPI_RxByte+0x34>)
 80009c2:	f004 f861 	bl	8004a88 <HAL_SPI_TransmitReceive>

	return data;
 80009c6:	79bb      	ldrb	r3, [r7, #6]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200021f0 	.word	0x200021f0

080009d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009dc:	f7ff ffde 	bl	800099c <SPI_RxByte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <SD_ReadyWait+0x30>)
 80009f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009fc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80009fe:	f7ff ffcd 	bl	800099c <SPI_RxByte>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2bff      	cmp	r3, #255	@ 0xff
 8000a0a:	d003      	beq.n	8000a14 <SD_ReadyWait+0x24>
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <SD_ReadyWait+0x30>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f4      	bne.n	80009fe <SD_ReadyWait+0xe>

	return res;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000214c 	.word	0x2000214c

08000a24 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a2a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000a2e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a30:	f7ff ff70 	bl	8000914 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	e005      	b.n	8000a46 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff ff7a 	bl	8000934 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	ddf6      	ble.n	8000a3a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a4c:	f7ff ff52 	bl	80008f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a50:	2340      	movs	r3, #64	@ 0x40
 8000a52:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a64:	2395      	movs	r3, #149	@ 0x95
 8000a66:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2106      	movs	r1, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff7b 	bl	8000968 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a72:	e002      	b.n	8000a7a <SD_PowerOn+0x56>
	{
		cnt--;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a7a:	f7ff ff8f 	bl	800099c <SPI_RxByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d002      	beq.n	8000a8a <SD_PowerOn+0x66>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f4      	bne.n	8000a74 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a8a:	f7ff ff43 	bl	8000914 <DESELECT>
	SPI_TxByte(0XFF);
 8000a8e:	20ff      	movs	r0, #255	@ 0xff
 8000a90:	f7ff ff50 	bl	8000934 <SPI_TxByte>

	PowerFlag = 1;
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <SD_PowerOn+0x80>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000214f 	.word	0x2000214f

08000aa8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <SD_PowerOff+0x14>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000214f 	.word	0x2000214f

08000ac0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <SD_CheckPower+0x14>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000214f 	.word	0x2000214f

08000ad8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <SD_RxDataBlock+0x58>)
 8000ae4:	22c8      	movs	r2, #200	@ 0xc8
 8000ae6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000ae8:	f7ff ff58 	bl	800099c <SPI_RxByte>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2bff      	cmp	r3, #255	@ 0xff
 8000af4:	d103      	bne.n	8000afe <SD_RxDataBlock+0x26>
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <SD_RxDataBlock+0x58>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f4      	bne.n	8000ae8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b02:	d001      	beq.n	8000b08 <SD_RxDataBlock+0x30>
 8000b04:	2300      	movs	r3, #0
 8000b06:	e00f      	b.n	8000b28 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff60 	bl	80009d4 <SPI_RxBytePtr>
	} while(len--);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f4      	bne.n	8000b08 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b1e:	f7ff ff3d 	bl	800099c <SPI_RxByte>
	SPI_RxByte();
 8000b22:	f7ff ff3b 	bl	800099c <SPI_RxByte>

	return TRUE;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000214a 	.word	0x2000214a

08000b34 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b44:	f7ff ff54 	bl	80009f0 <SD_ReadyWait>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d001      	beq.n	8000b52 <SD_TxDataBlock+0x1e>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e02f      	b.n	8000bb2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff feed 	bl	8000934 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000b5e:	d020      	beq.n	8000ba2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff feff 	bl	8000968 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b6a:	f7ff ff17 	bl	800099c <SPI_RxByte>
		SPI_RxByte();
 8000b6e:	f7ff ff15 	bl	800099c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b72:	e00b      	b.n	8000b8c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b74:	f7ff ff12 	bl	800099c <SPI_RxByte>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	f003 031f 	and.w	r3, r3, #31
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d006      	beq.n	8000b94 <SD_TxDataBlock+0x60>
			i++;
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	2b40      	cmp	r3, #64	@ 0x40
 8000b90:	d9f0      	bls.n	8000b74 <SD_TxDataBlock+0x40>
 8000b92:	e000      	b.n	8000b96 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b94:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b96:	bf00      	nop
 8000b98:	f7ff ff00 	bl	800099c <SPI_RxByte>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0fa      	beq.n	8000b98 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	d101      	bne.n	8000bb0 <SD_TxDataBlock+0x7c>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	6039      	str	r1, [r7, #0]
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bc6:	f7ff ff13 	bl	80009f0 <SD_ReadyWait>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2bff      	cmp	r3, #255	@ 0xff
 8000bce:	d001      	beq.n	8000bd4 <SD_SendCmd+0x1a>
 8000bd0:	23ff      	movs	r3, #255	@ 0xff
 8000bd2:	e042      	b.n	8000c5a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff feac 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	0e1b      	lsrs	r3, r3, #24
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fea6 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fea0 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe9a 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe95 	bl	8000934 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b40      	cmp	r3, #64	@ 0x40
 8000c0e:	d102      	bne.n	8000c16 <SD_SendCmd+0x5c>
 8000c10:	2395      	movs	r3, #149	@ 0x95
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e007      	b.n	8000c26 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b48      	cmp	r3, #72	@ 0x48
 8000c1a:	d102      	bne.n	8000c22 <SD_SendCmd+0x68>
 8000c1c:	2387      	movs	r3, #135	@ 0x87
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e001      	b.n	8000c26 <SD_SendCmd+0x6c>
	else crc = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe83 	bl	8000934 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b4c      	cmp	r3, #76	@ 0x4c
 8000c32:	d101      	bne.n	8000c38 <SD_SendCmd+0x7e>
 8000c34:	f7ff feb2 	bl	800099c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c3c:	f7ff feae 	bl	800099c <SPI_RxByte>
 8000c40:	4603      	mov	r3, r0
 8000c42:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da05      	bge.n	8000c58 <SD_SendCmd+0x9e>
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	73bb      	strb	r3, [r7, #14]
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f1      	bne.n	8000c3c <SD_SendCmd+0x82>

	return res;
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SD_disk_initialize+0x14>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0d1      	b.n	8000e1c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c78:	4b6a      	ldr	r3, [pc, #424]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <SD_disk_initialize+0x2a>
 8000c86:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	e0c6      	b.n	8000e1c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000c8e:	f7ff fec9 	bl	8000a24 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c92:	f7ff fe2f 	bl	80008f4 <SELECT>

	/* check disk type */
	type = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2040      	movs	r0, #64	@ 0x40
 8000c9e:	f7ff ff8c 	bl	8000bba <SD_SendCmd>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	f040 80a1 	bne.w	8000dec <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000caa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cb2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000cb6:	2048      	movs	r0, #72	@ 0x48
 8000cb8:	f7ff ff7f 	bl	8000bba <SD_SendCmd>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d155      	bne.n	8000d6e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e00c      	b.n	8000ce2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cc8:	7bfc      	ldrb	r4, [r7, #15]
 8000cca:	f7ff fe67 	bl	800099c <SPI_RxByte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f104 0310 	add.w	r3, r4, #16
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d9ef      	bls.n	8000cc8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ce8:	7abb      	ldrb	r3, [r7, #10]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d17e      	bne.n	8000dec <SD_disk_initialize+0x188>
 8000cee:	7afb      	ldrb	r3, [r7, #11]
 8000cf0:	2baa      	cmp	r3, #170	@ 0xaa
 8000cf2:	d17b      	bne.n	8000dec <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2077      	movs	r0, #119	@ 0x77
 8000cf8:	f7ff ff5f 	bl	8000bba <SD_SendCmd>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d807      	bhi.n	8000d12 <SD_disk_initialize+0xae>
 8000d02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d06:	2069      	movs	r0, #105	@ 0x69
 8000d08:	f7ff ff57 	bl	8000bba <SD_SendCmd>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1ec      	bne.n	8000cf4 <SD_disk_initialize+0x90>
 8000d1a:	e000      	b.n	8000d1e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d1c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d1e:	4b42      	ldr	r3, [pc, #264]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d062      	beq.n	8000dec <SD_disk_initialize+0x188>
 8000d26:	2100      	movs	r1, #0
 8000d28:	207a      	movs	r0, #122	@ 0x7a
 8000d2a:	f7ff ff46 	bl	8000bba <SD_SendCmd>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d15b      	bne.n	8000dec <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e00c      	b.n	8000d54 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d3a:	7bfc      	ldrb	r4, [r7, #15]
 8000d3c:	f7ff fe2e 	bl	800099c <SPI_RxByte>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	f104 0310 	add.w	r3, r4, #16
 8000d48:	443b      	add	r3, r7
 8000d4a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	3301      	adds	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d9ef      	bls.n	8000d3a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SD_disk_initialize+0x104>
 8000d64:	230c      	movs	r3, #12
 8000d66:	e000      	b.n	8000d6a <SD_disk_initialize+0x106>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	73bb      	strb	r3, [r7, #14]
 8000d6c:	e03e      	b.n	8000dec <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2077      	movs	r0, #119	@ 0x77
 8000d72:	f7ff ff22 	bl	8000bba <SD_SendCmd>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d808      	bhi.n	8000d8e <SD_disk_initialize+0x12a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2069      	movs	r0, #105	@ 0x69
 8000d80:	f7ff ff1b 	bl	8000bba <SD_SendCmd>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d801      	bhi.n	8000d8e <SD_disk_initialize+0x12a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e000      	b.n	8000d90 <SD_disk_initialize+0x12c>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d10e      	bne.n	8000db6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2077      	movs	r0, #119	@ 0x77
 8000d9c:	f7ff ff0d 	bl	8000bba <SD_SendCmd>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d80e      	bhi.n	8000dc4 <SD_disk_initialize+0x160>
 8000da6:	2100      	movs	r1, #0
 8000da8:	2069      	movs	r0, #105	@ 0x69
 8000daa:	f7ff ff06 	bl	8000bba <SD_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d107      	bne.n	8000dc4 <SD_disk_initialize+0x160>
 8000db4:	e00c      	b.n	8000dd0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000db6:	2100      	movs	r1, #0
 8000db8:	2041      	movs	r0, #65	@ 0x41
 8000dba:	f7ff fefe 	bl	8000bba <SD_SendCmd>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e2      	bne.n	8000d92 <SD_disk_initialize+0x12e>
 8000dcc:	e000      	b.n	8000dd0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dce:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <SD_disk_initialize+0x184>
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	2050      	movs	r0, #80	@ 0x50
 8000dde:	f7ff feec 	bl	8000bba <SD_SendCmd>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_initialize+0x188>
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <SD_disk_initialize+0x1c8>)
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000df2:	f7ff fd8f 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8000df6:	f7ff fdd1 	bl	800099c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d008      	beq.n	8000e12 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e001      	b.n	8000e16 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e12:	f7ff fe49 	bl	8000aa8 <SD_PowerOff>
	}

	return Stat;
 8000e16:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	2000003d 	.word	0x2000003d
 8000e28:	2000214a 	.word	0x2000214a
 8000e2c:	2000214e 	.word	0x2000214e

08000e30 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SD_disk_status+0x14>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e002      	b.n	8000e4a <SD_disk_status+0x1a>
	return Stat;
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SD_disk_status+0x28>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2000003d 	.word	0x2000003d

08000e5c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <SD_disk_read+0x1c>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SD_disk_read+0x20>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e051      	b.n	8000f20 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <SD_disk_read+0xcc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SD_disk_read+0x32>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e048      	b.n	8000f20 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <SD_disk_read+0xd0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <SD_disk_read+0x44>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ea0:	f7ff fd28 	bl	80008f4 <SELECT>

	if (count == 1)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d111      	bne.n	8000ece <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	2051      	movs	r0, #81	@ 0x51
 8000eae:	f7ff fe84 	bl	8000bba <SD_SendCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d129      	bne.n	8000f0c <SD_disk_read+0xb0>
 8000eb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ebc:	68b8      	ldr	r0, [r7, #8]
 8000ebe:	f7ff fe0b 	bl	8000ad8 <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d021      	beq.n	8000f0c <SD_disk_read+0xb0>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	e01e      	b.n	8000f0c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2052      	movs	r0, #82	@ 0x52
 8000ed2:	f7ff fe72 	bl	8000bba <SD_SendCmd>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d117      	bne.n	8000f0c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f7ff fdf9 	bl	8000ad8 <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00a      	beq.n	8000f02 <SD_disk_read+0xa6>
				buff += 512;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ef2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ed      	bne.n	8000edc <SD_disk_read+0x80>
 8000f00:	e000      	b.n	8000f04 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f02:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f04:	2100      	movs	r1, #0
 8000f06:	204c      	movs	r0, #76	@ 0x4c
 8000f08:	f7ff fe57 	bl	8000bba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f0c:	f7ff fd02 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8000f10:	f7ff fd44 	bl	800099c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000003d 	.word	0x2000003d
 8000f2c:	2000214e 	.word	0x2000214e

08000f30 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <SD_disk_write+0x1c>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <SD_disk_write+0x20>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e06b      	b.n	8001028 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f50:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <SD_disk_write+0x100>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SD_disk_write+0x32>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e062      	b.n	8001028 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <SD_disk_write+0x100>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SD_disk_write+0x44>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e059      	b.n	8001028 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <SD_disk_write+0x104>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <SD_disk_write+0x56>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f86:	f7ff fcb5 	bl	80008f4 <SELECT>

	if (count == 1)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d110      	bne.n	8000fb2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	2058      	movs	r0, #88	@ 0x58
 8000f94:	f7ff fe11 	bl	8000bba <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d13a      	bne.n	8001014 <SD_disk_write+0xe4>
 8000f9e:	21fe      	movs	r1, #254	@ 0xfe
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f7ff fdc7 	bl	8000b34 <SD_TxDataBlock>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d033      	beq.n	8001014 <SD_disk_write+0xe4>
			count = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	e030      	b.n	8001014 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <SD_disk_write+0x104>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2077      	movs	r0, #119	@ 0x77
 8000fc2:	f7ff fdfa 	bl	8000bba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	2057      	movs	r0, #87	@ 0x57
 8000fca:	f7ff fdf6 	bl	8000bba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2059      	movs	r0, #89	@ 0x59
 8000fd2:	f7ff fdf2 	bl	8000bba <SD_SendCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d11b      	bne.n	8001014 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fdc:	21fc      	movs	r1, #252	@ 0xfc
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f7ff fda8 	bl	8000b34 <SD_TxDataBlock>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <SD_disk_write+0xd0>
				buff += 512;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ff0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1ee      	bne.n	8000fdc <SD_disk_write+0xac>
 8000ffe:	e000      	b.n	8001002 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001000:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001002:	21fd      	movs	r1, #253	@ 0xfd
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fd95 	bl	8000b34 <SD_TxDataBlock>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_write+0xe4>
			{
				count = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001014:	f7ff fc7e 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8001018:	f7ff fcc0 	bl	800099c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000003d 	.word	0x2000003d
 8001034:	2000214e 	.word	0x2000214e

08001038 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08b      	sub	sp, #44	@ 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	603a      	str	r2, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	460b      	mov	r3, r1
 8001046:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SD_disk_ioctl+0x1e>
 8001052:	2304      	movs	r3, #4
 8001054:	e113      	b.n	800127e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d124      	bne.n	80010ac <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d012      	beq.n	8001090 <SD_disk_ioctl+0x58>
 800106a:	2b02      	cmp	r3, #2
 800106c:	dc1a      	bgt.n	80010a4 <SD_disk_ioctl+0x6c>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <SD_disk_ioctl+0x40>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d006      	beq.n	8001084 <SD_disk_ioctl+0x4c>
 8001076:	e015      	b.n	80010a4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001078:	f7ff fd16 	bl	8000aa8 <SD_PowerOff>
			res = RES_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001082:	e0fa      	b.n	800127a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001084:	f7ff fcce 	bl	8000a24 <SD_PowerOn>
			res = RES_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800108e:	e0f4      	b.n	800127a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	1c5c      	adds	r4, r3, #1
 8001094:	f7ff fd14 	bl	8000ac0 <SD_CheckPower>
 8001098:	4603      	mov	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010a2:	e0ea      	b.n	800127a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010aa:	e0e6      	b.n	800127a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010ac:	4b76      	ldr	r3, [pc, #472]	@ (8001288 <SD_disk_ioctl+0x250>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SD_disk_ioctl+0x86>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e0df      	b.n	800127e <SD_disk_ioctl+0x246>

		SELECT();
 80010be:	f7ff fc19 	bl	80008f4 <SELECT>

		switch (ctrl)
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b0d      	cmp	r3, #13
 80010c6:	f200 80c9 	bhi.w	800125c <SD_disk_ioctl+0x224>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <SD_disk_ioctl+0x98>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080011c7 	.word	0x080011c7
 80010d4:	08001109 	.word	0x08001109
 80010d8:	080011b7 	.word	0x080011b7
 80010dc:	0800125d 	.word	0x0800125d
 80010e0:	0800125d 	.word	0x0800125d
 80010e4:	0800125d 	.word	0x0800125d
 80010e8:	0800125d 	.word	0x0800125d
 80010ec:	0800125d 	.word	0x0800125d
 80010f0:	0800125d 	.word	0x0800125d
 80010f4:	0800125d 	.word	0x0800125d
 80010f8:	0800125d 	.word	0x0800125d
 80010fc:	080011d9 	.word	0x080011d9
 8001100:	080011fd 	.word	0x080011fd
 8001104:	08001221 	.word	0x08001221
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001108:	2100      	movs	r1, #0
 800110a:	2049      	movs	r0, #73	@ 0x49
 800110c:	f7ff fd55 	bl	8000bba <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 80a6 	bne.w	8001264 <SD_disk_ioctl+0x22c>
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2110      	movs	r1, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fcda 	bl	8000ad8 <SD_RxDataBlock>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 809c 	beq.w	8001264 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	099b      	lsrs	r3, r3, #6
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10d      	bne.n	8001152 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	461a      	mov	r2, r3
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001148:	8bfb      	ldrh	r3, [r7, #30]
 800114a:	029a      	lsls	r2, r3, #10
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e02d      	b.n	80011ae <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001152:	7c7b      	ldrb	r3, [r7, #17]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	09db      	lsrs	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	7d7b      	ldrb	r3, [r7, #21]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0306 	and.w	r3, r3, #6
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3302      	adds	r3, #2
 8001176:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800117a:	7d3b      	ldrb	r3, [r7, #20]
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	b29b      	uxth	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	7cbb      	ldrb	r3, [r7, #18]
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	b29b      	uxth	r3, r3
 8001192:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011a0:	8bfa      	ldrh	r2, [r7, #30]
 80011a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011a6:	3b09      	subs	r3, #9
 80011a8:	409a      	lsls	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80011b4:	e056      	b.n	8001264 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011bc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011c4:	e055      	b.n	8001272 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011c6:	f7ff fc13 	bl	80009f0 <SD_ReadyWait>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2bff      	cmp	r3, #255	@ 0xff
 80011ce:	d14b      	bne.n	8001268 <SD_disk_ioctl+0x230>
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011d6:	e047      	b.n	8001268 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011d8:	2100      	movs	r1, #0
 80011da:	2049      	movs	r0, #73	@ 0x49
 80011dc:	f7ff fced 	bl	8000bba <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d142      	bne.n	800126c <SD_disk_ioctl+0x234>
 80011e6:	2110      	movs	r1, #16
 80011e8:	6a38      	ldr	r0, [r7, #32]
 80011ea:	f7ff fc75 	bl	8000ad8 <SD_RxDataBlock>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03b      	beq.n	800126c <SD_disk_ioctl+0x234>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011fa:	e037      	b.n	800126c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011fc:	2100      	movs	r1, #0
 80011fe:	204a      	movs	r0, #74	@ 0x4a
 8001200:	f7ff fcdb 	bl	8000bba <SD_SendCmd>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d132      	bne.n	8001270 <SD_disk_ioctl+0x238>
 800120a:	2110      	movs	r1, #16
 800120c:	6a38      	ldr	r0, [r7, #32]
 800120e:	f7ff fc63 	bl	8000ad8 <SD_RxDataBlock>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d02b      	beq.n	8001270 <SD_disk_ioctl+0x238>
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800121e:	e027      	b.n	8001270 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001220:	2100      	movs	r1, #0
 8001222:	207a      	movs	r0, #122	@ 0x7a
 8001224:	f7ff fcc9 	bl	8000bba <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001234:	e00b      	b.n	800124e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001236:	6a3c      	ldr	r4, [r7, #32]
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	f7ff fbae 	bl	800099c <SPI_RxByte>
 8001240:	4603      	mov	r3, r0
 8001242:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001248:	3301      	adds	r3, #1
 800124a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800124e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001252:	2b03      	cmp	r3, #3
 8001254:	d9ef      	bls.n	8001236 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800125c:	2304      	movs	r3, #4
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001262:	e006      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001264:	bf00      	nop
 8001266:	e004      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001268:	bf00      	nop
 800126a:	e002      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001270:	bf00      	nop
		}

		DESELECT();
 8001272:	f7ff fb4f 	bl	8000914 <DESELECT>
		SPI_RxByte();
 8001276:	f7ff fb91 	bl	800099c <SPI_RxByte>
	}

	return res;
 800127a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800127e:	4618      	mov	r0, r3
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	2000003d 	.word	0x2000003d

0800128c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001294:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001298:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012b4:	e000      	b.n	80012b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f9      	beq.n	80012b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80012e0:	f000 fb36 	bl	8001950 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fe15 	bl	8001f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f892 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 fa6e 	bl	80017cc <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f000 fa4e 	bl	8001790 <MX_DMA_Init>
  MX_I2S2_Init();
 80012f4:	f000 f8f6 	bl	80014e4 <MX_I2S2_Init>
  MX_SPI1_Init();
 80012f8:	f000 f91e 	bl	8001538 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012fc:	f004 ff56 	bl	80061ac <MX_FATFS_Init>
  MX_TIM2_Init();
 8001300:	f000 f958 	bl	80015b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001304:	f000 f9cc 	bl	80016a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 8001308:	4836      	ldr	r0, [pc, #216]	@ (80013e4 <main+0x108>)
 800130a:	f001 ff75 	bl	80031f8 <HAL_I2S_DMAStop>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800130e:	210c      	movs	r1, #12
 8001310:	4835      	ldr	r0, [pc, #212]	@ (80013e8 <main+0x10c>)
 8001312:	f004 f81b 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001316:	2108      	movs	r1, #8
 8001318:	4834      	ldr	r0, [pc, #208]	@ (80013ec <main+0x110>)
 800131a:	f004 f817 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800131e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001322:	f000 fe53 	bl	8001fcc <HAL_Delay>
  sd_card_init();
 8001326:	f7ff f953 	bl	80005d0 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_flag) {
 800132a:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <main+0x114>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d031      	beq.n	8001398 <main+0xbc>
		  if (start_stop_recording) {
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <main+0x118>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d011      	beq.n	8001362 <main+0x86>
			  HAL_I2S_DMAStop(&hi2s2);
 800133e:	4829      	ldr	r0, [pc, #164]	@ (80013e4 <main+0x108>)
 8001340:	f001 ff5a 	bl	80031f8 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <main+0x118>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 800134a:	f7ff fa63 	bl	8000814 <stop_recording>
			  half_i2s = 0;
 800134e:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <main+0x11c>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 8001354:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <main+0x120>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
			  printf("Grabación terminada.\n");
 800135a:	4829      	ldr	r0, [pc, #164]	@ (8001400 <main+0x124>)
 800135c:	f008 fa2a 	bl	80097b4 <puts>
 8001360:	e017      	b.n	8001392 <main+0xb6>
		  }
		  else {
			  start_stop_recording = 1;
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <main+0x118>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 8001368:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 800136c:	f7ff f956 	bl	800061c <start_recording>
			  printf("Grabando... (banderas en %d y %d)\n", half_i2s, full_i2s);
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <main+0x11c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4619      	mov	r1, r3
 8001378:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <main+0x120>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	4820      	ldr	r0, [pc, #128]	@ (8001404 <main+0x128>)
 8001382:	f008 f9af 	bl	80096e4 <iprintf>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) data_i2s, sizeof(data_i2s)/2);
 8001386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800138a:	491f      	ldr	r1, [pc, #124]	@ (8001408 <main+0x12c>)
 800138c:	4815      	ldr	r0, [pc, #84]	@ (80013e4 <main+0x108>)
 800138e:	f001 fe77 	bl	8003080 <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <main+0x114>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_stop_recording == 1 && half_i2s == 1)
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <main+0x118>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10c      	bne.n	80013bc <main+0xe0>
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <main+0x11c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <main+0xe0>
	  {
		  write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 80013ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013b0:	4815      	ldr	r0, [pc, #84]	@ (8001408 <main+0x12c>)
 80013b2:	f7ff f9df 	bl	8000774 <write2wave_file>
		  half_i2s = 0;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <main+0x11c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	  }
	  if (start_stop_recording == 1 && full_i2s == 1)
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <main+0x118>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d1b1      	bne.n	800132a <main+0x4e>
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <main+0x120>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d1ac      	bne.n	800132a <main+0x4e>
	  {
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <main+0x130>)
 80013d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f9cc 	bl	8000774 <write2wave_file>
		  full_i2s = 0;
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <main+0x120>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	  if (button_flag) {
 80013e2:	e7a2      	b.n	800132a <main+0x4e>
 80013e4:	20002150 	.word	0x20002150
 80013e8:	20002254 	.word	0x20002254
 80013ec:	200022a0 	.word	0x200022a0
 80013f0:	200032ee 	.word	0x200032ee
 80013f4:	200032ef 	.word	0x200032ef
 80013f8:	200032f0 	.word	0x200032f0
 80013fc:	200032f1 	.word	0x200032f1
 8001400:	0800a59c 	.word	0x0800a59c
 8001404:	0800a5b4 	.word	0x0800a5b4
 8001408:	200022ec 	.word	0x200022ec
 800140c:	20002aec 	.word	0x20002aec

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	@ 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	2234      	movs	r2, #52	@ 0x34
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f008 faa8 	bl	8009974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <SystemClock_Config+0xcc>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <SystemClock_Config+0xcc>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <SystemClock_Config+0xd0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001454:	4a22      	ldr	r2, [pc, #136]	@ (80014e0 <SystemClock_Config+0xd0>)
 8001456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2310      	movs	r3, #16
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800147c:	2308      	movs	r3, #8
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001480:	23a0      	movs	r3, #160	@ 0xa0
 8001482:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001488:	2307      	movs	r3, #7
 800148a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800148c:	2302      	movs	r3, #2
 800148e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f84f 	bl	8003538 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a0:	f000 fa82 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2105      	movs	r1, #5
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fae6 	bl	8003a94 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ce:	f000 fa6b 	bl	80019a8 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	@ 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_I2S2_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <MX_I2S2_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_I2S2_Init+0x4c>)
 80014f0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014f4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_I2S2_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_I2S2_Init+0x4c>)
 80014fe:	2203      	movs	r2, #3
 8001500:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_I2S2_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_I2S2_Init+0x4c>)
 800150a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800150e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <MX_I2S2_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_I2S2_Init+0x4c>)
 8001518:	2202      	movs	r2, #2
 800151a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	@ (8001530 <MX_I2S2_Init+0x4c>)
 800151e:	f001 fcc9 	bl	8002eb4 <HAL_I2S_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8001528:	f000 fa3e 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20002150 	.word	0x20002150
 8001534:	40003800 	.word	0x40003800

08001538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_SPI1_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <MX_SPI1_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001544:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_SPI1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001552:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001556:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_SPI1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_SPI1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_SPI1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001586:	2207      	movs	r2, #7
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001592:	2208      	movs	r2, #8
 8001594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_SPI1_Init+0x74>)
 8001598:	f003 f856 	bl	8004648 <HAL_SPI_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 fa01 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200021f0 	.word	0x200021f0
 80015b0:	40013000 	.word	0x40013000

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	@ 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015ee:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b29      	ldr	r3, [pc, #164]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80015fa:	4b28      	ldr	r3, [pc, #160]	@ (800169c <MX_TIM2_Init+0xe8>)
 80015fc:	2209      	movs	r2, #9
 80015fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b25      	ldr	r3, [pc, #148]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160c:	4823      	ldr	r0, [pc, #140]	@ (800169c <MX_TIM2_Init+0xe8>)
 800160e:	f003 fde5 	bl	80051dc <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001618:	f000 f9c6 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001626:	4619      	mov	r1, r3
 8001628:	481c      	ldr	r0, [pc, #112]	@ (800169c <MX_TIM2_Init+0xe8>)
 800162a:	f004 f89d 	bl	8005768 <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001634:	f000 f9b8 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001638:	4818      	ldr	r0, [pc, #96]	@ (800169c <MX_TIM2_Init+0xe8>)
 800163a:	f003 fe26 	bl	800528a <HAL_TIM_PWM_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001644:	f000 f9b0 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <MX_TIM2_Init+0xe8>)
 8001658:	f004 fd1a 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001662:	f000 f9a1 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001666:	2360      	movs	r3, #96	@ 0x60
 8001668:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 800166a:	2305      	movs	r3, #5
 800166c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001672:	2304      	movs	r3, #4
 8001674:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001676:	463b      	mov	r3, r7
 8001678:	220c      	movs	r2, #12
 800167a:	4619      	mov	r1, r3
 800167c:	4807      	ldr	r0, [pc, #28]	@ (800169c <MX_TIM2_Init+0xe8>)
 800167e:	f003 ff5f 	bl	8005540 <HAL_TIM_PWM_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001688:	f000 f98e 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <MX_TIM2_Init+0xe8>)
 800168e:	f000 fac7 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8001692:	bf00      	nop
 8001694:	3738      	adds	r7, #56	@ 0x38
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002254 	.word	0x20002254

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	@ 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016d4:	4a2d      	ldr	r2, [pc, #180]	@ (800178c <MX_TIM3_Init+0xec>)
 80016d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800-1;
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016e6:	f640 22ef 	movw	r2, #2799	@ 0xaef
 80016ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f8:	4823      	ldr	r0, [pc, #140]	@ (8001788 <MX_TIM3_Init+0xe8>)
 80016fa:	f003 fd6f 	bl	80051dc <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001704:	f000 f950 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001712:	4619      	mov	r1, r3
 8001714:	481c      	ldr	r0, [pc, #112]	@ (8001788 <MX_TIM3_Init+0xe8>)
 8001716:	f004 f827 	bl	8005768 <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001720:	f000 f942 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001724:	4818      	ldr	r0, [pc, #96]	@ (8001788 <MX_TIM3_Init+0xe8>)
 8001726:	f003 fdb0 	bl	800528a <HAL_TIM_PWM_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001730:	f000 f93a 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4811      	ldr	r0, [pc, #68]	@ (8001788 <MX_TIM3_Init+0xe8>)
 8001744:	f004 fca4 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800174e:	f000 f92b 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001752:	2360      	movs	r3, #96	@ 0x60
 8001754:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1400;
 8001756:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 800175a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	2208      	movs	r2, #8
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	@ (8001788 <MX_TIM3_Init+0xe8>)
 800176c:	f003 fee8 	bl	8005540 <HAL_TIM_PWM_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001776:	f000 f917 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800177a:	4803      	ldr	r0, [pc, #12]	@ (8001788 <MX_TIM3_Init+0xe8>)
 800177c:	f000 fa50 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8001780:	bf00      	nop
 8001782:	3738      	adds	r7, #56	@ 0x38
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200022a0 	.word	0x200022a0
 800178c:	40000400 	.word	0x40000400

08001790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_DMA_Init+0x38>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <MX_DMA_Init+0x38>)
 800179c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_DMA_Init+0x38>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	200c      	movs	r0, #12
 80017b4:	f000 fd09 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017b8:	200c      	movs	r0, #12
 80017ba:	f000 fd22 	bl	8002202 <HAL_NVIC_EnableIRQ>

}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <MX_GPIO_Init+0xbc>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a28      	ldr	r2, [pc, #160]	@ (8001888 <MX_GPIO_Init+0xbc>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <MX_GPIO_Init+0xbc>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <MX_GPIO_Init+0xbc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a22      	ldr	r2, [pc, #136]	@ (8001888 <MX_GPIO_Init+0xbc>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <MX_GPIO_Init+0xbc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <MX_GPIO_Init+0xbc>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <MX_GPIO_Init+0xbc>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <MX_GPIO_Init+0xbc>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001830:	4816      	ldr	r0, [pc, #88]	@ (800188c <MX_GPIO_Init+0xc0>)
 8001832:	f001 fb0d 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8001836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4810      	ldr	r0, [pc, #64]	@ (8001890 <MX_GPIO_Init+0xc4>)
 800184e:	f001 f953 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4619      	mov	r1, r3
 800186a:	4808      	ldr	r0, [pc, #32]	@ (800188c <MX_GPIO_Init+0xc0>)
 800186c:	f001 f944 	bl	8002af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2028      	movs	r0, #40	@ 0x28
 8001876:	f000 fca8 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800187a:	2028      	movs	r0, #40	@ 0x28
 800187c:	f000 fcc1 	bl	8002202 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800

08001894 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e009      	b.n	80018ba <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	60ba      	str	r2, [r7, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fcec 	bl	800128c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf1      	blt.n	80018a6 <_write+0x12>
  }
  return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	printf("Se ha recibido un bloque entero de audio.");
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <HAL_I2S_RxCpltCallback+0x1c>)
 80018d6:	f007 ff05 	bl	80096e4 <iprintf>

	full_i2s = 1;
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <HAL_I2S_RxCpltCallback+0x20>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800a5d8 	.word	0x0800a5d8
 80018ec:	200032f1 	.word	0x200032f1

080018f0 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	printf("Se ha recibido medio bloque de audio.");
 80018f8:	4807      	ldr	r0, [pc, #28]	@ (8001918 <HAL_I2S_RxHalfCpltCallback+0x28>)
 80018fa:	f007 fef3 	bl	80096e4 <iprintf>
	sample_i2s = data_i2s[0];
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001900:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8001906:	801a      	strh	r2, [r3, #0]
	half_i2s = 1;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_I2S_RxHalfCpltCallback+0x34>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0800a604 	.word	0x0800a604
 800191c:	200022ec 	.word	0x200022ec
 8001920:	200032ec 	.word	0x200032ec
 8001924:	200032f0 	.word	0x200032f0

08001928 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin) {
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <HAL_GPIO_EXTI_Callback+0x24>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
	}
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	200032ee 	.word	0x200032ee

08001950 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001962:	f000 fc69 	bl	8002238 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800196a:	2300      	movs	r3, #0
 800196c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001972:	231f      	movs	r3, #31
 8001974:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001976:	2387      	movs	r3, #135	@ 0x87
 8001978:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800197a:	2300      	movs	r3, #0
 800197c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800197e:	2300      	movs	r3, #0
 8001980:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001982:	2301      	movs	r3, #1
 8001984:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001992:	463b      	mov	r3, r7
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fc87 	bl	80022a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800199a:	2004      	movs	r0, #4
 800199c:	f000 fc64 	bl	8002268 <HAL_MPU_Enable>

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <Error_Handler+0x8>

080019b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_MspInit+0x44>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <HAL_MspInit+0x44>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_MspInit+0x44>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_MspInit+0x44>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_MspInit+0x44>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_MspInit+0x44>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2290      	movs	r2, #144	@ 0x90
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f007 ffa9 	bl	8009974 <memset>
  if(hi2s->Instance==SPI2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a3e      	ldr	r2, [pc, #248]	@ (8001b20 <HAL_I2S_MspInit+0x124>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d175      	bne.n	8001b18 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 135;
 8001a2c:	2387      	movs	r3, #135	@ 0x87
 8001a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001a34:	2303      	movs	r3, #3
 8001a36:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8001a40:	2300      	movs	r3, #0
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 f9d5 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8001a54:	f7ff ffa8 	bl	80019a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a58:	4b32      	ldr	r3, [pc, #200]	@ (8001b24 <HAL_I2S_MspInit+0x128>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	4a31      	ldr	r2, [pc, #196]	@ (8001b24 <HAL_I2S_MspInit+0x128>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a64:	4b2f      	ldr	r3, [pc, #188]	@ (8001b24 <HAL_I2S_MspInit+0x128>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <HAL_I2S_MspInit+0x128>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_I2S_MspInit+0x128>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7c:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <HAL_I2S_MspInit+0x128>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001a88:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001aac:	4619      	mov	r1, r3
 8001aae:	481e      	ldr	r0, [pc, #120]	@ (8001b28 <HAL_I2S_MspInit+0x12c>)
 8001ab0:	f001 f822 	bl	8002af8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_I2S_MspInit+0x134>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001abc:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8001ac0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001ad0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aec:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001af0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001af4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001afc:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001afe:	f000 fc13 	bl	8002328 <HAL_DMA_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001b08:	f7ff ff4e 	bl	80019a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a07      	ldr	r2, [pc, #28]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b12:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_I2S_MspInit+0x130>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001b18:	bf00      	nop
 8001b1a:	37b8      	adds	r7, #184	@ 0xb8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40003800 	.word	0x40003800
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	20002190 	.word	0x20002190
 8001b30:	40026028 	.word	0x40026028

08001b34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <HAL_SPI_MspInit+0x7c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d127      	bne.n	8001ba6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_SPI_MspInit+0x80>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_SPI_MspInit+0x80>)
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <HAL_SPI_MspInit+0x80>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_SPI_MspInit+0x80>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_SPI_MspInit+0x80>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_SPI_MspInit+0x80>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001b86:	23e0      	movs	r3, #224	@ 0xe0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_SPI_MspInit+0x84>)
 8001ba2:	f000 ffa9 	bl	8002af8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bce:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001be6:	e010      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <HAL_TIM_Base_MspInit+0x60>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10b      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40000400 	.word	0x40000400

08001c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d11c      	bne.n	8001c7c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <HAL_TIM_MspPostInit+0xa8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a20      	ldr	r2, [pc, #128]	@ (8001cc8 <HAL_TIM_MspPostInit+0xa8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_TIM_MspPostInit+0xa8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_CK_Pin;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_CK_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4815      	ldr	r0, [pc, #84]	@ (8001ccc <HAL_TIM_MspPostInit+0xac>)
 8001c76:	f000 ff3f 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c7a:	e020      	b.n	8001cbe <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <HAL_TIM_MspPostInit+0xb0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d11b      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_TIM_MspPostInit+0xa8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc8 <HAL_TIM_MspPostInit+0xa8>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HAL_TIM_MspPostInit+0xa8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <HAL_TIM_MspPostInit+0xb4>)
 8001cba:	f000 ff1d 	bl	8002af8 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <NMI_Handler+0x4>

08001ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <MemManage_Handler+0x4>

08001cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <UsageFault_Handler+0x4>

08001d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <SysTick_Handler+0x34>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <SysTick_Handler+0x18>
		Timer1--;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <SysTick_Handler+0x34>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <SysTick_Handler+0x34>)
 8001d42:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <SysTick_Handler+0x38>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <SysTick_Handler+0x2c>
		Timer2--;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <SysTick_Handler+0x38>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <SysTick_Handler+0x38>)
 8001d56:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f918 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000214a 	.word	0x2000214a
 8001d64:	2000214c 	.word	0x2000214c

08001d68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <DMA1_Stream1_IRQHandler+0x10>)
 8001d6e:	f000 fc59 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20002190 	.word	0x20002190

08001d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8001d80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d84:	f001 f87e 	bl	8002e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9e:	f3af 8000 	nop.w
 8001da2:	4601      	mov	r1, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf0      	blt.n	8001d9e <_read+0x12>
  }

  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dee:	605a      	str	r2, [r3, #4]
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f007 fdd6 	bl	8009a10 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20080000 	.word	0x20080000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	200032f4 	.word	0x200032f4
 8001e98:	20003688 	.word	0x20003688

08001e9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec4:	f7ff ffea 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eca:	490d      	ldr	r1, [pc, #52]	@ (8001f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f007 fd95 	bl	8009a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff f9f3 	bl	80012dc <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001f04:	0800ab10 	.word	0x0800ab10
  ldr r2, =_sbss
 8001f08:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001f0c:	20003684 	.word	0x20003684

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>

08001f12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f000 f94c 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1c:	200f      	movs	r0, #15
 8001f1e:	f000 f805 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f22:	f7ff fd47 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x54>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f967 	bl	800221e <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00e      	b.n	8001f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d80a      	bhi.n	8001f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f000 f92f 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f6c:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e000      	b.n	8001f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000040 	.word	0x20000040
 8001f84:	20000048 	.word	0x20000048
 8001f88:	20000044 	.word	0x20000044

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000048 	.word	0x20000048
 8001fb0:	200032f8 	.word	0x200032f8

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200032f8 	.word	0x200032f8

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000048 	.word	0x20000048

08002014 <__NVIC_SetPriorityGrouping>:
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <__NVIC_SetPriorityGrouping+0x40>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	4313      	orrs	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <__NVIC_SetPriorityGrouping+0x40>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	05fa0000 	.word	0x05fa0000

0800205c <__NVIC_GetPriorityGrouping>:
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	@ (80020b0 <__NVIC_EnableIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff29 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff3e 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff31 	bl	8002078 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800223c:	f3bf 8f5f 	dmb	sy
}
 8002240:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <HAL_MPU_Disable+0x28>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	4a06      	ldr	r2, [pc, #24]	@ (8002260 <HAL_MPU_Disable+0x28>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800224c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_MPU_Disable+0x2c>)
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	e000ed90 	.word	0xe000ed90

08002268 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <HAL_MPU_Enable+0x38>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_MPU_Enable+0x3c>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_MPU_Enable+0x3c>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002286:	f3bf 8f4f 	dsb	sy
}
 800228a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800228c:	f3bf 8f6f 	isb	sy
}
 8002290:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed90 	.word	0xe000ed90
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	785a      	ldrb	r2, [r3, #1]
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <HAL_MPU_ConfigRegion+0x7c>)
 80022b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_MPU_ConfigRegion+0x7c>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_MPU_ConfigRegion+0x7c>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022c4:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <HAL_MPU_ConfigRegion+0x7c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7b1b      	ldrb	r3, [r3, #12]
 80022d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7adb      	ldrb	r3, [r3, #11]
 80022d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7a9b      	ldrb	r3, [r3, #10]
 80022de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7b5b      	ldrb	r3, [r3, #13]
 80022e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7b9b      	ldrb	r3, [r3, #14]
 80022ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7bdb      	ldrb	r3, [r3, #15]
 80022f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7a5b      	ldrb	r3, [r3, #9]
 80022fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002300:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002308:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002312:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002314:	6113      	str	r3, [r2, #16]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed90 	.word	0xe000ed90

08002328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff fe3e 	bl	8001fb4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e099      	b.n	8002478 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002364:	e00f      	b.n	8002386 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002366:	f7ff fe25 	bl	8001fb4 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b05      	cmp	r3, #5
 8002372:	d908      	bls.n	8002386 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e078      	b.n	8002478 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e8      	bne.n	8002366 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_DMA_Init+0x158>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d107      	bne.n	80023f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	4313      	orrs	r3, r2
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f023 0307 	bic.w	r3, r3, #7
 8002406:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	2b04      	cmp	r3, #4
 8002418:	d117      	bne.n	800244a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00e      	beq.n	800244a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fae7 	bl	8002a00 <DMA_CheckFifoParam>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2240      	movs	r2, #64	@ 0x40
 800243c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002446:	2301      	movs	r3, #1
 8002448:	e016      	b.n	8002478 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa9e 	bl	8002994 <DMA_CalcBaseAndBitshift>
 8002458:	4603      	mov	r3, r0
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	223f      	movs	r2, #63	@ 0x3f
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e010803f 	.word	0xe010803f

08002484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Start_IT+0x26>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e048      	b.n	800253c <HAL_DMA_Start_IT+0xb8>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d137      	bne.n	800252e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa30 	bl	8002938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	223f      	movs	r2, #63	@ 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0216 	orr.w	r2, r2, #22
 80024f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002502:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e005      	b.n	800253a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002552:	f7ff fd2f 	bl	8001fb4 <HAL_GetTick>
 8002556:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d008      	beq.n	8002576 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e052      	b.n	800261c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0216 	bic.w	r2, r2, #22
 8002584:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002594:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <HAL_DMA_Abort+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0208 	bic.w	r2, r2, #8
 80025b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c6:	e013      	b.n	80025f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c8:	f7ff fcf4 	bl	8001fb4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d90c      	bls.n	80025f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e015      	b.n	800261c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e4      	bne.n	80025c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	223f      	movs	r2, #63	@ 0x3f
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002630:	4b8e      	ldr	r3, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x248>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a8e      	ldr	r2, [pc, #568]	@ (8002870 <HAL_DMA_IRQHandler+0x24c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2208      	movs	r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2204      	movs	r2, #4
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2204      	movs	r2, #4
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2210      	movs	r2, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2210      	movs	r2, #16
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e01f      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e016      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2220      	movs	r2, #32
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808f 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8087 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d136      	bne.n	800283c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	223f      	movs	r2, #63	@ 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07e      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }
        return;
 800283a:	e079      	b.n	8002930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	2b00      	cmp	r3, #0
 800285e:	d031      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e02c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
 800286a:	bf00      	nop
 800286c:	20000040 	.word	0x20000040
 8002870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e01e      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2205      	movs	r2, #5
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d307      	bcc.n	800290c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f2      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x2cc>
 800290a:	e000      	b.n	800290e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800290c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
 800292e:	e000      	b.n	8002932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002930:	bf00      	nop
    }
  }
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d108      	bne.n	8002978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002976:	e007      	b.n	8002988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b10      	subs	r3, #16
 80029a4:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <DMA_CalcBaseAndBitshift+0x60>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ae:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x64>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d908      	bls.n	80029d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d2:	e006      	b.n	80029e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	aaaaaaab 	.word	0xaaaaaaab
 80029f8:	0800a684 	.word	0x0800a684
 80029fc:	fffffc00 	.word	0xfffffc00

08002a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d856      	bhi.n	8002ace <DMA_CheckFifoParam+0xce>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <DMA_CheckFifoParam+0x28>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4b 	.word	0x08002a4b
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002acf 	.word	0x08002acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e043      	b.n	8002ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a52:	d140      	bne.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e03d      	b.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d121      	bne.n	8002aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d837      	bhi.n	8002ada <DMA_CheckFifoParam+0xda>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x70>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a87 	.word	0x08002a87
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002a99 	.word	0x08002a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e030      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e022      	b.n	8002ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa6:	e01c      	b.n	8002ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d903      	bls.n	8002ab6 <DMA_CheckFifoParam+0xb6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d003      	beq.n	8002abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab4:	e018      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e015      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e00b      	b.n	8002ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e00a      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e008      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e006      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e175      	b.n	8002e04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 8164 	bne.w	8002dfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d005      	beq.n	8002b4e <HAL_GPIO_Init+0x56>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d130      	bne.n	8002bb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80be 	beq.w	8002dfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4b66      	ldr	r3, [pc, #408]	@ (8002e1c <HAL_GPIO_Init+0x324>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a65      	ldr	r2, [pc, #404]	@ (8002e1c <HAL_GPIO_Init+0x324>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b63      	ldr	r3, [pc, #396]	@ (8002e1c <HAL_GPIO_Init+0x324>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c9a:	4a61      	ldr	r2, [pc, #388]	@ (8002e20 <HAL_GPIO_Init+0x328>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a58      	ldr	r2, [pc, #352]	@ (8002e24 <HAL_GPIO_Init+0x32c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d037      	beq.n	8002d36 <HAL_GPIO_Init+0x23e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a57      	ldr	r2, [pc, #348]	@ (8002e28 <HAL_GPIO_Init+0x330>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d031      	beq.n	8002d32 <HAL_GPIO_Init+0x23a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a56      	ldr	r2, [pc, #344]	@ (8002e2c <HAL_GPIO_Init+0x334>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02b      	beq.n	8002d2e <HAL_GPIO_Init+0x236>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a55      	ldr	r2, [pc, #340]	@ (8002e30 <HAL_GPIO_Init+0x338>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d025      	beq.n	8002d2a <HAL_GPIO_Init+0x232>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a54      	ldr	r2, [pc, #336]	@ (8002e34 <HAL_GPIO_Init+0x33c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01f      	beq.n	8002d26 <HAL_GPIO_Init+0x22e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a53      	ldr	r2, [pc, #332]	@ (8002e38 <HAL_GPIO_Init+0x340>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d019      	beq.n	8002d22 <HAL_GPIO_Init+0x22a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a52      	ldr	r2, [pc, #328]	@ (8002e3c <HAL_GPIO_Init+0x344>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x226>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	@ (8002e40 <HAL_GPIO_Init+0x348>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x222>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a50      	ldr	r2, [pc, #320]	@ (8002e44 <HAL_GPIO_Init+0x34c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x21e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4f      	ldr	r2, [pc, #316]	@ (8002e48 <HAL_GPIO_Init+0x350>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x21a>
 8002d0e:	2309      	movs	r3, #9
 8002d10:	e012      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d12:	230a      	movs	r3, #10
 8002d14:	e010      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d16:	2308      	movs	r3, #8
 8002d18:	e00e      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e00c      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d1e:	2306      	movs	r3, #6
 8002d20:	e00a      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d22:	2305      	movs	r3, #5
 8002d24:	e008      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d26:	2304      	movs	r3, #4
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e004      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e002      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d36:	2300      	movs	r3, #0
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f002 0203 	and.w	r2, r2, #3
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4093      	lsls	r3, r2
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d48:	4935      	ldr	r1, [pc, #212]	@ (8002e20 <HAL_GPIO_Init+0x328>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d56:	4b3d      	ldr	r3, [pc, #244]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7a:	4a34      	ldr	r2, [pc, #208]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d80:	4b32      	ldr	r3, [pc, #200]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da4:	4a29      	ldr	r2, [pc, #164]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002daa:	4b28      	ldr	r3, [pc, #160]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dce:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <HAL_GPIO_Init+0x354>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	f67f ae86 	bls.w	8002b18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3724      	adds	r7, #36	@ 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40013800 	.word	0x40013800
 8002e24:	40020000 	.word	0x40020000
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	40020c00 	.word	0x40020c00
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40021400 	.word	0x40021400
 8002e3c:	40021800 	.word	0x40021800
 8002e40:	40021c00 	.word	0x40021c00
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40022400 	.word	0x40022400
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e6c:	e003      	b.n	8002e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fd40 	bl	8001928 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0d2      	b.n	800306c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fd8e 	bl	80019fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69d9      	ldr	r1, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b60      	ldr	r3, [pc, #384]	@ (8003074 <HAL_I2S_Init+0x1c0>)
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2202      	movs	r2, #2
 8002efe:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d067      	beq.n	8002fd8 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f10:	2310      	movs	r3, #16
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e001      	b.n	8002f1a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d802      	bhi.n	8002f28 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002f30:	4b51      	ldr	r3, [pc, #324]	@ (8003078 <HAL_I2S_Init+0x1c4>)
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e003      	b.n	8002f3e <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa24 	bl	8003384 <I2S_GetClockFreq>
 8002f3c:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f46:	d125      	bne.n	8002f94 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	3305      	adds	r3, #5
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e01f      	b.n	8002fb2 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	461a      	mov	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	3305      	adds	r3, #5
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e00e      	b.n	8002fb2 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	3305      	adds	r3, #5
 8002fb0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4a31      	ldr	r2, [pc, #196]	@ (800307c <HAL_I2S_Init+0x1c8>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e003      	b.n	8002fe0 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d902      	bls.n	8002fec <HAL_I2S_Init+0x138>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2bff      	cmp	r3, #255	@ 0xff
 8002fea:	d907      	bls.n	8002ffc <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e037      	b.n	800306c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	ea42 0103 	orr.w	r1, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	430a      	orrs	r2, r1
 800300e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <HAL_I2S_Init+0x1c0>)
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6851      	ldr	r1, [r2, #4]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	4311      	orrs	r1, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68d2      	ldr	r2, [r2, #12]
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6992      	ldr	r2, [r2, #24]
 800302e:	430a      	orrs	r2, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800303a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b30      	cmp	r3, #48	@ 0x30
 8003042:	d003      	beq.n	800304c <HAL_I2S_Init+0x198>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2bb0      	cmp	r3, #176	@ 0xb0
 800304a:	d107      	bne.n	800305c <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800305a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	fffff040 	.word	0xfffff040
 8003078:	00bb8000 	.word	0x00bb8000
 800307c:	cccccccd 	.word	0xcccccccd

08003080 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_I2S_Receive_DMA+0x1a>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0a1      	b.n	80031e2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_I2S_Receive_DMA+0x2e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e099      	b.n	80031e2 <HAL_I2S_Receive_DMA+0x162>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	e089      	b.n	80031e2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2204      	movs	r2, #4
 80030d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d002      	beq.n	80030fa <HAL_I2S_Receive_DMA+0x7a>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d10a      	bne.n	8003110 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800310e:	e005      	b.n	800311c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003120:	4a32      	ldr	r2, [pc, #200]	@ (80031ec <HAL_I2S_Receive_DMA+0x16c>)
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	4a31      	ldr	r2, [pc, #196]	@ (80031f0 <HAL_I2S_Receive_DMA+0x170>)
 800312a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003130:	4a30      	ldr	r2, [pc, #192]	@ (80031f4 <HAL_I2S_Receive_DMA+0x174>)
 8003132:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003142:	d10a      	bne.n	800315a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	4619      	mov	r1, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003170:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003172:	f7ff f987 	bl	8002484 <HAL_DMA_Start_IT>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003180:	f043 0208 	orr.w	r2, r3, #8
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e022      	b.n	80031e2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031b8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	0800345f 	.word	0x0800345f
 80031f0:	0800341d 	.word	0x0800341d
 80031f4:	0800347b 	.word	0x0800347b

080031f8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800320c:	d003      	beq.n	8003216 <HAL_I2S_DMAStop+0x1e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d155      	bne.n	80032c2 <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00f      	beq.n	800323e <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f98e 	bl	8002544 <HAL_DMA_Abort>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003232:	f043 0208 	orr.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800323e:	2364      	movs	r3, #100	@ 0x64
 8003240:	2201      	movs	r2, #1
 8003242:	2102      	movs	r1, #2
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f93e 	bl	80034c6 <I2S_WaitFlagStateUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003268:	2364      	movs	r3, #100	@ 0x64
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	@ 0x80
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f929 	bl	80034c6 <I2S_WaitFlagStateUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327e:	f043 0201 	orr.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0202 	bic.w	r2, r2, #2
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	e04d      	b.n	800335e <HAL_I2S_DMAStop+0x166>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ca:	d004      	beq.n	80032d6 <HAL_I2S_DMAStop+0xde>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d4:	d143      	bne.n	800335e <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00f      	beq.n	80032fe <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f92e 	bl	8002544 <HAL_DMA_Abort>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	f043 0208 	orr.w	r2, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333c:	d10c      	bne.n	8003358 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	75fb      	strb	r3, [r7, #23]
 8003356:	e002      	b.n	800335e <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return errorcode;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d02d      	beq.n	80033f0 <I2S_GetClockFreq+0x6c>
 8003394:	2b02      	cmp	r3, #2
 8003396:	d12e      	bne.n	80033f6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003398:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <I2S_GetClockFreq+0x88>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <I2S_GetClockFreq+0x88>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ac:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <I2S_GetClockFreq+0x8c>)
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e007      	b.n	80033c6 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <I2S_GetClockFreq+0x88>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033be:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <I2S_GetClockFreq+0x90>)
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <I2S_GetClockFreq+0x88>)
 80033c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033cc:	0f1b      	lsrs	r3, r3, #28
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80033d4:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <I2S_GetClockFreq+0x88>)
 80033d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	fb03 f202 	mul.w	r2, r3, r2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	613b      	str	r3, [r7, #16]

      break;
 80033ee:	e005      	b.n	80033fc <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <I2S_GetClockFreq+0x94>)
 80033f2:	613b      	str	r3, [r7, #16]
      break;
 80033f4:	e002      	b.n	80033fc <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
      break;
 80033fa:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80033fc:	693b      	ldr	r3, [r7, #16]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	00f42400 	.word	0x00f42400
 8003414:	017d7840 	.word	0x017d7840
 8003418:	00bb8000 	.word	0x00bb8000

0800341c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7fe fa3b 	bl	80018cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7fe fa3f 	bl	80018f0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0203 	bic.w	r2, r2, #3
 8003496:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	f043 0208 	orr.w	r2, r3, #8
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff ff59 	bl	8003370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d6:	f7fe fd6d 	bl	8001fb4 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80034dc:	e018      	b.n	8003510 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d014      	beq.n	8003510 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80034e6:	f7fe fd65 	bl	8001fb4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d902      	bls.n	80034fc <I2S_WaitFlagStateUntilTimeout+0x36>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e00f      	b.n	8003530 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	429a      	cmp	r2, r3
 800352c:	d1d7      	bne.n	80034de <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e29b      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8087 	beq.w	800366a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800355c:	4b96      	ldr	r3, [pc, #600]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b04      	cmp	r3, #4
 8003566:	d00c      	beq.n	8003582 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003568:	4b93      	ldr	r3, [pc, #588]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d112      	bne.n	800359a <HAL_RCC_OscConfig+0x62>
 8003574:	4b90      	ldr	r3, [pc, #576]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003580:	d10b      	bne.n	800359a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003582:	4b8d      	ldr	r3, [pc, #564]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d06c      	beq.n	8003668 <HAL_RCC_OscConfig+0x130>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d168      	bne.n	8003668 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e275      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x7a>
 80035a4:	4b84      	ldr	r3, [pc, #528]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a83      	ldr	r2, [pc, #524]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e02e      	b.n	8003610 <HAL_RCC_OscConfig+0xd8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x9c>
 80035ba:	4b7f      	ldr	r3, [pc, #508]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7e      	ldr	r2, [pc, #504]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b7c      	ldr	r3, [pc, #496]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7b      	ldr	r2, [pc, #492]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e01d      	b.n	8003610 <HAL_RCC_OscConfig+0xd8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0xc0>
 80035de:	4b76      	ldr	r3, [pc, #472]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a75      	ldr	r2, [pc, #468]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b73      	ldr	r3, [pc, #460]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a72      	ldr	r2, [pc, #456]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0xd8>
 80035f8:	4b6f      	ldr	r3, [pc, #444]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6e      	ldr	r2, [pc, #440]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b6c      	ldr	r3, [pc, #432]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6b      	ldr	r2, [pc, #428]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800360a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fccc 	bl	8001fb4 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fcc8 	bl	8001fb4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	@ 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e229      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b61      	ldr	r3, [pc, #388]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0xe8>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fcb8 	bl	8001fb4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fcb4 	bl	8001fb4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e215      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	4b57      	ldr	r3, [pc, #348]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x110>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d069      	beq.n	800374a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003676:	4b50      	ldr	r3, [pc, #320]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b4d      	ldr	r3, [pc, #308]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d11c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x190>
 800368e:	4b4a      	ldr	r3, [pc, #296]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	4b47      	ldr	r3, [pc, #284]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x17a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e1e9      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b41      	ldr	r3, [pc, #260]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	493d      	ldr	r1, [pc, #244]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	e040      	b.n	800374a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d023      	beq.n	8003718 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d0:	4b39      	ldr	r3, [pc, #228]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a38      	ldr	r2, [pc, #224]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fc6a 	bl	8001fb4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e4:	f7fe fc66 	bl	8001fb4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1c7      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b30      	ldr	r3, [pc, #192]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003702:	4b2d      	ldr	r3, [pc, #180]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4929      	ldr	r1, [pc, #164]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
 8003716:	e018      	b.n	800374a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003718:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a26      	ldr	r2, [pc, #152]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe fc46 	bl	8001fb4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372c:	f7fe fc42 	bl	8001fb4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1a3      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	4b1e      	ldr	r3, [pc, #120]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d038      	beq.n	80037c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d019      	beq.n	8003792 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375e:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003762:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe fc23 	bl	8001fb4 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003772:	f7fe fc1f 	bl	8001fb4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e180      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003784:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x23a>
 8003790:	e01a      	b.n	80037c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	4a08      	ldr	r2, [pc, #32]	@ (80037b8 <HAL_RCC_OscConfig+0x280>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fe fc09 	bl	8001fb4 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a6:	f7fe fc05 	bl	8001fb4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d903      	bls.n	80037bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e166      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
 80037b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b92      	ldr	r3, [pc, #584]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a4 	beq.w	800391e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	4b89      	ldr	r3, [pc, #548]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	4a88      	ldr	r2, [pc, #544]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ee:	4b86      	ldr	r3, [pc, #536]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fe:	4b83      	ldr	r3, [pc, #524]	@ (8003a0c <HAL_RCC_OscConfig+0x4d4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d118      	bne.n	800383c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800380a:	4b80      	ldr	r3, [pc, #512]	@ (8003a0c <HAL_RCC_OscConfig+0x4d4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a0c <HAL_RCC_OscConfig+0x4d4>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fe fbcd 	bl	8001fb4 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fe fbc9 	bl	8001fb4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b64      	cmp	r3, #100	@ 0x64
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e12a      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003830:	4b76      	ldr	r3, [pc, #472]	@ (8003a0c <HAL_RCC_OscConfig+0x4d4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x31a>
 8003844:	4b70      	ldr	r3, [pc, #448]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	4a6f      	ldr	r2, [pc, #444]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003850:	e02d      	b.n	80038ae <HAL_RCC_OscConfig+0x376>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x33c>
 800385a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a6a      	ldr	r2, [pc, #424]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
 8003866:	4b68      	ldr	r3, [pc, #416]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	4a67      	ldr	r2, [pc, #412]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	6713      	str	r3, [r2, #112]	@ 0x70
 8003872:	e01c      	b.n	80038ae <HAL_RCC_OscConfig+0x376>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b05      	cmp	r3, #5
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x35e>
 800387c:	4b62      	ldr	r3, [pc, #392]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a61      	ldr	r2, [pc, #388]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	4b5f      	ldr	r3, [pc, #380]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a5e      	ldr	r2, [pc, #376]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x376>
 8003896:	4b5c      	ldr	r3, [pc, #368]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a2:	4b59      	ldr	r3, [pc, #356]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	4a58      	ldr	r2, [pc, #352]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d015      	beq.n	80038e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fe fb7d 	bl	8001fb4 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fe fb79 	bl	8001fb4 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0d8      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RCC_OscConfig+0x386>
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fe fb67 	bl	8001fb4 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fe fb63 	bl	8001fb4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0c2      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ee      	bne.n	80038ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b3d      	ldr	r3, [pc, #244]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	4a3c      	ldr	r2, [pc, #240]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80ae 	beq.w	8003a84 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003928:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d06d      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d14b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b32      	ldr	r3, [pc, #200]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fe fb34 	bl	8001fb4 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fb30 	bl	8001fb4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e091      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b29      	ldr	r3, [pc, #164]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	3b01      	subs	r3, #1
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	071b      	lsls	r3, r3, #28
 800399a:	491b      	ldr	r1, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	4b19      	ldr	r3, [pc, #100]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a18      	ldr	r2, [pc, #96]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe fb02 	bl	8001fb4 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe fafe 	bl	8001fb4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e05f      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x47c>
 80039d2:	e057      	b.n	8003a84 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fae8 	bl	8001fb4 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fae4 	bl	8001fb4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e045      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4b0>
 8003a06:	e03d      	b.n	8003a84 <HAL_RCC_OscConfig+0x54c>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a10:	4b1f      	ldr	r3, [pc, #124]	@ (8003a90 <HAL_RCC_OscConfig+0x558>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d030      	beq.n	8003a80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d129      	bne.n	8003a80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d122      	bne.n	8003a80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d119      	bne.n	8003a80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d10f      	bne.n	8003a80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0d0      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d910      	bls.n	8003adc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b67      	ldr	r3, [pc, #412]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 020f 	bic.w	r2, r3, #15
 8003ac2:	4965      	ldr	r1, [pc, #404]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b63      	ldr	r3, [pc, #396]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b8      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af4:	4b59      	ldr	r3, [pc, #356]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a58      	ldr	r2, [pc, #352]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b0c:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a52      	ldr	r2, [pc, #328]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b50      	ldr	r3, [pc, #320]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	494d      	ldr	r1, [pc, #308]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d040      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d115      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e07f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e073      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b66:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e06b      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b39      	ldr	r3, [pc, #228]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4936      	ldr	r1, [pc, #216]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fe fa14 	bl	8001fb4 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe fa10 	bl	8001fb4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e053      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d210      	bcs.n	8003be8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b24      	ldr	r3, [pc, #144]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 020f 	bic.w	r2, r3, #15
 8003bce:	4922      	ldr	r1, [pc, #136]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e032      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4916      	ldr	r1, [pc, #88]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	490e      	ldr	r1, [pc, #56]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c26:	f000 f821 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	490a      	ldr	r1, [pc, #40]	@ (8003c60 <HAL_RCC_ClockConfig+0x1cc>)
 8003c38:	5ccb      	ldrb	r3, [r1, r3]
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	4a09      	ldr	r2, [pc, #36]	@ (8003c64 <HAL_RCC_ClockConfig+0x1d0>)
 8003c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c42:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <HAL_RCC_ClockConfig+0x1d4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe f970 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023c00 	.word	0x40023c00
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	0800a674 	.word	0x0800a674
 8003c64:	20000040 	.word	0x20000040
 8003c68:	20000044 	.word	0x20000044

08003c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c70:	b090      	sub	sp, #64	@ 0x40
 8003c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c84:	4b59      	ldr	r3, [pc, #356]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x180>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d00d      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x40>
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	f200 80a1 	bhi.w	8003dd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c9e:	e09b      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b53      	ldr	r3, [pc, #332]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ca4:	e09b      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca6:	4b53      	ldr	r3, [pc, #332]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003caa:	e098      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cac:	4b4f      	ldr	r3, [pc, #316]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x180>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d028      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	2200      	movs	r2, #0
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4b47      	ldr	r3, [pc, #284]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cd8:	fb03 f201 	mul.w	r2, r3, r1
 8003cdc:	2300      	movs	r3, #0
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a43      	ldr	r2, [pc, #268]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cec:	460a      	mov	r2, r1
 8003cee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf2:	4413      	add	r3, r2
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	61fa      	str	r2, [r7, #28]
 8003cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d06:	f7fc faeb 	bl	80002e0 <__aeabi_uldivmod>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4613      	mov	r3, r2
 8003d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d12:	e053      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d14:	4b35      	ldr	r3, [pc, #212]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x180>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	617a      	str	r2, [r7, #20]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d26:	f04f 0b00 	mov.w	fp, #0
 8003d2a:	4652      	mov	r2, sl
 8003d2c:	465b      	mov	r3, fp
 8003d2e:	f04f 0000 	mov.w	r0, #0
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	0159      	lsls	r1, r3, #5
 8003d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d3c:	0150      	lsls	r0, r2, #5
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	ebb2 080a 	subs.w	r8, r2, sl
 8003d46:	eb63 090b 	sbc.w	r9, r3, fp
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d62:	eb63 0509 	sbc.w	r5, r3, r9
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	00eb      	lsls	r3, r5, #3
 8003d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d74:	00e2      	lsls	r2, r4, #3
 8003d76:	4614      	mov	r4, r2
 8003d78:	461d      	mov	r5, r3
 8003d7a:	eb14 030a 	adds.w	r3, r4, sl
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	eb45 030b 	adc.w	r3, r5, fp
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d92:	4629      	mov	r1, r5
 8003d94:	028b      	lsls	r3, r1, #10
 8003d96:	4621      	mov	r1, r4
 8003d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	028a      	lsls	r2, r1, #10
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da6:	2200      	movs	r2, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	60fa      	str	r2, [r7, #12]
 8003dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db0:	f7fc fa96 	bl	80002e0 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4613      	mov	r3, r2
 8003dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x180>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003dcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3740      	adds	r7, #64	@ 0x40
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	017d7840 	.word	0x017d7840

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e20:	4b69      	ldr	r3, [pc, #420]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a68      	ldr	r2, [pc, #416]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	4b66      	ldr	r3, [pc, #408]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e34:	4964      	ldr	r1, [pc, #400]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e52:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	4959      	ldr	r1, [pc, #356]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d017      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	494a      	ldr	r1, [pc, #296]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808b 	beq.w	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	4a39      	ldr	r2, [pc, #228]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ee8:	4b37      	ldr	r3, [pc, #220]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ef4:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a34      	ldr	r2, [pc, #208]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fe f858 	bl	8001fb4 <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fe f854 	bl	8001fb4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	@ 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e38f      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d035      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d02e      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f44:	4b20      	ldr	r3, [pc, #128]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f6c:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d114      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe f81c 	bl	8001fb4 <HAL_GetTick>
 8003f7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe f818 	bl	8001fb4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e351      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	4901      	ldr	r1, [pc, #4]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	0ffffcff 	.word	0x0ffffcff
 8003fd4:	4bac      	ldr	r3, [pc, #688]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4aab      	ldr	r2, [pc, #684]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fde:	6093      	str	r3, [r2, #8]
 8003fe0:	4ba9      	ldr	r3, [pc, #676]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	49a6      	ldr	r1, [pc, #664]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d010      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ffe:	4ba2      	ldr	r3, [pc, #648]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004004:	4aa0      	ldr	r2, [pc, #640]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800400a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800400e:	4b9e      	ldr	r3, [pc, #632]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	499b      	ldr	r1, [pc, #620]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402c:	4b96      	ldr	r3, [pc, #600]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800403a:	4993      	ldr	r1, [pc, #588]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800404e:	4b8e      	ldr	r3, [pc, #568]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004054:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800405c:	498a      	ldr	r1, [pc, #552]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004070:	4b85      	ldr	r3, [pc, #532]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800407e:	4982      	ldr	r1, [pc, #520]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004092:	4b7d      	ldr	r3, [pc, #500]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	4979      	ldr	r1, [pc, #484]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b4:	4b74      	ldr	r3, [pc, #464]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	4971      	ldr	r1, [pc, #452]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	f023 020c 	bic.w	r2, r3, #12
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e4:	4968      	ldr	r1, [pc, #416]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f8:	4b63      	ldr	r3, [pc, #396]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	4960      	ldr	r1, [pc, #384]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800411a:	4b5b      	ldr	r3, [pc, #364]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	4957      	ldr	r1, [pc, #348]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800413c:	4b52      	ldr	r3, [pc, #328]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	494f      	ldr	r1, [pc, #316]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800415e:	4b4a      	ldr	r3, [pc, #296]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416c:	4946      	ldr	r1, [pc, #280]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004180:	4b41      	ldr	r3, [pc, #260]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	493e      	ldr	r1, [pc, #248]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041a2:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	4935      	ldr	r1, [pc, #212]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041c4:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d2:	492d      	ldr	r1, [pc, #180]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d011      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041e6:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f4:	4924      	ldr	r1, [pc, #144]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004216:	2301      	movs	r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b18      	ldr	r3, [pc, #96]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004234:	4914      	ldr	r1, [pc, #80]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004248:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004258:	490b      	ldr	r1, [pc, #44]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004272:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427c:	4902      	ldr	r1, [pc, #8]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004298:	4b8a      	ldr	r3, [pc, #552]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800429e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	4986      	ldr	r1, [pc, #536]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00b      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042bc:	4b81      	ldr	r3, [pc, #516]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042cc:	497d      	ldr	r1, [pc, #500]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d006      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80d6 	beq.w	8004494 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042e8:	4b76      	ldr	r3, [pc, #472]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a75      	ldr	r2, [pc, #468]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fd fe5e 	bl	8001fb4 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042fc:	f7fd fe5a 	bl	8001fb4 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e195      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800430e:	4b6d      	ldr	r3, [pc, #436]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d021      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800432e:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800433c:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	019a      	lsls	r2, r3, #6
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	071b      	lsls	r3, r3, #28
 8004362:	4958      	ldr	r1, [pc, #352]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004394:	d129      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004396:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043a4:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	0f1b      	lsrs	r3, r3, #28
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	019a      	lsls	r2, r3, #6
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	061b      	lsls	r3, r3, #24
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	071b      	lsls	r3, r3, #28
 80043ca:	493e      	ldr	r1, [pc, #248]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043d2:	4b3c      	ldr	r3, [pc, #240]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043d8:	f023 021f 	bic.w	r2, r3, #31
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	3b01      	subs	r3, #1
 80043e2:	4938      	ldr	r1, [pc, #224]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01d      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043f6:	4b33      	ldr	r3, [pc, #204]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fc:	0e1b      	lsrs	r3, r3, #24
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004404:	4b2f      	ldr	r3, [pc, #188]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440a:	0f1b      	lsrs	r3, r3, #28
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	019a      	lsls	r2, r3, #6
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	431a      	orrs	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	071b      	lsls	r3, r3, #28
 800442a:	4926      	ldr	r1, [pc, #152]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d011      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	491a      	ldr	r1, [pc, #104]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004462:	4b18      	ldr	r3, [pc, #96]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004468:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800446c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446e:	f7fd fda1 	bl	8001fb4 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004476:	f7fd fd9d 	bl	8001fb4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b64      	cmp	r3, #100	@ 0x64
 8004482:	d901      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0d8      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004488:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	f040 80ce 	bne.w	8004638 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a08      	ldr	r2, [pc, #32]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fd fd84 	bl	8001fb4 <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044ae:	e00b      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044b0:	f7fd fd80 	bl	8001fb4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d904      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0bb      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d4:	d0ec      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02e      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d12a      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044fe:	4b51      	ldr	r3, [pc, #324]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800450c:	4b4d      	ldr	r3, [pc, #308]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	0f1b      	lsrs	r3, r3, #28
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	4944      	ldr	r1, [pc, #272]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800453a:	4b42      	ldr	r3, [pc, #264]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004540:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	493d      	ldr	r1, [pc, #244]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004568:	d11d      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800456a:	4b36      	ldr	r3, [pc, #216]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004578:	4b32      	ldr	r3, [pc, #200]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	0f1b      	lsrs	r3, r3, #28
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	019a      	lsls	r2, r3, #6
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	431a      	orrs	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	4929      	ldr	r1, [pc, #164]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d028      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045b2:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	019a      	lsls	r2, r3, #6
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	4917      	ldr	r1, [pc, #92]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045ee:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4911      	ldr	r1, [pc, #68]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004604:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0e      	ldr	r2, [pc, #56]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004610:	f7fd fcd0 	bl	8001fb4 <HAL_GetTick>
 8004614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004618:	f7fd fccc 	bl	8001fb4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e007      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004636:	d1ef      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e09d      	b.n	8004796 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d108      	bne.n	8004674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800466a:	d009      	beq.n	8004680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	61da      	str	r2, [r3, #28]
 8004672:	e005      	b.n	8004680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fa4a 	bl	8001b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046c0:	d902      	bls.n	80046c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e002      	b.n	80046ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046d6:	d007      	beq.n	80046e8 <HAL_SPI_Init+0xa0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046e0:	d002      	beq.n	80046e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	ea42 0103 	orr.w	r1, r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	f003 0204 	and.w	r2, r3, #4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004764:	ea42 0103 	orr.w	r1, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004784:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_SPI_Transmit+0x22>
 80047bc:	2302      	movs	r3, #2
 80047be:	e15f      	b.n	8004a80 <HAL_SPI_Transmit+0x2e2>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c8:	f7fd fbf4 	bl	8001fb4 <HAL_GetTick>
 80047cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d002      	beq.n	80047e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047e2:	e148      	b.n	8004a76 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_Transmit+0x52>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047f4:	e13f      	b.n	8004a76 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2203      	movs	r2, #3
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004840:	d10f      	bne.n	8004862 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004850:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004860:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b40      	cmp	r3, #64	@ 0x40
 800486e:	d007      	beq.n	8004880 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004888:	d94f      	bls.n	800492a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_SPI_Transmit+0xfa>
 8004892:	8afb      	ldrh	r3, [r7, #22]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d142      	bne.n	800491e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	881a      	ldrh	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048bc:	e02f      	b.n	800491e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d112      	bne.n	80048f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048f0:	e015      	b.n	800491e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f2:	f7fd fb5f 	bl	8001fb4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d803      	bhi.n	800490a <HAL_SPI_Transmit+0x16c>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d102      	bne.n	8004910 <HAL_SPI_Transmit+0x172>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800491c:	e0ab      	b.n	8004a76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ca      	bne.n	80048be <HAL_SPI_Transmit+0x120>
 8004928:	e080      	b.n	8004a2c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_SPI_Transmit+0x19a>
 8004932:	8afb      	ldrh	r3, [r7, #22]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d174      	bne.n	8004a22 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d912      	bls.n	8004968 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	881a      	ldrh	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	1c9a      	adds	r2, r3, #2
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b02      	subs	r3, #2
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004966:	e05c      	b.n	8004a22 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800498e:	e048      	b.n	8004a22 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d12b      	bne.n	80049f6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d912      	bls.n	80049ce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049cc:	e029      	b.n	8004a22 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049f4:	e015      	b.n	8004a22 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fd fadd 	bl	8001fb4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Transmit+0x270>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x276>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004a20:	e029      	b.n	8004a76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1b1      	bne.n	8004990 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fb69 	bl	8005108 <SPI_EndRxTxTransaction>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e003      	b.n	8004a76 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a96:	2301      	movs	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_SPI_TransmitReceive+0x26>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e20a      	b.n	8004ec4 <HAL_SPI_TransmitReceive+0x43c>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab6:	f7fd fa7d 	bl	8001fb4 <HAL_GetTick>
 8004aba:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ac2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004aca:	887b      	ldrh	r3, [r7, #2]
 8004acc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ad2:	7efb      	ldrb	r3, [r7, #27]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d00e      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x6e>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ade:	d106      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x66>
 8004ae8:	7efb      	ldrb	r3, [r7, #27]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d003      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004af4:	e1e0      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x80>
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004b0e:	e1d3      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d003      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2205      	movs	r2, #5
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	887a      	ldrh	r2, [r7, #2]
 8004b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	887a      	ldrh	r2, [r7, #2]
 8004b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b66:	d802      	bhi.n	8004b6e <HAL_SPI_TransmitReceive+0xe6>
 8004b68:	8a3b      	ldrh	r3, [r7, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d908      	bls.n	8004b80 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	e007      	b.n	8004b90 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9a:	2b40      	cmp	r3, #64	@ 0x40
 8004b9c:	d007      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bb6:	f240 8081 	bls.w	8004cbc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x140>
 8004bc2:	8a7b      	ldrh	r3, [r7, #18]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d16d      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bec:	e05a      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d11b      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1ac>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x1ac>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d113      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d11c      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x1f4>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c7c:	f7fd f99a 	bl	8001fb4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d80b      	bhi.n	8004ca4 <HAL_SPI_TransmitReceive+0x21c>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004ca2:	e109      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d19f      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x166>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d199      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x166>
 8004cba:	e0e3      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x244>
 8004cc4:	8a7b      	ldrh	r3, [r7, #18]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	f040 80cf 	bne.w	8004e6a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d912      	bls.n	8004cfc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b02      	subs	r3, #2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cfa:	e0b6      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d22:	e0a2      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d134      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x314>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02f      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x314>
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d12c      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d912      	bls.n	8004d72 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b02      	subs	r3, #2
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d70:	e012      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d148      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x3b4>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d042      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d923      	bls.n	8004e0a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	b292      	uxth	r2, r2
 8004dce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b02      	subs	r3, #2
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d81f      	bhi.n	8004e38 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	e016      	b.n	8004e38 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f103 020c 	add.w	r2, r3, #12
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	7812      	ldrb	r2, [r2, #0]
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e3c:	f7fd f8ba 	bl	8001fb4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d803      	bhi.n	8004e54 <HAL_SPI_TransmitReceive+0x3cc>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x3d2>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d107      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004e68:	e026      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af57 	bne.w	8004d24 <HAL_SPI_TransmitReceive+0x29c>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f47f af50 	bne.w	8004d24 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f93d 	bl	8005108 <SPI_EndRxTxTransaction>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e003      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3728      	adds	r7, #40	@ 0x28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004edc:	f7fd f86a 	bl	8001fb4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eec:	f7fd f862 	bl	8001fb4 <HAL_GetTick>
 8004ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ef2:	4b39      	ldr	r3, [pc, #228]	@ (8004fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	0d1b      	lsrs	r3, r3, #20
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f02:	e054      	b.n	8004fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d050      	beq.n	8004fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f0c:	f7fd f852 	bl	8001fb4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d902      	bls.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d13d      	bne.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f3a:	d111      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f44:	d004      	beq.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4e:	d107      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f68:	d10f      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e017      	b.n	8004fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d19b      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000040 	.word	0x20000040

08004fdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	@ 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fee:	f7fc ffe1 	bl	8001fb4 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ffe:	f7fc ffd9 	bl	8001fb4 <HAL_GetTick>
 8005002:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800500c:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00da      	lsls	r2, r3, #3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	0d1b      	lsrs	r3, r3, #20
 800501c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005024:	e060      	b.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800502c:	d107      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0x62>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800503c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d050      	beq.n	80050e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005046:	f7fc ffb5 	bl	8001fb4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005052:	429a      	cmp	r2, r3
 8005054:	d902      	bls.n	800505c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d13d      	bne.n	80050d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800506a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005074:	d111      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507e:	d004      	beq.n	800508a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005088:	d107      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005098:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a2:	d10f      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e010      	b.n	80050fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d196      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3728      	adds	r7, #40	@ 0x28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000040 	.word	0x20000040

08005108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff ff5b 	bl	8004fdc <SPI_WaitFifoStateUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e046      	b.n	80051ca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800513c:	4b25      	ldr	r3, [pc, #148]	@ (80051d4 <SPI_EndRxTxTransaction+0xcc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a25      	ldr	r2, [pc, #148]	@ (80051d8 <SPI_EndRxTxTransaction+0xd0>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0d5b      	lsrs	r3, r3, #21
 8005148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800515a:	d112      	bne.n	8005182 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	@ 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff feb0 	bl	8004ecc <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e023      	b.n	80051ca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b80      	cmp	r3, #128	@ 0x80
 800519a:	d0f2      	beq.n	8005182 <SPI_EndRxTxTransaction+0x7a>
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x98>
        break;
 800519e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff ff15 	bl	8004fdc <SPI_WaitFifoStateUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e000      	b.n	80051ca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000040 	.word	0x20000040
 80051d8:	165e9f81 	.word	0x165e9f81

080051dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e049      	b.n	8005282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc fcda 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fb6e 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e049      	b.n	8005330 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f841 	bl	8005338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 fb17 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e03c      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e02f      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e022      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start+0x72>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e015      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x8c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e008      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e092      	b.n	8005518 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xb6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005400:	e023      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xc6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005410:	e01b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xe6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b10      	cmp	r3, #16
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xf6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fdf6 	bl	8006044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a30      	ldr	r2, [pc, #192]	@ (8005520 <HAL_TIM_PWM_Start+0x1d4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_PWM_Start+0x120>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2f      	ldr	r2, [pc, #188]	@ (8005524 <HAL_TIM_PWM_Start+0x1d8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_TIM_PWM_Start+0x124>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0x126>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a25      	ldr	r2, [pc, #148]	@ (8005520 <HAL_TIM_PWM_Start+0x1d4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005498:	d01d      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a22      	ldr	r2, [pc, #136]	@ (8005528 <HAL_TIM_PWM_Start+0x1dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a20      	ldr	r2, [pc, #128]	@ (800552c <HAL_TIM_PWM_Start+0x1e0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_TIM_PWM_Start+0x1e4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a19      	ldr	r2, [pc, #100]	@ (8005524 <HAL_TIM_PWM_Start+0x1d8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005534 <HAL_TIM_PWM_Start+0x1e8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <HAL_TIM_PWM_Start+0x1ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d115      	bne.n	8005502 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	4b17      	ldr	r3, [pc, #92]	@ (800553c <HAL_TIM_PWM_Start+0x1f0>)
 80054de:	4013      	ands	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d015      	beq.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ee:	d011      	beq.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	e008      	b.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e000      	b.n	8005516 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800
 800553c:	00010007 	.word	0x00010007

08005540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800555a:	2302      	movs	r3, #2
 800555c:	e0ff      	b.n	800575e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b14      	cmp	r3, #20
 800556a:	f200 80f0 	bhi.w	800574e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	080055c9 	.word	0x080055c9
 8005578:	0800574f 	.word	0x0800574f
 800557c:	0800574f 	.word	0x0800574f
 8005580:	0800574f 	.word	0x0800574f
 8005584:	08005609 	.word	0x08005609
 8005588:	0800574f 	.word	0x0800574f
 800558c:	0800574f 	.word	0x0800574f
 8005590:	0800574f 	.word	0x0800574f
 8005594:	0800564b 	.word	0x0800564b
 8005598:	0800574f 	.word	0x0800574f
 800559c:	0800574f 	.word	0x0800574f
 80055a0:	0800574f 	.word	0x0800574f
 80055a4:	0800568b 	.word	0x0800568b
 80055a8:	0800574f 	.word	0x0800574f
 80055ac:	0800574f 	.word	0x0800574f
 80055b0:	0800574f 	.word	0x0800574f
 80055b4:	080056cd 	.word	0x080056cd
 80055b8:	0800574f 	.word	0x0800574f
 80055bc:	0800574f 	.word	0x0800574f
 80055c0:	0800574f 	.word	0x0800574f
 80055c4:	0800570d 	.word	0x0800570d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fa40 	bl	8005a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6999      	ldr	r1, [r3, #24]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	619a      	str	r2, [r3, #24]
      break;
 8005606:	e0a5      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa92 	bl	8005b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6999      	ldr	r1, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	021a      	lsls	r2, r3, #8
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	619a      	str	r2, [r3, #24]
      break;
 8005648:	e084      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fae9 	bl	8005c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0208 	orr.w	r2, r2, #8
 8005664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0204 	bic.w	r2, r2, #4
 8005674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	61da      	str	r2, [r3, #28]
      break;
 8005688:	e064      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fb3f 	bl	8005d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	61da      	str	r2, [r3, #28]
      break;
 80056ca:	e043      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb76 	bl	8005dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0208 	orr.w	r2, r2, #8
 80056e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0204 	bic.w	r2, r2, #4
 80056f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800570a:	e023      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fba8 	bl	8005e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	021a      	lsls	r2, r3, #8
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800574c:	e002      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
      break;
 8005752:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop

08005768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIM_ConfigClockSource+0x1c>
 8005780:	2302      	movs	r3, #2
 8005782:	e0b4      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x186>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	4b56      	ldr	r3, [pc, #344]	@ (80058f8 <HAL_TIM_ConfigClockSource+0x190>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057bc:	d03e      	beq.n	800583c <HAL_TIM_ConfigClockSource+0xd4>
 80057be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c2:	f200 8087 	bhi.w	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ca:	f000 8086 	beq.w	80058da <HAL_TIM_ConfigClockSource+0x172>
 80057ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d2:	d87f      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b70      	cmp	r3, #112	@ 0x70
 80057d6:	d01a      	beq.n	800580e <HAL_TIM_ConfigClockSource+0xa6>
 80057d8:	2b70      	cmp	r3, #112	@ 0x70
 80057da:	d87b      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b60      	cmp	r3, #96	@ 0x60
 80057de:	d050      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x11a>
 80057e0:	2b60      	cmp	r3, #96	@ 0x60
 80057e2:	d877      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b50      	cmp	r3, #80	@ 0x50
 80057e6:	d03c      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0xfa>
 80057e8:	2b50      	cmp	r3, #80	@ 0x50
 80057ea:	d873      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d058      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x13a>
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d86f      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b30      	cmp	r3, #48	@ 0x30
 80057f6:	d064      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	2b30      	cmp	r3, #48	@ 0x30
 80057fa:	d86b      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d060      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005800:	2b20      	cmp	r3, #32
 8005802:	d867      	bhi.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d05c      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	2b10      	cmp	r3, #16
 800580a:	d05a      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x15a>
 800580c:	e062      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800581e:	f000 fbf1 	bl	8006004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	609a      	str	r2, [r3, #8]
      break;
 800583a:	e04f      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800584c:	f000 fbda 	bl	8006004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800585e:	609a      	str	r2, [r3, #8]
      break;
 8005860:	e03c      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586e:	461a      	mov	r2, r3
 8005870:	f000 fb4e 	bl	8005f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2150      	movs	r1, #80	@ 0x50
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fba7 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 8005880:	e02c      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800588e:	461a      	mov	r2, r3
 8005890:	f000 fb6d 	bl	8005f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2160      	movs	r1, #96	@ 0x60
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fb97 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 80058a0:	e01c      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 fb2e 	bl	8005f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2140      	movs	r1, #64	@ 0x40
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fb87 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 80058c0:	e00c      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f000 fb7e 	bl	8005fce <TIM_ITRx_SetConfig>
      break;
 80058d2:	e003      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	e000      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	fffeff88 	.word	0xfffeff88

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a46      	ldr	r2, [pc, #280]	@ (8005a28 <TIM_Base_SetConfig+0x12c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591a:	d00f      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a43      	ldr	r2, [pc, #268]	@ (8005a2c <TIM_Base_SetConfig+0x130>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a42      	ldr	r2, [pc, #264]	@ (8005a30 <TIM_Base_SetConfig+0x134>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a41      	ldr	r2, [pc, #260]	@ (8005a34 <TIM_Base_SetConfig+0x138>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	@ (8005a38 <TIM_Base_SetConfig+0x13c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a35      	ldr	r2, [pc, #212]	@ (8005a28 <TIM_Base_SetConfig+0x12c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595c:	d027      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a32      	ldr	r2, [pc, #200]	@ (8005a2c <TIM_Base_SetConfig+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d023      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a31      	ldr	r2, [pc, #196]	@ (8005a30 <TIM_Base_SetConfig+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a30      	ldr	r2, [pc, #192]	@ (8005a34 <TIM_Base_SetConfig+0x138>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	@ (8005a38 <TIM_Base_SetConfig+0x13c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2e      	ldr	r2, [pc, #184]	@ (8005a3c <TIM_Base_SetConfig+0x140>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2d      	ldr	r2, [pc, #180]	@ (8005a40 <TIM_Base_SetConfig+0x144>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	@ (8005a44 <TIM_Base_SetConfig+0x148>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	@ (8005a48 <TIM_Base_SetConfig+0x14c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a4c <TIM_Base_SetConfig+0x150>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	@ (8005a50 <TIM_Base_SetConfig+0x154>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a10      	ldr	r2, [pc, #64]	@ (8005a28 <TIM_Base_SetConfig+0x12c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <TIM_Base_SetConfig+0x13c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800
 8005a48:	40001800 	.word	0x40001800
 8005a4c:	40001c00 	.word	0x40001c00
 8005a50:	40002000 	.word	0x40002000

08005a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f023 0201 	bic.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8005b2c <TIM_OC1_SetConfig+0xd8>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <TIM_OC1_SetConfig+0xdc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_OC1_SetConfig+0x64>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a20      	ldr	r2, [pc, #128]	@ (8005b34 <TIM_OC1_SetConfig+0xe0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10c      	bne.n	8005ad2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0308 	bic.w	r3, r3, #8
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a16      	ldr	r2, [pc, #88]	@ (8005b30 <TIM_OC1_SetConfig+0xdc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_OC1_SetConfig+0x8e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <TIM_OC1_SetConfig+0xe0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d111      	bne.n	8005b06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	fffeff8f 	.word	0xfffeff8f
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40010400 	.word	0x40010400

08005b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f023 0210 	bic.w	r2, r3, #16
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4b2e      	ldr	r3, [pc, #184]	@ (8005c1c <TIM_OC2_SetConfig+0xe4>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0320 	bic.w	r3, r3, #32
 8005b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a23      	ldr	r2, [pc, #140]	@ (8005c20 <TIM_OC2_SetConfig+0xe8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0x68>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	@ (8005c24 <TIM_OC2_SetConfig+0xec>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10d      	bne.n	8005bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <TIM_OC2_SetConfig+0xe8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC2_SetConfig+0x94>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	@ (8005c24 <TIM_OC2_SetConfig+0xec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d113      	bne.n	8005bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	feff8fff 	.word	0xfeff8fff
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4b2d      	ldr	r3, [pc, #180]	@ (8005d08 <TIM_OC3_SetConfig+0xe0>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a22      	ldr	r2, [pc, #136]	@ (8005d0c <TIM_OC3_SetConfig+0xe4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_OC3_SetConfig+0x66>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a21      	ldr	r2, [pc, #132]	@ (8005d10 <TIM_OC3_SetConfig+0xe8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d10d      	bne.n	8005caa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <TIM_OC3_SetConfig+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_OC3_SetConfig+0x92>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <TIM_OC3_SetConfig+0xe8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d113      	bne.n	8005ce2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	fffeff8f 	.word	0xfffeff8f
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40010400 	.word	0x40010400

08005d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005db8 <TIM_OC4_SetConfig+0xa4>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	@ (8005dbc <TIM_OC4_SetConfig+0xa8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC4_SetConfig+0x68>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <TIM_OC4_SetConfig+0xac>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d109      	bne.n	8005d90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	019b      	lsls	r3, r3, #6
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	feff8fff 	.word	0xfeff8fff
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4b1b      	ldr	r3, [pc, #108]	@ (8005e5c <TIM_OC5_SetConfig+0x98>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a12      	ldr	r2, [pc, #72]	@ (8005e60 <TIM_OC5_SetConfig+0x9c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC5_SetConfig+0x5e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <TIM_OC5_SetConfig+0xa0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d109      	bne.n	8005e36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	fffeff8f 	.word	0xfffeff8f
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4b1c      	ldr	r3, [pc, #112]	@ (8005f04 <TIM_OC6_SetConfig+0x9c>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	051b      	lsls	r3, r3, #20
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a13      	ldr	r2, [pc, #76]	@ (8005f08 <TIM_OC6_SetConfig+0xa0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC6_SetConfig+0x60>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a12      	ldr	r2, [pc, #72]	@ (8005f0c <TIM_OC6_SetConfig+0xa4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d109      	bne.n	8005edc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ece:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	029b      	lsls	r3, r3, #10
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	feff8fff 	.word	0xfeff8fff
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010400 	.word	0x40010400

08005f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f023 030a 	bic.w	r3, r3, #10
 8005f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b087      	sub	sp, #28
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f023 0210 	bic.w	r2, r3, #16
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f043 0307 	orr.w	r3, r3, #7
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800601e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	021a      	lsls	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	431a      	orrs	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	609a      	str	r2, [r3, #8]
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2201      	movs	r2, #1
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1a      	ldr	r2, [r3, #32]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	43db      	mvns	r3, r3
 8006066:	401a      	ands	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	fa01 f303 	lsl.w	r3, r1, r3
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e06d      	b.n	8006184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a30      	ldr	r2, [pc, #192]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d108      	bne.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a20      	ldr	r2, [pc, #128]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d022      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611a:	d01d      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1d      	ldr	r2, [pc, #116]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1c      	ldr	r2, [pc, #112]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1a      	ldr	r2, [pc, #104]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a15      	ldr	r2, [pc, #84]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a16      	ldr	r2, [pc, #88]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a15      	ldr	r2, [pc, #84]	@ (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d10c      	bne.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40001800 	.word	0x40001800

080061ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061b0:	4904      	ldr	r1, [pc, #16]	@ (80061c4 <MX_FATFS_Init+0x18>)
 80061b2:	4805      	ldr	r0, [pc, #20]	@ (80061c8 <MX_FATFS_Init+0x1c>)
 80061b4:	f003 f8fe 	bl	80093b4 <FATFS_LinkDriver>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	4b03      	ldr	r3, [pc, #12]	@ (80061cc <MX_FATFS_Init+0x20>)
 80061be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061c0:	bf00      	nop
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20003300 	.word	0x20003300
 80061c8:	2000004c 	.word	0x2000004c
 80061cc:	200032fc 	.word	0x200032fc

080061d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa fd39 	bl	8000c64 <SD_disk_initialize>
 80061f2:	4603      	mov	r3, r0
 80061f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	4603      	mov	r3, r0
 8006206:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa fe10 	bl	8000e30 <SD_disk_status>
 8006210:	4603      	mov	r3, r0
 8006212:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 800622c:	7bf8      	ldrb	r0, [r7, #15]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	f7fa fe12 	bl	8000e5c <SD_disk_read>
 8006238:	4603      	mov	r3, r0
 800623a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 8006254:	7bf8      	ldrb	r0, [r7, #15]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	f7fa fe68 	bl	8000f30 <SD_disk_write>
 8006260:	4603      	mov	r3, r0
 8006262:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	603a      	str	r2, [r7, #0]
 8006276:	71fb      	strb	r3, [r7, #7]
 8006278:	460b      	mov	r3, r1
 800627a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	79b9      	ldrb	r1, [r7, #6]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fa fed8 	bl	8001038 <SD_disk_ioctl>
 8006288:	4603      	mov	r3, r0
 800628a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <disk_status+0x30>)
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	79fa      	ldrb	r2, [r7, #7]
 80062ac:	4905      	ldr	r1, [pc, #20]	@ (80062c4 <disk_status+0x30>)
 80062ae:	440a      	add	r2, r1
 80062b0:	7a12      	ldrb	r2, [r2, #8]
 80062b2:	4610      	mov	r0, r2
 80062b4:	4798      	blx	r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2000352c 	.word	0x2000352c

080062c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006310 <disk_initialize+0x48>)
 80062da:	5cd3      	ldrb	r3, [r2, r3]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d111      	bne.n	8006304 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006310 <disk_initialize+0x48>)
 80062e4:	2101      	movs	r1, #1
 80062e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <disk_initialize+0x48>)
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	79fa      	ldrb	r2, [r7, #7]
 80062f6:	4906      	ldr	r1, [pc, #24]	@ (8006310 <disk_initialize+0x48>)
 80062f8:	440a      	add	r2, r1
 80062fa:	7a12      	ldrb	r2, [r2, #8]
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006304:	7bfb      	ldrb	r3, [r7, #15]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	2000352c 	.word	0x2000352c

08006314 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	4a0a      	ldr	r2, [pc, #40]	@ (8006350 <disk_read+0x3c>)
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	689c      	ldr	r4, [r3, #8]
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4a07      	ldr	r2, [pc, #28]	@ (8006350 <disk_read+0x3c>)
 8006334:	4413      	add	r3, r2
 8006336:	7a18      	ldrb	r0, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	47a0      	blx	r4
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]
  return res;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}
 800634e:	bf00      	nop
 8006350:	2000352c 	.word	0x2000352c

08006354 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <disk_write+0x3c>)
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68dc      	ldr	r4, [r3, #12]
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	4a07      	ldr	r2, [pc, #28]	@ (8006390 <disk_write+0x3c>)
 8006374:	4413      	add	r3, r2
 8006376:	7a18      	ldrb	r0, [r3, #8]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	47a0      	blx	r4
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]
  return res;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
}
 8006386:	4618      	mov	r0, r3
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	bd90      	pop	{r4, r7, pc}
 800638e:	bf00      	nop
 8006390:	2000352c 	.word	0x2000352c

08006394 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	603a      	str	r2, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
 80063a0:	460b      	mov	r3, r1
 80063a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	4a09      	ldr	r2, [pc, #36]	@ (80063cc <disk_ioctl+0x38>)
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	79fa      	ldrb	r2, [r7, #7]
 80063b2:	4906      	ldr	r1, [pc, #24]	@ (80063cc <disk_ioctl+0x38>)
 80063b4:	440a      	add	r2, r1
 80063b6:	7a10      	ldrb	r0, [r2, #8]
 80063b8:	79b9      	ldrb	r1, [r7, #6]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4798      	blx	r3
 80063be:	4603      	mov	r3, r0
 80063c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2000352c 	.word	0x2000352c

080063d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3301      	adds	r3, #1
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063e0:	89fb      	ldrh	r3, [r7, #14]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	b21a      	sxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063f2:	89fb      	ldrh	r3, [r7, #14]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3303      	adds	r3, #3
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	3202      	adds	r2, #2
 8006418:	7812      	ldrb	r2, [r2, #0]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	3201      	adds	r2, #1
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
	return rv;
 8006438:	68fb      	ldr	r3, [r7, #12]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	887a      	ldrh	r2, [r7, #2]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	887b      	ldrh	r3, [r7, #2]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	887a      	ldrh	r2, [r7, #2]
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	0a1b      	lsrs	r3, r3, #8
 8006496:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	1c53      	adds	r3, r2, #1
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	6179      	str	r1, [r7, #20]
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3b01      	subs	r3, #1
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f1      	bne.n	80064ee <mem_cpy+0x1a>
	}
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006516:	b480      	push	{r7}
 8006518:	b087      	sub	sp, #28
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	617a      	str	r2, [r7, #20]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3b01      	subs	r3, #1
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f3      	bne.n	8006526 <mem_set+0x10>
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	@ 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	61fa      	str	r2, [r7, #28]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	61ba      	str	r2, [r7, #24]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	1acb      	subs	r3, r1, r3
 8006578:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3b01      	subs	r3, #1
 800657e:	607b      	str	r3, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <mem_cmp+0x40>
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0eb      	beq.n	8006564 <mem_cmp+0x18>

	return r;
 800658c:	697b      	ldr	r3, [r7, #20]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3724      	adds	r7, #36	@ 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065a4:	e002      	b.n	80065ac <chk_chr+0x12>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3301      	adds	r3, #1
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <chk_chr+0x26>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	4293      	cmp	r3, r2
 80065be:	d1f2      	bne.n	80065a6 <chk_chr+0xc>
	return *str;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e029      	b.n	8006638 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80065e4:	4a27      	ldr	r2, [pc, #156]	@ (8006684 <chk_lock+0xb4>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	4413      	add	r3, r2
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01d      	beq.n	800662e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065f2:	4a24      	ldr	r2, [pc, #144]	@ (8006684 <chk_lock+0xb4>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	4413      	add	r3, r2
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d116      	bne.n	8006632 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006604:	4a1f      	ldr	r2, [pc, #124]	@ (8006684 <chk_lock+0xb4>)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006614:	429a      	cmp	r2, r3
 8006616:	d10c      	bne.n	8006632 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006618:	4a1a      	ldr	r2, [pc, #104]	@ (8006684 <chk_lock+0xb4>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	4413      	add	r3, r2
 8006620:	3308      	adds	r3, #8
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006628:	429a      	cmp	r2, r3
 800662a:	d102      	bne.n	8006632 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800662c:	e007      	b.n	800663e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d9d2      	bls.n	80065e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d109      	bne.n	8006658 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <chk_lock+0x80>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d101      	bne.n	8006654 <chk_lock+0x84>
 8006650:	2300      	movs	r3, #0
 8006652:	e010      	b.n	8006676 <chk_lock+0xa6>
 8006654:	2312      	movs	r3, #18
 8006656:	e00e      	b.n	8006676 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d108      	bne.n	8006670 <chk_lock+0xa0>
 800665e:	4a09      	ldr	r2, [pc, #36]	@ (8006684 <chk_lock+0xb4>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	4413      	add	r3, r2
 8006666:	330c      	adds	r3, #12
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666e:	d101      	bne.n	8006674 <chk_lock+0xa4>
 8006670:	2310      	movs	r3, #16
 8006672:	e000      	b.n	8006676 <chk_lock+0xa6>
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	2000330c 	.word	0x2000330c

08006688 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800668e:	2300      	movs	r3, #0
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	e002      	b.n	800669a <enq_lock+0x12>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3301      	adds	r3, #1
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d806      	bhi.n	80066ae <enq_lock+0x26>
 80066a0:	4a09      	ldr	r2, [pc, #36]	@ (80066c8 <enq_lock+0x40>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	4413      	add	r3, r2
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f2      	bne.n	8006694 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2000330c 	.word	0x2000330c

080066cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e01f      	b.n	800671c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80066dc:	4a41      	ldr	r2, [pc, #260]	@ (80067e4 <inc_lock+0x118>)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	4413      	add	r3, r2
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d113      	bne.n	8006716 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80066ee:	4a3d      	ldr	r2, [pc, #244]	@ (80067e4 <inc_lock+0x118>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	4413      	add	r3, r2
 80066f6:	3304      	adds	r3, #4
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80066fe:	429a      	cmp	r2, r3
 8006700:	d109      	bne.n	8006716 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006702:	4a38      	ldr	r2, [pc, #224]	@ (80067e4 <inc_lock+0x118>)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	4413      	add	r3, r2
 800670a:	3308      	adds	r3, #8
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006712:	429a      	cmp	r2, r3
 8006714:	d006      	beq.n	8006724 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d9dc      	bls.n	80066dc <inc_lock+0x10>
 8006722:	e000      	b.n	8006726 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006724:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d132      	bne.n	8006792 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e002      	b.n	8006738 <inc_lock+0x6c>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d806      	bhi.n	800674c <inc_lock+0x80>
 800673e:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <inc_lock+0x118>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	4413      	add	r3, r2
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f2      	bne.n	8006732 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d101      	bne.n	8006756 <inc_lock+0x8a>
 8006752:	2300      	movs	r3, #0
 8006754:	e040      	b.n	80067d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4922      	ldr	r1, [pc, #136]	@ (80067e4 <inc_lock+0x118>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	440b      	add	r3, r1
 8006762:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	491e      	ldr	r1, [pc, #120]	@ (80067e4 <inc_lock+0x118>)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	440b      	add	r3, r1
 8006770:	3304      	adds	r3, #4
 8006772:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	491a      	ldr	r1, [pc, #104]	@ (80067e4 <inc_lock+0x118>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	440b      	add	r3, r1
 8006780:	3308      	adds	r3, #8
 8006782:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006784:	4a17      	ldr	r2, [pc, #92]	@ (80067e4 <inc_lock+0x118>)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	4413      	add	r3, r2
 800678c:	330c      	adds	r3, #12
 800678e:	2200      	movs	r2, #0
 8006790:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d009      	beq.n	80067ac <inc_lock+0xe0>
 8006798:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <inc_lock+0x118>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	4413      	add	r3, r2
 80067a0:	330c      	adds	r3, #12
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <inc_lock+0xe0>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e015      	b.n	80067d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d108      	bne.n	80067c4 <inc_lock+0xf8>
 80067b2:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <inc_lock+0x118>)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	4413      	add	r3, r2
 80067ba:	330c      	adds	r3, #12
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	e001      	b.n	80067c8 <inc_lock+0xfc>
 80067c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067c8:	4906      	ldr	r1, [pc, #24]	@ (80067e4 <inc_lock+0x118>)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	440b      	add	r3, r1
 80067d0:	330c      	adds	r3, #12
 80067d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	2000330c 	.word	0x2000330c

080067e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d825      	bhi.n	8006848 <dec_lock+0x60>
		n = Files[i].ctr;
 80067fc:	4a17      	ldr	r2, [pc, #92]	@ (800685c <dec_lock+0x74>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	4413      	add	r3, r2
 8006804:	330c      	adds	r3, #12
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800680a:	89fb      	ldrh	r3, [r7, #14]
 800680c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006810:	d101      	bne.n	8006816 <dec_lock+0x2e>
 8006812:	2300      	movs	r3, #0
 8006814:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006816:	89fb      	ldrh	r3, [r7, #14]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <dec_lock+0x3a>
 800681c:	89fb      	ldrh	r3, [r7, #14]
 800681e:	3b01      	subs	r3, #1
 8006820:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006822:	4a0e      	ldr	r2, [pc, #56]	@ (800685c <dec_lock+0x74>)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	4413      	add	r3, r2
 800682a:	330c      	adds	r3, #12
 800682c:	89fa      	ldrh	r2, [r7, #14]
 800682e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <dec_lock+0x5a>
 8006836:	4a09      	ldr	r2, [pc, #36]	@ (800685c <dec_lock+0x74>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	4413      	add	r3, r2
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	737b      	strb	r3, [r7, #13]
 8006846:	e001      	b.n	800684c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006848:	2302      	movs	r3, #2
 800684a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800684c:	7b7b      	ldrb	r3, [r7, #13]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	2000330c 	.word	0x2000330c

08006860 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e010      	b.n	8006890 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800686e:	4a0d      	ldr	r2, [pc, #52]	@ (80068a4 <clear_lock+0x44>)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	4413      	add	r3, r2
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d105      	bne.n	800688a <clear_lock+0x2a>
 800687e:	4a09      	ldr	r2, [pc, #36]	@ (80068a4 <clear_lock+0x44>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4413      	add	r3, r2
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d9eb      	bls.n	800686e <clear_lock+0xe>
	}
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	2000330c 	.word	0x2000330c

080068a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	78db      	ldrb	r3, [r3, #3]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d034      	beq.n	8006926 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7858      	ldrb	r0, [r3, #1]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068cc:	2301      	movs	r3, #1
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	f7ff fd40 	bl	8006354 <disk_write>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	e022      	b.n	8006926 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d217      	bcs.n	8006926 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	789b      	ldrb	r3, [r3, #2]
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	e010      	b.n	8006920 <sync_window+0x78>
					wsect += fs->fsize;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7858      	ldrb	r0, [r3, #1]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006912:	2301      	movs	r3, #1
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	f7ff fd1d 	bl	8006354 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3b01      	subs	r3, #1
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d8eb      	bhi.n	80068fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d01b      	beq.n	8006980 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ffad 	bl	80068a8 <sync_window>
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d113      	bne.n	8006980 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7858      	ldrb	r0, [r3, #1]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006962:	2301      	movs	r3, #1
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	f7ff fcd5 	bl	8006314 <disk_read>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006976:	2301      	movs	r3, #1
 8006978:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff ff87 	bl	80068a8 <sync_window>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d159      	bne.n	8006a58 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d149      	bne.n	8006a40 <sync_fs+0xb4>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	791b      	ldrb	r3, [r3, #4]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d145      	bne.n	8006a40 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	899b      	ldrh	r3, [r3, #12]
 80069be:	461a      	mov	r2, r3
 80069c0:	2100      	movs	r1, #0
 80069c2:	f7ff fda8 	bl	8006516 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3338      	adds	r3, #56	@ 0x38
 80069ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80069ce:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fd37 	bl	8006446 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3338      	adds	r3, #56	@ 0x38
 80069dc:	4921      	ldr	r1, [pc, #132]	@ (8006a64 <sync_fs+0xd8>)
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fd4c 	bl	800647c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3338      	adds	r3, #56	@ 0x38
 80069e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069ec:	491e      	ldr	r1, [pc, #120]	@ (8006a68 <sync_fs+0xdc>)
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff fd44 	bl	800647c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3338      	adds	r3, #56	@ 0x38
 80069f8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f7ff fd3a 	bl	800647c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3338      	adds	r3, #56	@ 0x38
 8006a0c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f7ff fd30 	bl	800647c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7858      	ldrb	r0, [r3, #1]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	2301      	movs	r3, #1
 8006a36:	f7ff fc8d 	bl	8006354 <disk_write>
			fs->fsi_flag = 0;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2200      	movs	r2, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fca3 	bl	8006394 <disk_ioctl>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <sync_fs+0xcc>
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	41615252 	.word	0x41615252
 8006a68:	61417272 	.word	0x61417272

08006a6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	3b02      	subs	r3, #2
 8006a7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	3b02      	subs	r3, #2
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d301      	bcc.n	8006a8c <clust2sect+0x20>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e008      	b.n	8006a9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	895b      	ldrh	r3, [r3, #10]
 8006a90:	461a      	mov	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	fb03 f202 	mul.w	r2, r3, r2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	4413      	add	r3, r2
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d904      	bls.n	8006aca <get_fat+0x20>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006aca:	2301      	movs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e0ba      	b.n	8006c46 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	f000 8082 	beq.w	8006be4 <get_fat+0x13a>
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	f300 80a6 	bgt.w	8006c32 <get_fat+0x188>
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d002      	beq.n	8006af0 <get_fat+0x46>
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d055      	beq.n	8006b9a <get_fat+0xf0>
 8006aee:	e0a0      	b.n	8006c32 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	085b      	lsrs	r3, r3, #1
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	899b      	ldrh	r3, [r3, #12]
 8006b06:	4619      	mov	r1, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b0e:	4413      	add	r3, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	6938      	ldr	r0, [r7, #16]
 8006b14:	f7ff ff0c 	bl	8006930 <move_window>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 808c 	bne.w	8006c38 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	60fa      	str	r2, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	8992      	ldrh	r2, [r2, #12]
 8006b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2e:	fb01 f202 	mul.w	r2, r1, r2
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4413      	add	r3, r2
 8006b38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	899b      	ldrh	r3, [r3, #12]
 8006b46:	4619      	mov	r1, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b4e:	4413      	add	r3, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f7ff feec 	bl	8006930 <move_window>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d16e      	bne.n	8006c3c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	899b      	ldrh	r3, [r3, #12]
 8006b62:	461a      	mov	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b6a:	fb01 f202 	mul.w	r2, r1, r2
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <get_fat+0xe6>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	e002      	b.n	8006b96 <get_fat+0xec>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b96:	617b      	str	r3, [r7, #20]
			break;
 8006b98:	e055      	b.n	8006c46 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	899b      	ldrh	r3, [r3, #12]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bae:	4413      	add	r3, r2
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6938      	ldr	r0, [r7, #16]
 8006bb4:	f7ff febc 	bl	8006930 <move_window>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d140      	bne.n	8006c40 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	8992      	ldrh	r2, [r2, #12]
 8006bcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bd0:	fb00 f202 	mul.w	r2, r0, r2
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fbf9 	bl	80063d0 <ld_word>
 8006bde:	4603      	mov	r3, r0
 8006be0:	617b      	str	r3, [r7, #20]
			break;
 8006be2:	e030      	b.n	8006c46 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	899b      	ldrh	r3, [r3, #12]
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6938      	ldr	r0, [r7, #16]
 8006bfe:	f7ff fe97 	bl	8006930 <move_window>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11d      	bne.n	8006c44 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	8992      	ldrh	r2, [r2, #12]
 8006c16:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c1a:	fb00 f202 	mul.w	r2, r0, r2
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	440b      	add	r3, r1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fbec 	bl	8006400 <ld_dword>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c2e:	617b      	str	r3, [r7, #20]
			break;
 8006c30:	e009      	b.n	8006c46 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c32:	2301      	movs	r3, #1
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e006      	b.n	8006c46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c38:	bf00      	nop
 8006c3a:	e004      	b.n	8006c46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c3c:	bf00      	nop
 8006c3e:	e002      	b.n	8006c46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c40:	bf00      	nop
 8006c42:	e000      	b.n	8006c46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c44:	bf00      	nop
		}
	}

	return val;
 8006c46:	697b      	ldr	r3, [r7, #20]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b089      	sub	sp, #36	@ 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	f240 8109 	bls.w	8006e7a <put_fat+0x22a>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	f080 8103 	bcs.w	8006e7a <put_fat+0x22a>
		switch (fs->fs_type) {
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	f000 80b6 	beq.w	8006dea <put_fat+0x19a>
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	f300 80fb 	bgt.w	8006e7a <put_fat+0x22a>
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d003      	beq.n	8006c90 <put_fat+0x40>
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	f000 8083 	beq.w	8006d94 <put_fat+0x144>
 8006c8e:	e0f4      	b.n	8006e7a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	899b      	ldrh	r3, [r3, #12]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cae:	4413      	add	r3, r2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff fe3c 	bl	8006930 <move_window>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cbc:	7ffb      	ldrb	r3, [r7, #31]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 80d4 	bne.w	8006e6c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	61ba      	str	r2, [r7, #24]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	8992      	ldrh	r2, [r2, #12]
 8006cd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cd8:	fb00 f202 	mul.w	r2, r0, r2
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	440b      	add	r3, r1
 8006ce0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <put_fat+0xb8>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b25b      	sxtb	r3, r3
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	b25a      	sxtb	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e001      	b.n	8006d0c <put_fat+0xbc>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	899b      	ldrh	r3, [r3, #12]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d26:	4413      	add	r3, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fe00 	bl	8006930 <move_window>
 8006d30:	4603      	mov	r3, r0
 8006d32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d34:	7ffb      	ldrb	r3, [r7, #31]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 809a 	bne.w	8006e70 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	899b      	ldrh	r3, [r3, #12]
 8006d46:	461a      	mov	r2, r3
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d4e:	fb00 f202 	mul.w	r2, r0, r2
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	440b      	add	r3, r1
 8006d56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <put_fat+0x11a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	e00e      	b.n	8006d88 <put_fat+0x138>
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	f023 030f 	bic.w	r3, r3, #15
 8006d74:	b25a      	sxtb	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	b25b      	sxtb	r3, r3
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	70da      	strb	r2, [r3, #3]
			break;
 8006d92:	e072      	b.n	8006e7a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	899b      	ldrh	r3, [r3, #12]
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006da8:	4413      	add	r3, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fdbf 	bl	8006930 <move_window>
 8006db2:	4603      	mov	r3, r0
 8006db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006db6:	7ffb      	ldrb	r3, [r7, #31]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d15b      	bne.n	8006e74 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	8992      	ldrh	r2, [r2, #12]
 8006dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dce:	fb00 f202 	mul.w	r2, r0, r2
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	b292      	uxth	r2, r2
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fb32 	bl	8006446 <st_word>
			fs->wflag = 1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	70da      	strb	r2, [r3, #3]
			break;
 8006de8:	e047      	b.n	8006e7a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	899b      	ldrh	r3, [r3, #12]
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	4619      	mov	r1, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dfe:	4413      	add	r3, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fd94 	bl	8006930 <move_window>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e0c:	7ffb      	ldrb	r3, [r7, #31]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d132      	bne.n	8006e78 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	8992      	ldrh	r2, [r2, #12]
 8006e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e2a:	fb00 f202 	mul.w	r2, r0, r2
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	440b      	add	r3, r1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fae4 	bl	8006400 <ld_dword>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006e3e:	4323      	orrs	r3, r4
 8006e40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	8992      	ldrh	r2, [r2, #12]
 8006e50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e54:	fb00 f202 	mul.w	r2, r0, r2
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fb0c 	bl	800647c <st_dword>
			fs->wflag = 1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	70da      	strb	r2, [r3, #3]
			break;
 8006e6a:	e006      	b.n	8006e7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e6c:	bf00      	nop
 8006e6e:	e004      	b.n	8006e7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e70:	bf00      	nop
 8006e72:	e002      	b.n	8006e7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e74:	bf00      	nop
 8006e76:	e000      	b.n	8006e7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e78:	bf00      	nop
		}
	}
	return res;
 8006e7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3724      	adds	r7, #36	@ 0x24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}

08006e84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d904      	bls.n	8006eaa <remove_chain+0x26>
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d301      	bcc.n	8006eae <remove_chain+0x2a>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e04b      	b.n	8006f46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	69b8      	ldr	r0, [r7, #24]
 8006ebc:	f7ff fec8 	bl	8006c50 <put_fat>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ec4:	7ffb      	ldrb	r3, [r7, #31]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <remove_chain+0x4a>
 8006eca:	7ffb      	ldrb	r3, [r7, #31]
 8006ecc:	e03b      	b.n	8006f46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fdea 	bl	8006aaa <get_fat>
 8006ed6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d031      	beq.n	8006f42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <remove_chain+0x64>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e02e      	b.n	8006f46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d101      	bne.n	8006ef4 <remove_chain+0x70>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e028      	b.n	8006f46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	69b8      	ldr	r0, [r7, #24]
 8006efa:	f7ff fea9 	bl	8006c50 <put_fat>
 8006efe:	4603      	mov	r3, r0
 8006f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f02:	7ffb      	ldrb	r3, [r7, #31]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <remove_chain+0x88>
 8006f08:	7ffb      	ldrb	r3, [r7, #31]
 8006f0a:	e01c      	b.n	8006f46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	3b02      	subs	r3, #2
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d20b      	bcs.n	8006f32 <remove_chain+0xae>
			fs->free_clst++;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	791b      	ldrb	r3, [r3, #4]
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d3c6      	bcc.n	8006ece <remove_chain+0x4a>
 8006f40:	e000      	b.n	8006f44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <create_chain+0x2c>
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d31b      	bcc.n	8006fb2 <create_chain+0x64>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e018      	b.n	8006fb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff fd91 	bl	8006aaa <get_fat>
 8006f88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d801      	bhi.n	8006f94 <create_chain+0x46>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e070      	b.n	8007076 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d101      	bne.n	8006fa0 <create_chain+0x52>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e06a      	b.n	8007076 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d201      	bcs.n	8006fae <create_chain+0x60>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	e063      	b.n	8007076 <create_chain+0x128>
		scl = clst;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d307      	bcc.n	8006fd6 <create_chain+0x88>
				ncl = 2;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d901      	bls.n	8006fd6 <create_chain+0x88>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e04f      	b.n	8007076 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006fd6:	69f9      	ldr	r1, [r7, #28]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fd66 	bl	8006aaa <get_fat>
 8006fde:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d003      	beq.n	8006ff4 <create_chain+0xa6>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d101      	bne.n	8006ff8 <create_chain+0xaa>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e03e      	b.n	8007076 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d1da      	bne.n	8006fb6 <create_chain+0x68>
 8007000:	2300      	movs	r3, #0
 8007002:	e038      	b.n	8007076 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007004:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007006:	f04f 32ff 	mov.w	r2, #4294967295
 800700a:	69f9      	ldr	r1, [r7, #28]
 800700c:	6938      	ldr	r0, [r7, #16]
 800700e:	f7ff fe1f 	bl	8006c50 <put_fat>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <create_chain+0xe2>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6938      	ldr	r0, [r7, #16]
 8007028:	f7ff fe12 	bl	8006c50 <put_fat>
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <create_chain+0x116>
		fs->last_clst = ncl;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	3b02      	subs	r3, #2
 8007046:	429a      	cmp	r2, r3
 8007048:	d804      	bhi.n	8007054 <create_chain+0x106>
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	1e5a      	subs	r2, r3, #1
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	791b      	ldrb	r3, [r3, #4]
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	b2da      	uxtb	r2, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	711a      	strb	r2, [r3, #4]
 8007062:	e007      	b.n	8007074 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d102      	bne.n	8007070 <create_chain+0x122>
 800706a:	f04f 33ff 	mov.w	r3, #4294967295
 800706e:	e000      	b.n	8007072 <create_chain+0x124>
 8007070:	2301      	movs	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007074:	69fb      	ldr	r3, [r7, #28]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800707e:	b480      	push	{r7}
 8007080:	b087      	sub	sp, #28
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	3304      	adds	r3, #4
 8007094:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	899b      	ldrh	r3, [r3, #12]
 800709a:	461a      	mov	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	8952      	ldrh	r2, [r2, #10]
 80070a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1d1a      	adds	r2, r3, #4
 80070b0:	613a      	str	r2, [r7, #16]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <clmt_clust+0x42>
 80070bc:	2300      	movs	r3, #0
 80070be:	e010      	b.n	80070e2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d307      	bcc.n	80070d8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3304      	adds	r3, #4
 80070d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070d6:	e7e9      	b.n	80070ac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80070d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4413      	add	r3, r2
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007104:	d204      	bcs.n	8007110 <dir_sdi+0x22>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007110:	2302      	movs	r3, #2
 8007112:	e071      	b.n	80071f8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <dir_sdi+0x46>
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d902      	bls.n	8007134 <dir_sdi+0x46>
		clst = fs->dirbase;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10c      	bne.n	8007154 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	8912      	ldrh	r2, [r2, #8]
 8007142:	4293      	cmp	r3, r2
 8007144:	d301      	bcc.n	800714a <dir_sdi+0x5c>
 8007146:	2302      	movs	r3, #2
 8007148:	e056      	b.n	80071f8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	61da      	str	r2, [r3, #28]
 8007152:	e02d      	b.n	80071b0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	895b      	ldrh	r3, [r3, #10]
 8007158:	461a      	mov	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	899b      	ldrh	r3, [r3, #12]
 800715e:	fb02 f303 	mul.w	r3, r2, r3
 8007162:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007164:	e019      	b.n	800719a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fc9d 	bl	8006aaa <get_fat>
 8007170:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d101      	bne.n	800717e <dir_sdi+0x90>
 800717a:	2301      	movs	r3, #1
 800717c:	e03c      	b.n	80071f8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d904      	bls.n	800718e <dir_sdi+0xa0>
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	429a      	cmp	r2, r3
 800718c:	d301      	bcc.n	8007192 <dir_sdi+0xa4>
 800718e:	2302      	movs	r3, #2
 8007190:	e032      	b.n	80071f8 <dir_sdi+0x10a>
			ofs -= csz;
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d2e1      	bcs.n	8007166 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071a2:	6979      	ldr	r1, [r7, #20]
 80071a4:	6938      	ldr	r0, [r7, #16]
 80071a6:	f7ff fc61 	bl	8006a6c <clust2sect>
 80071aa:	4602      	mov	r2, r0
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <dir_sdi+0xd4>
 80071be:	2302      	movs	r3, #2
 80071c0:	e01a      	b.n	80071f8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69da      	ldr	r2, [r3, #28]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	899b      	ldrh	r3, [r3, #12]
 80071ca:	4619      	mov	r1, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80071d2:	441a      	add	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	899b      	ldrh	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80071ea:	fb00 f202 	mul.w	r2, r0, r2
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	18ca      	adds	r2, r1, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	3320      	adds	r3, #32
 8007216:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <dir_next+0x28>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007226:	d301      	bcc.n	800722c <dir_next+0x2c>
 8007228:	2304      	movs	r3, #4
 800722a:	e0bb      	b.n	80073a4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	899b      	ldrh	r3, [r3, #12]
 8007230:	461a      	mov	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	fbb3 f1f2 	udiv	r1, r3, r2
 8007238:	fb01 f202 	mul.w	r2, r1, r2
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 809d 	bne.w	800737e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	8912      	ldrh	r2, [r2, #8]
 800725e:	4293      	cmp	r3, r2
 8007260:	f0c0 808d 	bcc.w	800737e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	61da      	str	r2, [r3, #28]
 800726a:	2304      	movs	r3, #4
 800726c:	e09a      	b.n	80073a4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	899b      	ldrh	r3, [r3, #12]
 8007272:	461a      	mov	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	fbb3 f3f2 	udiv	r3, r3, r2
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	8952      	ldrh	r2, [r2, #10]
 800727e:	3a01      	subs	r2, #1
 8007280:	4013      	ands	r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d17b      	bne.n	800737e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7ff fc0b 	bl	8006aaa <get_fat>
 8007294:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d801      	bhi.n	80072a0 <dir_next+0xa0>
 800729c:	2302      	movs	r3, #2
 800729e:	e081      	b.n	80073a4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d101      	bne.n	80072ac <dir_next+0xac>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e07b      	b.n	80073a4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d359      	bcc.n	800736a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	61da      	str	r2, [r3, #28]
 80072c2:	2304      	movs	r3, #4
 80072c4:	e06e      	b.n	80073a4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7ff fe3d 	bl	8006f4e <create_chain>
 80072d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <dir_next+0xe0>
 80072dc:	2307      	movs	r3, #7
 80072de:	e061      	b.n	80073a4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <dir_next+0xea>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e05c      	b.n	80073a4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d101      	bne.n	80072f6 <dir_next+0xf6>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e056      	b.n	80073a4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fad6 	bl	80068a8 <sync_window>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <dir_next+0x106>
 8007302:	2301      	movs	r3, #1
 8007304:	e04e      	b.n	80073a4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	899b      	ldrh	r3, [r3, #12]
 8007310:	461a      	mov	r2, r3
 8007312:	2100      	movs	r1, #0
 8007314:	f7ff f8ff 	bl	8006516 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	6979      	ldr	r1, [r7, #20]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fba4 	bl	8006a6c <clust2sect>
 8007324:	4602      	mov	r2, r0
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	635a      	str	r2, [r3, #52]	@ 0x34
 800732a:	e012      	b.n	8007352 <dir_next+0x152>
						fs->wflag = 1;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff fab8 	bl	80068a8 <sync_window>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <dir_next+0x142>
 800733e:	2301      	movs	r3, #1
 8007340:	e030      	b.n	80073a4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3301      	adds	r3, #1
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	635a      	str	r2, [r3, #52]	@ 0x34
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	895b      	ldrh	r3, [r3, #10]
 8007356:	461a      	mov	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4293      	cmp	r3, r2
 800735c:	d3e6      	bcc.n	800732c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad2      	subs	r2, r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007370:	6979      	ldr	r1, [r7, #20]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff fb7a 	bl	8006a6c <clust2sect>
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	899b      	ldrh	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	fbb3 f0f2 	udiv	r0, r3, r2
 8007396:	fb00 f202 	mul.w	r2, r0, r2
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	18ca      	adds	r2, r1, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fe95 	bl	80070ee <dir_sdi>
 80073c4:	4603      	mov	r3, r0
 80073c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12b      	bne.n	8007426 <dir_alloc+0x7a>
		n = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	4619      	mov	r1, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff faa9 	bl	8006930 <move_window>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11d      	bne.n	8007424 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2be5      	cmp	r3, #229	@ 0xe5
 80073f0:	d004      	beq.n	80073fc <dir_alloc+0x50>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	3301      	adds	r3, #1
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d102      	bne.n	8007410 <dir_alloc+0x64>
 800740a:	e00c      	b.n	8007426 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007410:	2101      	movs	r1, #1
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fef4 	bl	8007200 <dir_next>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0d7      	beq.n	80073d2 <dir_alloc+0x26>
 8007422:	e000      	b.n	8007426 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007424:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b04      	cmp	r3, #4
 800742a:	d101      	bne.n	8007430 <dir_alloc+0x84>
 800742c:	2307      	movs	r3, #7
 800742e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	331a      	adds	r3, #26
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe ffc1 	bl	80063d0 <ld_word>
 800744e:	4603      	mov	r3, r0
 8007450:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d109      	bne.n	800746e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe ffb6 	bl	80063d0 <ld_word>
 8007464:	4603      	mov	r3, r0
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	331a      	adds	r3, #26
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	b292      	uxth	r2, r2
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe ffd9 	bl	8006446 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b03      	cmp	r3, #3
 800749a:	d109      	bne.n	80074b0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f103 0214 	add.w	r2, r3, #20
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fe ffcb 	bl	8006446 <st_word>
	}
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074b8:	b590      	push	{r4, r7, lr}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	331a      	adds	r3, #26
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe ff82 	bl	80063d0 <ld_word>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <cmp_lfn+0x1e>
 80074d2:	2300      	movs	r3, #0
 80074d4:	e059      	b.n	800758a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074de:	1e5a      	subs	r2, r3, #1
 80074e0:	4613      	mov	r3, r2
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80074ec:	2301      	movs	r3, #1
 80074ee:	81fb      	strh	r3, [r7, #14]
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	e033      	b.n	800755e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80074f6:	4a27      	ldr	r2, [pc, #156]	@ (8007594 <cmp_lfn+0xdc>)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4413      	add	r3, r2
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe ff63 	bl	80063d0 <ld_word>
 800750a:	4603      	mov	r3, r0
 800750c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800750e:	89fb      	ldrh	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01a      	beq.n	800754a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2bfe      	cmp	r3, #254	@ 0xfe
 8007518:	d812      	bhi.n	8007540 <cmp_lfn+0x88>
 800751a:	89bb      	ldrh	r3, [r7, #12]
 800751c:	4618      	mov	r0, r3
 800751e:	f001 ff95 	bl	800944c <ff_wtoupper>
 8007522:	4603      	mov	r3, r0
 8007524:	461c      	mov	r4, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	617a      	str	r2, [r7, #20]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f001 ff89 	bl	800944c <ff_wtoupper>
 800753a:	4603      	mov	r3, r0
 800753c:	429c      	cmp	r4, r3
 800753e:	d001      	beq.n	8007544 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007540:	2300      	movs	r3, #0
 8007542:	e022      	b.n	800758a <cmp_lfn+0xd2>
			}
			wc = uc;
 8007544:	89bb      	ldrh	r3, [r7, #12]
 8007546:	81fb      	strh	r3, [r7, #14]
 8007548:	e006      	b.n	8007558 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800754a:	89bb      	ldrh	r3, [r7, #12]
 800754c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007550:	4293      	cmp	r3, r2
 8007552:	d001      	beq.n	8007558 <cmp_lfn+0xa0>
 8007554:	2300      	movs	r3, #0
 8007556:	e018      	b.n	800758a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	3301      	adds	r3, #1
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b0c      	cmp	r3, #12
 8007562:	d9c8      	bls.n	80074f6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <cmp_lfn+0xd0>
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <cmp_lfn+0xd0>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <cmp_lfn+0xd0>
 8007584:	2300      	movs	r3, #0
 8007586:	e000      	b.n	800758a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007588:	2301      	movs	r3, #1
}
 800758a:	4618      	mov	r0, r3
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	bd90      	pop	{r4, r7, pc}
 8007592:	bf00      	nop
 8007594:	0800a70c 	.word	0x0800a70c

08007598 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4611      	mov	r1, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	460b      	mov	r3, r1
 80075a8:	71fb      	strb	r3, [r7, #7]
 80075aa:	4613      	mov	r3, r2
 80075ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	330d      	adds	r3, #13
 80075b2:	79ba      	ldrb	r2, [r7, #6]
 80075b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	330b      	adds	r3, #11
 80075ba:	220f      	movs	r2, #15
 80075bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	330c      	adds	r3, #12
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	331a      	adds	r3, #26
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe ff3a 	bl	8006446 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	1e5a      	subs	r2, r3, #1
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	82fb      	strh	r3, [r7, #22]
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80075ea:	8afb      	ldrh	r3, [r7, #22]
 80075ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <put_lfn+0x6c>
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	61fa      	str	r2, [r7, #28]
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007604:	4a17      	ldr	r2, [pc, #92]	@ (8007664 <put_lfn+0xcc>)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	4413      	add	r3, r2
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	8afa      	ldrh	r2, [r7, #22]
 8007614:	4611      	mov	r1, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe ff15 	bl	8006446 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800761c:	8afb      	ldrh	r3, [r7, #22]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <put_lfn+0x90>
 8007622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007626:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	3301      	adds	r3, #1
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b0c      	cmp	r3, #12
 8007632:	d9da      	bls.n	80075ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800763a:	4293      	cmp	r3, r2
 800763c:	d006      	beq.n	800764c <put_lfn+0xb4>
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <put_lfn+0xbc>
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007652:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	79fa      	ldrb	r2, [r7, #7]
 8007658:	701a      	strb	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	0800a70c 	.word	0x0800a70c

08007668 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08c      	sub	sp, #48	@ 0x30
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007676:	220b      	movs	r2, #11
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7fe ff2a 	bl	80064d4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b05      	cmp	r3, #5
 8007684:	d929      	bls.n	80076da <gen_numname+0x72>
		sr = seq;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800768a:	e020      	b.n	80076ce <gen_numname+0x66>
			wc = *lfn++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007696:	2300      	movs	r3, #0
 8007698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800769a:	e015      	b.n	80076c8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	005a      	lsls	r2, r3, #1
 80076a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	4413      	add	r3, r2
 80076a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <gen_numname+0x5a>
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	4b30      	ldr	r3, [pc, #192]	@ (8007780 <gen_numname+0x118>)
 80076be:	4053      	eors	r3, r2
 80076c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c4:	3301      	adds	r3, #1
 80076c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d9e6      	bls.n	800769c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1da      	bne.n	800768c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80076da:	2307      	movs	r3, #7
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	3330      	adds	r3, #48	@ 0x30
 80076ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80076ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076f2:	2b39      	cmp	r3, #57	@ 0x39
 80076f4:	d904      	bls.n	8007700 <gen_numname+0x98>
 80076f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076fa:	3307      	adds	r3, #7
 80076fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	1e5a      	subs	r2, r3, #1
 8007704:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007706:	3330      	adds	r3, #48	@ 0x30
 8007708:	443b      	add	r3, r7
 800770a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800770e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1df      	bne.n	80076de <gen_numname+0x76>
	ns[i] = '~';
 800771e:	f107 0214 	add.w	r2, r7, #20
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	4413      	add	r3, r2
 8007726:	227e      	movs	r2, #126	@ 0x7e
 8007728:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	@ 0x24
 800772e:	e002      	b.n	8007736 <gen_numname+0xce>
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	3301      	adds	r3, #1
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
 8007736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	429a      	cmp	r2, r3
 800773c:	d205      	bcs.n	800774a <gen_numname+0xe2>
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	4413      	add	r3, r2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b20      	cmp	r3, #32
 8007748:	d1f2      	bne.n	8007730 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	2b07      	cmp	r3, #7
 800774e:	d807      	bhi.n	8007760 <gen_numname+0xf8>
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007756:	3330      	adds	r3, #48	@ 0x30
 8007758:	443b      	add	r3, r7
 800775a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800775e:	e000      	b.n	8007762 <gen_numname+0xfa>
 8007760:	2120      	movs	r1, #32
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	627a      	str	r2, [r7, #36]	@ 0x24
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	460a      	mov	r2, r1
 800776e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	2b07      	cmp	r3, #7
 8007774:	d9e9      	bls.n	800774a <gen_numname+0xe2>
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	3730      	adds	r7, #48	@ 0x30
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	00011021 	.word	0x00011021

08007784 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007790:	230b      	movs	r3, #11
 8007792:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	b2da      	uxtb	r2, r3
 8007798:	0852      	lsrs	r2, r2, #1
 800779a:	01db      	lsls	r3, r3, #7
 800779c:	4313      	orrs	r3, r2
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	1c59      	adds	r1, r3, #1
 80077a4:	6079      	str	r1, [r7, #4]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1ed      	bne.n	8007794 <sum_sfn+0x10>
	return sum;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b086      	sub	sp, #24
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fc89 	bl	80070ee <dir_sdi>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <dir_find+0x24>
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	e0a9      	b.n	800793e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80077ea:	23ff      	movs	r3, #255	@ 0xff
 80077ec:	753b      	strb	r3, [r7, #20]
 80077ee:	7d3b      	ldrb	r3, [r7, #20]
 80077f0:	757b      	strb	r3, [r7, #21]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	4619      	mov	r1, r3
 8007800:	6938      	ldr	r0, [r7, #16]
 8007802:	f7ff f895 	bl	8006930 <move_window>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8090 	bne.w	8007932 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800781a:	7dbb      	ldrb	r3, [r7, #22]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <dir_find+0x60>
 8007820:	2304      	movs	r3, #4
 8007822:	75fb      	strb	r3, [r7, #23]
 8007824:	e08a      	b.n	800793c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	330b      	adds	r3, #11
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7bfa      	ldrb	r2, [r7, #15]
 8007838:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800783a:	7dbb      	ldrb	r3, [r7, #22]
 800783c:	2be5      	cmp	r3, #229	@ 0xe5
 800783e:	d007      	beq.n	8007850 <dir_find+0x8a>
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <dir_find+0x98>
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b0f      	cmp	r3, #15
 800784e:	d006      	beq.n	800785e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007850:	23ff      	movs	r3, #255	@ 0xff
 8007852:	757b      	strb	r3, [r7, #21]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	631a      	str	r2, [r3, #48]	@ 0x30
 800785c:	e05e      	b.n	800791c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	2b0f      	cmp	r3, #15
 8007862:	d136      	bne.n	80078d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800786a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d154      	bne.n	800791c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007872:	7dbb      	ldrb	r3, [r7, #22]
 8007874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	7b5b      	ldrb	r3, [r3, #13]
 8007882:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007884:	7dbb      	ldrb	r3, [r7, #22]
 8007886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788a:	75bb      	strb	r3, [r7, #22]
 800788c:	7dbb      	ldrb	r3, [r7, #22]
 800788e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007898:	7dba      	ldrb	r2, [r7, #22]
 800789a:	7d7b      	ldrb	r3, [r7, #21]
 800789c:	429a      	cmp	r2, r3
 800789e:	d115      	bne.n	80078cc <dir_find+0x106>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	330d      	adds	r3, #13
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	7d3a      	ldrb	r2, [r7, #20]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d10e      	bne.n	80078cc <dir_find+0x106>
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7ff fdfd 	bl	80074b8 <cmp_lfn>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <dir_find+0x106>
 80078c4:	7d7b      	ldrb	r3, [r7, #21]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e000      	b.n	80078ce <dir_find+0x108>
 80078cc:	23ff      	movs	r3, #255	@ 0xff
 80078ce:	757b      	strb	r3, [r7, #21]
 80078d0:	e024      	b.n	800791c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80078d2:	7d7b      	ldrb	r3, [r7, #21]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <dir_find+0x126>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff ff51 	bl	8007784 <sum_sfn>
 80078e2:	4603      	mov	r3, r0
 80078e4:	461a      	mov	r2, r3
 80078e6:	7d3b      	ldrb	r3, [r7, #20]
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d024      	beq.n	8007936 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <dir_find+0x14a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a18      	ldr	r0, [r3, #32]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3324      	adds	r3, #36	@ 0x24
 8007902:	220b      	movs	r2, #11
 8007904:	4619      	mov	r1, r3
 8007906:	f7fe fe21 	bl	800654c <mem_cmp>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d014      	beq.n	800793a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007910:	23ff      	movs	r3, #255	@ 0xff
 8007912:	757b      	strb	r3, [r7, #21]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800791c:	2100      	movs	r1, #0
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fc6e 	bl	8007200 <dir_next>
 8007924:	4603      	mov	r3, r0
 8007926:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f43f af65 	beq.w	80077fa <dir_find+0x34>
 8007930:	e004      	b.n	800793c <dir_find+0x176>
		if (res != FR_OK) break;
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800793a:	bf00      	nop

	return res;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	@ 0x30
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800795c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <dir_register+0x20>
 8007964:	2306      	movs	r3, #6
 8007966:	e0e0      	b.n	8007b2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007968:	2300      	movs	r3, #0
 800796a:	627b      	str	r3, [r7, #36]	@ 0x24
 800796c:	e002      	b.n	8007974 <dir_register+0x2c>
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	3301      	adds	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	@ 0x24
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	4413      	add	r3, r2
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f4      	bne.n	800796e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	220c      	movs	r2, #12
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe fd9f 	bl	80064d4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d032      	beq.n	8007a06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2240      	movs	r2, #64	@ 0x40
 80079a4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80079a8:	2301      	movs	r3, #1
 80079aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079ac:	e016      	b.n	80079dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	f107 010c 	add.w	r1, r7, #12
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	f7ff fe53 	bl	8007668 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff feff 	bl	80077c6 <dir_find>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80079ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d106      	bne.n	80079e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	3301      	adds	r3, #1
 80079da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	2b63      	cmp	r3, #99	@ 0x63
 80079e0:	d9e5      	bls.n	80079ae <dir_register+0x66>
 80079e2:	e000      	b.n	80079e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80079e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80079e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e8:	2b64      	cmp	r3, #100	@ 0x64
 80079ea:	d101      	bne.n	80079f0 <dir_register+0xa8>
 80079ec:	2307      	movs	r3, #7
 80079ee:	e09c      	b.n	8007b2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80079f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d002      	beq.n	80079fe <dir_register+0xb6>
 80079f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079fc:	e095      	b.n	8007b2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80079fe:	7dfa      	ldrb	r2, [r7, #23]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <dir_register+0xd8>
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	330c      	adds	r3, #12
 8007a14:	4a47      	ldr	r2, [pc, #284]	@ (8007b34 <dir_register+0x1ec>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	089b      	lsrs	r3, r3, #2
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	e000      	b.n	8007a22 <dir_register+0xda>
 8007a20:	2301      	movs	r3, #1
 8007a22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a24:	6a39      	ldr	r1, [r7, #32]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff fcc0 	bl	80073ac <dir_alloc>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d148      	bne.n	8007acc <dir_register+0x184>
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	623b      	str	r3, [r7, #32]
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d042      	beq.n	8007acc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695a      	ldr	r2, [r3, #20]
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	015b      	lsls	r3, r3, #5
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fb4b 	bl	80070ee <dir_sdi>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d132      	bne.n	8007acc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3324      	adds	r3, #36	@ 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fe8a 	bl	8007784 <sum_sfn>
 8007a70:	4603      	mov	r3, r0
 8007a72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	69f8      	ldr	r0, [r7, #28]
 8007a7c:	f7fe ff58 	bl	8006930 <move_window>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007a86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d11d      	bne.n	8007aca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	6918      	ldr	r0, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a19      	ldr	r1, [r3, #32]
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	7efb      	ldrb	r3, [r7, #27]
 8007a9c:	f7ff fd7c 	bl	8007598 <put_lfn>
				fs->wflag = 1;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff fba9 	bl	8007200 <dir_next>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d107      	bne.n	8007acc <dir_register+0x184>
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1d5      	bne.n	8007a74 <dir_register+0x12c>
 8007ac8:	e000      	b.n	8007acc <dir_register+0x184>
				if (res != FR_OK) break;
 8007aca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007acc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d128      	bne.n	8007b26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	69f8      	ldr	r0, [r7, #28]
 8007adc:	f7fe ff28 	bl	8006930 <move_window>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d11b      	bne.n	8007b26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	2220      	movs	r2, #32
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fd0d 	bl	8006516 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a18      	ldr	r0, [r3, #32]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3324      	adds	r3, #36	@ 0x24
 8007b04:	220b      	movs	r2, #11
 8007b06:	4619      	mov	r1, r3
 8007b08:	f7fe fce4 	bl	80064d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	330c      	adds	r3, #12
 8007b18:	f002 0218 	and.w	r2, r2, #24
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2201      	movs	r2, #1
 8007b24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3730      	adds	r7, #48	@ 0x30
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	4ec4ec4f 	.word	0x4ec4ec4f

08007b38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	@ 0x28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	61ba      	str	r2, [r7, #24]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4413      	add	r3, r2
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b68:	2b1f      	cmp	r3, #31
 8007b6a:	d940      	bls.n	8007bee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b70:	d006      	beq.n	8007b80 <create_name+0x48>
 8007b72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b74:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b76:	d110      	bne.n	8007b9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b78:	e002      	b.n	8007b80 <create_name+0x48>
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	4413      	add	r3, r2
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b8a:	d0f6      	beq.n	8007b7a <create_name+0x42>
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	4413      	add	r3, r2
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b96:	d0f0      	beq.n	8007b7a <create_name+0x42>
			break;
 8007b98:	e02a      	b.n	8007bf0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b9e:	d901      	bls.n	8007ba4 <create_name+0x6c>
 8007ba0:	2306      	movs	r3, #6
 8007ba2:	e17d      	b.n	8007ea0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007ba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bac:	2101      	movs	r1, #1
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fc10 	bl	80093d4 <ff_convert>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007bb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <create_name+0x8a>
 8007bbe:	2306      	movs	r3, #6
 8007bc0:	e16e      	b.n	8007ea0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007bc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bc6:	d809      	bhi.n	8007bdc <create_name+0xa4>
 8007bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bca:	4619      	mov	r1, r3
 8007bcc:	488d      	ldr	r0, [pc, #564]	@ (8007e04 <create_name+0x2cc>)
 8007bce:	f7fe fce4 	bl	800659a <chk_chr>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <create_name+0xa4>
 8007bd8:	2306      	movs	r3, #6
 8007bda:	e161      	b.n	8007ea0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	617a      	str	r2, [r7, #20]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007bea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007bec:	e7b4      	b.n	8007b58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007bee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bfc:	2b1f      	cmp	r3, #31
 8007bfe:	d801      	bhi.n	8007c04 <create_name+0xcc>
 8007c00:	2304      	movs	r3, #4
 8007c02:	e000      	b.n	8007c06 <create_name+0xce>
 8007c04:	2300      	movs	r3, #0
 8007c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c0a:	e011      	b.n	8007c30 <create_name+0xf8>
		w = lfn[di - 1];
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007c12:	4413      	add	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d002      	beq.n	8007c2a <create_name+0xf2>
 8007c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c28:	d106      	bne.n	8007c38 <create_name+0x100>
		di--;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1ea      	bne.n	8007c0c <create_name+0xd4>
 8007c36:	e000      	b.n	8007c3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007c38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <create_name+0x118>
 8007c4c:	2306      	movs	r3, #6
 8007c4e:	e127      	b.n	8007ea0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3324      	adds	r3, #36	@ 0x24
 8007c54:	220b      	movs	r2, #11
 8007c56:	2120      	movs	r1, #32
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fc5c 	bl	8006516 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	e002      	b.n	8007c6a <create_name+0x132>
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	3301      	adds	r3, #1
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d0f5      	beq.n	8007c64 <create_name+0x12c>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c84:	d0ee      	beq.n	8007c64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <create_name+0x168>
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c90:	f043 0303 	orr.w	r3, r3, #3
 8007c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007c98:	e002      	b.n	8007ca0 <create_name+0x168>
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <create_name+0x182>
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007cac:	4413      	add	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cb8:	d1ef      	bne.n	8007c9a <create_name+0x162>

	i = b = 0; ni = 8;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	623b      	str	r3, [r7, #32]
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	61ba      	str	r2, [r7, #24]
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8090 	beq.w	8007e00 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ce0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d006      	beq.n	8007cf4 <create_name+0x1bc>
 8007ce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cea:	d10a      	bne.n	8007d02 <create_name+0x1ca>
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d006      	beq.n	8007d02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cf8:	f043 0303 	orr.w	r3, r3, #3
 8007cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d00:	e07d      	b.n	8007dfe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d203      	bcs.n	8007d12 <create_name+0x1da>
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d123      	bne.n	8007d5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	2b0b      	cmp	r3, #11
 8007d16:	d106      	bne.n	8007d26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d1c:	f043 0303 	orr.w	r3, r3, #3
 8007d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d24:	e075      	b.n	8007e12 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d005      	beq.n	8007d3a <create_name+0x202>
 8007d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d32:	f043 0303 	orr.w	r3, r3, #3
 8007d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d866      	bhi.n	8007e10 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	2308      	movs	r3, #8
 8007d48:	623b      	str	r3, [r7, #32]
 8007d4a:	230b      	movs	r3, #11
 8007d4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d58:	e051      	b.n	8007dfe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d5e:	d914      	bls.n	8007d8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007d60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 fb35 	bl	80093d4 <ff_convert>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <create_name+0x246>
 8007d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d76:	3b80      	subs	r3, #128	@ 0x80
 8007d78:	4a23      	ldr	r2, [pc, #140]	@ (8007e08 <create_name+0x2d0>)
 8007d7a:	5cd3      	ldrb	r3, [r2, r3]
 8007d7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d82:	f043 0302 	orr.w	r3, r3, #2
 8007d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007d8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <create_name+0x268>
 8007d90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d92:	4619      	mov	r1, r3
 8007d94:	481d      	ldr	r0, [pc, #116]	@ (8007e0c <create_name+0x2d4>)
 8007d96:	f7fe fc00 	bl	800659a <chk_chr>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007da0:	235f      	movs	r3, #95	@ 0x5f
 8007da2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007da8:	f043 0303 	orr.w	r3, r3, #3
 8007dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007db0:	e01b      	b.n	8007dea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007db4:	2b40      	cmp	r3, #64	@ 0x40
 8007db6:	d909      	bls.n	8007dcc <create_name+0x294>
 8007db8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dba:	2b5a      	cmp	r3, #90	@ 0x5a
 8007dbc:	d806      	bhi.n	8007dcc <create_name+0x294>
					b |= 2;
 8007dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007dca:	e00e      	b.n	8007dea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007dcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dce:	2b60      	cmp	r3, #96	@ 0x60
 8007dd0:	d90b      	bls.n	8007dea <create_name+0x2b2>
 8007dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dd4:	2b7a      	cmp	r3, #122	@ 0x7a
 8007dd6:	d808      	bhi.n	8007dea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007de6:	3b20      	subs	r3, #32
 8007de8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	623a      	str	r2, [r7, #32]
 8007df0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007df2:	b2d1      	uxtb	r1, r2
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	4413      	add	r3, r2
 8007df8:	460a      	mov	r2, r1
 8007dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007dfe:	e763      	b.n	8007cc8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007e00:	bf00      	nop
 8007e02:	e006      	b.n	8007e12 <create_name+0x2da>
 8007e04:	0800a62c 	.word	0x0800a62c
 8007e08:	0800a68c 	.word	0x0800a68c
 8007e0c:	0800a638 	.word	0x0800a638
			if (si > di) break;			/* No extension */
 8007e10:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e18:	2be5      	cmp	r3, #229	@ 0xe5
 8007e1a:	d103      	bne.n	8007e24 <create_name+0x2ec>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d104      	bne.n	8007e34 <create_name+0x2fc>
 8007e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007e34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e38:	f003 030c 	and.w	r3, r3, #12
 8007e3c:	2b0c      	cmp	r3, #12
 8007e3e:	d005      	beq.n	8007e4c <create_name+0x314>
 8007e40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d105      	bne.n	8007e58 <create_name+0x320>
 8007e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d117      	bne.n	8007e94 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007e64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d105      	bne.n	8007e7c <create_name+0x344>
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e74:	f043 0310 	orr.w	r3, r3, #16
 8007e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e80:	f003 030c 	and.w	r3, r3, #12
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d105      	bne.n	8007e94 <create_name+0x35c>
 8007e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e8c:	f043 0308 	orr.w	r3, r3, #8
 8007e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007e9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007e9e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3728      	adds	r7, #40	@ 0x28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ebc:	e002      	b.n	8007ec4 <follow_path+0x1c>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b2f      	cmp	r3, #47	@ 0x2f
 8007eca:	d0f8      	beq.n	8007ebe <follow_path+0x16>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b5c      	cmp	r3, #92	@ 0x5c
 8007ed2:	d0f4      	beq.n	8007ebe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b1f      	cmp	r3, #31
 8007ee0:	d80a      	bhi.n	8007ef8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2280      	movs	r2, #128	@ 0x80
 8007ee6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007eea:	2100      	movs	r1, #0
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff f8fe 	bl	80070ee <dir_sdi>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
 8007ef6:	e048      	b.n	8007f8a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ef8:	463b      	mov	r3, r7
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fe1b 	bl	8007b38 <create_name>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d139      	bne.n	8007f80 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fc5a 	bl	80077c6 <dir_find>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d12c      	bne.n	8007f84 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d127      	bne.n	8007f84 <follow_path+0xdc>
 8007f34:	2305      	movs	r3, #5
 8007f36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f38:	e024      	b.n	8007f84 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d121      	bne.n	8007f88 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	799b      	ldrb	r3, [r3, #6]
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f50:	2305      	movs	r3, #5
 8007f52:	75fb      	strb	r3, [r7, #23]
 8007f54:	e019      	b.n	8007f8a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	8992      	ldrh	r2, [r2, #12]
 8007f64:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f68:	fb00 f202 	mul.w	r2, r0, r2
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	440b      	add	r3, r1
 8007f70:	4619      	mov	r1, r3
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff fa61 	bl	800743a <ld_clust>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f7e:	e7bb      	b.n	8007ef8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f80:	bf00      	nop
 8007f82:	e002      	b.n	8007f8a <follow_path+0xe2>
				break;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f88:	bf00      	nop
			}
		}
	}

	return res;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d031      	beq.n	800800e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	e002      	b.n	8007fb8 <get_ldnumber+0x24>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b1f      	cmp	r3, #31
 8007fbe:	d903      	bls.n	8007fc8 <get_ldnumber+0x34>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b3a      	cmp	r3, #58	@ 0x3a
 8007fc6:	d1f4      	bne.n	8007fb2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b3a      	cmp	r3, #58	@ 0x3a
 8007fce:	d11c      	bne.n	800800a <get_ldnumber+0x76>
			tp = *path;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	60fa      	str	r2, [r7, #12]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	3b30      	subs	r3, #48	@ 0x30
 8007fe0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d80e      	bhi.n	8008006 <get_ldnumber+0x72>
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d10a      	bne.n	8008006 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <get_ldnumber+0x72>
					vol = (int)i;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	e002      	b.n	8008010 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800800e:	693b      	ldr	r3, [r7, #16]
}
 8008010:	4618      	mov	r0, r3
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	70da      	strb	r2, [r3, #3]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f04f 32ff 	mov.w	r2, #4294967295
 8008032:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fe fc7a 	bl	8006930 <move_window>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <check_fs+0x2a>
 8008042:	2304      	movs	r3, #4
 8008044:	e038      	b.n	80080b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3338      	adds	r3, #56	@ 0x38
 800804a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe f9be 	bl	80063d0 <ld_word>
 8008054:	4603      	mov	r3, r0
 8008056:	461a      	mov	r2, r3
 8008058:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800805c:	429a      	cmp	r2, r3
 800805e:	d001      	beq.n	8008064 <check_fs+0x48>
 8008060:	2303      	movs	r3, #3
 8008062:	e029      	b.n	80080b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800806a:	2be9      	cmp	r3, #233	@ 0xe9
 800806c:	d009      	beq.n	8008082 <check_fs+0x66>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008074:	2beb      	cmp	r3, #235	@ 0xeb
 8008076:	d11e      	bne.n	80080b6 <check_fs+0x9a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800807e:	2b90      	cmp	r3, #144	@ 0x90
 8008080:	d119      	bne.n	80080b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3338      	adds	r3, #56	@ 0x38
 8008086:	3336      	adds	r3, #54	@ 0x36
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe f9b9 	bl	8006400 <ld_dword>
 800808e:	4603      	mov	r3, r0
 8008090:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008094:	4a0a      	ldr	r2, [pc, #40]	@ (80080c0 <check_fs+0xa4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d101      	bne.n	800809e <check_fs+0x82>
 800809a:	2300      	movs	r3, #0
 800809c:	e00c      	b.n	80080b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3338      	adds	r3, #56	@ 0x38
 80080a2:	3352      	adds	r3, #82	@ 0x52
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe f9ab 	bl	8006400 <ld_dword>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4a05      	ldr	r2, [pc, #20]	@ (80080c4 <check_fs+0xa8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d101      	bne.n	80080b6 <check_fs+0x9a>
 80080b2:	2300      	movs	r3, #0
 80080b4:	e000      	b.n	80080b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080b6:	2302      	movs	r3, #2
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	00544146 	.word	0x00544146
 80080c4:	33544146 	.word	0x33544146

080080c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b096      	sub	sp, #88	@ 0x58
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ff59 	bl	8007f94 <get_ldnumber>
 80080e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da01      	bge.n	80080ee <find_volume+0x26>
 80080ea:	230b      	movs	r3, #11
 80080ec:	e265      	b.n	80085ba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80080ee:	4a9f      	ldr	r2, [pc, #636]	@ (800836c <find_volume+0x2a4>)
 80080f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <find_volume+0x3a>
 80080fe:	230c      	movs	r3, #12
 8008100:	e25b      	b.n	80085ba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008106:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01a      	beq.n	800814e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe f8b9 	bl	8006294 <disk_status>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008128:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10c      	bne.n	800814e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <find_volume+0x82>
 800813a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008146:	230a      	movs	r3, #10
 8008148:	e237      	b.n	80085ba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800814a:	2300      	movs	r3, #0
 800814c:	e235      	b.n	80085ba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008156:	b2da      	uxtb	r2, r3
 8008158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800815c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe f8b1 	bl	80062c8 <disk_initialize>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800816c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008178:	2303      	movs	r3, #3
 800817a:	e21e      	b.n	80085ba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d007      	beq.n	8008192 <find_volume+0xca>
 8008182:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800818e:	230a      	movs	r3, #10
 8008190:	e213      	b.n	80085ba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008194:	7858      	ldrb	r0, [r3, #1]
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	330c      	adds	r3, #12
 800819a:	461a      	mov	r2, r3
 800819c:	2102      	movs	r1, #2
 800819e:	f7fe f8f9 	bl	8006394 <disk_ioctl>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <find_volume+0xe4>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e206      	b.n	80085ba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ae:	899b      	ldrh	r3, [r3, #12]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b4:	d80d      	bhi.n	80081d2 <find_volume+0x10a>
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	899b      	ldrh	r3, [r3, #12]
 80081ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081be:	d308      	bcc.n	80081d2 <find_volume+0x10a>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	899b      	ldrh	r3, [r3, #12]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	899b      	ldrh	r3, [r3, #12]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <find_volume+0x10e>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e1f1      	b.n	80085ba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081de:	f7ff ff1d 	bl	800801c <check_fs>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d149      	bne.n	8008284 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081f0:	2300      	movs	r3, #0
 80081f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80081f4:	e01e      	b.n	8008234 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80081fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008204:	4413      	add	r3, r2
 8008206:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	3304      	adds	r3, #4
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d006      	beq.n	8008220 <find_volume+0x158>
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	3308      	adds	r3, #8
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe f8f2 	bl	8006400 <ld_dword>
 800821c:	4602      	mov	r2, r0
 800821e:	e000      	b.n	8008222 <find_volume+0x15a>
 8008220:	2200      	movs	r2, #0
 8008222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	3358      	adds	r3, #88	@ 0x58
 8008228:	443b      	add	r3, r7
 800822a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800822e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008230:	3301      	adds	r3, #1
 8008232:	643b      	str	r3, [r7, #64]	@ 0x40
 8008234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008236:	2b03      	cmp	r3, #3
 8008238:	d9dd      	bls.n	80081f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800823a:	2300      	movs	r3, #0
 800823c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800823e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <find_volume+0x182>
 8008244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008246:	3b01      	subs	r3, #1
 8008248:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800824a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	3358      	adds	r3, #88	@ 0x58
 8008250:	443b      	add	r3, r7
 8008252:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008256:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <find_volume+0x1a2>
 800825e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008260:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008262:	f7ff fedb 	bl	800801c <check_fs>
 8008266:	4603      	mov	r3, r0
 8008268:	e000      	b.n	800826c <find_volume+0x1a4>
 800826a:	2303      	movs	r3, #3
 800826c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008270:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008274:	2b01      	cmp	r3, #1
 8008276:	d905      	bls.n	8008284 <find_volume+0x1bc>
 8008278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800827a:	3301      	adds	r3, #1
 800827c:	643b      	str	r3, [r7, #64]	@ 0x40
 800827e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008280:	2b03      	cmp	r3, #3
 8008282:	d9e2      	bls.n	800824a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008284:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008288:	2b04      	cmp	r3, #4
 800828a:	d101      	bne.n	8008290 <find_volume+0x1c8>
 800828c:	2301      	movs	r3, #1
 800828e:	e194      	b.n	80085ba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008290:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008294:	2b01      	cmp	r3, #1
 8008296:	d901      	bls.n	800829c <find_volume+0x1d4>
 8008298:	230d      	movs	r3, #13
 800829a:	e18e      	b.n	80085ba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800829c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829e:	3338      	adds	r3, #56	@ 0x38
 80082a0:	330b      	adds	r3, #11
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe f894 	bl	80063d0 <ld_word>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	899b      	ldrh	r3, [r3, #12]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d001      	beq.n	80082b8 <find_volume+0x1f0>
 80082b4:	230d      	movs	r3, #13
 80082b6:	e180      	b.n	80085ba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	3338      	adds	r3, #56	@ 0x38
 80082bc:	3316      	adds	r3, #22
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe f886 	bl	80063d0 <ld_word>
 80082c4:	4603      	mov	r3, r0
 80082c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <find_volume+0x214>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	3338      	adds	r3, #56	@ 0x38
 80082d2:	3324      	adds	r3, #36	@ 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe f893 	bl	8006400 <ld_dword>
 80082da:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082e0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	789b      	ldrb	r3, [r3, #2]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d005      	beq.n	8008300 <find_volume+0x238>
 80082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f6:	789b      	ldrb	r3, [r3, #2]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d001      	beq.n	8008300 <find_volume+0x238>
 80082fc:	230d      	movs	r3, #13
 80082fe:	e15c      	b.n	80085ba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	789b      	ldrb	r3, [r3, #2]
 8008304:	461a      	mov	r2, r3
 8008306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008308:	fb02 f303 	mul.w	r3, r2, r3
 800830c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008314:	461a      	mov	r2, r3
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	895b      	ldrh	r3, [r3, #10]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <find_volume+0x26c>
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	895b      	ldrh	r3, [r3, #10]
 8008326:	461a      	mov	r2, r3
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	895b      	ldrh	r3, [r3, #10]
 800832c:	3b01      	subs	r3, #1
 800832e:	4013      	ands	r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <find_volume+0x270>
 8008334:	230d      	movs	r3, #13
 8008336:	e140      	b.n	80085ba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	3338      	adds	r3, #56	@ 0x38
 800833c:	3311      	adds	r3, #17
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe f846 	bl	80063d0 <ld_word>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800834c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834e:	891b      	ldrh	r3, [r3, #8]
 8008350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008352:	8992      	ldrh	r2, [r2, #12]
 8008354:	0952      	lsrs	r2, r2, #5
 8008356:	b292      	uxth	r2, r2
 8008358:	fbb3 f1f2 	udiv	r1, r3, r2
 800835c:	fb01 f202 	mul.w	r2, r1, r2
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <find_volume+0x2a8>
 8008368:	230d      	movs	r3, #13
 800836a:	e126      	b.n	80085ba <find_volume+0x4f2>
 800836c:	20003304 	.word	0x20003304

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008372:	3338      	adds	r3, #56	@ 0x38
 8008374:	3313      	adds	r3, #19
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe f82a 	bl	80063d0 <ld_word>
 800837c:	4603      	mov	r3, r0
 800837e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008382:	2b00      	cmp	r3, #0
 8008384:	d106      	bne.n	8008394 <find_volume+0x2cc>
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	3338      	adds	r3, #56	@ 0x38
 800838a:	3320      	adds	r3, #32
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe f837 	bl	8006400 <ld_dword>
 8008392:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008396:	3338      	adds	r3, #56	@ 0x38
 8008398:	330e      	adds	r3, #14
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe f818 	bl	80063d0 <ld_word>
 80083a0:	4603      	mov	r3, r0
 80083a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80083a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <find_volume+0x2e6>
 80083aa:	230d      	movs	r3, #13
 80083ac:	e105      	b.n	80085ba <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80083b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b2:	4413      	add	r3, r2
 80083b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083b6:	8911      	ldrh	r1, [r2, #8]
 80083b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083ba:	8992      	ldrh	r2, [r2, #12]
 80083bc:	0952      	lsrs	r2, r2, #5
 80083be:	b292      	uxth	r2, r2
 80083c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80083c4:	b292      	uxth	r2, r2
 80083c6:	4413      	add	r3, r2
 80083c8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80083ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d201      	bcs.n	80083d6 <find_volume+0x30e>
 80083d2:	230d      	movs	r3, #13
 80083d4:	e0f1      	b.n	80085ba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083de:	8952      	ldrh	r2, [r2, #10]
 80083e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <find_volume+0x328>
 80083ec:	230d      	movs	r3, #13
 80083ee:	e0e4      	b.n	80085ba <find_volume+0x4f2>
		fmt = FS_FAT32;
 80083f0:	2303      	movs	r3, #3
 80083f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d802      	bhi.n	8008406 <find_volume+0x33e>
 8008400:	2302      	movs	r3, #2
 8008402:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008408:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800840c:	4293      	cmp	r3, r2
 800840e:	d802      	bhi.n	8008416 <find_volume+0x34e>
 8008410:	2301      	movs	r3, #1
 8008412:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	1c9a      	adds	r2, r3, #2
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800841e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008420:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008422:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008424:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008428:	441a      	add	r2, r3
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800842e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	441a      	add	r2, r3
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008438:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800843c:	2b03      	cmp	r3, #3
 800843e:	d11e      	bne.n	800847e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	3338      	adds	r3, #56	@ 0x38
 8008444:	332a      	adds	r3, #42	@ 0x2a
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd ffc2 	bl	80063d0 <ld_word>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <find_volume+0x38e>
 8008452:	230d      	movs	r3, #13
 8008454:	e0b1      	b.n	80085ba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	891b      	ldrh	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <find_volume+0x39a>
 800845e:	230d      	movs	r3, #13
 8008460:	e0ab      	b.n	80085ba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008464:	3338      	adds	r3, #56	@ 0x38
 8008466:	332c      	adds	r3, #44	@ 0x2c
 8008468:	4618      	mov	r0, r3
 800846a:	f7fd ffc9 	bl	8006400 <ld_dword>
 800846e:	4602      	mov	r2, r0
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	647b      	str	r3, [r7, #68]	@ 0x44
 800847c:	e01f      	b.n	80084be <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800847e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008480:	891b      	ldrh	r3, [r3, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <find_volume+0x3c2>
 8008486:	230d      	movs	r3, #13
 8008488:	e097      	b.n	80085ba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800848a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800848e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008490:	441a      	add	r2, r3
 8008492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008494:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008496:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800849a:	2b02      	cmp	r3, #2
 800849c:	d103      	bne.n	80084a6 <find_volume+0x3de>
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	e00a      	b.n	80084bc <find_volume+0x3f4>
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	69da      	ldr	r2, [r3, #28]
 80084aa:	4613      	mov	r3, r2
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	4413      	add	r3, r2
 80084b0:	085a      	lsrs	r2, r3, #1
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084bc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	6a1a      	ldr	r2, [r3, #32]
 80084c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c4:	899b      	ldrh	r3, [r3, #12]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084ca:	440b      	add	r3, r1
 80084cc:	3b01      	subs	r3, #1
 80084ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084d0:	8989      	ldrh	r1, [r1, #12]
 80084d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d201      	bcs.n	80084de <find_volume+0x416>
 80084da:	230d      	movs	r3, #13
 80084dc:	e06d      	b.n	80085ba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	f04f 32ff 	mov.w	r2, #4294967295
 80084e4:	619a      	str	r2, [r3, #24]
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	2280      	movs	r2, #128	@ 0x80
 80084f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80084f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d149      	bne.n	8008590 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80084fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fe:	3338      	adds	r3, #56	@ 0x38
 8008500:	3330      	adds	r3, #48	@ 0x30
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd ff64 	bl	80063d0 <ld_word>
 8008508:	4603      	mov	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d140      	bne.n	8008590 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800850e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008510:	3301      	adds	r3, #1
 8008512:	4619      	mov	r1, r3
 8008514:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008516:	f7fe fa0b 	bl	8006930 <move_window>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d137      	bne.n	8008590 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	2200      	movs	r2, #0
 8008524:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	3338      	adds	r3, #56	@ 0x38
 800852a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd ff4e 	bl	80063d0 <ld_word>
 8008534:	4603      	mov	r3, r0
 8008536:	461a      	mov	r2, r3
 8008538:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800853c:	429a      	cmp	r2, r3
 800853e:	d127      	bne.n	8008590 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008542:	3338      	adds	r3, #56	@ 0x38
 8008544:	4618      	mov	r0, r3
 8008546:	f7fd ff5b 	bl	8006400 <ld_dword>
 800854a:	4603      	mov	r3, r0
 800854c:	4a1d      	ldr	r2, [pc, #116]	@ (80085c4 <find_volume+0x4fc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d11e      	bne.n	8008590 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	3338      	adds	r3, #56	@ 0x38
 8008556:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fd ff50 	bl	8006400 <ld_dword>
 8008560:	4603      	mov	r3, r0
 8008562:	4a19      	ldr	r2, [pc, #100]	@ (80085c8 <find_volume+0x500>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d113      	bne.n	8008590 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856a:	3338      	adds	r3, #56	@ 0x38
 800856c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008570:	4618      	mov	r0, r3
 8008572:	f7fd ff45 	bl	8006400 <ld_dword>
 8008576:	4602      	mov	r2, r0
 8008578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	3338      	adds	r3, #56	@ 0x38
 8008580:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008584:	4618      	mov	r0, r3
 8008586:	f7fd ff3b 	bl	8006400 <ld_dword>
 800858a:	4602      	mov	r2, r0
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008592:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008596:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008598:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <find_volume+0x504>)
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	3301      	adds	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <find_volume+0x504>)
 80085a2:	801a      	strh	r2, [r3, #0]
 80085a4:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <find_volume+0x504>)
 80085a6:	881a      	ldrh	r2, [r3, #0]
 80085a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085aa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	4a08      	ldr	r2, [pc, #32]	@ (80085d0 <find_volume+0x508>)
 80085b0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80085b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80085b4:	f7fe f954 	bl	8006860 <clear_lock>
#endif
	return FR_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3758      	adds	r7, #88	@ 0x58
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	41615252 	.word	0x41615252
 80085c8:	61417272 	.word	0x61417272
 80085cc:	20003308 	.word	0x20003308
 80085d0:	2000332c 	.word	0x2000332c

080085d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80085de:	2309      	movs	r3, #9
 80085e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01c      	beq.n	8008622 <validate+0x4e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d018      	beq.n	8008622 <validate+0x4e>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d013      	beq.n	8008622 <validate+0x4e>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	889a      	ldrh	r2, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	88db      	ldrh	r3, [r3, #6]
 8008604:	429a      	cmp	r2, r3
 8008606:	d10c      	bne.n	8008622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	4618      	mov	r0, r3
 8008610:	f7fd fe40 	bl	8006294 <disk_status>
 8008614:	4603      	mov	r3, r0
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <validate+0x4e>
			res = FR_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <validate+0x5a>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	e000      	b.n	8008630 <validate+0x5c>
 800862e:	2300      	movs	r3, #0
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	6013      	str	r3, [r2, #0]
	return res;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008652:	f107 0310 	add.w	r3, r7, #16
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fc9c 	bl	8007f94 <get_ldnumber>
 800865c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da01      	bge.n	8008668 <f_mount+0x28>
 8008664:	230b      	movs	r3, #11
 8008666:	e02b      	b.n	80086c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008668:	4a17      	ldr	r2, [pc, #92]	@ (80086c8 <f_mount+0x88>)
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008678:	69b8      	ldr	r0, [r7, #24]
 800867a:	f7fe f8f1 	bl	8006860 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	490d      	ldr	r1, [pc, #52]	@ (80086c8 <f_mount+0x88>)
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <f_mount+0x66>
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d001      	beq.n	80086aa <f_mount+0x6a>
 80086a6:	2300      	movs	r3, #0
 80086a8:	e00a      	b.n	80086c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80086aa:	f107 010c 	add.w	r1, r7, #12
 80086ae:	f107 0308 	add.w	r3, r7, #8
 80086b2:	2200      	movs	r2, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fd07 	bl	80080c8 <find_volume>
 80086ba:	4603      	mov	r3, r0
 80086bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80086be:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3720      	adds	r7, #32
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20003304 	.word	0x20003304

080086cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b09a      	sub	sp, #104	@ 0x68
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	4613      	mov	r3, r2
 80086d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <f_open+0x18>
 80086e0:	2309      	movs	r3, #9
 80086e2:	e1b7      	b.n	8008a54 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086ec:	79fa      	ldrb	r2, [r7, #7]
 80086ee:	f107 0114 	add.w	r1, r7, #20
 80086f2:	f107 0308 	add.w	r3, r7, #8
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fce6 	bl	80080c8 <find_volume>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008702:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 819b 	bne.w	8008a42 <f_open+0x376>
		dj.obj.fs = fs;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff fbc5 	bl	8007ea8 <follow_path>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008724:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008728:	2b00      	cmp	r3, #0
 800872a:	d118      	bne.n	800875e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800872c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008730:	b25b      	sxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	da03      	bge.n	800873e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008736:	2306      	movs	r3, #6
 8008738:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800873c:	e00f      	b.n	800875e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b01      	cmp	r3, #1
 8008742:	bf8c      	ite	hi
 8008744:	2301      	movhi	r3, #1
 8008746:	2300      	movls	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	f107 0318 	add.w	r3, r7, #24
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7fd ff3c 	bl	80065d0 <chk_lock>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	f003 031c 	and.w	r3, r3, #28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d07f      	beq.n	8008868 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008768:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800876c:	2b00      	cmp	r3, #0
 800876e:	d017      	beq.n	80087a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008770:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008774:	2b04      	cmp	r3, #4
 8008776:	d10e      	bne.n	8008796 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008778:	f7fd ff86 	bl	8006688 <enq_lock>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d006      	beq.n	8008790 <f_open+0xc4>
 8008782:	f107 0318 	add.w	r3, r7, #24
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff f8de 	bl	8007948 <dir_register>
 800878c:	4603      	mov	r3, r0
 800878e:	e000      	b.n	8008792 <f_open+0xc6>
 8008790:	2312      	movs	r3, #18
 8008792:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	f043 0308 	orr.w	r3, r3, #8
 800879c:	71fb      	strb	r3, [r7, #7]
 800879e:	e010      	b.n	80087c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80087a0:	7fbb      	ldrb	r3, [r7, #30]
 80087a2:	f003 0311 	and.w	r3, r3, #17
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <f_open+0xe6>
					res = FR_DENIED;
 80087aa:	2307      	movs	r3, #7
 80087ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80087b0:	e007      	b.n	80087c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <f_open+0xf6>
 80087bc:	2308      	movs	r3, #8
 80087be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d168      	bne.n	800889c <f_open+0x1d0>
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d063      	beq.n	800889c <f_open+0x1d0>
				dw = GET_FATTIME();
 80087d4:	f7fd fcfc 	bl	80061d0 <get_fattime>
 80087d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	330e      	adds	r3, #14
 80087de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fe4b 	bl	800647c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e8:	3316      	adds	r3, #22
 80087ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd fe45 	bl	800647c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	330b      	adds	r3, #11
 80087f6:	2220      	movs	r2, #32
 80087f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe fe1a 	bl	800743a <ld_clust>
 8008806:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800880c:	2200      	movs	r2, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fe32 	bl	8007478 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	331c      	adds	r3, #28
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd fe2e 	bl	800647c <st_dword>
					fs->wflag = 1;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2201      	movs	r2, #1
 8008824:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008828:	2b00      	cmp	r3, #0
 800882a:	d037      	beq.n	800889c <f_open+0x1d0>
						dw = fs->winsect;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008830:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008832:	f107 0318 	add.w	r3, r7, #24
 8008836:	2200      	movs	r2, #0
 8008838:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fb22 	bl	8006e84 <remove_chain>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008846:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800884a:	2b00      	cmp	r3, #0
 800884c:	d126      	bne.n	800889c <f_open+0x1d0>
							res = move_window(fs, dw);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe f86c 	bl	8006930 <move_window>
 8008858:	4603      	mov	r3, r0
 800885a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008862:	3a01      	subs	r2, #1
 8008864:	615a      	str	r2, [r3, #20]
 8008866:	e019      	b.n	800889c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008868:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800886c:	2b00      	cmp	r3, #0
 800886e:	d115      	bne.n	800889c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008870:	7fbb      	ldrb	r3, [r7, #30]
 8008872:	f003 0310 	and.w	r3, r3, #16
 8008876:	2b00      	cmp	r3, #0
 8008878:	d003      	beq.n	8008882 <f_open+0x1b6>
					res = FR_NO_FILE;
 800887a:	2304      	movs	r3, #4
 800887c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008880:	e00c      	b.n	800889c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <f_open+0x1d0>
 800888c:	7fbb      	ldrb	r3, [r7, #30]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <f_open+0x1d0>
						res = FR_DENIED;
 8008896:	2307      	movs	r3, #7
 8008898:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800889c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d126      	bne.n	80088f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80088be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	bf8c      	ite	hi
 80088ca:	2301      	movhi	r3, #1
 80088cc:	2300      	movls	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	f107 0318 	add.w	r3, r7, #24
 80088d6:	4611      	mov	r1, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd fef7 	bl	80066cc <inc_lock>
 80088de:	4602      	mov	r2, r0
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <f_open+0x226>
 80088ec:	2302      	movs	r3, #2
 80088ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 80a3 	bne.w	8008a42 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fd99 	bl	800743a <ld_clust>
 8008908:	4602      	mov	r2, r0
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	331c      	adds	r3, #28
 8008912:	4618      	mov	r0, r3
 8008914:	f7fd fd74 	bl	8006400 <ld_dword>
 8008918:	4602      	mov	r2, r0
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	88da      	ldrh	r2, [r3, #6]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	79fa      	ldrb	r2, [r7, #7]
 8008936:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3330      	adds	r3, #48	@ 0x30
 800894e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008952:	2100      	movs	r1, #0
 8008954:	4618      	mov	r0, r3
 8008956:	f7fd fdde 	bl	8006516 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d06e      	beq.n	8008a42 <f_open+0x376>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d06a      	beq.n	8008a42 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	895b      	ldrh	r3, [r3, #10]
 8008978:	461a      	mov	r2, r3
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	899b      	ldrh	r3, [r3, #12]
 800897e:	fb02 f303 	mul.w	r3, r2, r3
 8008982:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008990:	e016      	b.n	80089c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe f887 	bl	8006aaa <get_fat>
 800899c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800899e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d802      	bhi.n	80089aa <f_open+0x2de>
 80089a4:	2302      	movs	r3, #2
 80089a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80089aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d102      	bne.n	80089b8 <f_open+0x2ec>
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d103      	bne.n	80089d0 <f_open+0x304>
 80089c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d8e0      	bhi.n	8008992 <f_open+0x2c6>
				}
				fp->clust = clst;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80089d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d131      	bne.n	8008a42 <f_open+0x376>
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	899b      	ldrh	r3, [r3, #12]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80089ea:	fb01 f202 	mul.w	r2, r1, r2
 80089ee:	1a9b      	subs	r3, r3, r2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d026      	beq.n	8008a42 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe f837 	bl	8006a6c <clust2sect>
 80089fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d103      	bne.n	8008a0e <f_open+0x342>
						res = FR_INT_ERR;
 8008a06:	2302      	movs	r3, #2
 8008a08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008a0c:	e019      	b.n	8008a42 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	899b      	ldrh	r3, [r3, #12]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a1c:	441a      	add	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	7858      	ldrb	r0, [r3, #1]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1a      	ldr	r2, [r3, #32]
 8008a30:	2301      	movs	r3, #1
 8008a32:	f7fd fc6f 	bl	8006314 <disk_read>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <f_open+0x376>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <f_open+0x384>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3768      	adds	r7, #104	@ 0x68
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	@ 0x30
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f107 0210 	add.w	r2, r7, #16
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff fda9 	bl	80085d4 <validate>
 8008a82:	4603      	mov	r3, r0
 8008a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d107      	bne.n	8008aa0 <f_write+0x44>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	7d5b      	ldrb	r3, [r3, #21]
 8008a94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <f_write+0x4a>
 8008aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aa4:	e16a      	b.n	8008d7c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	7d1b      	ldrb	r3, [r3, #20]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <f_write+0x5a>
 8008ab2:	2307      	movs	r3, #7
 8008ab4:	e162      	b.n	8008d7c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	441a      	add	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f080 814c 	bcs.w	8008d60 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	43db      	mvns	r3, r3
 8008ace:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008ad0:	e146      	b.n	8008d60 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	8992      	ldrh	r2, [r2, #12]
 8008ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ade:	fb01 f202 	mul.w	r2, r1, r2
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 80f1 	bne.w	8008ccc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	8992      	ldrh	r2, [r2, #12]
 8008af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	8952      	ldrh	r2, [r2, #10]
 8008afa:	3a01      	subs	r2, #1
 8008afc:	4013      	ands	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d143      	bne.n	8008b8e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10c      	bne.n	8008b28 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d11a      	bne.n	8008b50 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fa15 	bl	8006f4e <create_chain>
 8008b24:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008b26:	e013      	b.n	8008b50 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	4619      	mov	r1, r3
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7fe faa1 	bl	800707e <clmt_clust>
 8008b3c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008b3e:	e007      	b.n	8008b50 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f7fe fa00 	bl	8006f4e <create_chain>
 8008b4e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 8109 	beq.w	8008d6a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d104      	bne.n	8008b68 <f_write+0x10c>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2202      	movs	r2, #2
 8008b62:	755a      	strb	r2, [r3, #21]
 8008b64:	2302      	movs	r3, #2
 8008b66:	e109      	b.n	8008d7c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d104      	bne.n	8008b7a <f_write+0x11e>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	755a      	strb	r2, [r3, #21]
 8008b76:	2301      	movs	r3, #1
 8008b78:	e100      	b.n	8008d7c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b7e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <f_write+0x132>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b8c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	7d1b      	ldrb	r3, [r3, #20]
 8008b92:	b25b      	sxtb	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	da18      	bge.n	8008bca <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	7858      	ldrb	r0, [r3, #1]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f7fd fbd4 	bl	8006354 <disk_write>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <f_write+0x160>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	755a      	strb	r2, [r3, #21]
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0df      	b.n	8008d7c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	7d1b      	ldrb	r3, [r3, #20]
 8008bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7fd ff4a 	bl	8006a6c <clust2sect>
 8008bd8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <f_write+0x18e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2202      	movs	r2, #2
 8008be4:	755a      	strb	r2, [r3, #21]
 8008be6:	2302      	movs	r3, #2
 8008be8:	e0c8      	b.n	8008d7c <f_write+0x320>
			sect += csect;
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	4413      	add	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	899b      	ldrh	r3, [r3, #12]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bfe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d043      	beq.n	8008c8e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	8952      	ldrh	r2, [r2, #10]
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d905      	bls.n	8008c20 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	895b      	ldrh	r3, [r3, #10]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	7858      	ldrb	r0, [r3, #1]
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	69f9      	ldr	r1, [r7, #28]
 8008c2a:	f7fd fb93 	bl	8006354 <disk_write>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <f_write+0x1e2>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2201      	movs	r2, #1
 8008c38:	755a      	strb	r2, [r3, #21]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e09e      	b.n	8008d7c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a1a      	ldr	r2, [r3, #32]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	6a3a      	ldr	r2, [r7, #32]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d918      	bls.n	8008c7e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1a      	ldr	r2, [r3, #32]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	8992      	ldrh	r2, [r2, #12]
 8008c5e:	fb02 f303 	mul.w	r3, r2, r3
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	18d1      	adds	r1, r2, r3
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	899b      	ldrh	r3, [r3, #12]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f7fd fc32 	bl	80064d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7d1b      	ldrb	r3, [r3, #20]
 8008c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	899b      	ldrh	r3, [r3, #12]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008c8c:	e04b      	b.n	8008d26 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d016      	beq.n	8008cc6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	699a      	ldr	r2, [r3, #24]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d210      	bcs.n	8008cc6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	7858      	ldrb	r0, [r3, #1]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008cae:	2301      	movs	r3, #1
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	f7fd fb2f 	bl	8006314 <disk_read>
 8008cb6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	755a      	strb	r2, [r3, #21]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e05a      	b.n	8008d7c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	899b      	ldrh	r3, [r3, #12]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	8992      	ldrh	r2, [r2, #12]
 8008cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cde:	fb01 f202 	mul.w	r2, r1, r2
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	1ac3      	subs	r3, r0, r3
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d901      	bls.n	8008cf4 <f_write+0x298>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	8992      	ldrh	r2, [r2, #12]
 8008d02:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d06:	fb00 f202 	mul.w	r2, r0, r2
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d10:	69f9      	ldr	r1, [r7, #28]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fbde 	bl	80064d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	7d1b      	ldrb	r3, [r3, #20]
 8008d1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	4413      	add	r3, r2
 8008d2c:	61fb      	str	r3, [r7, #28]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	441a      	add	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	619a      	str	r2, [r3, #24]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	bf38      	it	cc
 8008d46:	461a      	movcc	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	60da      	str	r2, [r3, #12]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	441a      	add	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f47f aeb5 	bne.w	8008ad2 <f_write+0x76>
 8008d68:	e000      	b.n	8008d6c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d6a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	7d1b      	ldrb	r3, [r3, #20]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3730      	adds	r7, #48	@ 0x30
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f107 0208 	add.w	r2, r7, #8
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fc1d 	bl	80085d4 <validate>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d168      	bne.n	8008e76 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7d1b      	ldrb	r3, [r3, #20]
 8008da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d062      	beq.n	8008e76 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da15      	bge.n	8008de6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	7858      	ldrb	r0, [r3, #1]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a1a      	ldr	r2, [r3, #32]
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f7fd fac3 	bl	8006354 <disk_write>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <f_sync+0x54>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e04f      	b.n	8008e78 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7d1b      	ldrb	r3, [r3, #20]
 8008ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008de6:	f7fd f9f3 	bl	80061d0 <get_fattime>
 8008dea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7fd fd9b 	bl	8006930 <move_window>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d138      	bne.n	8008e76 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e08:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	330b      	adds	r3, #11
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	330b      	adds	r3, #11
 8008e14:	f042 0220 	orr.w	r2, r2, #32
 8008e18:	b2d2      	uxtb	r2, r2
 8008e1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	461a      	mov	r2, r3
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	f7fe fb26 	bl	8007478 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f103 021c 	add.w	r2, r3, #28
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	4619      	mov	r1, r3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	f7fd fb1f 	bl	800647c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3316      	adds	r3, #22
 8008e42:	6939      	ldr	r1, [r7, #16]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fd fb19 	bl	800647c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3312      	adds	r3, #18
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fd faf8 	bl	8006446 <st_word>
					fs->wflag = 1;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd fd94 	bl	800698c <sync_fs>
 8008e64:	4603      	mov	r3, r0
 8008e66:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7d1b      	ldrb	r3, [r3, #20]
 8008e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ff7b 	bl	8008d84 <f_sync>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d118      	bne.n	8008eca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f107 0208 	add.w	r2, r7, #8
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff fb97 	bl	80085d4 <validate>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10c      	bne.n	8008eca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd fc97 	bl	80067e8 <dec_lock>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b090      	sub	sp, #64	@ 0x40
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fb74 	bl	80085d4 <validate>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d103      	bne.n	8008f02 <f_lseek+0x2e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	7d5b      	ldrb	r3, [r3, #21]
 8008efe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008f02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <f_lseek+0x3c>
 8008f0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f0e:	e201      	b.n	8009314 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80d9 	beq.w	80090cc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d15a      	bne.n	8008fd8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f26:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	1d1a      	adds	r2, r3, #4
 8008f2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	2302      	movs	r3, #2
 8008f34:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d03a      	beq.n	8008fb8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	2300      	movs	r3, #0
 8008f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4c:	3302      	adds	r3, #2
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	3301      	adds	r3, #1
 8008f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fd fda3 	bl	8006aaa <get_fat>
 8008f64:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d804      	bhi.n	8008f76 <f_lseek+0xa2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	755a      	strb	r2, [r3, #21]
 8008f72:	2302      	movs	r3, #2
 8008f74:	e1ce      	b.n	8009314 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7c:	d104      	bne.n	8008f88 <f_lseek+0xb4>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	755a      	strb	r2, [r3, #21]
 8008f84:	2301      	movs	r3, #1
 8008f86:	e1c5      	b.n	8009314 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d0de      	beq.n	8008f50 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d809      	bhi.n	8008fae <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d3c4      	bcc.n	8008f42 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fbe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d803      	bhi.n	8008fd0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	e19f      	b.n	8009310 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008fd0:	2311      	movs	r3, #17
 8008fd2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008fd6:	e19b      	b.n	8009310 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d902      	bls.n	8008fe8 <f_lseek+0x114>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 818d 	beq.w	8009310 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7fe f83e 	bl	800707e <clmt_clust>
 8009002:	4602      	mov	r2, r0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7fd fd2b 	bl	8006a6c <clust2sect>
 8009016:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <f_lseek+0x154>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	755a      	strb	r2, [r3, #21]
 8009024:	2302      	movs	r3, #2
 8009026:	e175      	b.n	8009314 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	3b01      	subs	r3, #1
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	8992      	ldrh	r2, [r2, #12]
 8009030:	fbb3 f3f2 	udiv	r3, r3, r2
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	8952      	ldrh	r2, [r2, #10]
 8009038:	3a01      	subs	r2, #1
 800903a:	4013      	ands	r3, r2
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4413      	add	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	8992      	ldrh	r2, [r2, #12]
 800904a:	fbb3 f1f2 	udiv	r1, r3, r2
 800904e:	fb01 f202 	mul.w	r2, r1, r2
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 815b 	beq.w	8009310 <f_lseek+0x43c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	429a      	cmp	r2, r3
 8009062:	f000 8155 	beq.w	8009310 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7d1b      	ldrb	r3, [r3, #20]
 800906a:	b25b      	sxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	da18      	bge.n	80090a2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	7858      	ldrb	r0, [r3, #1]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1a      	ldr	r2, [r3, #32]
 800907e:	2301      	movs	r3, #1
 8009080:	f7fd f968 	bl	8006354 <disk_write>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <f_lseek+0x1c0>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	755a      	strb	r2, [r3, #21]
 8009090:	2301      	movs	r3, #1
 8009092:	e13f      	b.n	8009314 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7d1b      	ldrb	r3, [r3, #20]
 8009098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	7858      	ldrb	r0, [r3, #1]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80090ac:	2301      	movs	r3, #1
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	f7fd f930 	bl	8006314 <disk_read>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <f_lseek+0x1f0>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	755a      	strb	r2, [r3, #21]
 80090c0:	2301      	movs	r3, #1
 80090c2:	e127      	b.n	8009314 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	621a      	str	r2, [r3, #32]
 80090ca:	e121      	b.n	8009310 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d908      	bls.n	80090e8 <f_lseek+0x214>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090f6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 80b5 	beq.w	800926a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	895b      	ldrh	r3, [r3, #10]
 8009104:	461a      	mov	r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	899b      	ldrh	r3, [r3, #12]
 800910a:	fb02 f303 	mul.w	r3, r2, r3
 800910e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01b      	beq.n	800914e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	1e5a      	subs	r2, r3, #1
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	1e59      	subs	r1, r3, #1
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800912a:	429a      	cmp	r2, r3
 800912c:	d30f      	bcc.n	800914e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	1e5a      	subs	r2, r3, #1
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	425b      	negs	r3, r3
 8009136:	401a      	ands	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800914c:	e022      	b.n	8009194 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	2b00      	cmp	r3, #0
 8009158:	d119      	bne.n	800918e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd fef5 	bl	8006f4e <create_chain>
 8009164:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	2b01      	cmp	r3, #1
 800916a:	d104      	bne.n	8009176 <f_lseek+0x2a2>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2202      	movs	r2, #2
 8009170:	755a      	strb	r2, [r3, #21]
 8009172:	2302      	movs	r3, #2
 8009174:	e0ce      	b.n	8009314 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d104      	bne.n	8009188 <f_lseek+0x2b4>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	755a      	strb	r2, [r3, #21]
 8009184:	2301      	movs	r3, #1
 8009186:	e0c5      	b.n	8009314 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800918c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009192:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	2b00      	cmp	r3, #0
 8009198:	d067      	beq.n	800926a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800919a:	e03a      	b.n	8009212 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	441a      	add	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fd fec4 	bl	8006f4e <create_chain>
 80091c6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d108      	bne.n	80091e0 <f_lseek+0x30c>
							ofs = 0; break;
 80091ce:	2300      	movs	r3, #0
 80091d0:	603b      	str	r3, [r7, #0]
 80091d2:	e022      	b.n	800921a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fd fc66 	bl	8006aaa <get_fat>
 80091de:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d104      	bne.n	80091f2 <f_lseek+0x31e>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	755a      	strb	r2, [r3, #21]
 80091ee:	2301      	movs	r3, #1
 80091f0:	e090      	b.n	8009314 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d904      	bls.n	8009202 <f_lseek+0x32e>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091fe:	429a      	cmp	r2, r3
 8009200:	d304      	bcc.n	800920c <f_lseek+0x338>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2202      	movs	r2, #2
 8009206:	755a      	strb	r2, [r3, #21]
 8009208:	2302      	movs	r3, #2
 800920a:	e083      	b.n	8009314 <f_lseek+0x440>
					fp->clust = clst;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009210:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	429a      	cmp	r2, r3
 8009218:	d8c0      	bhi.n	800919c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	441a      	add	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	899b      	ldrh	r3, [r3, #12]
 800922a:	461a      	mov	r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009232:	fb01 f202 	mul.w	r2, r1, r2
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d016      	beq.n	800926a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009240:	4618      	mov	r0, r3
 8009242:	f7fd fc13 	bl	8006a6c <clust2sect>
 8009246:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <f_lseek+0x384>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	755a      	strb	r2, [r3, #21]
 8009254:	2302      	movs	r3, #2
 8009256:	e05d      	b.n	8009314 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	899b      	ldrh	r3, [r3, #12]
 800925c:	461a      	mov	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	fbb3 f3f2 	udiv	r3, r3, r2
 8009264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009266:	4413      	add	r3, r2
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	429a      	cmp	r2, r3
 8009274:	d90a      	bls.n	800928c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7d1b      	ldrb	r3, [r3, #20]
 8009282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009286:	b2da      	uxtb	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	8992      	ldrh	r2, [r2, #12]
 8009294:	fbb3 f1f2 	udiv	r1, r3, r2
 8009298:	fb01 f202 	mul.w	r2, r1, r2
 800929c:	1a9b      	subs	r3, r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d036      	beq.n	8009310 <f_lseek+0x43c>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d031      	beq.n	8009310 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7d1b      	ldrb	r3, [r3, #20]
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da18      	bge.n	80092e8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	7858      	ldrb	r0, [r3, #1]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	2301      	movs	r3, #1
 80092c6:	f7fd f845 	bl	8006354 <disk_write>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <f_lseek+0x406>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	755a      	strb	r2, [r3, #21]
 80092d6:	2301      	movs	r3, #1
 80092d8:	e01c      	b.n	8009314 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	7d1b      	ldrb	r3, [r3, #20]
 80092de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	7858      	ldrb	r0, [r3, #1]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092f2:	2301      	movs	r3, #1
 80092f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f6:	f7fd f80d 	bl	8006314 <disk_read>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d004      	beq.n	800930a <f_lseek+0x436>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	755a      	strb	r2, [r3, #21]
 8009306:	2301      	movs	r3, #1
 8009308:	e004      	b.n	8009314 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800930e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009310:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009314:	4618      	mov	r0, r3
 8009316:	3740      	adds	r7, #64	@ 0x40
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800932a:	2301      	movs	r3, #1
 800932c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009332:	4b1f      	ldr	r3, [pc, #124]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009334:	7a5b      	ldrb	r3, [r3, #9]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d131      	bne.n	80093a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800933c:	4b1c      	ldr	r3, [pc, #112]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 800933e:	7a5b      	ldrb	r3, [r3, #9]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	4b1a      	ldr	r3, [pc, #104]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009346:	2100      	movs	r1, #0
 8009348:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800934a:	4b19      	ldr	r3, [pc, #100]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 800934c:	7a5b      	ldrb	r3, [r3, #9]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	4a17      	ldr	r2, [pc, #92]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800935a:	4b15      	ldr	r3, [pc, #84]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 800935c:	7a5b      	ldrb	r3, [r3, #9]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	461a      	mov	r2, r3
 8009362:	4b13      	ldr	r3, [pc, #76]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009364:	4413      	add	r3, r2
 8009366:	79fa      	ldrb	r2, [r7, #7]
 8009368:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800936a:	4b11      	ldr	r3, [pc, #68]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 800936c:	7a5b      	ldrb	r3, [r3, #9]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	b2d1      	uxtb	r1, r2
 8009374:	4a0e      	ldr	r2, [pc, #56]	@ (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009376:	7251      	strb	r1, [r2, #9]
 8009378:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800937a:	7dbb      	ldrb	r3, [r7, #22]
 800937c:	3330      	adds	r3, #48	@ 0x30
 800937e:	b2da      	uxtb	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3301      	adds	r3, #1
 8009388:	223a      	movs	r2, #58	@ 0x3a
 800938a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3302      	adds	r3, #2
 8009390:	222f      	movs	r2, #47	@ 0x2f
 8009392:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	3303      	adds	r3, #3
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	2000352c 	.word	0x2000352c

080093b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093be:	2200      	movs	r2, #0
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff ffaa 	bl	800931c <FATFS_LinkDriverEx>
 80093c8:	4603      	mov	r3, r0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80093e4:	d802      	bhi.n	80093ec <ff_convert+0x18>
		c = chr;
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	81fb      	strh	r3, [r7, #14]
 80093ea:	e025      	b.n	8009438 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80093f2:	88fb      	ldrh	r3, [r7, #6]
 80093f4:	2bff      	cmp	r3, #255	@ 0xff
 80093f6:	d805      	bhi.n	8009404 <ff_convert+0x30>
 80093f8:	88fb      	ldrh	r3, [r7, #6]
 80093fa:	3b80      	subs	r3, #128	@ 0x80
 80093fc:	4a12      	ldr	r2, [pc, #72]	@ (8009448 <ff_convert+0x74>)
 80093fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009402:	e000      	b.n	8009406 <ff_convert+0x32>
 8009404:	2300      	movs	r3, #0
 8009406:	81fb      	strh	r3, [r7, #14]
 8009408:	e016      	b.n	8009438 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800940a:	2300      	movs	r3, #0
 800940c:	81fb      	strh	r3, [r7, #14]
 800940e:	e009      	b.n	8009424 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	4a0d      	ldr	r2, [pc, #52]	@ (8009448 <ff_convert+0x74>)
 8009414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009418:	88fa      	ldrh	r2, [r7, #6]
 800941a:	429a      	cmp	r2, r3
 800941c:	d006      	beq.n	800942c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800941e:	89fb      	ldrh	r3, [r7, #14]
 8009420:	3301      	adds	r3, #1
 8009422:	81fb      	strh	r3, [r7, #14]
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	2b7f      	cmp	r3, #127	@ 0x7f
 8009428:	d9f2      	bls.n	8009410 <ff_convert+0x3c>
 800942a:	e000      	b.n	800942e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800942c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800942e:	89fb      	ldrh	r3, [r7, #14]
 8009430:	3380      	adds	r3, #128	@ 0x80
 8009432:	b29b      	uxth	r3, r3
 8009434:	b2db      	uxtb	r3, r3
 8009436:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009438:	89fb      	ldrh	r3, [r7, #14]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	0800a71c 	.word	0x0800a71c

0800944c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800945c:	d201      	bcs.n	8009462 <ff_wtoupper+0x16>
 800945e:	4b3e      	ldr	r3, [pc, #248]	@ (8009558 <ff_wtoupper+0x10c>)
 8009460:	e000      	b.n	8009464 <ff_wtoupper+0x18>
 8009462:	4b3e      	ldr	r3, [pc, #248]	@ (800955c <ff_wtoupper+0x110>)
 8009464:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	1c9a      	adds	r2, r3, #2
 800946a:	617a      	str	r2, [r7, #20]
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009470:	8a7b      	ldrh	r3, [r7, #18]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d068      	beq.n	8009548 <ff_wtoupper+0xfc>
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	8a7b      	ldrh	r3, [r7, #18]
 800947a:	429a      	cmp	r2, r3
 800947c:	d364      	bcc.n	8009548 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	1c9a      	adds	r2, r3, #2
 8009482:	617a      	str	r2, [r7, #20]
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	823b      	strh	r3, [r7, #16]
 8009488:	8a3b      	ldrh	r3, [r7, #16]
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	81fb      	strh	r3, [r7, #14]
 800948e:	8a3b      	ldrh	r3, [r7, #16]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009494:	88fa      	ldrh	r2, [r7, #6]
 8009496:	8a79      	ldrh	r1, [r7, #18]
 8009498:	8a3b      	ldrh	r3, [r7, #16]
 800949a:	440b      	add	r3, r1
 800949c:	429a      	cmp	r2, r3
 800949e:	da49      	bge.n	8009534 <ff_wtoupper+0xe8>
			switch (cmd) {
 80094a0:	89fb      	ldrh	r3, [r7, #14]
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	d84f      	bhi.n	8009546 <ff_wtoupper+0xfa>
 80094a6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ac <ff_wtoupper+0x60>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	080094d1 	.word	0x080094d1
 80094b0:	080094e3 	.word	0x080094e3
 80094b4:	080094f9 	.word	0x080094f9
 80094b8:	08009501 	.word	0x08009501
 80094bc:	08009509 	.word	0x08009509
 80094c0:	08009511 	.word	0x08009511
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009529 	.word	0x08009529
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	8a7b      	ldrh	r3, [r7, #18]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4413      	add	r3, r2
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	80fb      	strh	r3, [r7, #6]
 80094e0:	e027      	b.n	8009532 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80094e2:	88fa      	ldrh	r2, [r7, #6]
 80094e4:	8a7b      	ldrh	r3, [r7, #18]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	88fa      	ldrh	r2, [r7, #6]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	80fb      	strh	r3, [r7, #6]
 80094f6:	e01c      	b.n	8009532 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80094f8:	88fb      	ldrh	r3, [r7, #6]
 80094fa:	3b10      	subs	r3, #16
 80094fc:	80fb      	strh	r3, [r7, #6]
 80094fe:	e018      	b.n	8009532 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	3b20      	subs	r3, #32
 8009504:	80fb      	strh	r3, [r7, #6]
 8009506:	e014      	b.n	8009532 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	3b30      	subs	r3, #48	@ 0x30
 800950c:	80fb      	strh	r3, [r7, #6]
 800950e:	e010      	b.n	8009532 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	3b1a      	subs	r3, #26
 8009514:	80fb      	strh	r3, [r7, #6]
 8009516:	e00c      	b.n	8009532 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	3308      	adds	r3, #8
 800951c:	80fb      	strh	r3, [r7, #6]
 800951e:	e008      	b.n	8009532 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	3b50      	subs	r3, #80	@ 0x50
 8009524:	80fb      	strh	r3, [r7, #6]
 8009526:	e004      	b.n	8009532 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009528:	88fb      	ldrh	r3, [r7, #6]
 800952a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800952e:	80fb      	strh	r3, [r7, #6]
 8009530:	bf00      	nop
			}
			break;
 8009532:	e008      	b.n	8009546 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009534:	89fb      	ldrh	r3, [r7, #14]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d195      	bne.n	8009466 <ff_wtoupper+0x1a>
 800953a:	8a3b      	ldrh	r3, [r7, #16]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4413      	add	r3, r2
 8009542:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009544:	e78f      	b.n	8009466 <ff_wtoupper+0x1a>
			break;
 8009546:	bf00      	nop
	}

	return chr;
 8009548:	88fb      	ldrh	r3, [r7, #6]
}
 800954a:	4618      	mov	r0, r3
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	0800a81c 	.word	0x0800a81c
 800955c:	0800aa10 	.word	0x0800aa10

08009560 <std>:
 8009560:	2300      	movs	r3, #0
 8009562:	b510      	push	{r4, lr}
 8009564:	4604      	mov	r4, r0
 8009566:	e9c0 3300 	strd	r3, r3, [r0]
 800956a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800956e:	6083      	str	r3, [r0, #8]
 8009570:	8181      	strh	r1, [r0, #12]
 8009572:	6643      	str	r3, [r0, #100]	@ 0x64
 8009574:	81c2      	strh	r2, [r0, #14]
 8009576:	6183      	str	r3, [r0, #24]
 8009578:	4619      	mov	r1, r3
 800957a:	2208      	movs	r2, #8
 800957c:	305c      	adds	r0, #92	@ 0x5c
 800957e:	f000 f9f9 	bl	8009974 <memset>
 8009582:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <std+0x58>)
 8009584:	6263      	str	r3, [r4, #36]	@ 0x24
 8009586:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <std+0x5c>)
 8009588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800958a:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <std+0x60>)
 800958c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800958e:	4b0d      	ldr	r3, [pc, #52]	@ (80095c4 <std+0x64>)
 8009590:	6323      	str	r3, [r4, #48]	@ 0x30
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <std+0x68>)
 8009594:	6224      	str	r4, [r4, #32]
 8009596:	429c      	cmp	r4, r3
 8009598:	d006      	beq.n	80095a8 <std+0x48>
 800959a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800959e:	4294      	cmp	r4, r2
 80095a0:	d002      	beq.n	80095a8 <std+0x48>
 80095a2:	33d0      	adds	r3, #208	@ 0xd0
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d105      	bne.n	80095b4 <std+0x54>
 80095a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b0:	f000 ba58 	b.w	8009a64 <__retarget_lock_init_recursive>
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	bf00      	nop
 80095b8:	080097c5 	.word	0x080097c5
 80095bc:	080097e7 	.word	0x080097e7
 80095c0:	0800981f 	.word	0x0800981f
 80095c4:	08009843 	.word	0x08009843
 80095c8:	20003538 	.word	0x20003538

080095cc <stdio_exit_handler>:
 80095cc:	4a02      	ldr	r2, [pc, #8]	@ (80095d8 <stdio_exit_handler+0xc>)
 80095ce:	4903      	ldr	r1, [pc, #12]	@ (80095dc <stdio_exit_handler+0x10>)
 80095d0:	4803      	ldr	r0, [pc, #12]	@ (80095e0 <stdio_exit_handler+0x14>)
 80095d2:	f000 b869 	b.w	80096a8 <_fwalk_sglue>
 80095d6:	bf00      	nop
 80095d8:	20000060 	.word	0x20000060
 80095dc:	0800a305 	.word	0x0800a305
 80095e0:	20000070 	.word	0x20000070

080095e4 <cleanup_stdio>:
 80095e4:	6841      	ldr	r1, [r0, #4]
 80095e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009618 <cleanup_stdio+0x34>)
 80095e8:	4299      	cmp	r1, r3
 80095ea:	b510      	push	{r4, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	d001      	beq.n	80095f4 <cleanup_stdio+0x10>
 80095f0:	f000 fe88 	bl	800a304 <_fflush_r>
 80095f4:	68a1      	ldr	r1, [r4, #8]
 80095f6:	4b09      	ldr	r3, [pc, #36]	@ (800961c <cleanup_stdio+0x38>)
 80095f8:	4299      	cmp	r1, r3
 80095fa:	d002      	beq.n	8009602 <cleanup_stdio+0x1e>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 fe81 	bl	800a304 <_fflush_r>
 8009602:	68e1      	ldr	r1, [r4, #12]
 8009604:	4b06      	ldr	r3, [pc, #24]	@ (8009620 <cleanup_stdio+0x3c>)
 8009606:	4299      	cmp	r1, r3
 8009608:	d004      	beq.n	8009614 <cleanup_stdio+0x30>
 800960a:	4620      	mov	r0, r4
 800960c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009610:	f000 be78 	b.w	800a304 <_fflush_r>
 8009614:	bd10      	pop	{r4, pc}
 8009616:	bf00      	nop
 8009618:	20003538 	.word	0x20003538
 800961c:	200035a0 	.word	0x200035a0
 8009620:	20003608 	.word	0x20003608

08009624 <global_stdio_init.part.0>:
 8009624:	b510      	push	{r4, lr}
 8009626:	4b0b      	ldr	r3, [pc, #44]	@ (8009654 <global_stdio_init.part.0+0x30>)
 8009628:	4c0b      	ldr	r4, [pc, #44]	@ (8009658 <global_stdio_init.part.0+0x34>)
 800962a:	4a0c      	ldr	r2, [pc, #48]	@ (800965c <global_stdio_init.part.0+0x38>)
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	4620      	mov	r0, r4
 8009630:	2200      	movs	r2, #0
 8009632:	2104      	movs	r1, #4
 8009634:	f7ff ff94 	bl	8009560 <std>
 8009638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800963c:	2201      	movs	r2, #1
 800963e:	2109      	movs	r1, #9
 8009640:	f7ff ff8e 	bl	8009560 <std>
 8009644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009648:	2202      	movs	r2, #2
 800964a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964e:	2112      	movs	r1, #18
 8009650:	f7ff bf86 	b.w	8009560 <std>
 8009654:	20003670 	.word	0x20003670
 8009658:	20003538 	.word	0x20003538
 800965c:	080095cd 	.word	0x080095cd

08009660 <__sfp_lock_acquire>:
 8009660:	4801      	ldr	r0, [pc, #4]	@ (8009668 <__sfp_lock_acquire+0x8>)
 8009662:	f000 ba00 	b.w	8009a66 <__retarget_lock_acquire_recursive>
 8009666:	bf00      	nop
 8009668:	20003679 	.word	0x20003679

0800966c <__sfp_lock_release>:
 800966c:	4801      	ldr	r0, [pc, #4]	@ (8009674 <__sfp_lock_release+0x8>)
 800966e:	f000 b9fb 	b.w	8009a68 <__retarget_lock_release_recursive>
 8009672:	bf00      	nop
 8009674:	20003679 	.word	0x20003679

08009678 <__sinit>:
 8009678:	b510      	push	{r4, lr}
 800967a:	4604      	mov	r4, r0
 800967c:	f7ff fff0 	bl	8009660 <__sfp_lock_acquire>
 8009680:	6a23      	ldr	r3, [r4, #32]
 8009682:	b11b      	cbz	r3, 800968c <__sinit+0x14>
 8009684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009688:	f7ff bff0 	b.w	800966c <__sfp_lock_release>
 800968c:	4b04      	ldr	r3, [pc, #16]	@ (80096a0 <__sinit+0x28>)
 800968e:	6223      	str	r3, [r4, #32]
 8009690:	4b04      	ldr	r3, [pc, #16]	@ (80096a4 <__sinit+0x2c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f5      	bne.n	8009684 <__sinit+0xc>
 8009698:	f7ff ffc4 	bl	8009624 <global_stdio_init.part.0>
 800969c:	e7f2      	b.n	8009684 <__sinit+0xc>
 800969e:	bf00      	nop
 80096a0:	080095e5 	.word	0x080095e5
 80096a4:	20003670 	.word	0x20003670

080096a8 <_fwalk_sglue>:
 80096a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	4607      	mov	r7, r0
 80096ae:	4688      	mov	r8, r1
 80096b0:	4614      	mov	r4, r2
 80096b2:	2600      	movs	r6, #0
 80096b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096b8:	f1b9 0901 	subs.w	r9, r9, #1
 80096bc:	d505      	bpl.n	80096ca <_fwalk_sglue+0x22>
 80096be:	6824      	ldr	r4, [r4, #0]
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	d1f7      	bne.n	80096b4 <_fwalk_sglue+0xc>
 80096c4:	4630      	mov	r0, r6
 80096c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d907      	bls.n	80096e0 <_fwalk_sglue+0x38>
 80096d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096d4:	3301      	adds	r3, #1
 80096d6:	d003      	beq.n	80096e0 <_fwalk_sglue+0x38>
 80096d8:	4629      	mov	r1, r5
 80096da:	4638      	mov	r0, r7
 80096dc:	47c0      	blx	r8
 80096de:	4306      	orrs	r6, r0
 80096e0:	3568      	adds	r5, #104	@ 0x68
 80096e2:	e7e9      	b.n	80096b8 <_fwalk_sglue+0x10>

080096e4 <iprintf>:
 80096e4:	b40f      	push	{r0, r1, r2, r3}
 80096e6:	b507      	push	{r0, r1, r2, lr}
 80096e8:	4906      	ldr	r1, [pc, #24]	@ (8009704 <iprintf+0x20>)
 80096ea:	ab04      	add	r3, sp, #16
 80096ec:	6808      	ldr	r0, [r1, #0]
 80096ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f2:	6881      	ldr	r1, [r0, #8]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	f000 fadb 	bl	8009cb0 <_vfiprintf_r>
 80096fa:	b003      	add	sp, #12
 80096fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009700:	b004      	add	sp, #16
 8009702:	4770      	bx	lr
 8009704:	2000006c 	.word	0x2000006c

08009708 <_puts_r>:
 8009708:	6a03      	ldr	r3, [r0, #32]
 800970a:	b570      	push	{r4, r5, r6, lr}
 800970c:	6884      	ldr	r4, [r0, #8]
 800970e:	4605      	mov	r5, r0
 8009710:	460e      	mov	r6, r1
 8009712:	b90b      	cbnz	r3, 8009718 <_puts_r+0x10>
 8009714:	f7ff ffb0 	bl	8009678 <__sinit>
 8009718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800971a:	07db      	lsls	r3, r3, #31
 800971c:	d405      	bmi.n	800972a <_puts_r+0x22>
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	0598      	lsls	r0, r3, #22
 8009722:	d402      	bmi.n	800972a <_puts_r+0x22>
 8009724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009726:	f000 f99e 	bl	8009a66 <__retarget_lock_acquire_recursive>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	0719      	lsls	r1, r3, #28
 800972e:	d502      	bpl.n	8009736 <_puts_r+0x2e>
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d135      	bne.n	80097a2 <_puts_r+0x9a>
 8009736:	4621      	mov	r1, r4
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f8c5 	bl	80098c8 <__swsetup_r>
 800973e:	b380      	cbz	r0, 80097a2 <_puts_r+0x9a>
 8009740:	f04f 35ff 	mov.w	r5, #4294967295
 8009744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009746:	07da      	lsls	r2, r3, #31
 8009748:	d405      	bmi.n	8009756 <_puts_r+0x4e>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	059b      	lsls	r3, r3, #22
 800974e:	d402      	bmi.n	8009756 <_puts_r+0x4e>
 8009750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009752:	f000 f989 	bl	8009a68 <__retarget_lock_release_recursive>
 8009756:	4628      	mov	r0, r5
 8009758:	bd70      	pop	{r4, r5, r6, pc}
 800975a:	2b00      	cmp	r3, #0
 800975c:	da04      	bge.n	8009768 <_puts_r+0x60>
 800975e:	69a2      	ldr	r2, [r4, #24]
 8009760:	429a      	cmp	r2, r3
 8009762:	dc17      	bgt.n	8009794 <_puts_r+0x8c>
 8009764:	290a      	cmp	r1, #10
 8009766:	d015      	beq.n	8009794 <_puts_r+0x8c>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	6022      	str	r2, [r4, #0]
 800976e:	7019      	strb	r1, [r3, #0]
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009776:	3b01      	subs	r3, #1
 8009778:	60a3      	str	r3, [r4, #8]
 800977a:	2900      	cmp	r1, #0
 800977c:	d1ed      	bne.n	800975a <_puts_r+0x52>
 800977e:	2b00      	cmp	r3, #0
 8009780:	da11      	bge.n	80097a6 <_puts_r+0x9e>
 8009782:	4622      	mov	r2, r4
 8009784:	210a      	movs	r1, #10
 8009786:	4628      	mov	r0, r5
 8009788:	f000 f85f 	bl	800984a <__swbuf_r>
 800978c:	3001      	adds	r0, #1
 800978e:	d0d7      	beq.n	8009740 <_puts_r+0x38>
 8009790:	250a      	movs	r5, #10
 8009792:	e7d7      	b.n	8009744 <_puts_r+0x3c>
 8009794:	4622      	mov	r2, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f000 f857 	bl	800984a <__swbuf_r>
 800979c:	3001      	adds	r0, #1
 800979e:	d1e7      	bne.n	8009770 <_puts_r+0x68>
 80097a0:	e7ce      	b.n	8009740 <_puts_r+0x38>
 80097a2:	3e01      	subs	r6, #1
 80097a4:	e7e4      	b.n	8009770 <_puts_r+0x68>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	220a      	movs	r2, #10
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	e7ee      	b.n	8009790 <_puts_r+0x88>
	...

080097b4 <puts>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	@ (80097c0 <puts+0xc>)
 80097b6:	4601      	mov	r1, r0
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	f7ff bfa5 	b.w	8009708 <_puts_r>
 80097be:	bf00      	nop
 80097c0:	2000006c 	.word	0x2000006c

080097c4 <__sread>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	460c      	mov	r4, r1
 80097c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097cc:	f000 f8fc 	bl	80099c8 <_read_r>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	bfab      	itete	ge
 80097d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097d6:	89a3      	ldrhlt	r3, [r4, #12]
 80097d8:	181b      	addge	r3, r3, r0
 80097da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097de:	bfac      	ite	ge
 80097e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097e2:	81a3      	strhlt	r3, [r4, #12]
 80097e4:	bd10      	pop	{r4, pc}

080097e6 <__swrite>:
 80097e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	461f      	mov	r7, r3
 80097ec:	898b      	ldrh	r3, [r1, #12]
 80097ee:	05db      	lsls	r3, r3, #23
 80097f0:	4605      	mov	r5, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	4616      	mov	r6, r2
 80097f6:	d505      	bpl.n	8009804 <__swrite+0x1e>
 80097f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fc:	2302      	movs	r3, #2
 80097fe:	2200      	movs	r2, #0
 8009800:	f000 f8d0 	bl	80099a4 <_lseek_r>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800980a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	4632      	mov	r2, r6
 8009812:	463b      	mov	r3, r7
 8009814:	4628      	mov	r0, r5
 8009816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	f000 b8e7 	b.w	80099ec <_write_r>

0800981e <__sseek>:
 800981e:	b510      	push	{r4, lr}
 8009820:	460c      	mov	r4, r1
 8009822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009826:	f000 f8bd 	bl	80099a4 <_lseek_r>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	bf15      	itete	ne
 8009830:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009832:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009836:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800983a:	81a3      	strheq	r3, [r4, #12]
 800983c:	bf18      	it	ne
 800983e:	81a3      	strhne	r3, [r4, #12]
 8009840:	bd10      	pop	{r4, pc}

08009842 <__sclose>:
 8009842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009846:	f000 b89d 	b.w	8009984 <_close_r>

0800984a <__swbuf_r>:
 800984a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984c:	460e      	mov	r6, r1
 800984e:	4614      	mov	r4, r2
 8009850:	4605      	mov	r5, r0
 8009852:	b118      	cbz	r0, 800985c <__swbuf_r+0x12>
 8009854:	6a03      	ldr	r3, [r0, #32]
 8009856:	b90b      	cbnz	r3, 800985c <__swbuf_r+0x12>
 8009858:	f7ff ff0e 	bl	8009678 <__sinit>
 800985c:	69a3      	ldr	r3, [r4, #24]
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	071a      	lsls	r2, r3, #28
 8009864:	d501      	bpl.n	800986a <__swbuf_r+0x20>
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	b943      	cbnz	r3, 800987c <__swbuf_r+0x32>
 800986a:	4621      	mov	r1, r4
 800986c:	4628      	mov	r0, r5
 800986e:	f000 f82b 	bl	80098c8 <__swsetup_r>
 8009872:	b118      	cbz	r0, 800987c <__swbuf_r+0x32>
 8009874:	f04f 37ff 	mov.w	r7, #4294967295
 8009878:	4638      	mov	r0, r7
 800987a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	6922      	ldr	r2, [r4, #16]
 8009880:	1a98      	subs	r0, r3, r2
 8009882:	6963      	ldr	r3, [r4, #20]
 8009884:	b2f6      	uxtb	r6, r6
 8009886:	4283      	cmp	r3, r0
 8009888:	4637      	mov	r7, r6
 800988a:	dc05      	bgt.n	8009898 <__swbuf_r+0x4e>
 800988c:	4621      	mov	r1, r4
 800988e:	4628      	mov	r0, r5
 8009890:	f000 fd38 	bl	800a304 <_fflush_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	d1ed      	bne.n	8009874 <__swbuf_r+0x2a>
 8009898:	68a3      	ldr	r3, [r4, #8]
 800989a:	3b01      	subs	r3, #1
 800989c:	60a3      	str	r3, [r4, #8]
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	701e      	strb	r6, [r3, #0]
 80098a6:	6962      	ldr	r2, [r4, #20]
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d004      	beq.n	80098b8 <__swbuf_r+0x6e>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	07db      	lsls	r3, r3, #31
 80098b2:	d5e1      	bpl.n	8009878 <__swbuf_r+0x2e>
 80098b4:	2e0a      	cmp	r6, #10
 80098b6:	d1df      	bne.n	8009878 <__swbuf_r+0x2e>
 80098b8:	4621      	mov	r1, r4
 80098ba:	4628      	mov	r0, r5
 80098bc:	f000 fd22 	bl	800a304 <_fflush_r>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d0d9      	beq.n	8009878 <__swbuf_r+0x2e>
 80098c4:	e7d6      	b.n	8009874 <__swbuf_r+0x2a>
	...

080098c8 <__swsetup_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4b29      	ldr	r3, [pc, #164]	@ (8009970 <__swsetup_r+0xa8>)
 80098cc:	4605      	mov	r5, r0
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	460c      	mov	r4, r1
 80098d2:	b118      	cbz	r0, 80098dc <__swsetup_r+0x14>
 80098d4:	6a03      	ldr	r3, [r0, #32]
 80098d6:	b90b      	cbnz	r3, 80098dc <__swsetup_r+0x14>
 80098d8:	f7ff fece 	bl	8009678 <__sinit>
 80098dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e0:	0719      	lsls	r1, r3, #28
 80098e2:	d422      	bmi.n	800992a <__swsetup_r+0x62>
 80098e4:	06da      	lsls	r2, r3, #27
 80098e6:	d407      	bmi.n	80098f8 <__swsetup_r+0x30>
 80098e8:	2209      	movs	r2, #9
 80098ea:	602a      	str	r2, [r5, #0]
 80098ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	f04f 30ff 	mov.w	r0, #4294967295
 80098f6:	e033      	b.n	8009960 <__swsetup_r+0x98>
 80098f8:	0758      	lsls	r0, r3, #29
 80098fa:	d512      	bpl.n	8009922 <__swsetup_r+0x5a>
 80098fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098fe:	b141      	cbz	r1, 8009912 <__swsetup_r+0x4a>
 8009900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009904:	4299      	cmp	r1, r3
 8009906:	d002      	beq.n	800990e <__swsetup_r+0x46>
 8009908:	4628      	mov	r0, r5
 800990a:	f000 f8af 	bl	8009a6c <_free_r>
 800990e:	2300      	movs	r3, #0
 8009910:	6363      	str	r3, [r4, #52]	@ 0x34
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	2300      	movs	r3, #0
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f043 0308 	orr.w	r3, r3, #8
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	b94b      	cbnz	r3, 8009942 <__swsetup_r+0x7a>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009938:	d003      	beq.n	8009942 <__swsetup_r+0x7a>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 fd2f 	bl	800a3a0 <__smakebuf_r>
 8009942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009946:	f013 0201 	ands.w	r2, r3, #1
 800994a:	d00a      	beq.n	8009962 <__swsetup_r+0x9a>
 800994c:	2200      	movs	r2, #0
 800994e:	60a2      	str	r2, [r4, #8]
 8009950:	6962      	ldr	r2, [r4, #20]
 8009952:	4252      	negs	r2, r2
 8009954:	61a2      	str	r2, [r4, #24]
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	b942      	cbnz	r2, 800996c <__swsetup_r+0xa4>
 800995a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800995e:	d1c5      	bne.n	80098ec <__swsetup_r+0x24>
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	0799      	lsls	r1, r3, #30
 8009964:	bf58      	it	pl
 8009966:	6962      	ldrpl	r2, [r4, #20]
 8009968:	60a2      	str	r2, [r4, #8]
 800996a:	e7f4      	b.n	8009956 <__swsetup_r+0x8e>
 800996c:	2000      	movs	r0, #0
 800996e:	e7f7      	b.n	8009960 <__swsetup_r+0x98>
 8009970:	2000006c 	.word	0x2000006c

08009974 <memset>:
 8009974:	4402      	add	r2, r0
 8009976:	4603      	mov	r3, r0
 8009978:	4293      	cmp	r3, r2
 800997a:	d100      	bne.n	800997e <memset+0xa>
 800997c:	4770      	bx	lr
 800997e:	f803 1b01 	strb.w	r1, [r3], #1
 8009982:	e7f9      	b.n	8009978 <memset+0x4>

08009984 <_close_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d06      	ldr	r5, [pc, #24]	@ (80099a0 <_close_r+0x1c>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f8 fa19 	bl	8001dc6 <_close>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_close_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_close_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20003674 	.word	0x20003674

080099a4 <_lseek_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	@ (80099c4 <_lseek_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f8 fa2e 	bl	8001e14 <_lseek>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_lseek_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_lseek_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20003674 	.word	0x20003674

080099c8 <_read_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	@ (80099e8 <_read_r+0x20>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	4611      	mov	r1, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f8 f9d8 	bl	8001d8c <_read>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_read_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_read_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20003674 	.word	0x20003674

080099ec <_write_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	@ (8009a0c <_write_r+0x20>)
 80099f0:	4604      	mov	r4, r0
 80099f2:	4608      	mov	r0, r1
 80099f4:	4611      	mov	r1, r2
 80099f6:	2200      	movs	r2, #0
 80099f8:	602a      	str	r2, [r5, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f7f7 ff4a 	bl	8001894 <_write>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_write_r+0x1e>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_write_r+0x1e>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20003674 	.word	0x20003674

08009a10 <__errno>:
 8009a10:	4b01      	ldr	r3, [pc, #4]	@ (8009a18 <__errno+0x8>)
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	2000006c 	.word	0x2000006c

08009a1c <__libc_init_array>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009a54 <__libc_init_array+0x38>)
 8009a20:	4c0d      	ldr	r4, [pc, #52]	@ (8009a58 <__libc_init_array+0x3c>)
 8009a22:	1b64      	subs	r4, r4, r5
 8009a24:	10a4      	asrs	r4, r4, #2
 8009a26:	2600      	movs	r6, #0
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	d109      	bne.n	8009a40 <__libc_init_array+0x24>
 8009a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009a5c <__libc_init_array+0x40>)
 8009a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009a60 <__libc_init_array+0x44>)
 8009a30:	f000 fd24 	bl	800a47c <_init>
 8009a34:	1b64      	subs	r4, r4, r5
 8009a36:	10a4      	asrs	r4, r4, #2
 8009a38:	2600      	movs	r6, #0
 8009a3a:	42a6      	cmp	r6, r4
 8009a3c:	d105      	bne.n	8009a4a <__libc_init_array+0x2e>
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a44:	4798      	blx	r3
 8009a46:	3601      	adds	r6, #1
 8009a48:	e7ee      	b.n	8009a28 <__libc_init_array+0xc>
 8009a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4e:	4798      	blx	r3
 8009a50:	3601      	adds	r6, #1
 8009a52:	e7f2      	b.n	8009a3a <__libc_init_array+0x1e>
 8009a54:	0800ab08 	.word	0x0800ab08
 8009a58:	0800ab08 	.word	0x0800ab08
 8009a5c:	0800ab08 	.word	0x0800ab08
 8009a60:	0800ab0c 	.word	0x0800ab0c

08009a64 <__retarget_lock_init_recursive>:
 8009a64:	4770      	bx	lr

08009a66 <__retarget_lock_acquire_recursive>:
 8009a66:	4770      	bx	lr

08009a68 <__retarget_lock_release_recursive>:
 8009a68:	4770      	bx	lr
	...

08009a6c <_free_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4605      	mov	r5, r0
 8009a70:	2900      	cmp	r1, #0
 8009a72:	d041      	beq.n	8009af8 <_free_r+0x8c>
 8009a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a78:	1f0c      	subs	r4, r1, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfb8      	it	lt
 8009a7e:	18e4      	addlt	r4, r4, r3
 8009a80:	f000 f8e0 	bl	8009c44 <__malloc_lock>
 8009a84:	4a1d      	ldr	r2, [pc, #116]	@ (8009afc <_free_r+0x90>)
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	b933      	cbnz	r3, 8009a98 <_free_r+0x2c>
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	6014      	str	r4, [r2, #0]
 8009a8e:	4628      	mov	r0, r5
 8009a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a94:	f000 b8dc 	b.w	8009c50 <__malloc_unlock>
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d908      	bls.n	8009aae <_free_r+0x42>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	1821      	adds	r1, r4, r0
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf01      	itttt	eq
 8009aa4:	6819      	ldreq	r1, [r3, #0]
 8009aa6:	685b      	ldreq	r3, [r3, #4]
 8009aa8:	1809      	addeq	r1, r1, r0
 8009aaa:	6021      	streq	r1, [r4, #0]
 8009aac:	e7ed      	b.n	8009a8a <_free_r+0x1e>
 8009aae:	461a      	mov	r2, r3
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	b10b      	cbz	r3, 8009ab8 <_free_r+0x4c>
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d9fa      	bls.n	8009aae <_free_r+0x42>
 8009ab8:	6811      	ldr	r1, [r2, #0]
 8009aba:	1850      	adds	r0, r2, r1
 8009abc:	42a0      	cmp	r0, r4
 8009abe:	d10b      	bne.n	8009ad8 <_free_r+0x6c>
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	4401      	add	r1, r0
 8009ac4:	1850      	adds	r0, r2, r1
 8009ac6:	4283      	cmp	r3, r0
 8009ac8:	6011      	str	r1, [r2, #0]
 8009aca:	d1e0      	bne.n	8009a8e <_free_r+0x22>
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	6053      	str	r3, [r2, #4]
 8009ad2:	4408      	add	r0, r1
 8009ad4:	6010      	str	r0, [r2, #0]
 8009ad6:	e7da      	b.n	8009a8e <_free_r+0x22>
 8009ad8:	d902      	bls.n	8009ae0 <_free_r+0x74>
 8009ada:	230c      	movs	r3, #12
 8009adc:	602b      	str	r3, [r5, #0]
 8009ade:	e7d6      	b.n	8009a8e <_free_r+0x22>
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	1821      	adds	r1, r4, r0
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf04      	itt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	6063      	str	r3, [r4, #4]
 8009aee:	bf04      	itt	eq
 8009af0:	1809      	addeq	r1, r1, r0
 8009af2:	6021      	streq	r1, [r4, #0]
 8009af4:	6054      	str	r4, [r2, #4]
 8009af6:	e7ca      	b.n	8009a8e <_free_r+0x22>
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	20003680 	.word	0x20003680

08009b00 <sbrk_aligned>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4e0f      	ldr	r6, [pc, #60]	@ (8009b40 <sbrk_aligned+0x40>)
 8009b04:	460c      	mov	r4, r1
 8009b06:	6831      	ldr	r1, [r6, #0]
 8009b08:	4605      	mov	r5, r0
 8009b0a:	b911      	cbnz	r1, 8009b12 <sbrk_aligned+0x12>
 8009b0c:	f000 fca6 	bl	800a45c <_sbrk_r>
 8009b10:	6030      	str	r0, [r6, #0]
 8009b12:	4621      	mov	r1, r4
 8009b14:	4628      	mov	r0, r5
 8009b16:	f000 fca1 	bl	800a45c <_sbrk_r>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	d103      	bne.n	8009b26 <sbrk_aligned+0x26>
 8009b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8009b22:	4620      	mov	r0, r4
 8009b24:	bd70      	pop	{r4, r5, r6, pc}
 8009b26:	1cc4      	adds	r4, r0, #3
 8009b28:	f024 0403 	bic.w	r4, r4, #3
 8009b2c:	42a0      	cmp	r0, r4
 8009b2e:	d0f8      	beq.n	8009b22 <sbrk_aligned+0x22>
 8009b30:	1a21      	subs	r1, r4, r0
 8009b32:	4628      	mov	r0, r5
 8009b34:	f000 fc92 	bl	800a45c <_sbrk_r>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1f2      	bne.n	8009b22 <sbrk_aligned+0x22>
 8009b3c:	e7ef      	b.n	8009b1e <sbrk_aligned+0x1e>
 8009b3e:	bf00      	nop
 8009b40:	2000367c 	.word	0x2000367c

08009b44 <_malloc_r>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	1ccd      	adds	r5, r1, #3
 8009b4a:	f025 0503 	bic.w	r5, r5, #3
 8009b4e:	3508      	adds	r5, #8
 8009b50:	2d0c      	cmp	r5, #12
 8009b52:	bf38      	it	cc
 8009b54:	250c      	movcc	r5, #12
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	4606      	mov	r6, r0
 8009b5a:	db01      	blt.n	8009b60 <_malloc_r+0x1c>
 8009b5c:	42a9      	cmp	r1, r5
 8009b5e:	d904      	bls.n	8009b6a <_malloc_r+0x26>
 8009b60:	230c      	movs	r3, #12
 8009b62:	6033      	str	r3, [r6, #0]
 8009b64:	2000      	movs	r0, #0
 8009b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c40 <_malloc_r+0xfc>
 8009b6e:	f000 f869 	bl	8009c44 <__malloc_lock>
 8009b72:	f8d8 3000 	ldr.w	r3, [r8]
 8009b76:	461c      	mov	r4, r3
 8009b78:	bb44      	cbnz	r4, 8009bcc <_malloc_r+0x88>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff ffbf 	bl	8009b00 <sbrk_aligned>
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	4604      	mov	r4, r0
 8009b86:	d158      	bne.n	8009c3a <_malloc_r+0xf6>
 8009b88:	f8d8 4000 	ldr.w	r4, [r8]
 8009b8c:	4627      	mov	r7, r4
 8009b8e:	2f00      	cmp	r7, #0
 8009b90:	d143      	bne.n	8009c1a <_malloc_r+0xd6>
 8009b92:	2c00      	cmp	r4, #0
 8009b94:	d04b      	beq.n	8009c2e <_malloc_r+0xea>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	4639      	mov	r1, r7
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	eb04 0903 	add.w	r9, r4, r3
 8009ba0:	f000 fc5c 	bl	800a45c <_sbrk_r>
 8009ba4:	4581      	cmp	r9, r0
 8009ba6:	d142      	bne.n	8009c2e <_malloc_r+0xea>
 8009ba8:	6821      	ldr	r1, [r4, #0]
 8009baa:	1a6d      	subs	r5, r5, r1
 8009bac:	4629      	mov	r1, r5
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff ffa6 	bl	8009b00 <sbrk_aligned>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d03a      	beq.n	8009c2e <_malloc_r+0xea>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	442b      	add	r3, r5
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	bb62      	cbnz	r2, 8009c20 <_malloc_r+0xdc>
 8009bc6:	f8c8 7000 	str.w	r7, [r8]
 8009bca:	e00f      	b.n	8009bec <_malloc_r+0xa8>
 8009bcc:	6822      	ldr	r2, [r4, #0]
 8009bce:	1b52      	subs	r2, r2, r5
 8009bd0:	d420      	bmi.n	8009c14 <_malloc_r+0xd0>
 8009bd2:	2a0b      	cmp	r2, #11
 8009bd4:	d917      	bls.n	8009c06 <_malloc_r+0xc2>
 8009bd6:	1961      	adds	r1, r4, r5
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	6025      	str	r5, [r4, #0]
 8009bdc:	bf18      	it	ne
 8009bde:	6059      	strne	r1, [r3, #4]
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	bf08      	it	eq
 8009be4:	f8c8 1000 	streq.w	r1, [r8]
 8009be8:	5162      	str	r2, [r4, r5]
 8009bea:	604b      	str	r3, [r1, #4]
 8009bec:	4630      	mov	r0, r6
 8009bee:	f000 f82f 	bl	8009c50 <__malloc_unlock>
 8009bf2:	f104 000b 	add.w	r0, r4, #11
 8009bf6:	1d23      	adds	r3, r4, #4
 8009bf8:	f020 0007 	bic.w	r0, r0, #7
 8009bfc:	1ac2      	subs	r2, r0, r3
 8009bfe:	bf1c      	itt	ne
 8009c00:	1a1b      	subne	r3, r3, r0
 8009c02:	50a3      	strne	r3, [r4, r2]
 8009c04:	e7af      	b.n	8009b66 <_malloc_r+0x22>
 8009c06:	6862      	ldr	r2, [r4, #4]
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	bf0c      	ite	eq
 8009c0c:	f8c8 2000 	streq.w	r2, [r8]
 8009c10:	605a      	strne	r2, [r3, #4]
 8009c12:	e7eb      	b.n	8009bec <_malloc_r+0xa8>
 8009c14:	4623      	mov	r3, r4
 8009c16:	6864      	ldr	r4, [r4, #4]
 8009c18:	e7ae      	b.n	8009b78 <_malloc_r+0x34>
 8009c1a:	463c      	mov	r4, r7
 8009c1c:	687f      	ldr	r7, [r7, #4]
 8009c1e:	e7b6      	b.n	8009b8e <_malloc_r+0x4a>
 8009c20:	461a      	mov	r2, r3
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	d1fb      	bne.n	8009c20 <_malloc_r+0xdc>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6053      	str	r3, [r2, #4]
 8009c2c:	e7de      	b.n	8009bec <_malloc_r+0xa8>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	6033      	str	r3, [r6, #0]
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 f80c 	bl	8009c50 <__malloc_unlock>
 8009c38:	e794      	b.n	8009b64 <_malloc_r+0x20>
 8009c3a:	6005      	str	r5, [r0, #0]
 8009c3c:	e7d6      	b.n	8009bec <_malloc_r+0xa8>
 8009c3e:	bf00      	nop
 8009c40:	20003680 	.word	0x20003680

08009c44 <__malloc_lock>:
 8009c44:	4801      	ldr	r0, [pc, #4]	@ (8009c4c <__malloc_lock+0x8>)
 8009c46:	f7ff bf0e 	b.w	8009a66 <__retarget_lock_acquire_recursive>
 8009c4a:	bf00      	nop
 8009c4c:	20003678 	.word	0x20003678

08009c50 <__malloc_unlock>:
 8009c50:	4801      	ldr	r0, [pc, #4]	@ (8009c58 <__malloc_unlock+0x8>)
 8009c52:	f7ff bf09 	b.w	8009a68 <__retarget_lock_release_recursive>
 8009c56:	bf00      	nop
 8009c58:	20003678 	.word	0x20003678

08009c5c <__sfputc_r>:
 8009c5c:	6893      	ldr	r3, [r2, #8]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	b410      	push	{r4}
 8009c64:	6093      	str	r3, [r2, #8]
 8009c66:	da08      	bge.n	8009c7a <__sfputc_r+0x1e>
 8009c68:	6994      	ldr	r4, [r2, #24]
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	db01      	blt.n	8009c72 <__sfputc_r+0x16>
 8009c6e:	290a      	cmp	r1, #10
 8009c70:	d103      	bne.n	8009c7a <__sfputc_r+0x1e>
 8009c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c76:	f7ff bde8 	b.w	800984a <__swbuf_r>
 8009c7a:	6813      	ldr	r3, [r2, #0]
 8009c7c:	1c58      	adds	r0, r3, #1
 8009c7e:	6010      	str	r0, [r2, #0]
 8009c80:	7019      	strb	r1, [r3, #0]
 8009c82:	4608      	mov	r0, r1
 8009c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <__sfputs_r>:
 8009c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	18d5      	adds	r5, r2, r3
 8009c94:	42ac      	cmp	r4, r5
 8009c96:	d101      	bne.n	8009c9c <__sfputs_r+0x12>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e007      	b.n	8009cac <__sfputs_r+0x22>
 8009c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca0:	463a      	mov	r2, r7
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ffda 	bl	8009c5c <__sfputc_r>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d1f3      	bne.n	8009c94 <__sfputs_r+0xa>
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cb0 <_vfiprintf_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	b09d      	sub	sp, #116	@ 0x74
 8009cb8:	4614      	mov	r4, r2
 8009cba:	4698      	mov	r8, r3
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	b118      	cbz	r0, 8009cc8 <_vfiprintf_r+0x18>
 8009cc0:	6a03      	ldr	r3, [r0, #32]
 8009cc2:	b90b      	cbnz	r3, 8009cc8 <_vfiprintf_r+0x18>
 8009cc4:	f7ff fcd8 	bl	8009678 <__sinit>
 8009cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cca:	07d9      	lsls	r1, r3, #31
 8009ccc:	d405      	bmi.n	8009cda <_vfiprintf_r+0x2a>
 8009cce:	89ab      	ldrh	r3, [r5, #12]
 8009cd0:	059a      	lsls	r2, r3, #22
 8009cd2:	d402      	bmi.n	8009cda <_vfiprintf_r+0x2a>
 8009cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cd6:	f7ff fec6 	bl	8009a66 <__retarget_lock_acquire_recursive>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	071b      	lsls	r3, r3, #28
 8009cde:	d501      	bpl.n	8009ce4 <_vfiprintf_r+0x34>
 8009ce0:	692b      	ldr	r3, [r5, #16]
 8009ce2:	b99b      	cbnz	r3, 8009d0c <_vfiprintf_r+0x5c>
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff fdee 	bl	80098c8 <__swsetup_r>
 8009cec:	b170      	cbz	r0, 8009d0c <_vfiprintf_r+0x5c>
 8009cee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cf0:	07dc      	lsls	r4, r3, #31
 8009cf2:	d504      	bpl.n	8009cfe <_vfiprintf_r+0x4e>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	b01d      	add	sp, #116	@ 0x74
 8009cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	0598      	lsls	r0, r3, #22
 8009d02:	d4f7      	bmi.n	8009cf4 <_vfiprintf_r+0x44>
 8009d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d06:	f7ff feaf 	bl	8009a68 <__retarget_lock_release_recursive>
 8009d0a:	e7f3      	b.n	8009cf4 <_vfiprintf_r+0x44>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d10:	2320      	movs	r3, #32
 8009d12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1a:	2330      	movs	r3, #48	@ 0x30
 8009d1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ecc <_vfiprintf_r+0x21c>
 8009d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d24:	f04f 0901 	mov.w	r9, #1
 8009d28:	4623      	mov	r3, r4
 8009d2a:	469a      	mov	sl, r3
 8009d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d30:	b10a      	cbz	r2, 8009d36 <_vfiprintf_r+0x86>
 8009d32:	2a25      	cmp	r2, #37	@ 0x25
 8009d34:	d1f9      	bne.n	8009d2a <_vfiprintf_r+0x7a>
 8009d36:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3a:	d00b      	beq.n	8009d54 <_vfiprintf_r+0xa4>
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	4622      	mov	r2, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ffa1 	bl	8009c8a <__sfputs_r>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f000 80a7 	beq.w	8009e9c <_vfiprintf_r+0x1ec>
 8009d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d50:	445a      	add	r2, fp
 8009d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d54:	f89a 3000 	ldrb.w	r3, [sl]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 809f 	beq.w	8009e9c <_vfiprintf_r+0x1ec>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295
 8009d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d68:	f10a 0a01 	add.w	sl, sl, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	9307      	str	r3, [sp, #28]
 8009d70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d76:	4654      	mov	r4, sl
 8009d78:	2205      	movs	r2, #5
 8009d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7e:	4853      	ldr	r0, [pc, #332]	@ (8009ecc <_vfiprintf_r+0x21c>)
 8009d80:	f7f6 fa5e 	bl	8000240 <memchr>
 8009d84:	9a04      	ldr	r2, [sp, #16]
 8009d86:	b9d8      	cbnz	r0, 8009dc0 <_vfiprintf_r+0x110>
 8009d88:	06d1      	lsls	r1, r2, #27
 8009d8a:	bf44      	itt	mi
 8009d8c:	2320      	movmi	r3, #32
 8009d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d92:	0713      	lsls	r3, r2, #28
 8009d94:	bf44      	itt	mi
 8009d96:	232b      	movmi	r3, #43	@ 0x2b
 8009d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da2:	d015      	beq.n	8009dd0 <_vfiprintf_r+0x120>
 8009da4:	9a07      	ldr	r2, [sp, #28]
 8009da6:	4654      	mov	r4, sl
 8009da8:	2000      	movs	r0, #0
 8009daa:	f04f 0c0a 	mov.w	ip, #10
 8009dae:	4621      	mov	r1, r4
 8009db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db4:	3b30      	subs	r3, #48	@ 0x30
 8009db6:	2b09      	cmp	r3, #9
 8009db8:	d94b      	bls.n	8009e52 <_vfiprintf_r+0x1a2>
 8009dba:	b1b0      	cbz	r0, 8009dea <_vfiprintf_r+0x13a>
 8009dbc:	9207      	str	r2, [sp, #28]
 8009dbe:	e014      	b.n	8009dea <_vfiprintf_r+0x13a>
 8009dc0:	eba0 0308 	sub.w	r3, r0, r8
 8009dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	46a2      	mov	sl, r4
 8009dce:	e7d2      	b.n	8009d76 <_vfiprintf_r+0xc6>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	1d19      	adds	r1, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	9103      	str	r1, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfbb      	ittet	lt
 8009ddc:	425b      	neglt	r3, r3
 8009dde:	f042 0202 	orrlt.w	r2, r2, #2
 8009de2:	9307      	strge	r3, [sp, #28]
 8009de4:	9307      	strlt	r3, [sp, #28]
 8009de6:	bfb8      	it	lt
 8009de8:	9204      	strlt	r2, [sp, #16]
 8009dea:	7823      	ldrb	r3, [r4, #0]
 8009dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dee:	d10a      	bne.n	8009e06 <_vfiprintf_r+0x156>
 8009df0:	7863      	ldrb	r3, [r4, #1]
 8009df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df4:	d132      	bne.n	8009e5c <_vfiprintf_r+0x1ac>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	9203      	str	r2, [sp, #12]
 8009dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e02:	3402      	adds	r4, #2
 8009e04:	9305      	str	r3, [sp, #20]
 8009e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009edc <_vfiprintf_r+0x22c>
 8009e0a:	7821      	ldrb	r1, [r4, #0]
 8009e0c:	2203      	movs	r2, #3
 8009e0e:	4650      	mov	r0, sl
 8009e10:	f7f6 fa16 	bl	8000240 <memchr>
 8009e14:	b138      	cbz	r0, 8009e26 <_vfiprintf_r+0x176>
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	eba0 000a 	sub.w	r0, r0, sl
 8009e1c:	2240      	movs	r2, #64	@ 0x40
 8009e1e:	4082      	lsls	r2, r0
 8009e20:	4313      	orrs	r3, r2
 8009e22:	3401      	adds	r4, #1
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	4829      	ldr	r0, [pc, #164]	@ (8009ed0 <_vfiprintf_r+0x220>)
 8009e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e30:	2206      	movs	r2, #6
 8009e32:	f7f6 fa05 	bl	8000240 <memchr>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d03f      	beq.n	8009eba <_vfiprintf_r+0x20a>
 8009e3a:	4b26      	ldr	r3, [pc, #152]	@ (8009ed4 <_vfiprintf_r+0x224>)
 8009e3c:	bb1b      	cbnz	r3, 8009e86 <_vfiprintf_r+0x1d6>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	3307      	adds	r3, #7
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	3308      	adds	r3, #8
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4c:	443b      	add	r3, r7
 8009e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e50:	e76a      	b.n	8009d28 <_vfiprintf_r+0x78>
 8009e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e56:	460c      	mov	r4, r1
 8009e58:	2001      	movs	r0, #1
 8009e5a:	e7a8      	b.n	8009dae <_vfiprintf_r+0xfe>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	3401      	adds	r4, #1
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	4619      	mov	r1, r3
 8009e64:	f04f 0c0a 	mov.w	ip, #10
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6e:	3a30      	subs	r2, #48	@ 0x30
 8009e70:	2a09      	cmp	r2, #9
 8009e72:	d903      	bls.n	8009e7c <_vfiprintf_r+0x1cc>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0c6      	beq.n	8009e06 <_vfiprintf_r+0x156>
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	e7c4      	b.n	8009e06 <_vfiprintf_r+0x156>
 8009e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e80:	4604      	mov	r4, r0
 8009e82:	2301      	movs	r3, #1
 8009e84:	e7f0      	b.n	8009e68 <_vfiprintf_r+0x1b8>
 8009e86:	ab03      	add	r3, sp, #12
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	4b12      	ldr	r3, [pc, #72]	@ (8009ed8 <_vfiprintf_r+0x228>)
 8009e8e:	a904      	add	r1, sp, #16
 8009e90:	4630      	mov	r0, r6
 8009e92:	f3af 8000 	nop.w
 8009e96:	4607      	mov	r7, r0
 8009e98:	1c78      	adds	r0, r7, #1
 8009e9a:	d1d6      	bne.n	8009e4a <_vfiprintf_r+0x19a>
 8009e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e9e:	07d9      	lsls	r1, r3, #31
 8009ea0:	d405      	bmi.n	8009eae <_vfiprintf_r+0x1fe>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	059a      	lsls	r2, r3, #22
 8009ea6:	d402      	bmi.n	8009eae <_vfiprintf_r+0x1fe>
 8009ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eaa:	f7ff fddd 	bl	8009a68 <__retarget_lock_release_recursive>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	065b      	lsls	r3, r3, #25
 8009eb2:	f53f af1f 	bmi.w	8009cf4 <_vfiprintf_r+0x44>
 8009eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eb8:	e71e      	b.n	8009cf8 <_vfiprintf_r+0x48>
 8009eba:	ab03      	add	r3, sp, #12
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <_vfiprintf_r+0x228>)
 8009ec2:	a904      	add	r1, sp, #16
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f000 f879 	bl	8009fbc <_printf_i>
 8009eca:	e7e4      	b.n	8009e96 <_vfiprintf_r+0x1e6>
 8009ecc:	0800aacc 	.word	0x0800aacc
 8009ed0:	0800aad6 	.word	0x0800aad6
 8009ed4:	00000000 	.word	0x00000000
 8009ed8:	08009c8b 	.word	0x08009c8b
 8009edc:	0800aad2 	.word	0x0800aad2

08009ee0 <_printf_common>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	4616      	mov	r6, r2
 8009ee6:	4698      	mov	r8, r3
 8009ee8:	688a      	ldr	r2, [r1, #8]
 8009eea:	690b      	ldr	r3, [r1, #16]
 8009eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	bfb8      	it	lt
 8009ef4:	4613      	movlt	r3, r2
 8009ef6:	6033      	str	r3, [r6, #0]
 8009ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009efc:	4607      	mov	r7, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	b10a      	cbz	r2, 8009f06 <_printf_common+0x26>
 8009f02:	3301      	adds	r3, #1
 8009f04:	6033      	str	r3, [r6, #0]
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	0699      	lsls	r1, r3, #26
 8009f0a:	bf42      	ittt	mi
 8009f0c:	6833      	ldrmi	r3, [r6, #0]
 8009f0e:	3302      	addmi	r3, #2
 8009f10:	6033      	strmi	r3, [r6, #0]
 8009f12:	6825      	ldr	r5, [r4, #0]
 8009f14:	f015 0506 	ands.w	r5, r5, #6
 8009f18:	d106      	bne.n	8009f28 <_printf_common+0x48>
 8009f1a:	f104 0a19 	add.w	sl, r4, #25
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	6832      	ldr	r2, [r6, #0]
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	dc26      	bgt.n	8009f76 <_printf_common+0x96>
 8009f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f2c:	6822      	ldr	r2, [r4, #0]
 8009f2e:	3b00      	subs	r3, #0
 8009f30:	bf18      	it	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	0692      	lsls	r2, r2, #26
 8009f36:	d42b      	bmi.n	8009f90 <_printf_common+0xb0>
 8009f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	4638      	mov	r0, r7
 8009f40:	47c8      	blx	r9
 8009f42:	3001      	adds	r0, #1
 8009f44:	d01e      	beq.n	8009f84 <_printf_common+0xa4>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	6922      	ldr	r2, [r4, #16]
 8009f4a:	f003 0306 	and.w	r3, r3, #6
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	bf02      	ittt	eq
 8009f52:	68e5      	ldreq	r5, [r4, #12]
 8009f54:	6833      	ldreq	r3, [r6, #0]
 8009f56:	1aed      	subeq	r5, r5, r3
 8009f58:	68a3      	ldr	r3, [r4, #8]
 8009f5a:	bf0c      	ite	eq
 8009f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f60:	2500      	movne	r5, #0
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bfc4      	itt	gt
 8009f66:	1a9b      	subgt	r3, r3, r2
 8009f68:	18ed      	addgt	r5, r5, r3
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	341a      	adds	r4, #26
 8009f6e:	42b5      	cmp	r5, r6
 8009f70:	d11a      	bne.n	8009fa8 <_printf_common+0xc8>
 8009f72:	2000      	movs	r0, #0
 8009f74:	e008      	b.n	8009f88 <_printf_common+0xa8>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4652      	mov	r2, sl
 8009f7a:	4641      	mov	r1, r8
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	47c8      	blx	r9
 8009f80:	3001      	adds	r0, #1
 8009f82:	d103      	bne.n	8009f8c <_printf_common+0xac>
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8c:	3501      	adds	r5, #1
 8009f8e:	e7c6      	b.n	8009f1e <_printf_common+0x3e>
 8009f90:	18e1      	adds	r1, r4, r3
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	2030      	movs	r0, #48	@ 0x30
 8009f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f9a:	4422      	add	r2, r4
 8009f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	e7c7      	b.n	8009f38 <_printf_common+0x58>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4622      	mov	r2, r4
 8009fac:	4641      	mov	r1, r8
 8009fae:	4638      	mov	r0, r7
 8009fb0:	47c8      	blx	r9
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d0e6      	beq.n	8009f84 <_printf_common+0xa4>
 8009fb6:	3601      	adds	r6, #1
 8009fb8:	e7d9      	b.n	8009f6e <_printf_common+0x8e>
	...

08009fbc <_printf_i>:
 8009fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc0:	7e0f      	ldrb	r7, [r1, #24]
 8009fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fc4:	2f78      	cmp	r7, #120	@ 0x78
 8009fc6:	4691      	mov	r9, r2
 8009fc8:	4680      	mov	r8, r0
 8009fca:	460c      	mov	r4, r1
 8009fcc:	469a      	mov	sl, r3
 8009fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fd2:	d807      	bhi.n	8009fe4 <_printf_i+0x28>
 8009fd4:	2f62      	cmp	r7, #98	@ 0x62
 8009fd6:	d80a      	bhi.n	8009fee <_printf_i+0x32>
 8009fd8:	2f00      	cmp	r7, #0
 8009fda:	f000 80d2 	beq.w	800a182 <_printf_i+0x1c6>
 8009fde:	2f58      	cmp	r7, #88	@ 0x58
 8009fe0:	f000 80b9 	beq.w	800a156 <_printf_i+0x19a>
 8009fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fec:	e03a      	b.n	800a064 <_printf_i+0xa8>
 8009fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ff2:	2b15      	cmp	r3, #21
 8009ff4:	d8f6      	bhi.n	8009fe4 <_printf_i+0x28>
 8009ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8009ffc <_printf_i+0x40>)
 8009ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ffc:	0800a055 	.word	0x0800a055
 800a000:	0800a069 	.word	0x0800a069
 800a004:	08009fe5 	.word	0x08009fe5
 800a008:	08009fe5 	.word	0x08009fe5
 800a00c:	08009fe5 	.word	0x08009fe5
 800a010:	08009fe5 	.word	0x08009fe5
 800a014:	0800a069 	.word	0x0800a069
 800a018:	08009fe5 	.word	0x08009fe5
 800a01c:	08009fe5 	.word	0x08009fe5
 800a020:	08009fe5 	.word	0x08009fe5
 800a024:	08009fe5 	.word	0x08009fe5
 800a028:	0800a169 	.word	0x0800a169
 800a02c:	0800a093 	.word	0x0800a093
 800a030:	0800a123 	.word	0x0800a123
 800a034:	08009fe5 	.word	0x08009fe5
 800a038:	08009fe5 	.word	0x08009fe5
 800a03c:	0800a18b 	.word	0x0800a18b
 800a040:	08009fe5 	.word	0x08009fe5
 800a044:	0800a093 	.word	0x0800a093
 800a048:	08009fe5 	.word	0x08009fe5
 800a04c:	08009fe5 	.word	0x08009fe5
 800a050:	0800a12b 	.word	0x0800a12b
 800a054:	6833      	ldr	r3, [r6, #0]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6032      	str	r2, [r6, #0]
 800a05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a064:	2301      	movs	r3, #1
 800a066:	e09d      	b.n	800a1a4 <_printf_i+0x1e8>
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	1d19      	adds	r1, r3, #4
 800a06e:	6031      	str	r1, [r6, #0]
 800a070:	0606      	lsls	r6, r0, #24
 800a072:	d501      	bpl.n	800a078 <_printf_i+0xbc>
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	e003      	b.n	800a080 <_printf_i+0xc4>
 800a078:	0645      	lsls	r5, r0, #25
 800a07a:	d5fb      	bpl.n	800a074 <_printf_i+0xb8>
 800a07c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a080:	2d00      	cmp	r5, #0
 800a082:	da03      	bge.n	800a08c <_printf_i+0xd0>
 800a084:	232d      	movs	r3, #45	@ 0x2d
 800a086:	426d      	negs	r5, r5
 800a088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a08c:	4859      	ldr	r0, [pc, #356]	@ (800a1f4 <_printf_i+0x238>)
 800a08e:	230a      	movs	r3, #10
 800a090:	e011      	b.n	800a0b6 <_printf_i+0xfa>
 800a092:	6821      	ldr	r1, [r4, #0]
 800a094:	6833      	ldr	r3, [r6, #0]
 800a096:	0608      	lsls	r0, r1, #24
 800a098:	f853 5b04 	ldr.w	r5, [r3], #4
 800a09c:	d402      	bmi.n	800a0a4 <_printf_i+0xe8>
 800a09e:	0649      	lsls	r1, r1, #25
 800a0a0:	bf48      	it	mi
 800a0a2:	b2ad      	uxthmi	r5, r5
 800a0a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0a6:	4853      	ldr	r0, [pc, #332]	@ (800a1f4 <_printf_i+0x238>)
 800a0a8:	6033      	str	r3, [r6, #0]
 800a0aa:	bf14      	ite	ne
 800a0ac:	230a      	movne	r3, #10
 800a0ae:	2308      	moveq	r3, #8
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0b6:	6866      	ldr	r6, [r4, #4]
 800a0b8:	60a6      	str	r6, [r4, #8]
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	bfa2      	ittt	ge
 800a0be:	6821      	ldrge	r1, [r4, #0]
 800a0c0:	f021 0104 	bicge.w	r1, r1, #4
 800a0c4:	6021      	strge	r1, [r4, #0]
 800a0c6:	b90d      	cbnz	r5, 800a0cc <_printf_i+0x110>
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	d04b      	beq.n	800a164 <_printf_i+0x1a8>
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a0d6:	5dc7      	ldrb	r7, [r0, r7]
 800a0d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0dc:	462f      	mov	r7, r5
 800a0de:	42bb      	cmp	r3, r7
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	d9f4      	bls.n	800a0ce <_printf_i+0x112>
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d10b      	bne.n	800a100 <_printf_i+0x144>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	07df      	lsls	r7, r3, #31
 800a0ec:	d508      	bpl.n	800a100 <_printf_i+0x144>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	bfde      	ittt	le
 800a0f6:	2330      	movle	r3, #48	@ 0x30
 800a0f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a100:	1b92      	subs	r2, r2, r6
 800a102:	6122      	str	r2, [r4, #16]
 800a104:	f8cd a000 	str.w	sl, [sp]
 800a108:	464b      	mov	r3, r9
 800a10a:	aa03      	add	r2, sp, #12
 800a10c:	4621      	mov	r1, r4
 800a10e:	4640      	mov	r0, r8
 800a110:	f7ff fee6 	bl	8009ee0 <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	d14a      	bne.n	800a1ae <_printf_i+0x1f2>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	b004      	add	sp, #16
 800a11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	f043 0320 	orr.w	r3, r3, #32
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	4833      	ldr	r0, [pc, #204]	@ (800a1f8 <_printf_i+0x23c>)
 800a12c:	2778      	movs	r7, #120	@ 0x78
 800a12e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	6831      	ldr	r1, [r6, #0]
 800a136:	061f      	lsls	r7, r3, #24
 800a138:	f851 5b04 	ldr.w	r5, [r1], #4
 800a13c:	d402      	bmi.n	800a144 <_printf_i+0x188>
 800a13e:	065f      	lsls	r7, r3, #25
 800a140:	bf48      	it	mi
 800a142:	b2ad      	uxthmi	r5, r5
 800a144:	6031      	str	r1, [r6, #0]
 800a146:	07d9      	lsls	r1, r3, #31
 800a148:	bf44      	itt	mi
 800a14a:	f043 0320 	orrmi.w	r3, r3, #32
 800a14e:	6023      	strmi	r3, [r4, #0]
 800a150:	b11d      	cbz	r5, 800a15a <_printf_i+0x19e>
 800a152:	2310      	movs	r3, #16
 800a154:	e7ac      	b.n	800a0b0 <_printf_i+0xf4>
 800a156:	4827      	ldr	r0, [pc, #156]	@ (800a1f4 <_printf_i+0x238>)
 800a158:	e7e9      	b.n	800a12e <_printf_i+0x172>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	f023 0320 	bic.w	r3, r3, #32
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	e7f6      	b.n	800a152 <_printf_i+0x196>
 800a164:	4616      	mov	r6, r2
 800a166:	e7bd      	b.n	800a0e4 <_printf_i+0x128>
 800a168:	6833      	ldr	r3, [r6, #0]
 800a16a:	6825      	ldr	r5, [r4, #0]
 800a16c:	6961      	ldr	r1, [r4, #20]
 800a16e:	1d18      	adds	r0, r3, #4
 800a170:	6030      	str	r0, [r6, #0]
 800a172:	062e      	lsls	r6, r5, #24
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	d501      	bpl.n	800a17c <_printf_i+0x1c0>
 800a178:	6019      	str	r1, [r3, #0]
 800a17a:	e002      	b.n	800a182 <_printf_i+0x1c6>
 800a17c:	0668      	lsls	r0, r5, #25
 800a17e:	d5fb      	bpl.n	800a178 <_printf_i+0x1bc>
 800a180:	8019      	strh	r1, [r3, #0]
 800a182:	2300      	movs	r3, #0
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	4616      	mov	r6, r2
 800a188:	e7bc      	b.n	800a104 <_printf_i+0x148>
 800a18a:	6833      	ldr	r3, [r6, #0]
 800a18c:	1d1a      	adds	r2, r3, #4
 800a18e:	6032      	str	r2, [r6, #0]
 800a190:	681e      	ldr	r6, [r3, #0]
 800a192:	6862      	ldr	r2, [r4, #4]
 800a194:	2100      	movs	r1, #0
 800a196:	4630      	mov	r0, r6
 800a198:	f7f6 f852 	bl	8000240 <memchr>
 800a19c:	b108      	cbz	r0, 800a1a2 <_printf_i+0x1e6>
 800a19e:	1b80      	subs	r0, r0, r6
 800a1a0:	6060      	str	r0, [r4, #4]
 800a1a2:	6863      	ldr	r3, [r4, #4]
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ac:	e7aa      	b.n	800a104 <_printf_i+0x148>
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	47d0      	blx	sl
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d0ad      	beq.n	800a118 <_printf_i+0x15c>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	079b      	lsls	r3, r3, #30
 800a1c0:	d413      	bmi.n	800a1ea <_printf_i+0x22e>
 800a1c2:	68e0      	ldr	r0, [r4, #12]
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	4298      	cmp	r0, r3
 800a1c8:	bfb8      	it	lt
 800a1ca:	4618      	movlt	r0, r3
 800a1cc:	e7a6      	b.n	800a11c <_printf_i+0x160>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	47d0      	blx	sl
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d09d      	beq.n	800a118 <_printf_i+0x15c>
 800a1dc:	3501      	adds	r5, #1
 800a1de:	68e3      	ldr	r3, [r4, #12]
 800a1e0:	9903      	ldr	r1, [sp, #12]
 800a1e2:	1a5b      	subs	r3, r3, r1
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	dcf2      	bgt.n	800a1ce <_printf_i+0x212>
 800a1e8:	e7eb      	b.n	800a1c2 <_printf_i+0x206>
 800a1ea:	2500      	movs	r5, #0
 800a1ec:	f104 0619 	add.w	r6, r4, #25
 800a1f0:	e7f5      	b.n	800a1de <_printf_i+0x222>
 800a1f2:	bf00      	nop
 800a1f4:	0800aadd 	.word	0x0800aadd
 800a1f8:	0800aaee 	.word	0x0800aaee

0800a1fc <__sflush_r>:
 800a1fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	0716      	lsls	r6, r2, #28
 800a206:	4605      	mov	r5, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d454      	bmi.n	800a2b6 <__sflush_r+0xba>
 800a20c:	684b      	ldr	r3, [r1, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dc02      	bgt.n	800a218 <__sflush_r+0x1c>
 800a212:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd48      	ble.n	800a2aa <__sflush_r+0xae>
 800a218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d045      	beq.n	800a2aa <__sflush_r+0xae>
 800a21e:	2300      	movs	r3, #0
 800a220:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a224:	682f      	ldr	r7, [r5, #0]
 800a226:	6a21      	ldr	r1, [r4, #32]
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	d030      	beq.n	800a28e <__sflush_r+0x92>
 800a22c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	0759      	lsls	r1, r3, #29
 800a232:	d505      	bpl.n	800a240 <__sflush_r+0x44>
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a23a:	b10b      	cbz	r3, 800a240 <__sflush_r+0x44>
 800a23c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	2300      	movs	r3, #0
 800a242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	4628      	mov	r0, r5
 800a248:	47b0      	blx	r6
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	d106      	bne.n	800a25e <__sflush_r+0x62>
 800a250:	6829      	ldr	r1, [r5, #0]
 800a252:	291d      	cmp	r1, #29
 800a254:	d82b      	bhi.n	800a2ae <__sflush_r+0xb2>
 800a256:	4a2a      	ldr	r2, [pc, #168]	@ (800a300 <__sflush_r+0x104>)
 800a258:	410a      	asrs	r2, r1
 800a25a:	07d6      	lsls	r6, r2, #31
 800a25c:	d427      	bmi.n	800a2ae <__sflush_r+0xb2>
 800a25e:	2200      	movs	r2, #0
 800a260:	6062      	str	r2, [r4, #4]
 800a262:	04d9      	lsls	r1, r3, #19
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	6022      	str	r2, [r4, #0]
 800a268:	d504      	bpl.n	800a274 <__sflush_r+0x78>
 800a26a:	1c42      	adds	r2, r0, #1
 800a26c:	d101      	bne.n	800a272 <__sflush_r+0x76>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b903      	cbnz	r3, 800a274 <__sflush_r+0x78>
 800a272:	6560      	str	r0, [r4, #84]	@ 0x54
 800a274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a276:	602f      	str	r7, [r5, #0]
 800a278:	b1b9      	cbz	r1, 800a2aa <__sflush_r+0xae>
 800a27a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a27e:	4299      	cmp	r1, r3
 800a280:	d002      	beq.n	800a288 <__sflush_r+0x8c>
 800a282:	4628      	mov	r0, r5
 800a284:	f7ff fbf2 	bl	8009a6c <_free_r>
 800a288:	2300      	movs	r3, #0
 800a28a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a28c:	e00d      	b.n	800a2aa <__sflush_r+0xae>
 800a28e:	2301      	movs	r3, #1
 800a290:	4628      	mov	r0, r5
 800a292:	47b0      	blx	r6
 800a294:	4602      	mov	r2, r0
 800a296:	1c50      	adds	r0, r2, #1
 800a298:	d1c9      	bne.n	800a22e <__sflush_r+0x32>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0c6      	beq.n	800a22e <__sflush_r+0x32>
 800a2a0:	2b1d      	cmp	r3, #29
 800a2a2:	d001      	beq.n	800a2a8 <__sflush_r+0xac>
 800a2a4:	2b16      	cmp	r3, #22
 800a2a6:	d11e      	bne.n	800a2e6 <__sflush_r+0xea>
 800a2a8:	602f      	str	r7, [r5, #0]
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e022      	b.n	800a2f4 <__sflush_r+0xf8>
 800a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b2:	b21b      	sxth	r3, r3
 800a2b4:	e01b      	b.n	800a2ee <__sflush_r+0xf2>
 800a2b6:	690f      	ldr	r7, [r1, #16]
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	d0f6      	beq.n	800a2aa <__sflush_r+0xae>
 800a2bc:	0793      	lsls	r3, r2, #30
 800a2be:	680e      	ldr	r6, [r1, #0]
 800a2c0:	bf08      	it	eq
 800a2c2:	694b      	ldreq	r3, [r1, #20]
 800a2c4:	600f      	str	r7, [r1, #0]
 800a2c6:	bf18      	it	ne
 800a2c8:	2300      	movne	r3, #0
 800a2ca:	eba6 0807 	sub.w	r8, r6, r7
 800a2ce:	608b      	str	r3, [r1, #8]
 800a2d0:	f1b8 0f00 	cmp.w	r8, #0
 800a2d4:	dde9      	ble.n	800a2aa <__sflush_r+0xae>
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2da:	4643      	mov	r3, r8
 800a2dc:	463a      	mov	r2, r7
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b0      	blx	r6
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	dc08      	bgt.n	800a2f8 <__sflush_r+0xfc>
 800a2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f8:	4407      	add	r7, r0
 800a2fa:	eba8 0800 	sub.w	r8, r8, r0
 800a2fe:	e7e7      	b.n	800a2d0 <__sflush_r+0xd4>
 800a300:	dfbffffe 	.word	0xdfbffffe

0800a304 <_fflush_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	690b      	ldr	r3, [r1, #16]
 800a308:	4605      	mov	r5, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b913      	cbnz	r3, 800a314 <_fflush_r+0x10>
 800a30e:	2500      	movs	r5, #0
 800a310:	4628      	mov	r0, r5
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	b118      	cbz	r0, 800a31e <_fflush_r+0x1a>
 800a316:	6a03      	ldr	r3, [r0, #32]
 800a318:	b90b      	cbnz	r3, 800a31e <_fflush_r+0x1a>
 800a31a:	f7ff f9ad 	bl	8009678 <__sinit>
 800a31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0f3      	beq.n	800a30e <_fflush_r+0xa>
 800a326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a328:	07d0      	lsls	r0, r2, #31
 800a32a:	d404      	bmi.n	800a336 <_fflush_r+0x32>
 800a32c:	0599      	lsls	r1, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_fflush_r+0x32>
 800a330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a332:	f7ff fb98 	bl	8009a66 <__retarget_lock_acquire_recursive>
 800a336:	4628      	mov	r0, r5
 800a338:	4621      	mov	r1, r4
 800a33a:	f7ff ff5f 	bl	800a1fc <__sflush_r>
 800a33e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a340:	07da      	lsls	r2, r3, #31
 800a342:	4605      	mov	r5, r0
 800a344:	d4e4      	bmi.n	800a310 <_fflush_r+0xc>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	059b      	lsls	r3, r3, #22
 800a34a:	d4e1      	bmi.n	800a310 <_fflush_r+0xc>
 800a34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a34e:	f7ff fb8b 	bl	8009a68 <__retarget_lock_release_recursive>
 800a352:	e7dd      	b.n	800a310 <_fflush_r+0xc>

0800a354 <__swhatbuf_r>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	460c      	mov	r4, r1
 800a358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35c:	2900      	cmp	r1, #0
 800a35e:	b096      	sub	sp, #88	@ 0x58
 800a360:	4615      	mov	r5, r2
 800a362:	461e      	mov	r6, r3
 800a364:	da0d      	bge.n	800a382 <__swhatbuf_r+0x2e>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a36c:	f04f 0100 	mov.w	r1, #0
 800a370:	bf14      	ite	ne
 800a372:	2340      	movne	r3, #64	@ 0x40
 800a374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a378:	2000      	movs	r0, #0
 800a37a:	6031      	str	r1, [r6, #0]
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	b016      	add	sp, #88	@ 0x58
 800a380:	bd70      	pop	{r4, r5, r6, pc}
 800a382:	466a      	mov	r2, sp
 800a384:	f000 f848 	bl	800a418 <_fstat_r>
 800a388:	2800      	cmp	r0, #0
 800a38a:	dbec      	blt.n	800a366 <__swhatbuf_r+0x12>
 800a38c:	9901      	ldr	r1, [sp, #4]
 800a38e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a396:	4259      	negs	r1, r3
 800a398:	4159      	adcs	r1, r3
 800a39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a39e:	e7eb      	b.n	800a378 <__swhatbuf_r+0x24>

0800a3a0 <__smakebuf_r>:
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3a4:	079d      	lsls	r5, r3, #30
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d507      	bpl.n	800a3bc <__smakebuf_r+0x1c>
 800a3ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	b003      	add	sp, #12
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3bc:	ab01      	add	r3, sp, #4
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f7ff ffc8 	bl	800a354 <__swhatbuf_r>
 800a3c4:	9f00      	ldr	r7, [sp, #0]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff fbba 	bl	8009b44 <_malloc_r>
 800a3d0:	b948      	cbnz	r0, 800a3e6 <__smakebuf_r+0x46>
 800a3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d6:	059a      	lsls	r2, r3, #22
 800a3d8:	d4ee      	bmi.n	800a3b8 <__smakebuf_r+0x18>
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	f043 0302 	orr.w	r3, r3, #2
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	e7e2      	b.n	800a3ac <__smakebuf_r+0xc>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	6020      	str	r0, [r4, #0]
 800a3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3f6:	b15b      	cbz	r3, 800a410 <__smakebuf_r+0x70>
 800a3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f000 f81d 	bl	800a43c <_isatty_r>
 800a402:	b128      	cbz	r0, 800a410 <__smakebuf_r+0x70>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	431d      	orrs	r5, r3
 800a414:	81a5      	strh	r5, [r4, #12]
 800a416:	e7cf      	b.n	800a3b8 <__smakebuf_r+0x18>

0800a418 <_fstat_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	@ (800a438 <_fstat_r+0x20>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	f7f7 fcda 	bl	8001dde <_fstat>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d102      	bne.n	800a434 <_fstat_r+0x1c>
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	b103      	cbz	r3, 800a434 <_fstat_r+0x1c>
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	20003674 	.word	0x20003674

0800a43c <_isatty_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d06      	ldr	r5, [pc, #24]	@ (800a458 <_isatty_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7f7 fcd9 	bl	8001dfe <_isatty>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_isatty_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_isatty_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20003674 	.word	0x20003674

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	@ (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 fce2 	bl	8001e30 <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20003674 	.word	0x20003674

0800a47c <_init>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	bf00      	nop
 800a480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a482:	bc08      	pop	{r3}
 800a484:	469e      	mov	lr, r3
 800a486:	4770      	bx	lr

0800a488 <_fini>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	bf00      	nop
 800a48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48e:	bc08      	pop	{r3}
 800a490:	469e      	mov	lr, r3
 800a492:	4770      	bx	lr
