
MAAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ebc  08006ebc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ebc  08006ebc  00007ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec4  08006ec4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec4  08006ec4  00007ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ec8  08006ec8  00007ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006ecc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000068  08006f34  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08006f34  00008638  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f23c  00000000  00000000  00008096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db1  00000000  00000000  000172d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0001a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a87  00000000  00000000  0001aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a46a  00000000  00000000  0001b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bc5  00000000  00000000  00045d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5cb0  00000000  00000000  0005995e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f60e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  0014f654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00153618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08006de8 	.word	0x08006de8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08006de8 	.word	0x08006de8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sd_card_init>:
#include "stdint.h"

static FRESULT sd_result;
static FATFS sdCard;
//static FIL testFile;
void sd_card_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	uint8_t file_name[] = "test.txt";
	uint8_t temp_number;
	uint8_t test_text[] = "Hola, esto es un texto de prueba.";
	*/
	// montando una tarjeta SD
	sd_result = f_mount(&sdCard,SDPath,1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <sd_card_init+0x38>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <sd_card_init+0x3c>)
 80005da:	f005 fbd5 	bl	8005d88 <f_mount>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <sd_card_init+0x40>)
 80005e4:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <sd_card_init+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <sd_card_init+0x2e>
		printf("Error montando la tarjeta SD: %d \n", sd_result);
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <sd_card_init+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <sd_card_init+0x44>)
 80005f6:	f005 fd2b 	bl	8006050 <iprintf>
		while(1);
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <sd_card_init+0x2a>
	}
	else {
		printf("Tarjeta SD montada \n");
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <sd_card_init+0x48>)
 8000600:	f005 fd8e 	bl	8006120 <puts>
	else {
		printf("Contenido del archivo escrito: %d \n", temp_number);
	}
	f_close(&testFile);
	*/
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200004b4 	.word	0x200004b4
 800060c:	20000088 	.word	0x20000088
 8000610:	20000084 	.word	0x20000084
 8000614:	08006e00 	.word	0x08006e00
 8000618:	08006e24 	.word	0x08006e24

0800061c <start_recording>:

void start_recording (uint32_t frequency) {
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <stop_recording>:

void write2wave_file (uint8_t *data, uint16_t data_size) {

}

void stop_recording () {
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000646:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800064a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d013      	beq.n	800067e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000656:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800065a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800065e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00b      	beq.n	800067e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000666:	e000      	b.n	800066a <ITM_SendChar+0x2c>
    {
      __NOP();
 8000668:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800066a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000674:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800067e:	687b      	ldr	r3, [r7, #4]
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000690:	f000 f9ba 	bl	8000a08 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fc59 	bl	8000f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f842 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f914 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a0:	f000 f8f4 	bl	800088c <MX_DMA_Init>
  MX_I2S2_Init();
 80006a4:	f000 f8a6 	bl	80007f4 <MX_I2S2_Init>
  MX_SDMMC1_SD_Init();
 80006a8:	f000 f8ce 	bl	8000848 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006ac:	f004 fd96 	bl	80051dc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) data_i2s, sizeof(data_i2s)/2);
 80006b0:	2264      	movs	r2, #100	@ 0x64
 80006b2:	4915      	ldr	r1, [pc, #84]	@ (8000708 <main+0x7c>)
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <main+0x80>)
 80006b6:	f001 fc8d 	bl	8001fd4 <HAL_I2S_Receive_DMA>
  HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006be:	f000 fca1 	bl	8001004 <HAL_Delay>
  sd_card_init();
 80006c2:	f7ff ff85 	bl	80005d0 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_flag) {
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <main+0x84>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0fa      	beq.n	80006c6 <main+0x3a>
		  if (start_stop_recording) {
 80006d0:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <main+0x88>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d008      	beq.n	80006ec <main+0x60>
			  start_stop_recording = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <main+0x88>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 80006e0:	f7ff ffa6 	bl	8000630 <stop_recording>
			  printf("Grabación terminada.\n");
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <main+0x8c>)
 80006e6:	f005 fd1b 	bl	8006120 <puts>
 80006ea:	e009      	b.n	8000700 <main+0x74>
		  }
		  else {
			  start_stop_recording = 1;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <main+0x88>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 80006f2:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 80006f6:	f7ff ff91 	bl	800061c <start_recording>
			  printf("Grabando...\n");
 80006fa:	4808      	ldr	r0, [pc, #32]	@ (800071c <main+0x90>)
 80006fc:	f005 fd10 	bl	8006120 <puts>
		  }
		  button_flag = 0;
 8000700:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <main+0x84>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	  if (button_flag) {
 8000706:	e7de      	b.n	80006c6 <main+0x3a>
 8000708:	200003dc 	.word	0x200003dc
 800070c:	200002b8 	.word	0x200002b8
 8000710:	200004a6 	.word	0x200004a6
 8000714:	200004a7 	.word	0x200004a7
 8000718:	08006e38 	.word	0x08006e38
 800071c:	08006e50 	.word	0x08006e50

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	@ 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fdd6 	bl	80062e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a28      	ldr	r2, [pc, #160]	@ (80007ec <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000790:	23a0      	movs	r3, #160	@ 0xa0
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000798:	2307      	movs	r3, #7
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fd87 	bl	80022b8 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f956 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f81e 	bl	8002814 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f93f 	bl	8000a60 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_I2S2_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2S2_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_I2S2_Init+0x4c>)
 8000800:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000804:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_I2S2_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_I2S2_Init+0x4c>)
 800080e:	2201      	movs	r2, #1
 8000810:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_I2S2_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_I2S2_Init+0x4c>)
 800081a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800081e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_I2S2_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_I2S2_Init+0x4c>)
 8000828:	2202      	movs	r2, #2
 800082a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_I2S2_Init+0x4c>)
 800082e:	f001 faeb 	bl	8001e08 <HAL_I2S_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8000838:	f000 f912 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200002b8 	.word	0x200002b8
 8000844:	40003800 	.word	0x40003800

08000848 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 800084e:	4a0e      	ldr	r2, [pc, #56]	@ (8000888 <MX_SDMMC1_SD_Init+0x40>)
 8000850:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 8000866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800086a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <MX_SDMMC1_SD_Init+0x3c>)
 8000874:	2208      	movs	r2, #8
 8000876:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000358 	.word	0x20000358
 8000888:	40012c00 	.word	0x40012c00

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_DMA_Init+0x38>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <MX_DMA_Init+0x38>)
 8000898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_DMA_Init+0x38>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	200c      	movs	r0, #12
 80008b0:	f000 fca7 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b4:	200c      	movs	r0, #12
 80008b6:	f000 fcc0 	bl	800123a <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_GPIO_Init+0xac>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a24      	ldr	r2, [pc, #144]	@ (8000974 <MX_GPIO_Init+0xac>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_GPIO_Init+0xac>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_GPIO_Init+0xac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <MX_GPIO_Init+0xac>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_GPIO_Init+0xac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_GPIO_Init+0xac>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <MX_GPIO_Init+0xac>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_GPIO_Init+0xac>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_GPIO_Init+0xb0>)
 800093e:	f001 f887 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <MX_GPIO_Init+0xb4>)
 8000956:	f001 f87b 	bl	8001a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2028      	movs	r0, #40	@ 0x28
 8000960:	f000 fc4f 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	@ 0x28
 8000966:	f000 fc68 	bl	800123a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00

08000980 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e009      	b.n	80009a6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	60ba      	str	r2, [r7, #8]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe4f 	bl	800063e <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dbf1      	blt.n	8000992 <_write+0x12>
  }
  return len;
 80009ae:	687b      	ldr	r3, [r7, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_I2S_RxCpltCallback+0x20>)
 80009c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_I2S_RxCpltCallback+0x24>)
 80009c8:	801a      	strh	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200003dc 	.word	0x200003dc
 80009dc:	200004a4 	.word	0x200004a4

080009e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin) {
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f0:	d102      	bne.n	80009f8 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <HAL_GPIO_EXTI_Callback+0x24>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
	}
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200004a6 	.word	0x200004a6

08000a08 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a1a:	f000 fc29 	bl	8001270 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a2a:	231f      	movs	r3, #31
 8000a2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a2e:	2387      	movs	r3, #135	@ 0x87
 8000a30:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a36:	2300      	movs	r3, #0
 8000a38:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fc47 	bl	80012e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a52:	2004      	movs	r0, #4
 8000a54:	f000 fc24 	bl	80012a0 <HAL_MPU_Enable>

}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2290      	movs	r2, #144	@ 0x90
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 fc03 	bl	80062e0 <memset>
  if(hi2s->Instance==SPI2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a4f      	ldr	r2, [pc, #316]	@ (8000c1c <HAL_I2S_MspInit+0x168>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	f040 8096 	bne.w	8000c12 <HAL_I2S_MspInit+0x15e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000ae6:	2360      	movs	r3, #96	@ 0x60
 8000ae8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000afa:	2300      	movs	r3, #0
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 f838 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 8000b0e:	f7ff ffa7 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b12:	4b43      	ldr	r3, [pc, #268]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a42      	ldr	r2, [pc, #264]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b40      	ldr	r3, [pc, #256]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b3a      	ldr	r3, [pc, #232]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b37      	ldr	r3, [pc, #220]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a36      	ldr	r2, [pc, #216]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b34      	ldr	r3, [pc, #208]	@ (8000c20 <HAL_I2S_MspInit+0x16c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4829      	ldr	r0, [pc, #164]	@ (8000c24 <HAL_I2S_MspInit+0x170>)
 8000b80:	f000 ff66 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481f      	ldr	r0, [pc, #124]	@ (8000c28 <HAL_I2S_MspInit+0x174>)
 8000bac:	f000 ff50 	bl	8001a50 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_I2S_MspInit+0x17c>)
 8000bb4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bb8:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000bf8:	f000 fbb2 	bl	8001360 <HAL_DMA_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 8000c02:	f7ff ff2d 	bl	8000a60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000c0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_I2S_MspInit+0x178>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000c12:	bf00      	nop
 8000c14:	37b8      	adds	r7, #184	@ 0xb8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40003800 	.word	0x40003800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	200002f8 	.word	0x200002f8
 8000c30:	40026028 	.word	0x40026028

08000c34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0ae      	sub	sp, #184	@ 0xb8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2290      	movs	r2, #144	@ 0x90
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 fb43 	bl	80062e0 <memset>
  if(hsd->Instance==SDMMC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <HAL_SD_MspInit+0xfc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d161      	bne.n	8000d28 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000c64:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8000c68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 ff7c 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000c86:	f7ff feeb 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a29      	ldr	r2, [pc, #164]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000c90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cd2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cec:	230c      	movs	r3, #12
 8000cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <HAL_SD_MspInit+0x104>)
 8000cfa:	f000 fea9 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d16:	230c      	movs	r3, #12
 8000d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <HAL_SD_MspInit+0x108>)
 8000d24:	f000 fe94 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	37b8      	adds	r7, #184	@ 0xb8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <NMI_Handler+0x4>

08000d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <MemManage_Handler+0x4>

08000d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f000 f915 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA1_Stream1_IRQHandler+0x10>)
 8000da6:	f000 fbe9 	bl	800157c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200002f8 	.word	0x200002f8

08000db4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8000db8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dbc:	f001 f80c 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f3af 8000 	nop.w
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f005 fa70 	bl	800637c <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20080000 	.word	0x20080000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	200004a8 	.word	0x200004a8
 8000ed0:	20000638 	.word	0x20000638

08000ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efc:	f7ff ffea 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f005 fa2f 	bl	8006388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fbaf 	bl	800068c <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f3c:	08006ecc 	.word	0x08006ecc
  ldr r2, =_sbss
 8000f40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f44:	20000638 	.word	0x20000638

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>

08000f4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f94c 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f54:	200f      	movs	r0, #15
 8000f56:	f000 f805 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5a:	f7ff fd87 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f967 	bl	8001256 <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f92f 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	200004ac 	.word	0x200004ac

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200004ac 	.word	0x200004ac

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008

0800104c <__NVIC_SetPriorityGrouping>:
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	@ (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff3e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff31 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001274:	f3bf 8f5f 	dmb	sy
}
 8001278:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_MPU_Disable+0x28>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	4a06      	ldr	r2, [pc, #24]	@ (8001298 <HAL_MPU_Disable+0x28>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001284:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_MPU_Disable+0x2c>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	e000ed90 	.word	0xe000ed90

080012a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <HAL_MPU_Enable+0x38>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_MPU_Enable+0x3c>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <HAL_MPU_Enable+0x3c>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012be:	f3bf 8f4f 	dsb	sy
}
 80012c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c4:	f3bf 8f6f 	isb	sy
}
 80012c8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed90 	.word	0xe000ed90
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	785a      	ldrb	r2, [r3, #1]
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_MPU_ConfigRegion+0x7c>)
 80012ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_MPU_ConfigRegion+0x7c>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4a19      	ldr	r2, [pc, #100]	@ (800135c <HAL_MPU_ConfigRegion+0x7c>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012fc:	4a17      	ldr	r2, [pc, #92]	@ (800135c <HAL_MPU_ConfigRegion+0x7c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7b1b      	ldrb	r3, [r3, #12]
 8001308:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7adb      	ldrb	r3, [r3, #11]
 800130e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001310:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7a9b      	ldrb	r3, [r3, #10]
 8001316:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001318:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7b5b      	ldrb	r3, [r3, #13]
 800131e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001320:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7b9b      	ldrb	r3, [r3, #14]
 8001326:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001328:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7bdb      	ldrb	r3, [r3, #15]
 800132e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001330:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7a5b      	ldrb	r3, [r3, #9]
 8001336:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001338:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7a1b      	ldrb	r3, [r3, #8]
 800133e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001340:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800134a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800134c:	6113      	str	r3, [r2, #16]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed90 	.word	0xe000ed90

08001360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff fe3e 	bl	8000fec <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e099      	b.n	80014b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139c:	e00f      	b.n	80013be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139e:	f7ff fe25 	bl	8000fec <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d908      	bls.n	80013be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e078      	b.n	80014b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e8      	bne.n	800139e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_DMA_Init+0x158>)
 80013d8:	4013      	ands	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	2b04      	cmp	r3, #4
 8001416:	d107      	bne.n	8001428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	4313      	orrs	r3, r2
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f023 0307 	bic.w	r3, r3, #7
 800143e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	2b04      	cmp	r3, #4
 8001450:	d117      	bne.n	8001482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fa77 	bl	8001958 <DMA_CheckFifoParam>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2240      	movs	r2, #64	@ 0x40
 8001474:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800147e:	2301      	movs	r3, #1
 8001480:	e016      	b.n	80014b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fa2e 	bl	80018ec <DMA_CalcBaseAndBitshift>
 8001490:	4603      	mov	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001498:	223f      	movs	r2, #63	@ 0x3f
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	e010803f 	.word	0xe010803f

080014bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_DMA_Start_IT+0x26>
 80014de:	2302      	movs	r3, #2
 80014e0:	e048      	b.n	8001574 <HAL_DMA_Start_IT+0xb8>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d137      	bne.n	8001566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f9c0 	bl	8001890 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001514:	223f      	movs	r2, #63	@ 0x3f
 8001516:	409a      	lsls	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0216 	orr.w	r2, r2, #22
 800152a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800153a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0208 	orr.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e005      	b.n	8001572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001588:	4b8e      	ldr	r3, [pc, #568]	@ (80017c4 <HAL_DMA_IRQHandler+0x248>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a8e      	ldr	r2, [pc, #568]	@ (80017c8 <HAL_DMA_IRQHandler+0x24c>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a6:	2208      	movs	r2, #8
 80015a8:	409a      	lsls	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01a      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0204 	bic.w	r2, r2, #4
 80015ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d4:	2208      	movs	r2, #8
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	2201      	movs	r2, #1
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160a:	2201      	movs	r2, #1
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001616:	f043 0202 	orr.w	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	2204      	movs	r2, #4
 8001624:	409a      	lsls	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001640:	2204      	movs	r2, #4
 8001642:	409a      	lsls	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001658:	2210      	movs	r2, #16
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d043      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03c      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	2210      	movs	r2, #16
 8001678:	409a      	lsls	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d018      	beq.n	80016be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d024      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
 80016aa:	e01f      	b.n	80016ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e016      	b.n	80016ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0208 	bic.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f0:	2220      	movs	r2, #32
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 808f 	beq.w	800181c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8087 	beq.w	800181c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	2220      	movs	r2, #32
 8001714:	409a      	lsls	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b05      	cmp	r3, #5
 8001724:	d136      	bne.n	8001794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0216 	bic.w	r2, r2, #22
 8001734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <HAL_DMA_IRQHandler+0x1da>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0208 	bic.w	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176a:	223f      	movs	r2, #63	@ 0x3f
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001786:	2b00      	cmp	r3, #0
 8001788:	d07e      	beq.n	8001888 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
        }
        return;
 8001792:	e079      	b.n	8001888 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01d      	beq.n	80017de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d031      	beq.n	800181c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
 80017c0:	e02c      	b.n	800181c <HAL_DMA_IRQHandler+0x2a0>
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000
 80017c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
 80017dc:	e01e      	b.n	800181c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0210 	bic.w	r2, r2, #16
 80017fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	2b00      	cmp	r3, #0
 8001822:	d032      	beq.n	800188a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d022      	beq.n	8001876 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2205      	movs	r2, #5
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3301      	adds	r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	d307      	bcc.n	8001864 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f2      	bne.n	8001848 <HAL_DMA_IRQHandler+0x2cc>
 8001862:	e000      	b.n	8001866 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001864:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
 8001886:	e000      	b.n	800188a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001888:	bf00      	nop
    }
  }
}
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b40      	cmp	r3, #64	@ 0x40
 80018bc:	d108      	bne.n	80018d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ce:	e007      	b.n	80018e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b10      	subs	r3, #16
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <DMA_CalcBaseAndBitshift+0x60>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <DMA_CalcBaseAndBitshift+0x64>)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d908      	bls.n	800192c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 8001922:	4013      	ands	r3, r2
 8001924:	1d1a      	adds	r2, r3, #4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	659a      	str	r2, [r3, #88]	@ 0x58
 800192a:	e006      	b.n	800193a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	aaaaaaab 	.word	0xaaaaaaab
 8001950:	08006e6c 	.word	0x08006e6c
 8001954:	fffffc00 	.word	0xfffffc00

08001958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11f      	bne.n	80019b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d856      	bhi.n	8001a26 <DMA_CheckFifoParam+0xce>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <DMA_CheckFifoParam+0x28>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	080019a3 	.word	0x080019a3
 8001988:	08001991 	.word	0x08001991
 800198c:	08001a27 	.word	0x08001a27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d046      	beq.n	8001a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a0:	e043      	b.n	8001a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019aa:	d140      	bne.n	8001a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b0:	e03d      	b.n	8001a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ba:	d121      	bne.n	8001a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d837      	bhi.n	8001a32 <DMA_CheckFifoParam+0xda>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <DMA_CheckFifoParam+0x70>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019df 	.word	0x080019df
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	080019f1 	.word	0x080019f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      break;
 80019dc:	e030      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d025      	beq.n	8001a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ee:	e022      	b.n	8001a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019f8:	d11f      	bne.n	8001a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019fe:	e01c      	b.n	8001a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d903      	bls.n	8001a0e <DMA_CheckFifoParam+0xb6>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d003      	beq.n	8001a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a0c:	e018      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
      break;
 8001a12:	e015      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
      break;
 8001a24:	e00b      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a26:	bf00      	nop
 8001a28:	e00a      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e008      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e006      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
 8001a34:	e004      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a36:	bf00      	nop
 8001a38:	e002      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a3a:	bf00      	nop
 8001a3c:	e000      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e175      	b.n	8001d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8164 	bne.w	8001d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d005      	beq.n	8001aa6 <HAL_GPIO_Init+0x56>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d130      	bne.n	8001b08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 0201 	and.w	r2, r3, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d017      	beq.n	8001b44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d123      	bne.n	8001b98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80be 	beq.w	8001d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	4b66      	ldr	r3, [pc, #408]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a65      	ldr	r2, [pc, #404]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b63      	ldr	r3, [pc, #396]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bf2:	4a61      	ldr	r2, [pc, #388]	@ (8001d78 <HAL_GPIO_Init+0x328>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <HAL_GPIO_Init+0x32c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d037      	beq.n	8001c8e <HAL_GPIO_Init+0x23e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a57      	ldr	r2, [pc, #348]	@ (8001d80 <HAL_GPIO_Init+0x330>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d031      	beq.n	8001c8a <HAL_GPIO_Init+0x23a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a56      	ldr	r2, [pc, #344]	@ (8001d84 <HAL_GPIO_Init+0x334>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02b      	beq.n	8001c86 <HAL_GPIO_Init+0x236>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a55      	ldr	r2, [pc, #340]	@ (8001d88 <HAL_GPIO_Init+0x338>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d025      	beq.n	8001c82 <HAL_GPIO_Init+0x232>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a54      	ldr	r2, [pc, #336]	@ (8001d8c <HAL_GPIO_Init+0x33c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <HAL_GPIO_Init+0x22e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a53      	ldr	r2, [pc, #332]	@ (8001d90 <HAL_GPIO_Init+0x340>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x22a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a52      	ldr	r2, [pc, #328]	@ (8001d94 <HAL_GPIO_Init+0x344>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x226>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a51      	ldr	r2, [pc, #324]	@ (8001d98 <HAL_GPIO_Init+0x348>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x222>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_GPIO_Init+0x34c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x21e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4f      	ldr	r2, [pc, #316]	@ (8001da0 <HAL_GPIO_Init+0x350>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x21a>
 8001c66:	2309      	movs	r3, #9
 8001c68:	e012      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	e010      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	e00e      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00c      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c76:	2306      	movs	r3, #6
 8001c78:	e00a      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	e008      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x240>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ca0:	4935      	ldr	r1, [pc, #212]	@ (8001d78 <HAL_GPIO_Init+0x328>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cae:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd2:	4a34      	ldr	r2, [pc, #208]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cfc:	4a29      	ldr	r2, [pc, #164]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d02:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d26:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <HAL_GPIO_Init+0x354>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	f67f ae86 	bls.w	8001a70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40021400 	.word	0x40021400
 8001d94:	40021800 	.word	0x40021800
 8001d98:	40021c00 	.word	0x40021c00
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40022400 	.word	0x40022400
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fdf2 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0d2      	b.n	8001fc0 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fe40 	bl	8000ab4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69d9      	ldr	r1, [r3, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b60      	ldr	r3, [pc, #384]	@ (8001fc8 <HAL_I2S_Init+0x1c0>)
 8001e48:	400b      	ands	r3, r1
 8001e4a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d067      	beq.n	8001f2c <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e64:	2310      	movs	r3, #16
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e001      	b.n	8001e6e <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d802      	bhi.n	8001e7c <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001e84:	4b51      	ldr	r3, [pc, #324]	@ (8001fcc <HAL_I2S_Init+0x1c4>)
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e003      	b.n	8001e92 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f972 	bl	8002174 <I2S_GetClockFreq>
 8001e90:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e9a:	d125      	bne.n	8001ee8 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	3305      	adds	r3, #5
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e01f      	b.n	8001f06 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	3305      	adds	r3, #5
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e00e      	b.n	8001f06 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	461a      	mov	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	3305      	adds	r3, #5
 8001f04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <HAL_I2S_Init+0x1c8>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e003      	b.n	8001f34 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d902      	bls.n	8001f40 <HAL_I2S_Init+0x138>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2bff      	cmp	r3, #255	@ 0xff
 8001f3e:	d907      	bls.n	8001f50 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e037      	b.n	8001fc0 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	ea42 0103 	orr.w	r1, r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <HAL_I2S_Init+0x1c0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6851      	ldr	r1, [r2, #4]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6892      	ldr	r2, [r2, #8]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68d2      	ldr	r2, [r2, #12]
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6992      	ldr	r2, [r2, #24]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f8e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b30      	cmp	r3, #48	@ 0x30
 8001f96:	d003      	beq.n	8001fa0 <HAL_I2S_Init+0x198>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001fae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fffff040 	.word	0xfffff040
 8001fcc:	00bb8000 	.word	0x00bb8000
 8001fd0:	cccccccd 	.word	0xcccccccd

08001fd4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_I2S_Receive_DMA+0x1a>
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0a1      	b.n	8002136 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_I2S_Receive_DMA+0x2e>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e099      	b.n	8002136 <HAL_I2S_Receive_DMA+0x162>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d005      	beq.n	8002022 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
 8002020:	e089      	b.n	8002136 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2204      	movs	r2, #4
 8002026:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d002      	beq.n	800204e <HAL_I2S_Receive_DMA+0x7a>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d10a      	bne.n	8002064 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8002062:	e005      	b.n	8002070 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	4a32      	ldr	r2, [pc, #200]	@ (8002140 <HAL_I2S_Receive_DMA+0x16c>)
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207c:	4a31      	ldr	r2, [pc, #196]	@ (8002144 <HAL_I2S_Receive_DMA+0x170>)
 800207e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002084:	4a30      	ldr	r2, [pc, #192]	@ (8002148 <HAL_I2S_Receive_DMA+0x174>)
 8002086:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002096:	d10a      	bne.n	80020ae <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80020c6:	f7ff f9f9 	bl	80014bc <HAL_DMA_Start_IT>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00f      	beq.n	80020f0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d4:	f043 0208 	orr.w	r2, r3, #8
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e022      	b.n	8002136 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800210c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800224f 	.word	0x0800224f
 8002144:	0800220d 	.word	0x0800220d
 8002148:	0800226b 	.word	0x0800226b

0800214c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d02d      	beq.n	80021e0 <I2S_GetClockFreq+0x6c>
 8002184:	2b02      	cmp	r3, #2
 8002186:	d12e      	bne.n	80021e6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <I2S_GetClockFreq+0x88>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <I2S_GetClockFreq+0x88>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800219c:	4a18      	ldr	r2, [pc, #96]	@ (8002200 <I2S_GetClockFreq+0x8c>)
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e007      	b.n	80021b6 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <I2S_GetClockFreq+0x88>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021ae:	4a15      	ldr	r2, [pc, #84]	@ (8002204 <I2S_GetClockFreq+0x90>)
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <I2S_GetClockFreq+0x88>)
 80021b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021bc:	0f1b      	lsrs	r3, r3, #28
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80021c4:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <I2S_GetClockFreq+0x88>)
 80021c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	fb03 f202 	mul.w	r2, r3, r2
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	613b      	str	r3, [r7, #16]

      break;
 80021de:	e005      	b.n	80021ec <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <I2S_GetClockFreq+0x94>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	e002      	b.n	80021ec <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
      break;
 80021ea:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80021ec:	693b      	ldr	r3, [r7, #16]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	017d7840 	.word	0x017d7840
 8002208:	00bb8000 	.word	0x00bb8000

0800220c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002218:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10e      	bne.n	8002240 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7fe fbb9 	bl	80009b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff ff75 	bl	800214c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002276:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0203 	bic.w	r2, r2, #3
 8002286:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	f043 0208 	orr.w	r2, r3, #8
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff ff59 	bl	8002160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e29b      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022dc:	4b96      	ldr	r3, [pc, #600]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d00c      	beq.n	8002302 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e8:	4b93      	ldr	r3, [pc, #588]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d112      	bne.n	800231a <HAL_RCC_OscConfig+0x62>
 80022f4:	4b90      	ldr	r3, [pc, #576]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002300:	d10b      	bne.n	800231a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002302:	4b8d      	ldr	r3, [pc, #564]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x130>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d168      	bne.n	80023e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e275      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x7a>
 8002324:	4b84      	ldr	r3, [pc, #528]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a83      	ldr	r2, [pc, #524]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0xd8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x9c>
 800233a:	4b7f      	ldr	r3, [pc, #508]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7e      	ldr	r2, [pc, #504]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b7c      	ldr	r3, [pc, #496]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7b      	ldr	r2, [pc, #492]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xd8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0xc0>
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b73      	ldr	r3, [pc, #460]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a72      	ldr	r2, [pc, #456]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xd8>
 8002378:	4b6f      	ldr	r3, [pc, #444]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6e      	ldr	r2, [pc, #440]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b6c      	ldr	r3, [pc, #432]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6b      	ldr	r2, [pc, #428]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fe28 	bl	8000fec <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fe24 	bl	8000fec <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e229      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b61      	ldr	r3, [pc, #388]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe8>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe14 	bl	8000fec <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fe10 	bl	8000fec <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e215      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b57      	ldr	r3, [pc, #348]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x110>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d069      	beq.n	80024ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f6:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b4d      	ldr	r3, [pc, #308]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x190>
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x17a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1e9      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	493d      	ldr	r1, [pc, #244]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e040      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b39      	ldr	r3, [pc, #228]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a38      	ldr	r2, [pc, #224]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fdc6 	bl	8000fec <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fdc2 	bl	8000fec <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1c7      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4929      	ldr	r1, [pc, #164]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
 8002496:	e018      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	4b27      	ldr	r3, [pc, #156]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a26      	ldr	r2, [pc, #152]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fda2 	bl	8000fec <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fd9e 	bl	8000fec <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1a3      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d038      	beq.n	8002548 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80024e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fd7f 	bl	8000fec <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fd7b 	bl	8000fec <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e180      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x23a>
 8002510:	e01a      	b.n	8002548 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002516:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <HAL_RCC_OscConfig+0x280>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe fd65 	bl	8000fec <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fd61 	bl	8000fec <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d903      	bls.n	800253c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e166      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
 8002538:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b92      	ldr	r3, [pc, #584]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a4 	beq.w	800269e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b8c      	ldr	r3, [pc, #560]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b89      	ldr	r3, [pc, #548]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a88      	ldr	r2, [pc, #544]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b86      	ldr	r3, [pc, #536]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257e:	4b83      	ldr	r3, [pc, #524]	@ (800278c <HAL_RCC_OscConfig+0x4d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800258a:	4b80      	ldr	r3, [pc, #512]	@ (800278c <HAL_RCC_OscConfig+0x4d4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7f      	ldr	r2, [pc, #508]	@ (800278c <HAL_RCC_OscConfig+0x4d4>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe fd29 	bl	8000fec <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fd25 	bl	8000fec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	@ 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e12a      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b0:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x4d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x31a>
 80025c4:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a6f      	ldr	r2, [pc, #444]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d0:	e02d      	b.n	800262e <HAL_RCC_OscConfig+0x376>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x33c>
 80025da:	4b6b      	ldr	r3, [pc, #428]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	4a6a      	ldr	r2, [pc, #424]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e6:	4b68      	ldr	r3, [pc, #416]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	4a67      	ldr	r2, [pc, #412]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f2:	e01c      	b.n	800262e <HAL_RCC_OscConfig+0x376>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x35e>
 80025fc:	4b62      	ldr	r3, [pc, #392]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a61      	ldr	r2, [pc, #388]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
 8002608:	4b5f      	ldr	r3, [pc, #380]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	4a5e      	ldr	r2, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0x376>
 8002616:	4b5c      	ldr	r3, [pc, #368]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261a:	4a5b      	ldr	r2, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6713      	str	r3, [r2, #112]	@ 0x70
 8002622:	4b59      	ldr	r3, [pc, #356]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	4a58      	ldr	r2, [pc, #352]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7fe fcd9 	bl	8000fec <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe fcd5 	bl	8000fec <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0d8      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b4c      	ldr	r3, [pc, #304]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ee      	beq.n	800263e <HAL_RCC_OscConfig+0x386>
 8002660:	e014      	b.n	800268c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fcc3 	bl	8000fec <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fcbf 	bl	8000fec <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0c2      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	4b41      	ldr	r3, [pc, #260]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ee      	bne.n	800266a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b3d      	ldr	r3, [pc, #244]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	4a3c      	ldr	r2, [pc, #240]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80ae 	beq.w	8002804 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d06d      	beq.n	8002790 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d14b      	bne.n	8002754 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b32      	ldr	r3, [pc, #200]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a31      	ldr	r2, [pc, #196]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fc90 	bl	8000fec <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fc8c 	bl	8000fec <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e091      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	491b      	ldr	r1, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fc5e 	bl	8000fec <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fc5a 	bl	8000fec <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e05f      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x47c>
 8002752:	e057      	b.n	8002804 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800275a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fc44 	bl	8000fec <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fc40 	bl	8000fec <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e045      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x4b0>
 8002786:	e03d      	b.n	8002804 <HAL_RCC_OscConfig+0x54c>
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002790:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <HAL_RCC_OscConfig+0x558>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d030      	beq.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d129      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d122      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d119      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10f      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0d0      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d910      	bls.n	800285c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 020f 	bic.w	r2, r3, #15
 8002842:	4965      	ldr	r1, [pc, #404]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b63      	ldr	r3, [pc, #396]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b8      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b59      	ldr	r3, [pc, #356]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a58      	ldr	r2, [pc, #352]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b53      	ldr	r3, [pc, #332]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494d      	ldr	r1, [pc, #308]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d040      	beq.n	8002938 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b47      	ldr	r3, [pc, #284]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d115      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b41      	ldr	r3, [pc, #260]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e073      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06b      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b39      	ldr	r3, [pc, #228]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4936      	ldr	r1, [pc, #216]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fb70 	bl	8000fec <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fb6c 	bl	8000fec <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e053      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d210      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 020f 	bic.w	r2, r3, #15
 800294e:	4922      	ldr	r1, [pc, #136]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e032      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4916      	ldr	r1, [pc, #88]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490e      	ldr	r1, [pc, #56]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 f821 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490a      	ldr	r1, [pc, #40]	@ (80029e0 <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <HAL_RCC_ClockConfig+0x1d0>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_ClockConfig+0x1d4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe facc 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08006e5c 	.word	0x08006e5c
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b090      	sub	sp, #64	@ 0x40
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029f8:	2300      	movs	r3, #0
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a04:	4b59      	ldr	r3, [pc, #356]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x40>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	f200 80a1 	bhi.w	8002b58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1e:	e09b      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b53      	ldr	r3, [pc, #332]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a24:	e09b      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a2a:	e098      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a36:	4b4d      	ldr	r3, [pc, #308]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d028      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	2200      	movs	r2, #0
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a54:	2100      	movs	r1, #0
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a58:	fb03 f201 	mul.w	r2, r3, r1
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	fb00 f303 	mul.w	r3, r0, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	4a43      	ldr	r2, [pc, #268]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a66:	fba0 1202 	umull	r1, r2, r0, r2
 8002a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a6c:	460a      	mov	r2, r1
 8002a6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a72:	4413      	add	r3, r2
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a78:	2200      	movs	r2, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	61fa      	str	r2, [r7, #28]
 8002a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a86:	f7fd fc2b 	bl	80002e0 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4613      	mov	r3, r2
 8002a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a92:	e053      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a94:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	617a      	str	r2, [r7, #20]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aa6:	f04f 0b00 	mov.w	fp, #0
 8002aaa:	4652      	mov	r2, sl
 8002aac:	465b      	mov	r3, fp
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	0159      	lsls	r1, r3, #5
 8002ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abc:	0150      	lsls	r0, r2, #5
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ac6:	eb63 090b 	sbc.w	r9, r3, fp
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ad6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ada:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ade:	ebb2 0408 	subs.w	r4, r2, r8
 8002ae2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	00eb      	lsls	r3, r5, #3
 8002af0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af4:	00e2      	lsls	r2, r4, #3
 8002af6:	4614      	mov	r4, r2
 8002af8:	461d      	mov	r5, r3
 8002afa:	eb14 030a 	adds.w	r3, r4, sl
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	eb45 030b 	adc.w	r3, r5, fp
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b12:	4629      	mov	r1, r5
 8002b14:	028b      	lsls	r3, r1, #10
 8002b16:	4621      	mov	r1, r4
 8002b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	028a      	lsls	r2, r1, #10
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b26:	2200      	movs	r2, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	60fa      	str	r2, [r7, #12]
 8002b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b30:	f7fd fbd6 	bl	80002e0 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	3301      	adds	r3, #1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3740      	adds	r7, #64	@ 0x40
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	017d7840 	.word	0x017d7840

08002b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba0:	4b69      	ldr	r3, [pc, #420]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a68      	ldr	r2, [pc, #416]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002baa:	6093      	str	r3, [r2, #8]
 8002bac:	4b66      	ldr	r3, [pc, #408]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb4:	4964      	ldr	r1, [pc, #400]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d017      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	4959      	ldr	r1, [pc, #356]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d017      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	494a      	ldr	r1, [pc, #296]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 808b 	beq.w	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	4a39      	ldr	r2, [pc, #228]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c68:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c74:	4b35      	ldr	r3, [pc, #212]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe f9b4 	bl	8000fec <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe f9b0 	bl	8000fec <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e38f      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d035      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d02e      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc4:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ccc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cda:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	4a1a      	ldr	r2, [pc, #104]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cec:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d114      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f978 	bl	8000fec <HAL_GetTick>
 8002cfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe f974 	bl	8000fec <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e351      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d3c:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d3e:	400b      	ands	r3, r1
 8002d40:	4901      	ldr	r1, [pc, #4]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	0ffffcff 	.word	0x0ffffcff
 8002d54:	4bac      	ldr	r3, [pc, #688]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4aab      	ldr	r2, [pc, #684]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d5e:	6093      	str	r3, [r2, #8]
 8002d60:	4ba9      	ldr	r3, [pc, #676]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	49a6      	ldr	r1, [pc, #664]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d7e:	4ba2      	ldr	r3, [pc, #648]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d84:	4aa0      	ldr	r2, [pc, #640]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d8e:	4b9e      	ldr	r3, [pc, #632]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	499b      	ldr	r1, [pc, #620]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dac:	4b96      	ldr	r3, [pc, #600]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dba:	4993      	ldr	r1, [pc, #588]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dce:	4b8e      	ldr	r3, [pc, #568]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ddc:	498a      	ldr	r1, [pc, #552]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df0:	4b85      	ldr	r3, [pc, #532]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfe:	4982      	ldr	r1, [pc, #520]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e12:	4b7d      	ldr	r3, [pc, #500]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4979      	ldr	r1, [pc, #484]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e34:	4b74      	ldr	r3, [pc, #464]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	4971      	ldr	r1, [pc, #452]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e56:	4b6c      	ldr	r3, [pc, #432]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5c:	f023 020c 	bic.w	r2, r3, #12
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e64:	4968      	ldr	r1, [pc, #416]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e78:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	4960      	ldr	r1, [pc, #384]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	4957      	ldr	r1, [pc, #348]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ebc:	4b52      	ldr	r3, [pc, #328]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	494f      	ldr	r1, [pc, #316]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ede:	4b4a      	ldr	r3, [pc, #296]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	4946      	ldr	r1, [pc, #280]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f00:	4b41      	ldr	r3, [pc, #260]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	493e      	ldr	r1, [pc, #248]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f22:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f30:	4935      	ldr	r1, [pc, #212]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f44:	4b30      	ldr	r3, [pc, #192]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f52:	492d      	ldr	r1, [pc, #180]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d011      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f66:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f74:	4924      	ldr	r1, [pc, #144]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f84:	d101      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb4:	4914      	ldr	r1, [pc, #80]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd8:	490b      	ldr	r1, [pc, #44]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00f      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffc:	4902      	ldr	r1, [pc, #8]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003004:	e002      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003018:	4b8a      	ldr	r3, [pc, #552]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800301e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	4986      	ldr	r1, [pc, #536]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800303c:	4b81      	ldr	r3, [pc, #516]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003042:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800304c:	497d      	ldr	r1, [pc, #500]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d006      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80d6 	beq.w	8003214 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003068:	4b76      	ldr	r3, [pc, #472]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a75      	ldr	r2, [pc, #468]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fd ffba 	bl	8000fec <HAL_GetTick>
 8003078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800307c:	f7fd ffb6 	bl	8000fec <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e195      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800308e:	4b6d      	ldr	r3, [pc, #436]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d021      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11d      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030ae:	4b65      	ldr	r3, [pc, #404]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030bc:	4b61      	ldr	r3, [pc, #388]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c2:	0e1b      	lsrs	r3, r3, #24
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	019a      	lsls	r2, r3, #6
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	071b      	lsls	r3, r3, #28
 80030e2:	4958      	ldr	r1, [pc, #352]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02e      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003114:	d129      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003116:	4b4b      	ldr	r3, [pc, #300]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003124:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312a:	0f1b      	lsrs	r3, r3, #28
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	019a      	lsls	r2, r3, #6
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	493e      	ldr	r1, [pc, #248]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003152:	4b3c      	ldr	r3, [pc, #240]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003158:	f023 021f 	bic.w	r2, r3, #31
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	3b01      	subs	r3, #1
 8003162:	4938      	ldr	r1, [pc, #224]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01d      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003176:	4b33      	ldr	r3, [pc, #204]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800317c:	0e1b      	lsrs	r3, r3, #24
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003184:	4b2f      	ldr	r3, [pc, #188]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800318a:	0f1b      	lsrs	r3, r3, #28
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	019a      	lsls	r2, r3, #6
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	4926      	ldr	r1, [pc, #152]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	019a      	lsls	r2, r3, #6
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	491a      	ldr	r1, [pc, #104]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fd fefd 	bl	8000fec <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031f6:	f7fd fef9 	bl	8000fec <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	@ 0x64
 8003202:	d901      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0d8      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003208:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	f040 80ce 	bne.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fd fee0 	bl	8000fec <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800322e:	e00b      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003230:	f7fd fedc 	bl	8000fec <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	@ 0x64
 800323c:	d904      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0bb      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003248:	4b5e      	ldr	r3, [pc, #376]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003254:	d0ec      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02e      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800327e:	4b51      	ldr	r3, [pc, #324]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800328c:	4b4d      	ldr	r3, [pc, #308]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	0f1b      	lsrs	r3, r3, #28
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	019a      	lsls	r2, r3, #6
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	071b      	lsls	r3, r3, #28
 80032b2:	4944      	ldr	r1, [pc, #272]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032ba:	4b42      	ldr	r3, [pc, #264]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	493d      	ldr	r1, [pc, #244]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d022      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e8:	d11d      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ea:	4b36      	ldr	r3, [pc, #216]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032f8:	4b32      	ldr	r3, [pc, #200]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	0f1b      	lsrs	r3, r3, #28
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	019a      	lsls	r2, r3, #6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	4929      	ldr	r1, [pc, #164]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003340:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4917      	ldr	r1, [pc, #92]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003374:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	4911      	ldr	r1, [pc, #68]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003384:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0e      	ldr	r2, [pc, #56]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003390:	f7fd fe2c 	bl	8000fec <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003398:	f7fd fe28 	bl	8000fec <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	@ 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e007      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033b6:	d1ef      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fd fc21 	bl	8000c34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f814 	bl	8003428 <HAL_SD_InitCard>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00a      	b.n	8003420 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b08e      	sub	sp, #56	@ 0x38
 800342c:	af04      	add	r7, sp, #16
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003444:	2376      	movs	r3, #118	@ 0x76
 8003446:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681d      	ldr	r5, [r3, #0]
 800344c:	466c      	mov	r4, sp
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003460:	4628      	mov	r0, r5
 8003462:	f001 f945 	bl	80046f0 <SDMMC_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800346c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e059      	b.n	800352c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003486:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f001 f979 	bl	8004784 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80034a2:	2002      	movs	r0, #2
 80034a4:	f7fd fdae 	bl	8001004 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 ff01 	bl	80042b0 <SD_PowerON>
 80034ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e02e      	b.n	800352c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fe20 	bl	8004114 <SD_InitCard>
 80034d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00b      	beq.n	80034f4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e01b      	b.n	800352c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f9d3 	bl	80048a8 <SDMMC_CmdBlockLength>
 8003502:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a09      	ldr	r2, [pc, #36]	@ (8003534 <HAL_SD_InitCard+0x10c>)
 8003510:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3728      	adds	r7, #40	@ 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bdb0      	pop	{r4, r5, r7, pc}
 8003534:	004005ff 	.word	0x004005ff

08003538 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b092      	sub	sp, #72	@ 0x48
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003546:	f7fd fd51 	bl	8000fec <HAL_GetTick>
 800354a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e1bd      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 81b0 	bne.w	80038d8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800357e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	441a      	add	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	429a      	cmp	r2, r3
 800358a:	d907      	bls.n	800359c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e1a4      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d002      	beq.n	80035ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80035b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80035c6:	2390      	movs	r3, #144	@ 0x90
 80035c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80035ca:	2302      	movs	r3, #2
 80035cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f107 0214 	add.w	r2, r7, #20
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 f935 	bl	8004850 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d90a      	bls.n	8003602 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2202      	movs	r2, #2
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035f8:	4618      	mov	r0, r3
 80035fa:	f001 f999 	bl	8004930 <SDMMC_CmdReadMultiBlock>
 80035fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8003600:	e009      	b.n	8003616 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f96c 	bl	80048ec <SDMMC_CmdReadSingleBlock>
 8003614:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7a      	ldr	r2, [pc, #488]	@ (800380c <HAL_SD_ReadBlocks+0x2d4>)
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e151      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003646:	e061      	b.n	800370c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03c      	beq.n	80036d0 <HAL_SD_ReadBlocks+0x198>
 8003656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d039      	beq.n	80036d0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800365c:	2300      	movs	r3, #0
 800365e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003660:	e033      	b.n	80036ca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f001 f86e 	bl	8004748 <SDMMC_ReadFIFO>
 800366c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003670:	b2da      	uxtb	r2, r3
 8003672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003674:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003678:	3301      	adds	r3, #1
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800367c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367e:	3b01      	subs	r3, #1
 8003680:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	b2da      	uxtb	r2, r3
 8003688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	3301      	adds	r3, #1
 8003690:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003694:	3b01      	subs	r3, #1
 8003696:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	3301      	adds	r3, #1
 80036a6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80036a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036aa:	3b01      	subs	r3, #1
 80036ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	0e1b      	lsrs	r3, r3, #24
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ba:	3301      	adds	r3, #1
 80036bc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	3b01      	subs	r3, #1
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80036c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c6:	3301      	adds	r3, #1
 80036c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d9c8      	bls.n	8003662 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036d0:	f7fd fc8c 	bl	8000fec <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80036dc:	429a      	cmp	r2, r3
 80036de:	d902      	bls.n	80036e6 <HAL_SD_ReadBlocks+0x1ae>
 80036e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d112      	bne.n	800370c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a48      	ldr	r2, [pc, #288]	@ (800380c <HAL_SD_ReadBlocks+0x2d4>)
 80036ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0ec      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003712:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8003716:	2b00      	cmp	r3, #0
 8003718:	d096      	beq.n	8003648 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d022      	beq.n	800376e <HAL_SD_ReadBlocks+0x236>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d91f      	bls.n	800376e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	2b03      	cmp	r3, #3
 8003734:	d01b      	beq.n	800376e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f95e 	bl	80049fc <SDMMC_CmdStopTransfer>
 8003740:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003744:	2b00      	cmp	r3, #0
 8003746:	d012      	beq.n	800376e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <HAL_SD_ReadBlocks+0x2d4>)
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0bb      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	@ (800380c <HAL_SD_ReadBlocks+0x2d4>)
 8003782:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	f043 0208 	orr.w	r2, r3, #8
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0a1      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d012      	beq.n	80037d6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a15      	ldr	r2, [pc, #84]	@ (800380c <HAL_SD_ReadBlocks+0x2d4>)
 80037b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	f043 0202 	orr.w	r2, r3, #2
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e087      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d064      	beq.n	80038ae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a08      	ldr	r2, [pc, #32]	@ (800380c <HAL_SD_ReadBlocks+0x2d4>)
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e06d      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
 800380a:	bf00      	nop
 800380c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 ff97 	bl	8004748 <SDMMC_ReadFIFO>
 800381a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	b2da      	uxtb	r2, r3
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003826:	3301      	adds	r3, #1
 8003828:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800382a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382c:	3b01      	subs	r3, #1
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	b2da      	uxtb	r2, r3
 8003836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003838:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800383a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383c:	3301      	adds	r3, #1
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003842:	3b01      	subs	r3, #1
 8003844:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b2da      	uxtb	r2, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800384e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003852:	3301      	adds	r3, #1
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003858:	3b01      	subs	r3, #1
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	0e1b      	lsrs	r3, r3, #24
 8003860:	b2da      	uxtb	r2, r3
 8003862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003864:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003868:	3301      	adds	r3, #1
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800386c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800386e:	3b01      	subs	r3, #1
 8003870:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003872:	f7fd fbbb 	bl	8000fec <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800387e:	429a      	cmp	r2, r3
 8003880:	d902      	bls.n	8003888 <HAL_SD_ReadBlocks+0x350>
 8003882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003884:	2b00      	cmp	r3, #0
 8003886:	d112      	bne.n	80038ae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_SD_ReadBlocks+0x3b8>)
 800388e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e01b      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SD_ReadBlocks+0x38a>
 80038bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1a6      	bne.n	8003810 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80038ca:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e006      	b.n	80038e6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3748      	adds	r7, #72	@ 0x48
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	004005ff 	.word	0x004005ff

080038f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b092      	sub	sp, #72	@ 0x48
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003902:	f7fd fb73 	bl	8000fec <HAL_GetTick>
 8003906:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e165      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	f040 8158 	bne.w	8003be4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800393a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	441a      	add	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	429a      	cmp	r2, r3
 8003946:	d907      	bls.n	8003958 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e14c      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2203      	movs	r2, #3
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2200      	movs	r2, #0
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	2b01      	cmp	r3, #1
 800396e:	d002      	beq.n	8003976 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003972:	025b      	lsls	r3, r3, #9
 8003974:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
 800397a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	025b      	lsls	r3, r3, #9
 8003980:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003982:	2390      	movs	r3, #144	@ 0x90
 8003984:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800398a:	2300      	movs	r3, #0
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800398e:	2301      	movs	r3, #1
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f107 0218 	add.w	r2, r7, #24
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f000 ff57 	bl	8004850 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d90a      	bls.n	80039be <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffff 	bl	80049b8 <SDMMC_CmdWriteMultiBlock>
 80039ba:	6478      	str	r0, [r7, #68]	@ 0x44
 80039bc:	e009      	b.n	80039d2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2210      	movs	r2, #16
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ffd2 	bl	8004974 <SDMMC_CmdWriteSingleBlock>
 80039d0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80039d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d012      	beq.n	80039fe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a87      	ldr	r2, [pc, #540]	@ (8003bfc <HAL_SD_WriteBlocks+0x308>)
 80039de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0f9      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003a02:	e065      	b.n	8003ad0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d040      	beq.n	8003a94 <HAL_SD_WriteBlocks+0x1a0>
 8003a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03d      	beq.n	8003a94 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a1c:	e037      	b.n	8003a8e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a26:	3301      	adds	r3, #1
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	021a      	lsls	r2, r3, #8
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	3301      	adds	r3, #1
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a44:	3b01      	subs	r3, #1
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	041a      	lsls	r2, r3, #16
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a56:	3301      	adds	r3, #1
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	061a      	lsls	r2, r3, #24
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6e:	3301      	adds	r3, #1
 8003a70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a74:	3b01      	subs	r3, #1
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f107 0214 	add.w	r2, r7, #20
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fe6d 	bl	8004762 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a90:	2b07      	cmp	r3, #7
 8003a92:	d9c4      	bls.n	8003a1e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a94:	f7fd faaa 	bl	8000fec <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d902      	bls.n	8003aaa <HAL_SD_WriteBlocks+0x1b6>
 8003aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d112      	bne.n	8003ad0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a53      	ldr	r2, [pc, #332]	@ (8003bfc <HAL_SD_WriteBlocks+0x308>)
 8003ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e090      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d092      	beq.n	8003a04 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d022      	beq.n	8003b32 <HAL_SD_WriteBlocks+0x23e>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d91f      	bls.n	8003b32 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d01b      	beq.n	8003b32 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 ff7c 	bl	80049fc <SDMMC_CmdStopTransfer>
 8003b04:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3a      	ldr	r2, [pc, #232]	@ (8003bfc <HAL_SD_WriteBlocks+0x308>)
 8003b12:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e05f      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d012      	beq.n	8003b66 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2d      	ldr	r2, [pc, #180]	@ (8003bfc <HAL_SD_WriteBlocks+0x308>)
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	f043 0208 	orr.w	r2, r3, #8
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e045      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a20      	ldr	r2, [pc, #128]	@ (8003bfc <HAL_SD_WriteBlocks+0x308>)
 8003b7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e02b      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a13      	ldr	r2, [pc, #76]	@ (8003bfc <HAL_SD_WriteBlocks+0x308>)
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e011      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e006      	b.n	8003bf2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3748      	adds	r7, #72	@ 0x48
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	004005ff 	.word	0x004005ff

08003c00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c0e:	0f9b      	lsrs	r3, r3, #30
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c1a:	0e9b      	lsrs	r3, r3, #26
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c2c:	0e1b      	lsrs	r3, r3, #24
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3e:	0c1b      	lsrs	r3, r3, #16
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c60:	0d1b      	lsrs	r3, r3, #20
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7e:	0bdb      	lsrs	r3, r3, #15
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c90:	0b9b      	lsrs	r3, r3, #14
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb4:	0b1b      	lsrs	r3, r3, #12
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d163      	bne.n	8003d98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd4:	009a      	lsls	r2, r3, #2
 8003cd6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003ce0:	0f92      	lsrs	r2, r2, #30
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cec:	0edb      	lsrs	r3, r3, #27
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfe:	0e1b      	lsrs	r3, r3, #24
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d10:	0d5b      	lsrs	r3, r3, #21
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d22:	0c9b      	lsrs	r3, r3, #18
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d34:	0bdb      	lsrs	r3, r3, #15
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	7e1b      	ldrb	r3, [r3, #24]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	3302      	adds	r3, #2
 8003d58:	2201      	movs	r2, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003d62:	fb03 f202 	mul.w	r2, r3, r2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	7a1b      	ldrb	r3, [r3, #8]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d84:	0a52      	lsrs	r2, r2, #9
 8003d86:	fb03 f202 	mul.w	r2, r3, r2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d94:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d96:	e031      	b.n	8003dfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d11d      	bne.n	8003ddc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	029a      	lsls	r2, r3, #10
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	661a      	str	r2, [r3, #96]	@ 0x60
 8003dda:	e00f      	b.n	8003dfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a58      	ldr	r2, [pc, #352]	@ (8003f44 <HAL_SD_GetCardCSD+0x344>)
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e09d      	b.n	8003f38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e00:	0b9b      	lsrs	r3, r3, #14
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e12:	09db      	lsrs	r3, r3, #7
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	0fdb      	lsrs	r3, r3, #31
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	0f5b      	lsrs	r3, r3, #29
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	0e9b      	lsrs	r3, r3, #26
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	0d9b      	lsrs	r3, r3, #22
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	0d5b      	lsrs	r3, r3, #21
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	0bdb      	lsrs	r3, r3, #15
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	0b9b      	lsrs	r3, r3, #14
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee2:	0b1b      	lsrs	r3, r3, #12
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	004005ff 	.word	0x004005ff

08003f48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b08e      	sub	sp, #56	@ 0x38
 8003fa4:	af04      	add	r7, sp, #16
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d02e      	beq.n	800401e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc6:	d106      	bne.n	8003fd6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fd4:	e029      	b.n	800402a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa1c 	bl	800441c <SD_WideBus_Enable>
 8003fe4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ff2:	e01a      	b.n	800402a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa59 	bl	80044b2 <SD_WideBus_Disable>
 8004000:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	639a      	str	r2, [r3, #56]	@ 0x38
 800400e:	e00c      	b.n	800402a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38
 800401c:	e005      	b.n	800402a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004022:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a26      	ldr	r2, [pc, #152]	@ (80040d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004038:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004048:	e01f      	b.n	800408a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681d      	ldr	r5, [r3, #0]
 8004070:	466c      	mov	r4, sp
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800407a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004084:	4628      	mov	r0, r5
 8004086:	f000 fb33 	bl	80046f0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fc08 	bl	80048a8 <SDMMC_CmdBlockLength>
 8004098:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00c      	beq.n	80040ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	@ (80040d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80040c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3728      	adds	r7, #40	@ 0x28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdb0      	pop	{r4, r5, r7, pc}
 80040ce:	bf00      	nop
 80040d0:	004005ff 	.word	0x004005ff

080040d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f970 	bl	80043cc <SD_SendStatus>
 80040ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0a5b      	lsrs	r3, r3, #9
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800410a:	693b      	ldr	r3, [r7, #16]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004114:	b5b0      	push	{r4, r5, r7, lr}
 8004116:	b094      	sub	sp, #80	@ 0x50
 8004118:	af04      	add	r7, sp, #16
 800411a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800411c:	2301      	movs	r3, #1
 800411e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fb3b 	bl	80047a0 <SDMMC_GetPowerState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004130:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004134:	e0b8      	b.n	80042a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	2b03      	cmp	r3, #3
 800413c:	d02f      	beq.n	800419e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fd65 	bl	8004c12 <SDMMC_CmdSendCID>
 8004148:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800414a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <SD_InitCard+0x40>
    {
      return errorstate;
 8004150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004152:	e0a9      	b.n	80042a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fb65 	bl	800482a <SDMMC_GetResponse>
 8004160:	4602      	mov	r2, r0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2104      	movs	r1, #4
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fb5c 	bl	800482a <SDMMC_GetResponse>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2108      	movs	r1, #8
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fb53 	bl	800482a <SDMMC_GetResponse>
 8004184:	4602      	mov	r2, r0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	210c      	movs	r1, #12
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fb4a 	bl	800482a <SDMMC_GetResponse>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d00d      	beq.n	80041c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f107 020e 	add.w	r2, r7, #14
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fd6b 	bl	8004c8c <SDMMC_CmdSetRelAdd>
 80041b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80041be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c0:	e072      	b.n	80042a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d036      	beq.n	8004238 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80041ca:	89fb      	ldrh	r3, [r7, #14]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fd35 	bl	8004c4e <SDMMC_CmdSendCSD>
 80041e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80041ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ee:	e05b      	b.n	80042a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb17 	bl	800482a <SDMMC_GetResponse>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2104      	movs	r1, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb0e 	bl	800482a <SDMMC_GetResponse>
 800420e:	4602      	mov	r2, r0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2108      	movs	r1, #8
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fb05 	bl	800482a <SDMMC_GetResponse>
 8004220:	4602      	mov	r2, r0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	210c      	movs	r1, #12
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fafc 	bl	800482a <SDMMC_GetResponse>
 8004232:	4602      	mov	r2, r0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2104      	movs	r1, #4
 800423e:	4618      	mov	r0, r3
 8004240:	f000 faf3 	bl	800482a <SDMMC_GetResponse>
 8004244:	4603      	mov	r3, r0
 8004246:	0d1a      	lsrs	r2, r3, #20
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fcd4 	bl	8003c00 <HAL_SD_GetCardCSD>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800425e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004262:	e021      	b.n	80042a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	2200      	movs	r2, #0
 8004270:	461c      	mov	r4, r3
 8004272:	4615      	mov	r5, r2
 8004274:	4622      	mov	r2, r4
 8004276:	462b      	mov	r3, r5
 8004278:	4608      	mov	r0, r1
 800427a:	f000 fbe1 	bl	8004a40 <SDMMC_CmdSelDesel>
 800427e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <SD_InitCard+0x176>
  {
    return errorstate;
 8004286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004288:	e00e      	b.n	80042a8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	466c      	mov	r4, sp
 8004292:	f103 0210 	add.w	r2, r3, #16
 8004296:	ca07      	ldmia	r2, {r0, r1, r2}
 8004298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800429c:	3304      	adds	r3, #4
 800429e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 fa25 	bl	80046f0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3740      	adds	r7, #64	@ 0x40
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}

080042b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fbdc 	bl	8004a86 <SDMMC_CmdGoIdleState>
 80042ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <SD_PowerON+0x2a>
  {
    return errorstate;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	e072      	b.n	80043c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fbef 	bl	8004ac2 <SDMMC_CmdOperCond>
 80042e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fbc5 	bl	8004a86 <SDMMC_CmdGoIdleState>
 80042fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	e05b      	b.n	80043c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004312:	2b01      	cmp	r3, #1
 8004314:	d137      	bne.n	8004386 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fbef 	bl	8004b00 <SDMMC_CmdAppCommand>
 8004322:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02d      	beq.n	8004386 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800432a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800432e:	e047      	b.n	80043c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fbe2 	bl	8004b00 <SDMMC_CmdAppCommand>
 800433c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <SD_PowerON+0x98>
    {
      return errorstate;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	e03b      	b.n	80043c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	491e      	ldr	r1, [pc, #120]	@ (80043c8 <SD_PowerON+0x118>)
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fbf8 	bl	8004b44 <SDMMC_CmdAppOperCommand>
 8004354:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800435c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004360:	e02e      	b.n	80043c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fa5e 	bl	800482a <SDMMC_GetResponse>
 800436e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	0fdb      	lsrs	r3, r3, #31
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <SD_PowerON+0xcc>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <SD_PowerON+0xce>
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]

    count++;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3301      	adds	r3, #1
 8004384:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800438c:	4293      	cmp	r3, r2
 800438e:	d802      	bhi.n	8004396 <SD_PowerON+0xe6>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0cc      	beq.n	8004330 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800439c:	4293      	cmp	r3, r2
 800439e:	d902      	bls.n	80043a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80043a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a4:	e00c      	b.n	80043c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80043b6:	e002      	b.n	80043be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	c1100000 	.word	0xc1100000

080043cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80043dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043e0:	e018      	b.n	8004414 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f000 fc6d 	bl	8004cce <SDMMC_CmdSendStatus>
 80043f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <SD_SendStatus+0x34>
  {
    return errorstate;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	e009      	b.n	8004414 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fa0f 	bl	800482a <SDMMC_GetResponse>
 800440c:	4602      	mov	r2, r0
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f9f9 	bl	800482a <SDMMC_GetResponse>
 8004438:	4603      	mov	r3, r0
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004442:	d102      	bne.n	800444a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004444:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004448:	e02f      	b.n	80044aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800444a:	f107 030c 	add.w	r3, r7, #12
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f879 	bl	8004548 <SD_FindSCR>
 8004456:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	e023      	b.n	80044aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01c      	beq.n	80044a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 fb41 	bl	8004b00 <SDMMC_CmdAppCommand>
 800447e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	e00f      	b.n	80044aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fb7b 	bl	8004b8c <SDMMC_CmdBusWidth>
 8004496:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	e003      	b.n	80044aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e001      	b.n	80044aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f9ae 	bl	800482a <SDMMC_GetResponse>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044d8:	d102      	bne.n	80044e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80044da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044de:	e02f      	b.n	8004540 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f82e 	bl	8004548 <SD_FindSCR>
 80044ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	e023      	b.n	8004540 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01c      	beq.n	800453c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f000 faf6 	bl	8004b00 <SDMMC_CmdAppCommand>
 8004514:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	e00f      	b.n	8004540 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb30 	bl	8004b8c <SDMMC_CmdBusWidth>
 800452c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	e003      	b.n	8004540 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004538:	2300      	movs	r3, #0
 800453a:	e001      	b.n	8004540 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800453c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b08f      	sub	sp, #60	@ 0x3c
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004552:	f7fc fd4b 	bl	8000fec <HAL_GetTick>
 8004556:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2108      	movs	r1, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f99a 	bl	80048a8 <SDMMC_CmdBlockLength>
 8004574:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <SD_FindSCR+0x38>
  {
    return errorstate;
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	e0b2      	b.n	80046e6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 fab7 	bl	8004b00 <SDMMC_CmdAppCommand>
 8004592:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <SD_FindSCR+0x56>
  {
    return errorstate;
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	e0a3      	b.n	80046e6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80045a4:	2308      	movs	r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80045a8:	2330      	movs	r3, #48	@ 0x30
 80045aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80045ac:	2302      	movs	r3, #2
 80045ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f107 0210 	add.w	r2, r7, #16
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f944 	bl	8004850 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 faff 	bl	8004bd0 <SDMMC_CmdSendSCR>
 80045d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02a      	beq.n	8004630 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	e083      	b.n	80046e6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	f107 0208 	add.w	r2, r7, #8
 80045f8:	18d4      	adds	r4, r2, r3
 80045fa:	4608      	mov	r0, r1
 80045fc:	f000 f8a4 	bl	8004748 <SDMMC_ReadFIFO>
 8004600:	4603      	mov	r3, r0
 8004602:	6023      	str	r3, [r4, #0]
      index++;
 8004604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004606:	3301      	adds	r3, #1
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
 800460a:	e006      	b.n	800461a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d012      	beq.n	8004640 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800461a:	f7fc fce7 	bl	8000fec <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d102      	bne.n	8004630 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800462a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800462e:	e05a      	b.n	80046e6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004636:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0cf      	beq.n	80045de <SD_FindSCR+0x96>
 800463e:	e000      	b.n	8004642 <SD_FindSCR+0xfa>
      break;
 8004640:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004658:	2308      	movs	r3, #8
 800465a:	e044      	b.n	80046e6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2202      	movs	r2, #2
 8004670:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004672:	2302      	movs	r3, #2
 8004674:	e037      	b.n	80046e6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2220      	movs	r2, #32
 800468a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800468c:	2320      	movs	r3, #32
 800468e:	e02a      	b.n	80046e6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004698:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	061a      	lsls	r2, r3, #24
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80046a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80046b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	0e1b      	lsrs	r3, r3, #24
 80046b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ba:	601a      	str	r2, [r3, #0]
    scr++;
 80046bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046be:	3304      	adds	r3, #4
 80046c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	061a      	lsls	r2, r3, #24
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80046ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80046d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80046e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	373c      	adds	r7, #60	@ 0x3c
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}
	...

080046f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80046f0:	b084      	sub	sp, #16
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	f107 001c 	add.w	r0, r7, #28
 80046fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004706:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004708:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800470a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800470e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004712:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004716:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800471a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <SDMMC_Init+0x54>)
 8004728:	4013      	ands	r3, r2
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	b004      	add	sp, #16
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	ffff8100 	.word	0xffff8100

08004748 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2203      	movs	r2, #3
 8004790:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0303 	and.w	r3, r3, #3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80047e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80047e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <SDMMC_SendCommand+0x50>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	fffff000 	.word	0xfffff000

08004810 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	b2db      	uxtb	r3, r3
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3314      	adds	r3, #20
 8004838:	461a      	mov	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4413      	add	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
}  
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004876:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800487c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004882:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800489a:	2300      	movs	r3, #0

}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048b6:	2310      	movs	r3, #16
 80048b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048ba:	2340      	movs	r3, #64	@ 0x40
 80048bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff74 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80048d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d8:	2110      	movs	r1, #16
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa1a 	bl	8004d14 <SDMMC_GetCmdResp1>
 80048e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048e2:	69fb      	ldr	r3, [r7, #28]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80048fa:	2311      	movs	r3, #17
 80048fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048fe:	2340      	movs	r3, #64	@ 0x40
 8004900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800490a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ff52 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	2111      	movs	r1, #17
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9f8 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004926:	69fb      	ldr	r3, [r7, #28]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800493e:	2312      	movs	r3, #18
 8004940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004942:	2340      	movs	r3, #64	@ 0x40
 8004944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800494a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800494e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004950:	f107 0308 	add.w	r3, r7, #8
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff30 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800495c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004960:	2112      	movs	r1, #18
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9d6 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800496a:	69fb      	ldr	r3, [r7, #28]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004982:	2318      	movs	r3, #24
 8004984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004986:	2340      	movs	r3, #64	@ 0x40
 8004988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800498e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ff0e 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80049a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a4:	2118      	movs	r1, #24
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9b4 	bl	8004d14 <SDMMC_GetCmdResp1>
 80049ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ae:	69fb      	ldr	r3, [r7, #28]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80049c6:	2319      	movs	r3, #25
 80049c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049ca:	2340      	movs	r3, #64	@ 0x40
 80049cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff feec 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80049e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e8:	2119      	movs	r1, #25
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f992 	bl	8004d14 <SDMMC_GetCmdResp1>
 80049f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049f2:	69fb      	ldr	r3, [r7, #28]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a08:	230c      	movs	r3, #12
 8004a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a0c:	2340      	movs	r3, #64	@ 0x40
 8004a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fecb 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004a26:	4a05      	ldr	r2, [pc, #20]	@ (8004a3c <SDMMC_CmdStopTransfer+0x40>)
 8004a28:	210c      	movs	r1, #12
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f972 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a32:	69fb      	ldr	r3, [r7, #28]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	05f5e100 	.word	0x05f5e100

08004a40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	@ 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a50:	2307      	movs	r3, #7
 8004a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a54:	2340      	movs	r3, #64	@ 0x40
 8004a56:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a60:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a62:	f107 0310 	add.w	r3, r7, #16
 8004a66:	4619      	mov	r1, r3
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fea7 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a72:	2107      	movs	r1, #7
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f94d 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004a7a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3728      	adds	r7, #40	@ 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b088      	sub	sp, #32
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004aa4:	f107 0308 	add.w	r3, r7, #8
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fe86 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fb67 	bl	8005184 <SDMMC_GetCmdError>
 8004ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004aca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ad4:	2340      	movs	r3, #64	@ 0x40
 8004ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ae2:	f107 0308 	add.w	r3, r7, #8
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fe67 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fafa 	bl	80050e8 <SDMMC_GetCmdResp7>
 8004af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004af6:	69fb      	ldr	r3, [r7, #28]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b0e:	2337      	movs	r3, #55	@ 0x37
 8004b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b12:	2340      	movs	r3, #64	@ 0x40
 8004b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fe48 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b30:	2137      	movs	r1, #55	@ 0x37
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8ee 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <SDMMC_CmdAppOperCommand+0x44>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b56:	2329      	movs	r3, #41	@ 0x29
 8004b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b5a:	2340      	movs	r3, #64	@ 0x40
 8004b5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fe24 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fa03 	bl	8004f80 <SDMMC_GetCmdResp3>
 8004b7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	80100000 	.word	0x80100000

08004b8c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004b9a:	2306      	movs	r3, #6
 8004b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b9e:	2340      	movs	r3, #64	@ 0x40
 8004ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fe02 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbc:	2106      	movs	r1, #6
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8a8 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004bdc:	2333      	movs	r3, #51	@ 0x33
 8004bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004be0:	2340      	movs	r3, #64	@ 0x40
 8004be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fde1 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfe:	2133      	movs	r1, #51	@ 0x33
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f887 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b088      	sub	sp, #32
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004c22:	23c0      	movs	r3, #192	@ 0xc0
 8004c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fdc0 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f957 	bl	8004ef0 <SDMMC_GetCmdResp2>
 8004c42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c44:	69fb      	ldr	r3, [r7, #28]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c5c:	2309      	movs	r3, #9
 8004c5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004c60:	23c0      	movs	r3, #192	@ 0xc0
 8004c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fda1 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f938 	bl	8004ef0 <SDMMC_GetCmdResp2>
 8004c80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c82:	69fb      	ldr	r3, [r7, #28]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c9e:	2340      	movs	r3, #64	@ 0x40
 8004ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004caa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff fd82 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	2103      	movs	r1, #3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f99d 	bl	8004ffc <SDMMC_GetCmdResp6>
 8004cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b088      	sub	sp, #32
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004cdc:	230d      	movs	r3, #13
 8004cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ce0:	2340      	movs	r3, #64	@ 0x40
 8004ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fd61 	bl	80047bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfe:	210d      	movs	r1, #13
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f807 	bl	8004d14 <SDMMC_GetCmdResp1>
 8004d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d08:	69fb      	ldr	r3, [r7, #28]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d22:	4b70      	ldr	r3, [pc, #448]	@ (8004ee4 <SDMMC_GetCmdResp1+0x1d0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a70      	ldr	r2, [pc, #448]	@ (8004ee8 <SDMMC_GetCmdResp1+0x1d4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	0a5a      	lsrs	r2, r3, #9
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	1e5a      	subs	r2, r3, #1
 8004d3a:	61fa      	str	r2, [r7, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d44:	e0c9      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ef      	beq.n	8004d36 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ea      	bne.n	8004d36 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d72:	2304      	movs	r3, #4
 8004d74:	e0b1      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0a6      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	22c5      	movs	r2, #197	@ 0xc5
 8004d90:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fd3c 	bl	8004810 <SDMMC_GetCommandResponse>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	7afb      	ldrb	r3, [r7, #11]
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d001      	beq.n	8004da6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e099      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004da6:	2100      	movs	r1, #0
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fd3e 	bl	800482a <SDMMC_GetResponse>
 8004dae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4b4e      	ldr	r3, [pc, #312]	@ (8004eec <SDMMC_GetCmdResp1+0x1d8>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e08d      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	da02      	bge.n	8004dca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004dc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc8:	e087      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004dd4:	2340      	movs	r3, #64	@ 0x40
 8004dd6:	e080      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	e079      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004df4:	e071      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e04:	e069      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004e10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e14:	e061      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e24:	e059      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e34:	e051      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e44:	e049      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e54:	e041      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e64:	e039      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e74:	e031      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004e80:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e84:	e029      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e94:	e021      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ea0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004ea4:	e019      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004eb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004eb4:	e011      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ec0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ec4:	e009      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004ed0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004ed4:	e001      	b.n	8004eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ed6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	10624dd3 	.word	0x10624dd3
 8004eec:	fdffe008 	.word	0xfdffe008

08004ef0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f78 <SDMMC_GetCmdResp2+0x88>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <SDMMC_GetCmdResp2+0x8c>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	0a5b      	lsrs	r3, r3, #9
 8004f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f08:	fb02 f303 	mul.w	r3, r2, r3
 8004f0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	60fa      	str	r2, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f1c:	e026      	b.n	8004f6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ef      	beq.n	8004f0e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ea      	bne.n	8004f0e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2204      	movs	r2, #4
 8004f48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	e00e      	b.n	8004f6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e003      	b.n	8004f6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	22c5      	movs	r2, #197	@ 0xc5
 8004f68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	10624dd3 	.word	0x10624dd3

08004f80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <SDMMC_GetCmdResp3+0x74>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <SDMMC_GetCmdResp3+0x78>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	0a5b      	lsrs	r3, r3, #9
 8004f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1e5a      	subs	r2, r3, #1
 8004fa2:	60fa      	str	r2, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004fac:	e01b      	b.n	8004fe6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0ef      	beq.n	8004f9e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ea      	bne.n	8004f9e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e003      	b.n	8004fe6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	22c5      	movs	r2, #197	@ 0xc5
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	10624dd3 	.word	0x10624dd3

08004ffc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	460b      	mov	r3, r1
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800500a:	4b35      	ldr	r3, [pc, #212]	@ (80050e0 <SDMMC_GetCmdResp6+0xe4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a35      	ldr	r2, [pc, #212]	@ (80050e4 <SDMMC_GetCmdResp6+0xe8>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	0a5b      	lsrs	r3, r3, #9
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	1e5a      	subs	r2, r3, #1
 8005024:	61fa      	str	r2, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800502a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800502e:	e052      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005034:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1ea      	bne.n	8005020 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2204      	movs	r2, #4
 800505a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800505c:	2304      	movs	r3, #4
 800505e:	e03a      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005072:	2301      	movs	r3, #1
 8005074:	e02f      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fbca 	bl	8004810 <SDMMC_GetCommandResponse>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	7afb      	ldrb	r3, [r7, #11]
 8005082:	4293      	cmp	r3, r2
 8005084:	d001      	beq.n	800508a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005086:	2301      	movs	r3, #1
 8005088:	e025      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	22c5      	movs	r2, #197	@ 0xc5
 800508e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005090:	2100      	movs	r1, #0
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff fbc9 	bl	800482a <SDMMC_GetResponse>
 8005098:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	0c1b      	lsrs	r3, r3, #16
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e011      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050c0:	e009      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80050cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050d0:	e001      	b.n	80050d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000000 	.word	0x20000000
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050f0:	4b22      	ldr	r3, [pc, #136]	@ (800517c <SDMMC_GetCmdResp7+0x94>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a22      	ldr	r2, [pc, #136]	@ (8005180 <SDMMC_GetCmdResp7+0x98>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0a5b      	lsrs	r3, r3, #9
 80050fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1e5a      	subs	r2, r3, #1
 800510a:	60fa      	str	r2, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005110:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005114:	e02c      	b.n	8005170 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ef      	beq.n	8005106 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1ea      	bne.n	8005106 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2204      	movs	r2, #4
 8005140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005142:	2304      	movs	r3, #4
 8005144:	e014      	b.n	8005170 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005158:	2301      	movs	r3, #1
 800515a:	e009      	b.n	8005170 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2240      	movs	r2, #64	@ 0x40
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800516e:	2300      	movs	r3, #0
  
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000000 	.word	0x20000000
 8005180:	10624dd3 	.word	0x10624dd3

08005184 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800518c:	4b11      	ldr	r3, [pc, #68]	@ (80051d4 <SDMMC_GetCmdError+0x50>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a11      	ldr	r2, [pc, #68]	@ (80051d8 <SDMMC_GetCmdError+0x54>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0a5b      	lsrs	r3, r3, #9
 8005198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	60fa      	str	r2, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80051b0:	e009      	b.n	80051c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f1      	beq.n	80051a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	22c5      	movs	r2, #197	@ 0xc5
 80051c2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000
 80051d8:	10624dd3 	.word	0x10624dd3

080051dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80051e0:	4904      	ldr	r1, [pc, #16]	@ (80051f4 <MX_FATFS_Init+0x18>)
 80051e2:	4805      	ldr	r0, [pc, #20]	@ (80051f8 <MX_FATFS_Init+0x1c>)
 80051e4:	f000 fe62 	bl	8005eac <FATFS_LinkDriver>
 80051e8:	4603      	mov	r3, r0
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <MX_FATFS_Init+0x20>)
 80051ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80051f0:	bf00      	nop
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	200004b4 	.word	0x200004b4
 80051f8:	08006e74 	.word	0x08006e74
 80051fc:	200004b0 	.word	0x200004b0

08005200 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800520a:	f000 f879 	bl	8005300 <BSP_SD_IsDetected>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	d001      	beq.n	8005218 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005214:	2302      	movs	r3, #2
 8005216:	e012      	b.n	800523e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005218:	480b      	ldr	r0, [pc, #44]	@ (8005248 <BSP_SD_Init+0x48>)
 800521a:	f7fe f8d5 	bl	80033c8 <HAL_SD_Init>
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005228:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800522c:	4806      	ldr	r0, [pc, #24]	@ (8005248 <BSP_SD_Init+0x48>)
 800522e:	f7fe feb7 	bl	8003fa0 <HAL_SD_ConfigWideBusOperation>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800523c:	79fb      	ldrb	r3, [r7, #7]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000358 	.word	0x20000358

0800524c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	4806      	ldr	r0, [pc, #24]	@ (8005284 <BSP_SD_ReadBlocks+0x38>)
 800526a:	f7fe f965 	bl	8003538 <HAL_SD_ReadBlocks>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000358 	.word	0x20000358

08005288 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	4806      	ldr	r0, [pc, #24]	@ (80052c0 <BSP_SD_WriteBlocks+0x38>)
 80052a6:	f7fe fb25 	bl	80038f4 <HAL_SD_WriteBlocks>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000358 	.word	0x20000358

080052c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80052c8:	4805      	ldr	r0, [pc, #20]	@ (80052e0 <BSP_SD_GetCardState+0x1c>)
 80052ca:	f7fe ff03 	bl	80040d4 <HAL_SD_GetCardState>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
}
 80052da:	4618      	mov	r0, r3
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000358 	.word	0x20000358

080052e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4803      	ldr	r0, [pc, #12]	@ (80052fc <BSP_SD_GetCardInfo+0x18>)
 80052f0:	f7fe fe2a 	bl	8003f48 <HAL_SD_GetCardInfo>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000358 	.word	0x20000358

08005300 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005306:	2301      	movs	r3, #1
 8005308:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800530a:	f000 f80b 	bl	8005324 <BSP_PlatformIsDetected>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005314:	2300      	movs	r3, #0
 8005316:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	b2db      	uxtb	r3, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800532a:	2301      	movs	r3, #1
 800532c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800532e:	2101      	movs	r1, #1
 8005330:	4806      	ldr	r0, [pc, #24]	@ (800534c <BSP_PlatformIsDetected+0x28>)
 8005332:	f7fc fd39 	bl	8001da8 <HAL_GPIO_ReadPin>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800533c:	2300      	movs	r3, #0
 800533e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005340:	79fb      	ldrb	r3, [r7, #7]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40020c00 	.word	0x40020c00

08005350 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <SD_CheckStatus+0x38>)
 800535c:	2201      	movs	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005360:	f7ff ffb0 	bl	80052c4 <BSP_SD_GetCardState>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800536a:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <SD_CheckStatus+0x38>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <SD_CheckStatus+0x38>)
 8005378:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800537a:	4b03      	ldr	r3, [pc, #12]	@ (8005388 <SD_CheckStatus+0x38>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b2db      	uxtb	r3, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000009 	.word	0x20000009

0800538c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <SD_initialize+0x38>)
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800539c:	f7ff ff30 	bl	8005200 <BSP_SD_Init>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff ffd1 	bl	8005350 <SD_CheckStatus>
 80053ae:	4603      	mov	r3, r0
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <SD_initialize+0x38>)
 80053b4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80053b6:	4b03      	ldr	r3, [pc, #12]	@ (80053c4 <SD_initialize+0x38>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000009 	.word	0x20000009

080053c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ffbb 	bl	8005350 <SD_CheckStatus>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80053f8:	f04f 33ff 	mov.w	r3, #4294967295
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	68b8      	ldr	r0, [r7, #8]
 8005402:	f7ff ff23 	bl	800524c <BSP_SD_ReadBlocks>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d107      	bne.n	800541c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800540c:	bf00      	nop
 800540e:	f7ff ff59 	bl	80052c4 <BSP_SD_GetCardState>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1fa      	bne.n	800540e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4603      	mov	r3, r0
 8005434:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	68b8      	ldr	r0, [r7, #8]
 8005444:	f7ff ff20 	bl	8005288 <BSP_SD_WriteBlocks>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800544e:	bf00      	nop
 8005450:	f7ff ff38 	bl	80052c4 <BSP_SD_GetCardState>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1fa      	bne.n	8005450 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	@ 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	603a      	str	r2, [r7, #0]
 8005472:	71fb      	strb	r3, [r7, #7]
 8005474:	460b      	mov	r3, r1
 8005476:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800547e:	4b25      	ldr	r3, [pc, #148]	@ (8005514 <SD_ioctl+0xac>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <SD_ioctl+0x28>
 800548c:	2303      	movs	r3, #3
 800548e:	e03c      	b.n	800550a <SD_ioctl+0xa2>

  switch (cmd)
 8005490:	79bb      	ldrb	r3, [r7, #6]
 8005492:	2b03      	cmp	r3, #3
 8005494:	d834      	bhi.n	8005500 <SD_ioctl+0x98>
 8005496:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <SD_ioctl+0x34>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054b5 	.word	0x080054b5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054e7 	.word	0x080054e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80054b2:	e028      	b.n	8005506 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80054b4:	f107 030c 	add.w	r3, r7, #12
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff13 	bl	80052e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80054be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80054ca:	e01c      	b.n	8005506 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80054cc:	f107 030c 	add.w	r3, r7, #12
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff ff07 	bl	80052e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	b29a      	uxth	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80054e4:	e00f      	b.n	8005506 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80054e6:	f107 030c 	add.w	r3, r7, #12
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fefa 	bl	80052e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80054f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f2:	0a5a      	lsrs	r2, r3, #9
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80054fe:	e002      	b.n	8005506 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005500:	2304      	movs	r3, #4
 8005502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800550a:	4618      	mov	r0, r3
 800550c:	3730      	adds	r7, #48	@ 0x30
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000009 	.word	0x20000009

08005518 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	4a08      	ldr	r2, [pc, #32]	@ (8005548 <disk_status+0x30>)
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	79fa      	ldrb	r2, [r7, #7]
 8005530:	4905      	ldr	r1, [pc, #20]	@ (8005548 <disk_status+0x30>)
 8005532:	440a      	add	r2, r1
 8005534:	7a12      	ldrb	r2, [r2, #8]
 8005536:	4610      	mov	r0, r2
 8005538:	4798      	blx	r3
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200004e0 	.word	0x200004e0

0800554c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	4a0d      	ldr	r2, [pc, #52]	@ (8005594 <disk_initialize+0x48>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d111      	bne.n	8005588 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	4a0b      	ldr	r2, [pc, #44]	@ (8005594 <disk_initialize+0x48>)
 8005568:	2101      	movs	r1, #1
 800556a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	4a09      	ldr	r2, [pc, #36]	@ (8005594 <disk_initialize+0x48>)
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	79fa      	ldrb	r2, [r7, #7]
 800557a:	4906      	ldr	r1, [pc, #24]	@ (8005594 <disk_initialize+0x48>)
 800557c:	440a      	add	r2, r1
 800557e:	7a12      	ldrb	r2, [r2, #8]
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	200004e0 	.word	0x200004e0

08005598 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	4a0a      	ldr	r2, [pc, #40]	@ (80055d4 <disk_read+0x3c>)
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	689c      	ldr	r4, [r3, #8]
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	4a07      	ldr	r2, [pc, #28]	@ (80055d4 <disk_read+0x3c>)
 80055b8:	4413      	add	r3, r2
 80055ba:	7a18      	ldrb	r0, [r3, #8]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	47a0      	blx	r4
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd90      	pop	{r4, r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200004e0 	.word	0x200004e0

080055d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80055d8:	b590      	push	{r4, r7, lr}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <disk_write+0x3c>)
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68dc      	ldr	r4, [r3, #12]
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	4a07      	ldr	r2, [pc, #28]	@ (8005614 <disk_write+0x3c>)
 80055f8:	4413      	add	r3, r2
 80055fa:	7a18      	ldrb	r0, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	47a0      	blx	r4
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
  return res;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
}
 800560a:	4618      	mov	r0, r3
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}
 8005612:	bf00      	nop
 8005614:	200004e0 	.word	0x200004e0

08005618 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3301      	adds	r3, #1
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	b21a      	sxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b21b      	sxth	r3, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	b21b      	sxth	r3, r3
 8005638:	81fb      	strh	r3, [r7, #14]
	return rv;
 800563a:	89fb      	ldrh	r3, [r7, #14]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3303      	adds	r3, #3
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	3202      	adds	r2, #2
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	3201      	adds	r2, #1
 800566e:	7812      	ldrb	r2, [r2, #0]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e010      	b.n	80056c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800569e:	4a0d      	ldr	r2, [pc, #52]	@ (80056d4 <clear_lock+0x44>)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	4413      	add	r3, r2
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d105      	bne.n	80056ba <clear_lock+0x2a>
 80056ae:	4a09      	ldr	r2, [pc, #36]	@ (80056d4 <clear_lock+0x44>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3301      	adds	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d9eb      	bls.n	800569e <clear_lock+0xe>
	}
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	200004c0 	.word	0x200004c0

080056d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	78db      	ldrb	r3, [r3, #3]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d034      	beq.n	8005756 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	7858      	ldrb	r0, [r3, #1]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80056fc:	2301      	movs	r3, #1
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	f7ff ff6a 	bl	80055d8 <disk_write>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <sync_window+0x38>
			res = FR_DISK_ERR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	e022      	b.n	8005756 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	1ad2      	subs	r2, r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	429a      	cmp	r2, r3
 8005724:	d217      	bcs.n	8005756 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	789b      	ldrb	r3, [r3, #2]
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e010      	b.n	8005750 <sync_window+0x78>
					wsect += fs->fsize;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4413      	add	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7858      	ldrb	r0, [r3, #1]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005742:	2301      	movs	r3, #1
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	f7ff ff47 	bl	80055d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3b01      	subs	r3, #1
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d8eb      	bhi.n	800572e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d01b      	beq.n	80057b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff ffad 	bl	80056d8 <sync_window>
 800577e:	4603      	mov	r3, r0
 8005780:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d113      	bne.n	80057b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7858      	ldrb	r0, [r3, #1]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005792:	2301      	movs	r3, #1
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	f7ff feff 	bl	8005598 <disk_read>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80057a0:	f04f 33ff 	mov.w	r3, #4294967295
 80057a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b087      	sub	sp, #28
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
 80057c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d031      	beq.n	8005834 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e002      	b.n	80057de <get_ldnumber+0x24>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3301      	adds	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d903      	bls.n	80057ee <get_ldnumber+0x34>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80057ec:	d1f4      	bne.n	80057d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80057f4:	d11c      	bne.n	8005830 <get_ldnumber+0x76>
			tp = *path;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	60fa      	str	r2, [r7, #12]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	3b30      	subs	r3, #48	@ 0x30
 8005806:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b09      	cmp	r3, #9
 800580c:	d80e      	bhi.n	800582c <get_ldnumber+0x72>
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	429a      	cmp	r2, r3
 8005814:	d10a      	bne.n	800582c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <get_ldnumber+0x72>
					vol = (int)i;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3301      	adds	r3, #1
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	e002      	b.n	8005836 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005834:	693b      	ldr	r3, [r7, #16]
}
 8005836:	4618      	mov	r0, r3
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	70da      	strb	r2, [r3, #3]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff ff7e 	bl	8005760 <move_window>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <check_fs+0x2a>
 800586a:	2304      	movs	r3, #4
 800586c:	e038      	b.n	80058e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3330      	adds	r3, #48	@ 0x30
 8005872:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fece 	bl	8005618 <ld_word>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005884:	429a      	cmp	r2, r3
 8005886:	d001      	beq.n	800588c <check_fs+0x48>
 8005888:	2303      	movs	r3, #3
 800588a:	e029      	b.n	80058e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005892:	2be9      	cmp	r3, #233	@ 0xe9
 8005894:	d009      	beq.n	80058aa <check_fs+0x66>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800589c:	2beb      	cmp	r3, #235	@ 0xeb
 800589e:	d11e      	bne.n	80058de <check_fs+0x9a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80058a6:	2b90      	cmp	r3, #144	@ 0x90
 80058a8:	d119      	bne.n	80058de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3330      	adds	r3, #48	@ 0x30
 80058ae:	3336      	adds	r3, #54	@ 0x36
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fec9 	bl	8005648 <ld_dword>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058bc:	4a0a      	ldr	r2, [pc, #40]	@ (80058e8 <check_fs+0xa4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <check_fs+0x82>
 80058c2:	2300      	movs	r3, #0
 80058c4:	e00c      	b.n	80058e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3330      	adds	r3, #48	@ 0x30
 80058ca:	3352      	adds	r3, #82	@ 0x52
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff febb 	bl	8005648 <ld_dword>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4a05      	ldr	r2, [pc, #20]	@ (80058ec <check_fs+0xa8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <check_fs+0x9a>
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80058de:	2302      	movs	r3, #2
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	00544146 	.word	0x00544146
 80058ec:	33544146 	.word	0x33544146

080058f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b096      	sub	sp, #88	@ 0x58
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff ff58 	bl	80057ba <get_ldnumber>
 800590a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800590c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	da01      	bge.n	8005916 <find_volume+0x26>
 8005912:	230b      	movs	r3, #11
 8005914:	e22d      	b.n	8005d72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005916:	4aa1      	ldr	r2, [pc, #644]	@ (8005b9c <find_volume+0x2ac>)
 8005918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <find_volume+0x3a>
 8005926:	230c      	movs	r3, #12
 8005928:	e223      	b.n	8005d72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800592e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01a      	beq.n	8005976 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fde7 	bl	8005518 <disk_status>
 800594a:	4603      	mov	r3, r0
 800594c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <find_volume+0x82>
 8005962:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800596e:	230a      	movs	r3, #10
 8005970:	e1ff      	b.n	8005d72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005972:	2300      	movs	r3, #0
 8005974:	e1fd      	b.n	8005d72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800597c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fddf 	bl	800554c <disk_initialize>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005994:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059a0:	2303      	movs	r3, #3
 80059a2:	e1e6      	b.n	8005d72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <find_volume+0xca>
 80059aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80059b6:	230a      	movs	r3, #10
 80059b8:	e1db      	b.n	8005d72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80059be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059c2:	f7ff ff3f 	bl	8005844 <check_fs>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80059cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d149      	bne.n	8005a68 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059d4:	2300      	movs	r3, #0
 80059d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d8:	e01e      	b.n	8005a18 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80059e8:	4413      	add	r3, r2
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	3304      	adds	r3, #4
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <find_volume+0x114>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	3308      	adds	r3, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fe24 	bl	8005648 <ld_dword>
 8005a00:	4602      	mov	r2, r0
 8005a02:	e000      	b.n	8005a06 <find_volume+0x116>
 8005a04:	2200      	movs	r2, #0
 8005a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3358      	adds	r3, #88	@ 0x58
 8005a0c:	443b      	add	r3, r7
 8005a0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a14:	3301      	adds	r3, #1
 8005a16:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d9dd      	bls.n	80059da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a1e:	2300      	movs	r3, #0
 8005a20:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <find_volume+0x13e>
 8005a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	3358      	adds	r3, #88	@ 0x58
 8005a34:	443b      	add	r3, r7
 8005a36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a3a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <find_volume+0x15e>
 8005a42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a46:	f7ff fefd 	bl	8005844 <check_fs>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	e000      	b.n	8005a50 <find_volume+0x160>
 8005a4e:	2303      	movs	r3, #3
 8005a50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005a54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d905      	bls.n	8005a68 <find_volume+0x178>
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5e:	3301      	adds	r3, #1
 8005a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d9e2      	bls.n	8005a2e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d101      	bne.n	8005a74 <find_volume+0x184>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e17e      	b.n	8005d72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d901      	bls.n	8005a80 <find_volume+0x190>
 8005a7c:	230d      	movs	r3, #13
 8005a7e:	e178      	b.n	8005d72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	3330      	adds	r3, #48	@ 0x30
 8005a84:	330b      	adds	r3, #11
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fdc6 	bl	8005618 <ld_word>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a92:	d001      	beq.n	8005a98 <find_volume+0x1a8>
 8005a94:	230d      	movs	r3, #13
 8005a96:	e16c      	b.n	8005d72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	3330      	adds	r3, #48	@ 0x30
 8005a9c:	3316      	adds	r3, #22
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fdba 	bl	8005618 <ld_word>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <find_volume+0x1cc>
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	3330      	adds	r3, #48	@ 0x30
 8005ab2:	3324      	adds	r3, #36	@ 0x24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff fdc7 	bl	8005648 <ld_dword>
 8005aba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ac0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	789b      	ldrb	r3, [r3, #2]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d005      	beq.n	8005ae0 <find_volume+0x1f0>
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	789b      	ldrb	r3, [r3, #2]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d001      	beq.n	8005ae0 <find_volume+0x1f0>
 8005adc:	230d      	movs	r3, #13
 8005ade:	e148      	b.n	8005d72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	789b      	ldrb	r3, [r3, #2]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af4:	461a      	mov	r2, r3
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	895b      	ldrh	r3, [r3, #10]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <find_volume+0x224>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	895b      	ldrh	r3, [r3, #10]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <find_volume+0x228>
 8005b14:	230d      	movs	r3, #13
 8005b16:	e12c      	b.n	8005d72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	3330      	adds	r3, #48	@ 0x30
 8005b1c:	3311      	adds	r3, #17
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fd7a 	bl	8005618 <ld_word>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	891b      	ldrh	r3, [r3, #8]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <find_volume+0x24e>
 8005b3a:	230d      	movs	r3, #13
 8005b3c:	e119      	b.n	8005d72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	3330      	adds	r3, #48	@ 0x30
 8005b42:	3313      	adds	r3, #19
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fd67 	bl	8005618 <ld_word>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <find_volume+0x272>
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	3330      	adds	r3, #48	@ 0x30
 8005b58:	3320      	adds	r3, #32
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fd74 	bl	8005648 <ld_dword>
 8005b60:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	3330      	adds	r3, #48	@ 0x30
 8005b66:	330e      	adds	r3, #14
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fd55 	bl	8005618 <ld_word>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005b72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <find_volume+0x28c>
 8005b78:	230d      	movs	r3, #13
 8005b7a:	e0fa      	b.n	8005d72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005b7c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b80:	4413      	add	r3, r2
 8005b82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b84:	8912      	ldrh	r2, [r2, #8]
 8005b86:	0912      	lsrs	r2, r2, #4
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d204      	bcs.n	8005ba0 <find_volume+0x2b0>
 8005b96:	230d      	movs	r3, #13
 8005b98:	e0eb      	b.n	8005d72 <find_volume+0x482>
 8005b9a:	bf00      	nop
 8005b9c:	200004b8 	.word	0x200004b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ba8:	8952      	ldrh	r2, [r2, #10]
 8005baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <find_volume+0x2ca>
 8005bb6:	230d      	movs	r3, #13
 8005bb8:	e0db      	b.n	8005d72 <find_volume+0x482>
		fmt = FS_FAT32;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d802      	bhi.n	8005bd0 <find_volume+0x2e0>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d802      	bhi.n	8005be0 <find_volume+0x2f0>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005bee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bf2:	441a      	add	r2, r3
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005bf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	441a      	add	r2, r3
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005c02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d11e      	bne.n	8005c48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	3330      	adds	r3, #48	@ 0x30
 8005c0e:	332a      	adds	r3, #42	@ 0x2a
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fd01 	bl	8005618 <ld_word>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <find_volume+0x330>
 8005c1c:	230d      	movs	r3, #13
 8005c1e:	e0a8      	b.n	8005d72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	891b      	ldrh	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <find_volume+0x33c>
 8005c28:	230d      	movs	r3, #13
 8005c2a:	e0a2      	b.n	8005d72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	3330      	adds	r3, #48	@ 0x30
 8005c30:	332c      	adds	r3, #44	@ 0x2c
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fd08 	bl	8005648 <ld_dword>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c46:	e01f      	b.n	8005c88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	891b      	ldrh	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <find_volume+0x364>
 8005c50:	230d      	movs	r3, #13
 8005c52:	e08e      	b.n	8005d72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5a:	441a      	add	r2, r3
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d103      	bne.n	8005c70 <find_volume+0x380>
 8005c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	e00a      	b.n	8005c86 <find_volume+0x396>
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	085a      	lsrs	r2, r3, #1
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005c86:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005c92:	0a5b      	lsrs	r3, r3, #9
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d201      	bcs.n	8005c9c <find_volume+0x3ac>
 8005c98:	230d      	movs	r3, #13
 8005c9a:	e06a      	b.n	8005d72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	2280      	movs	r2, #128	@ 0x80
 8005cb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005cb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d149      	bne.n	8005d4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	3330      	adds	r3, #48	@ 0x30
 8005cbe:	3330      	adds	r3, #48	@ 0x30
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fca9 	bl	8005618 <ld_word>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d140      	bne.n	8005d4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cce:	3301      	adds	r3, #1
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cd4:	f7ff fd44 	bl	8005760 <move_window>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d137      	bne.n	8005d4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	3330      	adds	r3, #48	@ 0x30
 8005ce8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fc93 	bl	8005618 <ld_word>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d127      	bne.n	8005d4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	3330      	adds	r3, #48	@ 0x30
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fca0 	bl	8005648 <ld_dword>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <find_volume+0x48c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d11e      	bne.n	8005d4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	3330      	adds	r3, #48	@ 0x30
 8005d14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fc95 	bl	8005648 <ld_dword>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4a17      	ldr	r2, [pc, #92]	@ (8005d80 <find_volume+0x490>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d113      	bne.n	8005d4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	3330      	adds	r3, #48	@ 0x30
 8005d2a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fc8a 	bl	8005648 <ld_dword>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	3330      	adds	r3, #48	@ 0x30
 8005d3e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fc80 	bl	8005648 <ld_dword>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <find_volume+0x494>)
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <find_volume+0x494>)
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	4b08      	ldr	r3, [pc, #32]	@ (8005d84 <find_volume+0x494>)
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005d6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d6c:	f7ff fc90 	bl	8005690 <clear_lock>
#endif
	return FR_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3758      	adds	r7, #88	@ 0x58
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	41615252 	.word	0x41615252
 8005d80:	61417272 	.word	0x61417272
 8005d84:	200004bc 	.word	0x200004bc

08005d88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005d9a:	f107 0310 	add.w	r3, r7, #16
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fd0b 	bl	80057ba <get_ldnumber>
 8005da4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da01      	bge.n	8005db0 <f_mount+0x28>
 8005dac:	230b      	movs	r3, #11
 8005dae:	e02b      	b.n	8005e08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005db0:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <f_mount+0x88>)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005dc0:	69b8      	ldr	r0, [r7, #24]
 8005dc2:	f7ff fc65 	bl	8005690 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	490d      	ldr	r1, [pc, #52]	@ (8005e10 <f_mount+0x88>)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <f_mount+0x66>
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d001      	beq.n	8005df2 <f_mount+0x6a>
 8005dee:	2300      	movs	r3, #0
 8005df0:	e00a      	b.n	8005e08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005df2:	f107 010c 	add.w	r1, r7, #12
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fd77 	bl	80058f0 <find_volume>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3720      	adds	r7, #32
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200004b8 	.word	0x200004b8

08005e14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e2c:	7a5b      	ldrb	r3, [r3, #9]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d131      	bne.n	8005e98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e34:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e36:	7a5b      	ldrb	r3, [r3, #9]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e42:	4b19      	ldr	r3, [pc, #100]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e44:	7a5b      	ldrb	r3, [r3, #9]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	4a17      	ldr	r2, [pc, #92]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e52:	4b15      	ldr	r3, [pc, #84]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e54:	7a5b      	ldrb	r3, [r3, #9]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	79fa      	ldrb	r2, [r7, #7]
 8005e60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e62:	4b11      	ldr	r3, [pc, #68]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e64:	7a5b      	ldrb	r3, [r3, #9]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	b2d1      	uxtb	r1, r2
 8005e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea8 <FATFS_LinkDriverEx+0x94>)
 8005e6e:	7251      	strb	r1, [r2, #9]
 8005e70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e72:	7dbb      	ldrb	r3, [r7, #22]
 8005e74:	3330      	adds	r3, #48	@ 0x30
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	223a      	movs	r2, #58	@ 0x3a
 8005e82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3302      	adds	r3, #2
 8005e88:	222f      	movs	r2, #47	@ 0x2f
 8005e8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	3303      	adds	r3, #3
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	200004e0 	.word	0x200004e0

08005eac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ffaa 	bl	8005e14 <FATFS_LinkDriverEx>
 8005ec0:	4603      	mov	r3, r0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <std>:
 8005ecc:	2300      	movs	r3, #0
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eda:	6083      	str	r3, [r0, #8]
 8005edc:	8181      	strh	r1, [r0, #12]
 8005ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ee0:	81c2      	strh	r2, [r0, #14]
 8005ee2:	6183      	str	r3, [r0, #24]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	305c      	adds	r0, #92	@ 0x5c
 8005eea:	f000 f9f9 	bl	80062e0 <memset>
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <std+0x58>)
 8005ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <std+0x5c>)
 8005ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <std+0x60>)
 8005ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <std+0x64>)
 8005efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <std+0x68>)
 8005f00:	6224      	str	r4, [r4, #32]
 8005f02:	429c      	cmp	r4, r3
 8005f04:	d006      	beq.n	8005f14 <std+0x48>
 8005f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f0a:	4294      	cmp	r4, r2
 8005f0c:	d002      	beq.n	8005f14 <std+0x48>
 8005f0e:	33d0      	adds	r3, #208	@ 0xd0
 8005f10:	429c      	cmp	r4, r3
 8005f12:	d105      	bne.n	8005f20 <std+0x54>
 8005f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f1c:	f000 ba58 	b.w	80063d0 <__retarget_lock_init_recursive>
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	08006131 	.word	0x08006131
 8005f28:	08006153 	.word	0x08006153
 8005f2c:	0800618b 	.word	0x0800618b
 8005f30:	080061af 	.word	0x080061af
 8005f34:	200004ec 	.word	0x200004ec

08005f38 <stdio_exit_handler>:
 8005f38:	4a02      	ldr	r2, [pc, #8]	@ (8005f44 <stdio_exit_handler+0xc>)
 8005f3a:	4903      	ldr	r1, [pc, #12]	@ (8005f48 <stdio_exit_handler+0x10>)
 8005f3c:	4803      	ldr	r0, [pc, #12]	@ (8005f4c <stdio_exit_handler+0x14>)
 8005f3e:	f000 b869 	b.w	8006014 <_fwalk_sglue>
 8005f42:	bf00      	nop
 8005f44:	2000000c 	.word	0x2000000c
 8005f48:	08006c71 	.word	0x08006c71
 8005f4c:	2000001c 	.word	0x2000001c

08005f50 <cleanup_stdio>:
 8005f50:	6841      	ldr	r1, [r0, #4]
 8005f52:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <cleanup_stdio+0x34>)
 8005f54:	4299      	cmp	r1, r3
 8005f56:	b510      	push	{r4, lr}
 8005f58:	4604      	mov	r4, r0
 8005f5a:	d001      	beq.n	8005f60 <cleanup_stdio+0x10>
 8005f5c:	f000 fe88 	bl	8006c70 <_fflush_r>
 8005f60:	68a1      	ldr	r1, [r4, #8]
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <cleanup_stdio+0x38>)
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d002      	beq.n	8005f6e <cleanup_stdio+0x1e>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 fe81 	bl	8006c70 <_fflush_r>
 8005f6e:	68e1      	ldr	r1, [r4, #12]
 8005f70:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <cleanup_stdio+0x3c>)
 8005f72:	4299      	cmp	r1, r3
 8005f74:	d004      	beq.n	8005f80 <cleanup_stdio+0x30>
 8005f76:	4620      	mov	r0, r4
 8005f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f7c:	f000 be78 	b.w	8006c70 <_fflush_r>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	bf00      	nop
 8005f84:	200004ec 	.word	0x200004ec
 8005f88:	20000554 	.word	0x20000554
 8005f8c:	200005bc 	.word	0x200005bc

08005f90 <global_stdio_init.part.0>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <global_stdio_init.part.0+0x30>)
 8005f94:	4c0b      	ldr	r4, [pc, #44]	@ (8005fc4 <global_stdio_init.part.0+0x34>)
 8005f96:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc8 <global_stdio_init.part.0+0x38>)
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	f7ff ff94 	bl	8005ecc <std>
 8005fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fa8:	2201      	movs	r2, #1
 8005faa:	2109      	movs	r1, #9
 8005fac:	f7ff ff8e 	bl	8005ecc <std>
 8005fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fba:	2112      	movs	r1, #18
 8005fbc:	f7ff bf86 	b.w	8005ecc <std>
 8005fc0:	20000624 	.word	0x20000624
 8005fc4:	200004ec 	.word	0x200004ec
 8005fc8:	08005f39 	.word	0x08005f39

08005fcc <__sfp_lock_acquire>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__sfp_lock_acquire+0x8>)
 8005fce:	f000 ba00 	b.w	80063d2 <__retarget_lock_acquire_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	2000062d 	.word	0x2000062d

08005fd8 <__sfp_lock_release>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	@ (8005fe0 <__sfp_lock_release+0x8>)
 8005fda:	f000 b9fb 	b.w	80063d4 <__retarget_lock_release_recursive>
 8005fde:	bf00      	nop
 8005fe0:	2000062d 	.word	0x2000062d

08005fe4 <__sinit>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	f7ff fff0 	bl	8005fcc <__sfp_lock_acquire>
 8005fec:	6a23      	ldr	r3, [r4, #32]
 8005fee:	b11b      	cbz	r3, 8005ff8 <__sinit+0x14>
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	f7ff bff0 	b.w	8005fd8 <__sfp_lock_release>
 8005ff8:	4b04      	ldr	r3, [pc, #16]	@ (800600c <__sinit+0x28>)
 8005ffa:	6223      	str	r3, [r4, #32]
 8005ffc:	4b04      	ldr	r3, [pc, #16]	@ (8006010 <__sinit+0x2c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f5      	bne.n	8005ff0 <__sinit+0xc>
 8006004:	f7ff ffc4 	bl	8005f90 <global_stdio_init.part.0>
 8006008:	e7f2      	b.n	8005ff0 <__sinit+0xc>
 800600a:	bf00      	nop
 800600c:	08005f51 	.word	0x08005f51
 8006010:	20000624 	.word	0x20000624

08006014 <_fwalk_sglue>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4607      	mov	r7, r0
 800601a:	4688      	mov	r8, r1
 800601c:	4614      	mov	r4, r2
 800601e:	2600      	movs	r6, #0
 8006020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006024:	f1b9 0901 	subs.w	r9, r9, #1
 8006028:	d505      	bpl.n	8006036 <_fwalk_sglue+0x22>
 800602a:	6824      	ldr	r4, [r4, #0]
 800602c:	2c00      	cmp	r4, #0
 800602e:	d1f7      	bne.n	8006020 <_fwalk_sglue+0xc>
 8006030:	4630      	mov	r0, r6
 8006032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d907      	bls.n	800604c <_fwalk_sglue+0x38>
 800603c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006040:	3301      	adds	r3, #1
 8006042:	d003      	beq.n	800604c <_fwalk_sglue+0x38>
 8006044:	4629      	mov	r1, r5
 8006046:	4638      	mov	r0, r7
 8006048:	47c0      	blx	r8
 800604a:	4306      	orrs	r6, r0
 800604c:	3568      	adds	r5, #104	@ 0x68
 800604e:	e7e9      	b.n	8006024 <_fwalk_sglue+0x10>

08006050 <iprintf>:
 8006050:	b40f      	push	{r0, r1, r2, r3}
 8006052:	b507      	push	{r0, r1, r2, lr}
 8006054:	4906      	ldr	r1, [pc, #24]	@ (8006070 <iprintf+0x20>)
 8006056:	ab04      	add	r3, sp, #16
 8006058:	6808      	ldr	r0, [r1, #0]
 800605a:	f853 2b04 	ldr.w	r2, [r3], #4
 800605e:	6881      	ldr	r1, [r0, #8]
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	f000 fadb 	bl	800661c <_vfiprintf_r>
 8006066:	b003      	add	sp, #12
 8006068:	f85d eb04 	ldr.w	lr, [sp], #4
 800606c:	b004      	add	sp, #16
 800606e:	4770      	bx	lr
 8006070:	20000018 	.word	0x20000018

08006074 <_puts_r>:
 8006074:	6a03      	ldr	r3, [r0, #32]
 8006076:	b570      	push	{r4, r5, r6, lr}
 8006078:	6884      	ldr	r4, [r0, #8]
 800607a:	4605      	mov	r5, r0
 800607c:	460e      	mov	r6, r1
 800607e:	b90b      	cbnz	r3, 8006084 <_puts_r+0x10>
 8006080:	f7ff ffb0 	bl	8005fe4 <__sinit>
 8006084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006086:	07db      	lsls	r3, r3, #31
 8006088:	d405      	bmi.n	8006096 <_puts_r+0x22>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	0598      	lsls	r0, r3, #22
 800608e:	d402      	bmi.n	8006096 <_puts_r+0x22>
 8006090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006092:	f000 f99e 	bl	80063d2 <__retarget_lock_acquire_recursive>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	0719      	lsls	r1, r3, #28
 800609a:	d502      	bpl.n	80060a2 <_puts_r+0x2e>
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d135      	bne.n	800610e <_puts_r+0x9a>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 f8c5 	bl	8006234 <__swsetup_r>
 80060aa:	b380      	cbz	r0, 800610e <_puts_r+0x9a>
 80060ac:	f04f 35ff 	mov.w	r5, #4294967295
 80060b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060b2:	07da      	lsls	r2, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_puts_r+0x4e>
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	059b      	lsls	r3, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_puts_r+0x4e>
 80060bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060be:	f000 f989 	bl	80063d4 <__retarget_lock_release_recursive>
 80060c2:	4628      	mov	r0, r5
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da04      	bge.n	80060d4 <_puts_r+0x60>
 80060ca:	69a2      	ldr	r2, [r4, #24]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	dc17      	bgt.n	8006100 <_puts_r+0x8c>
 80060d0:	290a      	cmp	r1, #10
 80060d2:	d015      	beq.n	8006100 <_puts_r+0x8c>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	7019      	strb	r1, [r3, #0]
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060e2:	3b01      	subs	r3, #1
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d1ed      	bne.n	80060c6 <_puts_r+0x52>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da11      	bge.n	8006112 <_puts_r+0x9e>
 80060ee:	4622      	mov	r2, r4
 80060f0:	210a      	movs	r1, #10
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 f85f 	bl	80061b6 <__swbuf_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d0d7      	beq.n	80060ac <_puts_r+0x38>
 80060fc:	250a      	movs	r5, #10
 80060fe:	e7d7      	b.n	80060b0 <_puts_r+0x3c>
 8006100:	4622      	mov	r2, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 f857 	bl	80061b6 <__swbuf_r>
 8006108:	3001      	adds	r0, #1
 800610a:	d1e7      	bne.n	80060dc <_puts_r+0x68>
 800610c:	e7ce      	b.n	80060ac <_puts_r+0x38>
 800610e:	3e01      	subs	r6, #1
 8006110:	e7e4      	b.n	80060dc <_puts_r+0x68>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	6022      	str	r2, [r4, #0]
 8006118:	220a      	movs	r2, #10
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e7ee      	b.n	80060fc <_puts_r+0x88>
	...

08006120 <puts>:
 8006120:	4b02      	ldr	r3, [pc, #8]	@ (800612c <puts+0xc>)
 8006122:	4601      	mov	r1, r0
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f7ff bfa5 	b.w	8006074 <_puts_r>
 800612a:	bf00      	nop
 800612c:	20000018 	.word	0x20000018

08006130 <__sread>:
 8006130:	b510      	push	{r4, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006138:	f000 f8fc 	bl	8006334 <_read_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	bfab      	itete	ge
 8006140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006142:	89a3      	ldrhlt	r3, [r4, #12]
 8006144:	181b      	addge	r3, r3, r0
 8006146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800614a:	bfac      	ite	ge
 800614c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800614e:	81a3      	strhlt	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__swrite>:
 8006152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	461f      	mov	r7, r3
 8006158:	898b      	ldrh	r3, [r1, #12]
 800615a:	05db      	lsls	r3, r3, #23
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	4616      	mov	r6, r2
 8006162:	d505      	bpl.n	8006170 <__swrite+0x1e>
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	2302      	movs	r3, #2
 800616a:	2200      	movs	r2, #0
 800616c:	f000 f8d0 	bl	8006310 <_lseek_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	f000 b8e7 	b.w	8006358 <_write_r>

0800618a <__sseek>:
 800618a:	b510      	push	{r4, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006192:	f000 f8bd 	bl	8006310 <_lseek_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	bf15      	itete	ne
 800619c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800619e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061a6:	81a3      	strheq	r3, [r4, #12]
 80061a8:	bf18      	it	ne
 80061aa:	81a3      	strhne	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__sclose>:
 80061ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b2:	f000 b89d 	b.w	80062f0 <_close_r>

080061b6 <__swbuf_r>:
 80061b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b8:	460e      	mov	r6, r1
 80061ba:	4614      	mov	r4, r2
 80061bc:	4605      	mov	r5, r0
 80061be:	b118      	cbz	r0, 80061c8 <__swbuf_r+0x12>
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	b90b      	cbnz	r3, 80061c8 <__swbuf_r+0x12>
 80061c4:	f7ff ff0e 	bl	8005fe4 <__sinit>
 80061c8:	69a3      	ldr	r3, [r4, #24]
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	071a      	lsls	r2, r3, #28
 80061d0:	d501      	bpl.n	80061d6 <__swbuf_r+0x20>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	b943      	cbnz	r3, 80061e8 <__swbuf_r+0x32>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 f82b 	bl	8006234 <__swsetup_r>
 80061de:	b118      	cbz	r0, 80061e8 <__swbuf_r+0x32>
 80061e0:	f04f 37ff 	mov.w	r7, #4294967295
 80061e4:	4638      	mov	r0, r7
 80061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	6922      	ldr	r2, [r4, #16]
 80061ec:	1a98      	subs	r0, r3, r2
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	b2f6      	uxtb	r6, r6
 80061f2:	4283      	cmp	r3, r0
 80061f4:	4637      	mov	r7, r6
 80061f6:	dc05      	bgt.n	8006204 <__swbuf_r+0x4e>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 fd38 	bl	8006c70 <_fflush_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	d1ed      	bne.n	80061e0 <__swbuf_r+0x2a>
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	3b01      	subs	r3, #1
 8006208:	60a3      	str	r3, [r4, #8]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	701e      	strb	r6, [r3, #0]
 8006212:	6962      	ldr	r2, [r4, #20]
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	429a      	cmp	r2, r3
 8006218:	d004      	beq.n	8006224 <__swbuf_r+0x6e>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	07db      	lsls	r3, r3, #31
 800621e:	d5e1      	bpl.n	80061e4 <__swbuf_r+0x2e>
 8006220:	2e0a      	cmp	r6, #10
 8006222:	d1df      	bne.n	80061e4 <__swbuf_r+0x2e>
 8006224:	4621      	mov	r1, r4
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fd22 	bl	8006c70 <_fflush_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	d0d9      	beq.n	80061e4 <__swbuf_r+0x2e>
 8006230:	e7d6      	b.n	80061e0 <__swbuf_r+0x2a>
	...

08006234 <__swsetup_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4b29      	ldr	r3, [pc, #164]	@ (80062dc <__swsetup_r+0xa8>)
 8006238:	4605      	mov	r5, r0
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	460c      	mov	r4, r1
 800623e:	b118      	cbz	r0, 8006248 <__swsetup_r+0x14>
 8006240:	6a03      	ldr	r3, [r0, #32]
 8006242:	b90b      	cbnz	r3, 8006248 <__swsetup_r+0x14>
 8006244:	f7ff fece 	bl	8005fe4 <__sinit>
 8006248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624c:	0719      	lsls	r1, r3, #28
 800624e:	d422      	bmi.n	8006296 <__swsetup_r+0x62>
 8006250:	06da      	lsls	r2, r3, #27
 8006252:	d407      	bmi.n	8006264 <__swsetup_r+0x30>
 8006254:	2209      	movs	r2, #9
 8006256:	602a      	str	r2, [r5, #0]
 8006258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	e033      	b.n	80062cc <__swsetup_r+0x98>
 8006264:	0758      	lsls	r0, r3, #29
 8006266:	d512      	bpl.n	800628e <__swsetup_r+0x5a>
 8006268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800626a:	b141      	cbz	r1, 800627e <__swsetup_r+0x4a>
 800626c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006270:	4299      	cmp	r1, r3
 8006272:	d002      	beq.n	800627a <__swsetup_r+0x46>
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f8af 	bl	80063d8 <_free_r>
 800627a:	2300      	movs	r3, #0
 800627c:	6363      	str	r3, [r4, #52]	@ 0x34
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	2300      	movs	r3, #0
 8006288:	6063      	str	r3, [r4, #4]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f043 0308 	orr.w	r3, r3, #8
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	b94b      	cbnz	r3, 80062ae <__swsetup_r+0x7a>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a4:	d003      	beq.n	80062ae <__swsetup_r+0x7a>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 fd2f 	bl	8006d0c <__smakebuf_r>
 80062ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b2:	f013 0201 	ands.w	r2, r3, #1
 80062b6:	d00a      	beq.n	80062ce <__swsetup_r+0x9a>
 80062b8:	2200      	movs	r2, #0
 80062ba:	60a2      	str	r2, [r4, #8]
 80062bc:	6962      	ldr	r2, [r4, #20]
 80062be:	4252      	negs	r2, r2
 80062c0:	61a2      	str	r2, [r4, #24]
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	b942      	cbnz	r2, 80062d8 <__swsetup_r+0xa4>
 80062c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062ca:	d1c5      	bne.n	8006258 <__swsetup_r+0x24>
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	0799      	lsls	r1, r3, #30
 80062d0:	bf58      	it	pl
 80062d2:	6962      	ldrpl	r2, [r4, #20]
 80062d4:	60a2      	str	r2, [r4, #8]
 80062d6:	e7f4      	b.n	80062c2 <__swsetup_r+0x8e>
 80062d8:	2000      	movs	r0, #0
 80062da:	e7f7      	b.n	80062cc <__swsetup_r+0x98>
 80062dc:	20000018 	.word	0x20000018

080062e0 <memset>:
 80062e0:	4402      	add	r2, r0
 80062e2:	4603      	mov	r3, r0
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d100      	bne.n	80062ea <memset+0xa>
 80062e8:	4770      	bx	lr
 80062ea:	f803 1b01 	strb.w	r1, [r3], #1
 80062ee:	e7f9      	b.n	80062e4 <memset+0x4>

080062f0 <_close_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d06      	ldr	r5, [pc, #24]	@ (800630c <_close_r+0x1c>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fa fd7f 	bl	8000dfe <_close>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_close_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_close_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	20000628 	.word	0x20000628

08006310 <_lseek_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	@ (8006330 <_lseek_r+0x20>)
 8006314:	4604      	mov	r4, r0
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	2200      	movs	r2, #0
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f7fa fd94 	bl	8000e4c <_lseek>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_lseek_r+0x1e>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_lseek_r+0x1e>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	20000628 	.word	0x20000628

08006334 <_read_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d07      	ldr	r5, [pc, #28]	@ (8006354 <_read_r+0x20>)
 8006338:	4604      	mov	r4, r0
 800633a:	4608      	mov	r0, r1
 800633c:	4611      	mov	r1, r2
 800633e:	2200      	movs	r2, #0
 8006340:	602a      	str	r2, [r5, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f7fa fd3e 	bl	8000dc4 <_read>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_read_r+0x1e>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_read_r+0x1e>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000628 	.word	0x20000628

08006358 <_write_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d07      	ldr	r5, [pc, #28]	@ (8006378 <_write_r+0x20>)
 800635c:	4604      	mov	r4, r0
 800635e:	4608      	mov	r0, r1
 8006360:	4611      	mov	r1, r2
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f7fa fb0a 	bl	8000980 <_write>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_write_r+0x1e>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_write_r+0x1e>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20000628 	.word	0x20000628

0800637c <__errno>:
 800637c:	4b01      	ldr	r3, [pc, #4]	@ (8006384 <__errno+0x8>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000018 	.word	0x20000018

08006388 <__libc_init_array>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4d0d      	ldr	r5, [pc, #52]	@ (80063c0 <__libc_init_array+0x38>)
 800638c:	4c0d      	ldr	r4, [pc, #52]	@ (80063c4 <__libc_init_array+0x3c>)
 800638e:	1b64      	subs	r4, r4, r5
 8006390:	10a4      	asrs	r4, r4, #2
 8006392:	2600      	movs	r6, #0
 8006394:	42a6      	cmp	r6, r4
 8006396:	d109      	bne.n	80063ac <__libc_init_array+0x24>
 8006398:	4d0b      	ldr	r5, [pc, #44]	@ (80063c8 <__libc_init_array+0x40>)
 800639a:	4c0c      	ldr	r4, [pc, #48]	@ (80063cc <__libc_init_array+0x44>)
 800639c:	f000 fd24 	bl	8006de8 <_init>
 80063a0:	1b64      	subs	r4, r4, r5
 80063a2:	10a4      	asrs	r4, r4, #2
 80063a4:	2600      	movs	r6, #0
 80063a6:	42a6      	cmp	r6, r4
 80063a8:	d105      	bne.n	80063b6 <__libc_init_array+0x2e>
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b0:	4798      	blx	r3
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7ee      	b.n	8006394 <__libc_init_array+0xc>
 80063b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ba:	4798      	blx	r3
 80063bc:	3601      	adds	r6, #1
 80063be:	e7f2      	b.n	80063a6 <__libc_init_array+0x1e>
 80063c0:	08006ec4 	.word	0x08006ec4
 80063c4:	08006ec4 	.word	0x08006ec4
 80063c8:	08006ec4 	.word	0x08006ec4
 80063cc:	08006ec8 	.word	0x08006ec8

080063d0 <__retarget_lock_init_recursive>:
 80063d0:	4770      	bx	lr

080063d2 <__retarget_lock_acquire_recursive>:
 80063d2:	4770      	bx	lr

080063d4 <__retarget_lock_release_recursive>:
 80063d4:	4770      	bx	lr
	...

080063d8 <_free_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	2900      	cmp	r1, #0
 80063de:	d041      	beq.n	8006464 <_free_r+0x8c>
 80063e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e4:	1f0c      	subs	r4, r1, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	18e4      	addlt	r4, r4, r3
 80063ec:	f000 f8e0 	bl	80065b0 <__malloc_lock>
 80063f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006468 <_free_r+0x90>)
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	b933      	cbnz	r3, 8006404 <_free_r+0x2c>
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	6014      	str	r4, [r2, #0]
 80063fa:	4628      	mov	r0, r5
 80063fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006400:	f000 b8dc 	b.w	80065bc <__malloc_unlock>
 8006404:	42a3      	cmp	r3, r4
 8006406:	d908      	bls.n	800641a <_free_r+0x42>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	1821      	adds	r1, r4, r0
 800640c:	428b      	cmp	r3, r1
 800640e:	bf01      	itttt	eq
 8006410:	6819      	ldreq	r1, [r3, #0]
 8006412:	685b      	ldreq	r3, [r3, #4]
 8006414:	1809      	addeq	r1, r1, r0
 8006416:	6021      	streq	r1, [r4, #0]
 8006418:	e7ed      	b.n	80063f6 <_free_r+0x1e>
 800641a:	461a      	mov	r2, r3
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b10b      	cbz	r3, 8006424 <_free_r+0x4c>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d9fa      	bls.n	800641a <_free_r+0x42>
 8006424:	6811      	ldr	r1, [r2, #0]
 8006426:	1850      	adds	r0, r2, r1
 8006428:	42a0      	cmp	r0, r4
 800642a:	d10b      	bne.n	8006444 <_free_r+0x6c>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	4401      	add	r1, r0
 8006430:	1850      	adds	r0, r2, r1
 8006432:	4283      	cmp	r3, r0
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	d1e0      	bne.n	80063fa <_free_r+0x22>
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	6053      	str	r3, [r2, #4]
 800643e:	4408      	add	r0, r1
 8006440:	6010      	str	r0, [r2, #0]
 8006442:	e7da      	b.n	80063fa <_free_r+0x22>
 8006444:	d902      	bls.n	800644c <_free_r+0x74>
 8006446:	230c      	movs	r3, #12
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	e7d6      	b.n	80063fa <_free_r+0x22>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	1821      	adds	r1, r4, r0
 8006450:	428b      	cmp	r3, r1
 8006452:	bf04      	itt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	bf04      	itt	eq
 800645c:	1809      	addeq	r1, r1, r0
 800645e:	6021      	streq	r1, [r4, #0]
 8006460:	6054      	str	r4, [r2, #4]
 8006462:	e7ca      	b.n	80063fa <_free_r+0x22>
 8006464:	bd38      	pop	{r3, r4, r5, pc}
 8006466:	bf00      	nop
 8006468:	20000634 	.word	0x20000634

0800646c <sbrk_aligned>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4e0f      	ldr	r6, [pc, #60]	@ (80064ac <sbrk_aligned+0x40>)
 8006470:	460c      	mov	r4, r1
 8006472:	6831      	ldr	r1, [r6, #0]
 8006474:	4605      	mov	r5, r0
 8006476:	b911      	cbnz	r1, 800647e <sbrk_aligned+0x12>
 8006478:	f000 fca6 	bl	8006dc8 <_sbrk_r>
 800647c:	6030      	str	r0, [r6, #0]
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 fca1 	bl	8006dc8 <_sbrk_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	d103      	bne.n	8006492 <sbrk_aligned+0x26>
 800648a:	f04f 34ff 	mov.w	r4, #4294967295
 800648e:	4620      	mov	r0, r4
 8006490:	bd70      	pop	{r4, r5, r6, pc}
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d0f8      	beq.n	800648e <sbrk_aligned+0x22>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 fc92 	bl	8006dc8 <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d1f2      	bne.n	800648e <sbrk_aligned+0x22>
 80064a8:	e7ef      	b.n	800648a <sbrk_aligned+0x1e>
 80064aa:	bf00      	nop
 80064ac:	20000630 	.word	0x20000630

080064b0 <_malloc_r>:
 80064b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b4:	1ccd      	adds	r5, r1, #3
 80064b6:	f025 0503 	bic.w	r5, r5, #3
 80064ba:	3508      	adds	r5, #8
 80064bc:	2d0c      	cmp	r5, #12
 80064be:	bf38      	it	cc
 80064c0:	250c      	movcc	r5, #12
 80064c2:	2d00      	cmp	r5, #0
 80064c4:	4606      	mov	r6, r0
 80064c6:	db01      	blt.n	80064cc <_malloc_r+0x1c>
 80064c8:	42a9      	cmp	r1, r5
 80064ca:	d904      	bls.n	80064d6 <_malloc_r+0x26>
 80064cc:	230c      	movs	r3, #12
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	2000      	movs	r0, #0
 80064d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065ac <_malloc_r+0xfc>
 80064da:	f000 f869 	bl	80065b0 <__malloc_lock>
 80064de:	f8d8 3000 	ldr.w	r3, [r8]
 80064e2:	461c      	mov	r4, r3
 80064e4:	bb44      	cbnz	r4, 8006538 <_malloc_r+0x88>
 80064e6:	4629      	mov	r1, r5
 80064e8:	4630      	mov	r0, r6
 80064ea:	f7ff ffbf 	bl	800646c <sbrk_aligned>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	4604      	mov	r4, r0
 80064f2:	d158      	bne.n	80065a6 <_malloc_r+0xf6>
 80064f4:	f8d8 4000 	ldr.w	r4, [r8]
 80064f8:	4627      	mov	r7, r4
 80064fa:	2f00      	cmp	r7, #0
 80064fc:	d143      	bne.n	8006586 <_malloc_r+0xd6>
 80064fe:	2c00      	cmp	r4, #0
 8006500:	d04b      	beq.n	800659a <_malloc_r+0xea>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	4639      	mov	r1, r7
 8006506:	4630      	mov	r0, r6
 8006508:	eb04 0903 	add.w	r9, r4, r3
 800650c:	f000 fc5c 	bl	8006dc8 <_sbrk_r>
 8006510:	4581      	cmp	r9, r0
 8006512:	d142      	bne.n	800659a <_malloc_r+0xea>
 8006514:	6821      	ldr	r1, [r4, #0]
 8006516:	1a6d      	subs	r5, r5, r1
 8006518:	4629      	mov	r1, r5
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff ffa6 	bl	800646c <sbrk_aligned>
 8006520:	3001      	adds	r0, #1
 8006522:	d03a      	beq.n	800659a <_malloc_r+0xea>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	442b      	add	r3, r5
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	f8d8 3000 	ldr.w	r3, [r8]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	bb62      	cbnz	r2, 800658c <_malloc_r+0xdc>
 8006532:	f8c8 7000 	str.w	r7, [r8]
 8006536:	e00f      	b.n	8006558 <_malloc_r+0xa8>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	1b52      	subs	r2, r2, r5
 800653c:	d420      	bmi.n	8006580 <_malloc_r+0xd0>
 800653e:	2a0b      	cmp	r2, #11
 8006540:	d917      	bls.n	8006572 <_malloc_r+0xc2>
 8006542:	1961      	adds	r1, r4, r5
 8006544:	42a3      	cmp	r3, r4
 8006546:	6025      	str	r5, [r4, #0]
 8006548:	bf18      	it	ne
 800654a:	6059      	strne	r1, [r3, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	bf08      	it	eq
 8006550:	f8c8 1000 	streq.w	r1, [r8]
 8006554:	5162      	str	r2, [r4, r5]
 8006556:	604b      	str	r3, [r1, #4]
 8006558:	4630      	mov	r0, r6
 800655a:	f000 f82f 	bl	80065bc <__malloc_unlock>
 800655e:	f104 000b 	add.w	r0, r4, #11
 8006562:	1d23      	adds	r3, r4, #4
 8006564:	f020 0007 	bic.w	r0, r0, #7
 8006568:	1ac2      	subs	r2, r0, r3
 800656a:	bf1c      	itt	ne
 800656c:	1a1b      	subne	r3, r3, r0
 800656e:	50a3      	strne	r3, [r4, r2]
 8006570:	e7af      	b.n	80064d2 <_malloc_r+0x22>
 8006572:	6862      	ldr	r2, [r4, #4]
 8006574:	42a3      	cmp	r3, r4
 8006576:	bf0c      	ite	eq
 8006578:	f8c8 2000 	streq.w	r2, [r8]
 800657c:	605a      	strne	r2, [r3, #4]
 800657e:	e7eb      	b.n	8006558 <_malloc_r+0xa8>
 8006580:	4623      	mov	r3, r4
 8006582:	6864      	ldr	r4, [r4, #4]
 8006584:	e7ae      	b.n	80064e4 <_malloc_r+0x34>
 8006586:	463c      	mov	r4, r7
 8006588:	687f      	ldr	r7, [r7, #4]
 800658a:	e7b6      	b.n	80064fa <_malloc_r+0x4a>
 800658c:	461a      	mov	r2, r3
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	d1fb      	bne.n	800658c <_malloc_r+0xdc>
 8006594:	2300      	movs	r3, #0
 8006596:	6053      	str	r3, [r2, #4]
 8006598:	e7de      	b.n	8006558 <_malloc_r+0xa8>
 800659a:	230c      	movs	r3, #12
 800659c:	6033      	str	r3, [r6, #0]
 800659e:	4630      	mov	r0, r6
 80065a0:	f000 f80c 	bl	80065bc <__malloc_unlock>
 80065a4:	e794      	b.n	80064d0 <_malloc_r+0x20>
 80065a6:	6005      	str	r5, [r0, #0]
 80065a8:	e7d6      	b.n	8006558 <_malloc_r+0xa8>
 80065aa:	bf00      	nop
 80065ac:	20000634 	.word	0x20000634

080065b0 <__malloc_lock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__malloc_lock+0x8>)
 80065b2:	f7ff bf0e 	b.w	80063d2 <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	2000062c 	.word	0x2000062c

080065bc <__malloc_unlock>:
 80065bc:	4801      	ldr	r0, [pc, #4]	@ (80065c4 <__malloc_unlock+0x8>)
 80065be:	f7ff bf09 	b.w	80063d4 <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	2000062c 	.word	0x2000062c

080065c8 <__sfputc_r>:
 80065c8:	6893      	ldr	r3, [r2, #8]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	b410      	push	{r4}
 80065d0:	6093      	str	r3, [r2, #8]
 80065d2:	da08      	bge.n	80065e6 <__sfputc_r+0x1e>
 80065d4:	6994      	ldr	r4, [r2, #24]
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	db01      	blt.n	80065de <__sfputc_r+0x16>
 80065da:	290a      	cmp	r1, #10
 80065dc:	d103      	bne.n	80065e6 <__sfputc_r+0x1e>
 80065de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e2:	f7ff bde8 	b.w	80061b6 <__swbuf_r>
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	1c58      	adds	r0, r3, #1
 80065ea:	6010      	str	r0, [r2, #0]
 80065ec:	7019      	strb	r1, [r3, #0]
 80065ee:	4608      	mov	r0, r1
 80065f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <__sfputs_r>:
 80065f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f8:	4606      	mov	r6, r0
 80065fa:	460f      	mov	r7, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	18d5      	adds	r5, r2, r3
 8006600:	42ac      	cmp	r4, r5
 8006602:	d101      	bne.n	8006608 <__sfputs_r+0x12>
 8006604:	2000      	movs	r0, #0
 8006606:	e007      	b.n	8006618 <__sfputs_r+0x22>
 8006608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800660c:	463a      	mov	r2, r7
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff ffda 	bl	80065c8 <__sfputc_r>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d1f3      	bne.n	8006600 <__sfputs_r+0xa>
 8006618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800661c <_vfiprintf_r>:
 800661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	460d      	mov	r5, r1
 8006622:	b09d      	sub	sp, #116	@ 0x74
 8006624:	4614      	mov	r4, r2
 8006626:	4698      	mov	r8, r3
 8006628:	4606      	mov	r6, r0
 800662a:	b118      	cbz	r0, 8006634 <_vfiprintf_r+0x18>
 800662c:	6a03      	ldr	r3, [r0, #32]
 800662e:	b90b      	cbnz	r3, 8006634 <_vfiprintf_r+0x18>
 8006630:	f7ff fcd8 	bl	8005fe4 <__sinit>
 8006634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006636:	07d9      	lsls	r1, r3, #31
 8006638:	d405      	bmi.n	8006646 <_vfiprintf_r+0x2a>
 800663a:	89ab      	ldrh	r3, [r5, #12]
 800663c:	059a      	lsls	r2, r3, #22
 800663e:	d402      	bmi.n	8006646 <_vfiprintf_r+0x2a>
 8006640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006642:	f7ff fec6 	bl	80063d2 <__retarget_lock_acquire_recursive>
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	071b      	lsls	r3, r3, #28
 800664a:	d501      	bpl.n	8006650 <_vfiprintf_r+0x34>
 800664c:	692b      	ldr	r3, [r5, #16]
 800664e:	b99b      	cbnz	r3, 8006678 <_vfiprintf_r+0x5c>
 8006650:	4629      	mov	r1, r5
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff fdee 	bl	8006234 <__swsetup_r>
 8006658:	b170      	cbz	r0, 8006678 <_vfiprintf_r+0x5c>
 800665a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800665c:	07dc      	lsls	r4, r3, #31
 800665e:	d504      	bpl.n	800666a <_vfiprintf_r+0x4e>
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	b01d      	add	sp, #116	@ 0x74
 8006666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	0598      	lsls	r0, r3, #22
 800666e:	d4f7      	bmi.n	8006660 <_vfiprintf_r+0x44>
 8006670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006672:	f7ff feaf 	bl	80063d4 <__retarget_lock_release_recursive>
 8006676:	e7f3      	b.n	8006660 <_vfiprintf_r+0x44>
 8006678:	2300      	movs	r3, #0
 800667a:	9309      	str	r3, [sp, #36]	@ 0x24
 800667c:	2320      	movs	r3, #32
 800667e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006682:	f8cd 800c 	str.w	r8, [sp, #12]
 8006686:	2330      	movs	r3, #48	@ 0x30
 8006688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006838 <_vfiprintf_r+0x21c>
 800668c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006690:	f04f 0901 	mov.w	r9, #1
 8006694:	4623      	mov	r3, r4
 8006696:	469a      	mov	sl, r3
 8006698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669c:	b10a      	cbz	r2, 80066a2 <_vfiprintf_r+0x86>
 800669e:	2a25      	cmp	r2, #37	@ 0x25
 80066a0:	d1f9      	bne.n	8006696 <_vfiprintf_r+0x7a>
 80066a2:	ebba 0b04 	subs.w	fp, sl, r4
 80066a6:	d00b      	beq.n	80066c0 <_vfiprintf_r+0xa4>
 80066a8:	465b      	mov	r3, fp
 80066aa:	4622      	mov	r2, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ffa1 	bl	80065f6 <__sfputs_r>
 80066b4:	3001      	adds	r0, #1
 80066b6:	f000 80a7 	beq.w	8006808 <_vfiprintf_r+0x1ec>
 80066ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066bc:	445a      	add	r2, fp
 80066be:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c0:	f89a 3000 	ldrb.w	r3, [sl]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 809f 	beq.w	8006808 <_vfiprintf_r+0x1ec>
 80066ca:	2300      	movs	r3, #0
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295
 80066d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d4:	f10a 0a01 	add.w	sl, sl, #1
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	9307      	str	r3, [sp, #28]
 80066dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80066e2:	4654      	mov	r4, sl
 80066e4:	2205      	movs	r2, #5
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	4853      	ldr	r0, [pc, #332]	@ (8006838 <_vfiprintf_r+0x21c>)
 80066ec:	f7f9 fda8 	bl	8000240 <memchr>
 80066f0:	9a04      	ldr	r2, [sp, #16]
 80066f2:	b9d8      	cbnz	r0, 800672c <_vfiprintf_r+0x110>
 80066f4:	06d1      	lsls	r1, r2, #27
 80066f6:	bf44      	itt	mi
 80066f8:	2320      	movmi	r3, #32
 80066fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066fe:	0713      	lsls	r3, r2, #28
 8006700:	bf44      	itt	mi
 8006702:	232b      	movmi	r3, #43	@ 0x2b
 8006704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006708:	f89a 3000 	ldrb.w	r3, [sl]
 800670c:	2b2a      	cmp	r3, #42	@ 0x2a
 800670e:	d015      	beq.n	800673c <_vfiprintf_r+0x120>
 8006710:	9a07      	ldr	r2, [sp, #28]
 8006712:	4654      	mov	r4, sl
 8006714:	2000      	movs	r0, #0
 8006716:	f04f 0c0a 	mov.w	ip, #10
 800671a:	4621      	mov	r1, r4
 800671c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006720:	3b30      	subs	r3, #48	@ 0x30
 8006722:	2b09      	cmp	r3, #9
 8006724:	d94b      	bls.n	80067be <_vfiprintf_r+0x1a2>
 8006726:	b1b0      	cbz	r0, 8006756 <_vfiprintf_r+0x13a>
 8006728:	9207      	str	r2, [sp, #28]
 800672a:	e014      	b.n	8006756 <_vfiprintf_r+0x13a>
 800672c:	eba0 0308 	sub.w	r3, r0, r8
 8006730:	fa09 f303 	lsl.w	r3, r9, r3
 8006734:	4313      	orrs	r3, r2
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	46a2      	mov	sl, r4
 800673a:	e7d2      	b.n	80066e2 <_vfiprintf_r+0xc6>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	1d19      	adds	r1, r3, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	9103      	str	r1, [sp, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfbb      	ittet	lt
 8006748:	425b      	neglt	r3, r3
 800674a:	f042 0202 	orrlt.w	r2, r2, #2
 800674e:	9307      	strge	r3, [sp, #28]
 8006750:	9307      	strlt	r3, [sp, #28]
 8006752:	bfb8      	it	lt
 8006754:	9204      	strlt	r2, [sp, #16]
 8006756:	7823      	ldrb	r3, [r4, #0]
 8006758:	2b2e      	cmp	r3, #46	@ 0x2e
 800675a:	d10a      	bne.n	8006772 <_vfiprintf_r+0x156>
 800675c:	7863      	ldrb	r3, [r4, #1]
 800675e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006760:	d132      	bne.n	80067c8 <_vfiprintf_r+0x1ac>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	9203      	str	r2, [sp, #12]
 800676a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800676e:	3402      	adds	r4, #2
 8006770:	9305      	str	r3, [sp, #20]
 8006772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006848 <_vfiprintf_r+0x22c>
 8006776:	7821      	ldrb	r1, [r4, #0]
 8006778:	2203      	movs	r2, #3
 800677a:	4650      	mov	r0, sl
 800677c:	f7f9 fd60 	bl	8000240 <memchr>
 8006780:	b138      	cbz	r0, 8006792 <_vfiprintf_r+0x176>
 8006782:	9b04      	ldr	r3, [sp, #16]
 8006784:	eba0 000a 	sub.w	r0, r0, sl
 8006788:	2240      	movs	r2, #64	@ 0x40
 800678a:	4082      	lsls	r2, r0
 800678c:	4313      	orrs	r3, r2
 800678e:	3401      	adds	r4, #1
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006796:	4829      	ldr	r0, [pc, #164]	@ (800683c <_vfiprintf_r+0x220>)
 8006798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800679c:	2206      	movs	r2, #6
 800679e:	f7f9 fd4f 	bl	8000240 <memchr>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d03f      	beq.n	8006826 <_vfiprintf_r+0x20a>
 80067a6:	4b26      	ldr	r3, [pc, #152]	@ (8006840 <_vfiprintf_r+0x224>)
 80067a8:	bb1b      	cbnz	r3, 80067f2 <_vfiprintf_r+0x1d6>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	3307      	adds	r3, #7
 80067ae:	f023 0307 	bic.w	r3, r3, #7
 80067b2:	3308      	adds	r3, #8
 80067b4:	9303      	str	r3, [sp, #12]
 80067b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b8:	443b      	add	r3, r7
 80067ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80067bc:	e76a      	b.n	8006694 <_vfiprintf_r+0x78>
 80067be:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c2:	460c      	mov	r4, r1
 80067c4:	2001      	movs	r0, #1
 80067c6:	e7a8      	b.n	800671a <_vfiprintf_r+0xfe>
 80067c8:	2300      	movs	r3, #0
 80067ca:	3401      	adds	r4, #1
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	4619      	mov	r1, r3
 80067d0:	f04f 0c0a 	mov.w	ip, #10
 80067d4:	4620      	mov	r0, r4
 80067d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067da:	3a30      	subs	r2, #48	@ 0x30
 80067dc:	2a09      	cmp	r2, #9
 80067de:	d903      	bls.n	80067e8 <_vfiprintf_r+0x1cc>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0c6      	beq.n	8006772 <_vfiprintf_r+0x156>
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	e7c4      	b.n	8006772 <_vfiprintf_r+0x156>
 80067e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ec:	4604      	mov	r4, r0
 80067ee:	2301      	movs	r3, #1
 80067f0:	e7f0      	b.n	80067d4 <_vfiprintf_r+0x1b8>
 80067f2:	ab03      	add	r3, sp, #12
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	462a      	mov	r2, r5
 80067f8:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <_vfiprintf_r+0x228>)
 80067fa:	a904      	add	r1, sp, #16
 80067fc:	4630      	mov	r0, r6
 80067fe:	f3af 8000 	nop.w
 8006802:	4607      	mov	r7, r0
 8006804:	1c78      	adds	r0, r7, #1
 8006806:	d1d6      	bne.n	80067b6 <_vfiprintf_r+0x19a>
 8006808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800680a:	07d9      	lsls	r1, r3, #31
 800680c:	d405      	bmi.n	800681a <_vfiprintf_r+0x1fe>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	059a      	lsls	r2, r3, #22
 8006812:	d402      	bmi.n	800681a <_vfiprintf_r+0x1fe>
 8006814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006816:	f7ff fddd 	bl	80063d4 <__retarget_lock_release_recursive>
 800681a:	89ab      	ldrh	r3, [r5, #12]
 800681c:	065b      	lsls	r3, r3, #25
 800681e:	f53f af1f 	bmi.w	8006660 <_vfiprintf_r+0x44>
 8006822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006824:	e71e      	b.n	8006664 <_vfiprintf_r+0x48>
 8006826:	ab03      	add	r3, sp, #12
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	462a      	mov	r2, r5
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <_vfiprintf_r+0x228>)
 800682e:	a904      	add	r1, sp, #16
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f879 	bl	8006928 <_printf_i>
 8006836:	e7e4      	b.n	8006802 <_vfiprintf_r+0x1e6>
 8006838:	08006e88 	.word	0x08006e88
 800683c:	08006e92 	.word	0x08006e92
 8006840:	00000000 	.word	0x00000000
 8006844:	080065f7 	.word	0x080065f7
 8006848:	08006e8e 	.word	0x08006e8e

0800684c <_printf_common>:
 800684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	4616      	mov	r6, r2
 8006852:	4698      	mov	r8, r3
 8006854:	688a      	ldr	r2, [r1, #8]
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800685c:	4293      	cmp	r3, r2
 800685e:	bfb8      	it	lt
 8006860:	4613      	movlt	r3, r2
 8006862:	6033      	str	r3, [r6, #0]
 8006864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006868:	4607      	mov	r7, r0
 800686a:	460c      	mov	r4, r1
 800686c:	b10a      	cbz	r2, 8006872 <_printf_common+0x26>
 800686e:	3301      	adds	r3, #1
 8006870:	6033      	str	r3, [r6, #0]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	0699      	lsls	r1, r3, #26
 8006876:	bf42      	ittt	mi
 8006878:	6833      	ldrmi	r3, [r6, #0]
 800687a:	3302      	addmi	r3, #2
 800687c:	6033      	strmi	r3, [r6, #0]
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	f015 0506 	ands.w	r5, r5, #6
 8006884:	d106      	bne.n	8006894 <_printf_common+0x48>
 8006886:	f104 0a19 	add.w	sl, r4, #25
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	6832      	ldr	r2, [r6, #0]
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	42ab      	cmp	r3, r5
 8006892:	dc26      	bgt.n	80068e2 <_printf_common+0x96>
 8006894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	3b00      	subs	r3, #0
 800689c:	bf18      	it	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	0692      	lsls	r2, r2, #26
 80068a2:	d42b      	bmi.n	80068fc <_printf_common+0xb0>
 80068a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068a8:	4641      	mov	r1, r8
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c8      	blx	r9
 80068ae:	3001      	adds	r0, #1
 80068b0:	d01e      	beq.n	80068f0 <_printf_common+0xa4>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	f003 0306 	and.w	r3, r3, #6
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	bf02      	ittt	eq
 80068be:	68e5      	ldreq	r5, [r4, #12]
 80068c0:	6833      	ldreq	r3, [r6, #0]
 80068c2:	1aed      	subeq	r5, r5, r3
 80068c4:	68a3      	ldr	r3, [r4, #8]
 80068c6:	bf0c      	ite	eq
 80068c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068cc:	2500      	movne	r5, #0
 80068ce:	4293      	cmp	r3, r2
 80068d0:	bfc4      	itt	gt
 80068d2:	1a9b      	subgt	r3, r3, r2
 80068d4:	18ed      	addgt	r5, r5, r3
 80068d6:	2600      	movs	r6, #0
 80068d8:	341a      	adds	r4, #26
 80068da:	42b5      	cmp	r5, r6
 80068dc:	d11a      	bne.n	8006914 <_printf_common+0xc8>
 80068de:	2000      	movs	r0, #0
 80068e0:	e008      	b.n	80068f4 <_printf_common+0xa8>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4652      	mov	r2, sl
 80068e6:	4641      	mov	r1, r8
 80068e8:	4638      	mov	r0, r7
 80068ea:	47c8      	blx	r9
 80068ec:	3001      	adds	r0, #1
 80068ee:	d103      	bne.n	80068f8 <_printf_common+0xac>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	3501      	adds	r5, #1
 80068fa:	e7c6      	b.n	800688a <_printf_common+0x3e>
 80068fc:	18e1      	adds	r1, r4, r3
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	2030      	movs	r0, #48	@ 0x30
 8006902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006906:	4422      	add	r2, r4
 8006908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800690c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006910:	3302      	adds	r3, #2
 8006912:	e7c7      	b.n	80068a4 <_printf_common+0x58>
 8006914:	2301      	movs	r3, #1
 8006916:	4622      	mov	r2, r4
 8006918:	4641      	mov	r1, r8
 800691a:	4638      	mov	r0, r7
 800691c:	47c8      	blx	r9
 800691e:	3001      	adds	r0, #1
 8006920:	d0e6      	beq.n	80068f0 <_printf_common+0xa4>
 8006922:	3601      	adds	r6, #1
 8006924:	e7d9      	b.n	80068da <_printf_common+0x8e>
	...

08006928 <_printf_i>:
 8006928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	7e0f      	ldrb	r7, [r1, #24]
 800692e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006930:	2f78      	cmp	r7, #120	@ 0x78
 8006932:	4691      	mov	r9, r2
 8006934:	4680      	mov	r8, r0
 8006936:	460c      	mov	r4, r1
 8006938:	469a      	mov	sl, r3
 800693a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800693e:	d807      	bhi.n	8006950 <_printf_i+0x28>
 8006940:	2f62      	cmp	r7, #98	@ 0x62
 8006942:	d80a      	bhi.n	800695a <_printf_i+0x32>
 8006944:	2f00      	cmp	r7, #0
 8006946:	f000 80d2 	beq.w	8006aee <_printf_i+0x1c6>
 800694a:	2f58      	cmp	r7, #88	@ 0x58
 800694c:	f000 80b9 	beq.w	8006ac2 <_printf_i+0x19a>
 8006950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006958:	e03a      	b.n	80069d0 <_printf_i+0xa8>
 800695a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800695e:	2b15      	cmp	r3, #21
 8006960:	d8f6      	bhi.n	8006950 <_printf_i+0x28>
 8006962:	a101      	add	r1, pc, #4	@ (adr r1, 8006968 <_printf_i+0x40>)
 8006964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069d5 	.word	0x080069d5
 8006970:	08006951 	.word	0x08006951
 8006974:	08006951 	.word	0x08006951
 8006978:	08006951 	.word	0x08006951
 800697c:	08006951 	.word	0x08006951
 8006980:	080069d5 	.word	0x080069d5
 8006984:	08006951 	.word	0x08006951
 8006988:	08006951 	.word	0x08006951
 800698c:	08006951 	.word	0x08006951
 8006990:	08006951 	.word	0x08006951
 8006994:	08006ad5 	.word	0x08006ad5
 8006998:	080069ff 	.word	0x080069ff
 800699c:	08006a8f 	.word	0x08006a8f
 80069a0:	08006951 	.word	0x08006951
 80069a4:	08006951 	.word	0x08006951
 80069a8:	08006af7 	.word	0x08006af7
 80069ac:	08006951 	.word	0x08006951
 80069b0:	080069ff 	.word	0x080069ff
 80069b4:	08006951 	.word	0x08006951
 80069b8:	08006951 	.word	0x08006951
 80069bc:	08006a97 	.word	0x08006a97
 80069c0:	6833      	ldr	r3, [r6, #0]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6032      	str	r2, [r6, #0]
 80069c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069d0:	2301      	movs	r3, #1
 80069d2:	e09d      	b.n	8006b10 <_printf_i+0x1e8>
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	6820      	ldr	r0, [r4, #0]
 80069d8:	1d19      	adds	r1, r3, #4
 80069da:	6031      	str	r1, [r6, #0]
 80069dc:	0606      	lsls	r6, r0, #24
 80069de:	d501      	bpl.n	80069e4 <_printf_i+0xbc>
 80069e0:	681d      	ldr	r5, [r3, #0]
 80069e2:	e003      	b.n	80069ec <_printf_i+0xc4>
 80069e4:	0645      	lsls	r5, r0, #25
 80069e6:	d5fb      	bpl.n	80069e0 <_printf_i+0xb8>
 80069e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	da03      	bge.n	80069f8 <_printf_i+0xd0>
 80069f0:	232d      	movs	r3, #45	@ 0x2d
 80069f2:	426d      	negs	r5, r5
 80069f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069f8:	4859      	ldr	r0, [pc, #356]	@ (8006b60 <_printf_i+0x238>)
 80069fa:	230a      	movs	r3, #10
 80069fc:	e011      	b.n	8006a22 <_printf_i+0xfa>
 80069fe:	6821      	ldr	r1, [r4, #0]
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	0608      	lsls	r0, r1, #24
 8006a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a08:	d402      	bmi.n	8006a10 <_printf_i+0xe8>
 8006a0a:	0649      	lsls	r1, r1, #25
 8006a0c:	bf48      	it	mi
 8006a0e:	b2ad      	uxthmi	r5, r5
 8006a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a12:	4853      	ldr	r0, [pc, #332]	@ (8006b60 <_printf_i+0x238>)
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	bf14      	ite	ne
 8006a18:	230a      	movne	r3, #10
 8006a1a:	2308      	moveq	r3, #8
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a22:	6866      	ldr	r6, [r4, #4]
 8006a24:	60a6      	str	r6, [r4, #8]
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	bfa2      	ittt	ge
 8006a2a:	6821      	ldrge	r1, [r4, #0]
 8006a2c:	f021 0104 	bicge.w	r1, r1, #4
 8006a30:	6021      	strge	r1, [r4, #0]
 8006a32:	b90d      	cbnz	r5, 8006a38 <_printf_i+0x110>
 8006a34:	2e00      	cmp	r6, #0
 8006a36:	d04b      	beq.n	8006ad0 <_printf_i+0x1a8>
 8006a38:	4616      	mov	r6, r2
 8006a3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a3e:	fb03 5711 	mls	r7, r3, r1, r5
 8006a42:	5dc7      	ldrb	r7, [r0, r7]
 8006a44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a48:	462f      	mov	r7, r5
 8006a4a:	42bb      	cmp	r3, r7
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	d9f4      	bls.n	8006a3a <_printf_i+0x112>
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d10b      	bne.n	8006a6c <_printf_i+0x144>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07df      	lsls	r7, r3, #31
 8006a58:	d508      	bpl.n	8006a6c <_printf_i+0x144>
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	bfde      	ittt	le
 8006a62:	2330      	movle	r3, #48	@ 0x30
 8006a64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a6c:	1b92      	subs	r2, r2, r6
 8006a6e:	6122      	str	r2, [r4, #16]
 8006a70:	f8cd a000 	str.w	sl, [sp]
 8006a74:	464b      	mov	r3, r9
 8006a76:	aa03      	add	r2, sp, #12
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f7ff fee6 	bl	800684c <_printf_common>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d14a      	bne.n	8006b1a <_printf_i+0x1f2>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	b004      	add	sp, #16
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f043 0320 	orr.w	r3, r3, #32
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	4833      	ldr	r0, [pc, #204]	@ (8006b64 <_printf_i+0x23c>)
 8006a98:	2778      	movs	r7, #120	@ 0x78
 8006a9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	6831      	ldr	r1, [r6, #0]
 8006aa2:	061f      	lsls	r7, r3, #24
 8006aa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aa8:	d402      	bmi.n	8006ab0 <_printf_i+0x188>
 8006aaa:	065f      	lsls	r7, r3, #25
 8006aac:	bf48      	it	mi
 8006aae:	b2ad      	uxthmi	r5, r5
 8006ab0:	6031      	str	r1, [r6, #0]
 8006ab2:	07d9      	lsls	r1, r3, #31
 8006ab4:	bf44      	itt	mi
 8006ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aba:	6023      	strmi	r3, [r4, #0]
 8006abc:	b11d      	cbz	r5, 8006ac6 <_printf_i+0x19e>
 8006abe:	2310      	movs	r3, #16
 8006ac0:	e7ac      	b.n	8006a1c <_printf_i+0xf4>
 8006ac2:	4827      	ldr	r0, [pc, #156]	@ (8006b60 <_printf_i+0x238>)
 8006ac4:	e7e9      	b.n	8006a9a <_printf_i+0x172>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	f023 0320 	bic.w	r3, r3, #32
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	e7f6      	b.n	8006abe <_printf_i+0x196>
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	e7bd      	b.n	8006a50 <_printf_i+0x128>
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	6825      	ldr	r5, [r4, #0]
 8006ad8:	6961      	ldr	r1, [r4, #20]
 8006ada:	1d18      	adds	r0, r3, #4
 8006adc:	6030      	str	r0, [r6, #0]
 8006ade:	062e      	lsls	r6, r5, #24
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_i+0x1c0>
 8006ae4:	6019      	str	r1, [r3, #0]
 8006ae6:	e002      	b.n	8006aee <_printf_i+0x1c6>
 8006ae8:	0668      	lsls	r0, r5, #25
 8006aea:	d5fb      	bpl.n	8006ae4 <_printf_i+0x1bc>
 8006aec:	8019      	strh	r1, [r3, #0]
 8006aee:	2300      	movs	r3, #0
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	4616      	mov	r6, r2
 8006af4:	e7bc      	b.n	8006a70 <_printf_i+0x148>
 8006af6:	6833      	ldr	r3, [r6, #0]
 8006af8:	1d1a      	adds	r2, r3, #4
 8006afa:	6032      	str	r2, [r6, #0]
 8006afc:	681e      	ldr	r6, [r3, #0]
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	2100      	movs	r1, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7f9 fb9c 	bl	8000240 <memchr>
 8006b08:	b108      	cbz	r0, 8006b0e <_printf_i+0x1e6>
 8006b0a:	1b80      	subs	r0, r0, r6
 8006b0c:	6060      	str	r0, [r4, #4]
 8006b0e:	6863      	ldr	r3, [r4, #4]
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	2300      	movs	r3, #0
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b18:	e7aa      	b.n	8006a70 <_printf_i+0x148>
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	4632      	mov	r2, r6
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4640      	mov	r0, r8
 8006b22:	47d0      	blx	sl
 8006b24:	3001      	adds	r0, #1
 8006b26:	d0ad      	beq.n	8006a84 <_printf_i+0x15c>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	079b      	lsls	r3, r3, #30
 8006b2c:	d413      	bmi.n	8006b56 <_printf_i+0x22e>
 8006b2e:	68e0      	ldr	r0, [r4, #12]
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	4298      	cmp	r0, r3
 8006b34:	bfb8      	it	lt
 8006b36:	4618      	movlt	r0, r3
 8006b38:	e7a6      	b.n	8006a88 <_printf_i+0x160>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4640      	mov	r0, r8
 8006b42:	47d0      	blx	sl
 8006b44:	3001      	adds	r0, #1
 8006b46:	d09d      	beq.n	8006a84 <_printf_i+0x15c>
 8006b48:	3501      	adds	r5, #1
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	9903      	ldr	r1, [sp, #12]
 8006b4e:	1a5b      	subs	r3, r3, r1
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	dcf2      	bgt.n	8006b3a <_printf_i+0x212>
 8006b54:	e7eb      	b.n	8006b2e <_printf_i+0x206>
 8006b56:	2500      	movs	r5, #0
 8006b58:	f104 0619 	add.w	r6, r4, #25
 8006b5c:	e7f5      	b.n	8006b4a <_printf_i+0x222>
 8006b5e:	bf00      	nop
 8006b60:	08006e99 	.word	0x08006e99
 8006b64:	08006eaa 	.word	0x08006eaa

08006b68 <__sflush_r>:
 8006b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	0716      	lsls	r6, r2, #28
 8006b72:	4605      	mov	r5, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	d454      	bmi.n	8006c22 <__sflush_r+0xba>
 8006b78:	684b      	ldr	r3, [r1, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dc02      	bgt.n	8006b84 <__sflush_r+0x1c>
 8006b7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd48      	ble.n	8006c16 <__sflush_r+0xae>
 8006b84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d045      	beq.n	8006c16 <__sflush_r+0xae>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b90:	682f      	ldr	r7, [r5, #0]
 8006b92:	6a21      	ldr	r1, [r4, #32]
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	d030      	beq.n	8006bfa <__sflush_r+0x92>
 8006b98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	0759      	lsls	r1, r3, #29
 8006b9e:	d505      	bpl.n	8006bac <__sflush_r+0x44>
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ba6:	b10b      	cbz	r3, 8006bac <__sflush_r+0x44>
 8006ba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bb0:	6a21      	ldr	r1, [r4, #32]
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b0      	blx	r6
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	d106      	bne.n	8006bca <__sflush_r+0x62>
 8006bbc:	6829      	ldr	r1, [r5, #0]
 8006bbe:	291d      	cmp	r1, #29
 8006bc0:	d82b      	bhi.n	8006c1a <__sflush_r+0xb2>
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c6c <__sflush_r+0x104>)
 8006bc4:	410a      	asrs	r2, r1
 8006bc6:	07d6      	lsls	r6, r2, #31
 8006bc8:	d427      	bmi.n	8006c1a <__sflush_r+0xb2>
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6062      	str	r2, [r4, #4]
 8006bce:	04d9      	lsls	r1, r3, #19
 8006bd0:	6922      	ldr	r2, [r4, #16]
 8006bd2:	6022      	str	r2, [r4, #0]
 8006bd4:	d504      	bpl.n	8006be0 <__sflush_r+0x78>
 8006bd6:	1c42      	adds	r2, r0, #1
 8006bd8:	d101      	bne.n	8006bde <__sflush_r+0x76>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	b903      	cbnz	r3, 8006be0 <__sflush_r+0x78>
 8006bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8006be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006be2:	602f      	str	r7, [r5, #0]
 8006be4:	b1b9      	cbz	r1, 8006c16 <__sflush_r+0xae>
 8006be6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bea:	4299      	cmp	r1, r3
 8006bec:	d002      	beq.n	8006bf4 <__sflush_r+0x8c>
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f7ff fbf2 	bl	80063d8 <_free_r>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bf8:	e00d      	b.n	8006c16 <__sflush_r+0xae>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b0      	blx	r6
 8006c00:	4602      	mov	r2, r0
 8006c02:	1c50      	adds	r0, r2, #1
 8006c04:	d1c9      	bne.n	8006b9a <__sflush_r+0x32>
 8006c06:	682b      	ldr	r3, [r5, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0c6      	beq.n	8006b9a <__sflush_r+0x32>
 8006c0c:	2b1d      	cmp	r3, #29
 8006c0e:	d001      	beq.n	8006c14 <__sflush_r+0xac>
 8006c10:	2b16      	cmp	r3, #22
 8006c12:	d11e      	bne.n	8006c52 <__sflush_r+0xea>
 8006c14:	602f      	str	r7, [r5, #0]
 8006c16:	2000      	movs	r0, #0
 8006c18:	e022      	b.n	8006c60 <__sflush_r+0xf8>
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c1e:	b21b      	sxth	r3, r3
 8006c20:	e01b      	b.n	8006c5a <__sflush_r+0xf2>
 8006c22:	690f      	ldr	r7, [r1, #16]
 8006c24:	2f00      	cmp	r7, #0
 8006c26:	d0f6      	beq.n	8006c16 <__sflush_r+0xae>
 8006c28:	0793      	lsls	r3, r2, #30
 8006c2a:	680e      	ldr	r6, [r1, #0]
 8006c2c:	bf08      	it	eq
 8006c2e:	694b      	ldreq	r3, [r1, #20]
 8006c30:	600f      	str	r7, [r1, #0]
 8006c32:	bf18      	it	ne
 8006c34:	2300      	movne	r3, #0
 8006c36:	eba6 0807 	sub.w	r8, r6, r7
 8006c3a:	608b      	str	r3, [r1, #8]
 8006c3c:	f1b8 0f00 	cmp.w	r8, #0
 8006c40:	dde9      	ble.n	8006c16 <__sflush_r+0xae>
 8006c42:	6a21      	ldr	r1, [r4, #32]
 8006c44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c46:	4643      	mov	r3, r8
 8006c48:	463a      	mov	r2, r7
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b0      	blx	r6
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	dc08      	bgt.n	8006c64 <__sflush_r+0xfc>
 8006c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c64:	4407      	add	r7, r0
 8006c66:	eba8 0800 	sub.w	r8, r8, r0
 8006c6a:	e7e7      	b.n	8006c3c <__sflush_r+0xd4>
 8006c6c:	dfbffffe 	.word	0xdfbffffe

08006c70 <_fflush_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	690b      	ldr	r3, [r1, #16]
 8006c74:	4605      	mov	r5, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	b913      	cbnz	r3, 8006c80 <_fflush_r+0x10>
 8006c7a:	2500      	movs	r5, #0
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	b118      	cbz	r0, 8006c8a <_fflush_r+0x1a>
 8006c82:	6a03      	ldr	r3, [r0, #32]
 8006c84:	b90b      	cbnz	r3, 8006c8a <_fflush_r+0x1a>
 8006c86:	f7ff f9ad 	bl	8005fe4 <__sinit>
 8006c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f3      	beq.n	8006c7a <_fflush_r+0xa>
 8006c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c94:	07d0      	lsls	r0, r2, #31
 8006c96:	d404      	bmi.n	8006ca2 <_fflush_r+0x32>
 8006c98:	0599      	lsls	r1, r3, #22
 8006c9a:	d402      	bmi.n	8006ca2 <_fflush_r+0x32>
 8006c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c9e:	f7ff fb98 	bl	80063d2 <__retarget_lock_acquire_recursive>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f7ff ff5f 	bl	8006b68 <__sflush_r>
 8006caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cac:	07da      	lsls	r2, r3, #31
 8006cae:	4605      	mov	r5, r0
 8006cb0:	d4e4      	bmi.n	8006c7c <_fflush_r+0xc>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	059b      	lsls	r3, r3, #22
 8006cb6:	d4e1      	bmi.n	8006c7c <_fflush_r+0xc>
 8006cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cba:	f7ff fb8b 	bl	80063d4 <__retarget_lock_release_recursive>
 8006cbe:	e7dd      	b.n	8006c7c <_fflush_r+0xc>

08006cc0 <__swhatbuf_r>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	b096      	sub	sp, #88	@ 0x58
 8006ccc:	4615      	mov	r5, r2
 8006cce:	461e      	mov	r6, r3
 8006cd0:	da0d      	bge.n	8006cee <__swhatbuf_r+0x2e>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	bf14      	ite	ne
 8006cde:	2340      	movne	r3, #64	@ 0x40
 8006ce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	6031      	str	r1, [r6, #0]
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	b016      	add	sp, #88	@ 0x58
 8006cec:	bd70      	pop	{r4, r5, r6, pc}
 8006cee:	466a      	mov	r2, sp
 8006cf0:	f000 f848 	bl	8006d84 <_fstat_r>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	dbec      	blt.n	8006cd2 <__swhatbuf_r+0x12>
 8006cf8:	9901      	ldr	r1, [sp, #4]
 8006cfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d02:	4259      	negs	r1, r3
 8006d04:	4159      	adcs	r1, r3
 8006d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d0a:	e7eb      	b.n	8006ce4 <__swhatbuf_r+0x24>

08006d0c <__smakebuf_r>:
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d10:	079d      	lsls	r5, r3, #30
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	d507      	bpl.n	8006d28 <__smakebuf_r+0x1c>
 8006d18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	2301      	movs	r3, #1
 8006d22:	6163      	str	r3, [r4, #20]
 8006d24:	b003      	add	sp, #12
 8006d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d28:	ab01      	add	r3, sp, #4
 8006d2a:	466a      	mov	r2, sp
 8006d2c:	f7ff ffc8 	bl	8006cc0 <__swhatbuf_r>
 8006d30:	9f00      	ldr	r7, [sp, #0]
 8006d32:	4605      	mov	r5, r0
 8006d34:	4639      	mov	r1, r7
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff fbba 	bl	80064b0 <_malloc_r>
 8006d3c:	b948      	cbnz	r0, 8006d52 <__smakebuf_r+0x46>
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	059a      	lsls	r2, r3, #22
 8006d44:	d4ee      	bmi.n	8006d24 <__smakebuf_r+0x18>
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	e7e2      	b.n	8006d18 <__smakebuf_r+0xc>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	6020      	str	r0, [r4, #0]
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	9b01      	ldr	r3, [sp, #4]
 8006d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d62:	b15b      	cbz	r3, 8006d7c <__smakebuf_r+0x70>
 8006d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f81d 	bl	8006da8 <_isatty_r>
 8006d6e:	b128      	cbz	r0, 8006d7c <__smakebuf_r+0x70>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	431d      	orrs	r5, r3
 8006d80:	81a5      	strh	r5, [r4, #12]
 8006d82:	e7cf      	b.n	8006d24 <__smakebuf_r+0x18>

08006d84 <_fstat_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d07      	ldr	r5, [pc, #28]	@ (8006da4 <_fstat_r+0x20>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	f7fa f840 	bl	8000e16 <_fstat>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	d102      	bne.n	8006da0 <_fstat_r+0x1c>
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	b103      	cbz	r3, 8006da0 <_fstat_r+0x1c>
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	bd38      	pop	{r3, r4, r5, pc}
 8006da2:	bf00      	nop
 8006da4:	20000628 	.word	0x20000628

08006da8 <_isatty_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d06      	ldr	r5, [pc, #24]	@ (8006dc4 <_isatty_r+0x1c>)
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	f7fa f83f 	bl	8000e36 <_isatty>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_isatty_r+0x1a>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_isatty_r+0x1a>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	20000628 	.word	0x20000628

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	@ (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7fa f848 	bl	8000e68 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20000628 	.word	0x20000628

08006de8 <_init>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr

08006df4 <_fini>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	bf00      	nop
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr
