
MAAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009418  08009418  0000b0a4  2**0
                  CONTENTS
  4 .ARM          00000008  08009418  08009418  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009420  08009420  0000b0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009420  08009420  0000a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009424  08009424  0000a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08009428  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  200000a4  080094cc  0000b0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  080094cc  0000b7e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f510  00000000  00000000  0000b0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dda  00000000  00000000  0001a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a90  00000000  00000000  0001e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a46a  00000000  00000000  0001ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d50  00000000  00000000  000490e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d28  00000000  00000000  0005ce32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  00152ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00156b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	080091a8 	.word	0x080091a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	080091a8 	.word	0x080091a8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sd_card_init>:
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0x7d, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x80, 0xa9, 0x03, 0x00};
static uint32_t wav_file_size;
static uint8_t first_time = 0;

void sd_card_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	uint8_t file_name[] = "test.txt";
	uint8_t temp_number;
	uint8_t test_text[] = "Hola, esto es un texto de prueba.";
	*/
	// montando una tarjeta SD
	sd_result = f_mount(&sdCard,SDPath,1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <sd_card_init+0x38>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <sd_card_init+0x3c>)
 80005da:	f006 ffd5 	bl	8007588 <f_mount>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <sd_card_init+0x40>)
 80005e4:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <sd_card_init+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <sd_card_init+0x2e>
		printf("Error montando la tarjeta SD: %d \n", sd_result);
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <sd_card_init+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <sd_card_init+0x44>)
 80005f6:	f007 ff0b 	bl	8008410 <iprintf>
		while(1);
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <sd_card_init+0x2a>
	}
	else {
		printf("Tarjeta SD montada \n");
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <sd_card_init+0x48>)
 8000600:	f007 ff6e 	bl	80084e0 <puts>
	else {
		printf("Contenido del archivo escrito: %d \n", temp_number);
	}
	f_close(&testFile);
	*/
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20001660 	.word	0x20001660
 800060c:	200000c4 	.word	0x200000c4
 8000610:	200000c0 	.word	0x200000c0
 8000614:	080091c0 	.word	0x080091c0
 8000618:	080091e4 	.word	0x080091e4

0800061c <start_recording>:

void start_recording (uint32_t frequency) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	int file_number_digits = file_counter;
 8000624:	4b4b      	ldr	r3, [pc, #300]	@ (8000754 <start_recording+0x138>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t) frequency;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b48      	ldr	r3, [pc, #288]	@ (8000758 <start_recording+0x13c>)
 8000636:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b46      	ldr	r3, [pc, #280]	@ (8000758 <start_recording+0x13c>)
 8000640:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b43      	ldr	r3, [pc, #268]	@ (8000758 <start_recording+0x13c>)
 800064a:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b41      	ldr	r3, [pc, #260]	@ (8000758 <start_recording+0x13c>)
 8000654:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t) byte_rate;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <start_recording+0x13c>)
 800065c:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <start_recording+0x13c>)
 8000666:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b3a      	ldr	r3, [pc, #232]	@ (8000758 <start_recording+0x13c>)
 8000670:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	0e1b      	lsrs	r3, r3, #24
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <start_recording+0x13c>)
 800067a:	77da      	strb	r2, [r3, #31]

	// definiendo el nombre del archivo
	file_name[4] = file_number_digits % 10 + 48;
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4b37      	ldr	r3, [pc, #220]	@ (800075c <start_recording+0x140>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	1099      	asrs	r1, r3, #2
 8000686:	17d3      	asrs	r3, r2, #31
 8000688:	1ac9      	subs	r1, r1, r3
 800068a:	460b      	mov	r3, r1
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	1ad1      	subs	r1, r2, r3
 8000694:	b2cb      	uxtb	r3, r1
 8000696:	3330      	adds	r3, #48	@ 0x30
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <start_recording+0x144>)
 800069c:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <start_recording+0x140>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	1092      	asrs	r2, r2, #2
 80006a8:	17db      	asrs	r3, r3, #31
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits % 10 + 48;
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <start_recording+0x140>)
 80006b2:	fb83 1302 	smull	r1, r3, r3, r2
 80006b6:	1099      	asrs	r1, r3, #2
 80006b8:	17d3      	asrs	r3, r2, #31
 80006ba:	1ac9      	subs	r1, r1, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ad1      	subs	r1, r2, r3
 80006c6:	b2cb      	uxtb	r3, r1
 80006c8:	3330      	adds	r3, #48	@ 0x30
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <start_recording+0x144>)
 80006ce:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a22      	ldr	r2, [pc, #136]	@ (800075c <start_recording+0x140>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits % 10 + 48;
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <start_recording+0x140>)
 80006e4:	fb83 1302 	smull	r1, r3, r3, r2
 80006e8:	1099      	asrs	r1, r3, #2
 80006ea:	17d3      	asrs	r3, r2, #31
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ad1      	subs	r1, r2, r3
 80006f8:	b2cb      	uxtb	r3, r1
 80006fa:	3330      	adds	r3, #48	@ 0x30
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <start_recording+0x144>)
 8000700:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 8000702:	4917      	ldr	r1, [pc, #92]	@ (8000760 <start_recording+0x144>)
 8000704:	4817      	ldr	r0, [pc, #92]	@ (8000764 <start_recording+0x148>)
 8000706:	f007 fe83 	bl	8008410 <iprintf>
	file_counter++;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <start_recording+0x138>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <start_recording+0x138>)
 8000714:	701a      	strb	r2, [r3, #0]

	// creando el archivo
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 8000716:	220a      	movs	r2, #10
 8000718:	4911      	ldr	r1, [pc, #68]	@ (8000760 <start_recording+0x144>)
 800071a:	4813      	ldr	r0, [pc, #76]	@ (8000768 <start_recording+0x14c>)
 800071c:	f006 ff7a 	bl	8007614 <f_open>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <start_recording+0x150>)
 8000726:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <start_recording+0x150>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <start_recording+0x124>
		printf("Error creando un archivo: %d \n", sd_result);
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <start_recording+0x150>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	480e      	ldr	r0, [pc, #56]	@ (8000770 <start_recording+0x154>)
 8000738:	f007 fe6a 	bl	8008410 <iprintf>
		while(1);
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <start_recording+0x120>
	}
	else {
		printf("Archivo de prueba creado \n");
 8000740:	480c      	ldr	r0, [pc, #48]	@ (8000774 <start_recording+0x158>)
 8000742:	f007 fecd 	bl	80084e0 <puts>
	}
	wav_file_size = 0;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <start_recording+0x15c>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000002c 	.word	0x2000002c
 8000758:	20000000 	.word	0x20000000
 800075c:	66666667 	.word	0x66666667
 8000760:	20000030 	.word	0x20000030
 8000764:	080091f8 	.word	0x080091f8
 8000768:	200002f4 	.word	0x200002f4
 800076c:	200000c0 	.word	0x200000c0
 8000770:	08009208 	.word	0x08009208
 8000774:	08009228 	.word	0x08009228
 8000778:	20000524 	.word	0x20000524

0800077c <write2wave_file>:

void write2wave_file (uint8_t *data, uint16_t data_size) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	if(first_time == 0)
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <write2wave_file+0x84>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d116      	bne.n	80007be <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e00a      	b.n	80007ac <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	4919      	ldr	r1, [pc, #100]	@ (8000804 <write2wave_file+0x88>)
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	440a      	add	r2, r1
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80007b0:	ddf1      	ble.n	8000796 <write2wave_file+0x1a>
		}
		first_time = 1;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <write2wave_file+0x84>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
		printf("El encabezado ha sido escrito. \n");
 80007b8:	4813      	ldr	r0, [pc, #76]	@ (8000808 <write2wave_file+0x8c>)
 80007ba:	f007 fe91 	bl	80084e0 <puts>
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 80007be:	887a      	ldrh	r2, [r7, #2]
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4811      	ldr	r0, [pc, #68]	@ (800080c <write2wave_file+0x90>)
 80007c8:	f007 f8de 	bl	8007988 <f_write>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <write2wave_file+0x94>)
 80007d2:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0) {
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <write2wave_file+0x94>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d007      	beq.n	80007ec <write2wave_file+0x70>
		printf("Error escribiendo al archivo: %d \n", sd_result);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <write2wave_file+0x94>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	480c      	ldr	r0, [pc, #48]	@ (8000814 <write2wave_file+0x98>)
 80007e4:	f007 fe14 	bl	8008410 <iprintf>
		while(1);
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 80007ec:	887a      	ldrh	r2, [r7, #2]
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <write2wave_file+0x9c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <write2wave_file+0x9c>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000528 	.word	0x20000528
 8000804:	20000000 	.word	0x20000000
 8000808:	08009244 	.word	0x08009244
 800080c:	200002f4 	.word	0x200002f4
 8000810:	200000c0 	.word	0x200000c0
 8000814:	08009264 	.word	0x08009264
 8000818:	20000524 	.word	0x20000524

0800081c <stop_recording>:

void stop_recording () {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// actualizando el tamaño de archivo
	wav_file_size -= 8;
 8000822:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <stop_recording+0xc4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3b08      	subs	r3, #8
 8000828:	4a2d      	ldr	r2, [pc, #180]	@ (80008e0 <stop_recording+0xc4>)
 800082a:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <stop_recording+0xc4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <stop_recording+0xc8>)
 8000834:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <stop_recording+0xc4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <stop_recording+0xc8>)
 8000840:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000842:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <stop_recording+0xc4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	0c1b      	lsrs	r3, r3, #16
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <stop_recording+0xc8>)
 800084c:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800084e:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <stop_recording+0xc4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	0e1b      	lsrs	r3, r3, #24
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <stop_recording+0xc8>)
 8000858:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <stop_recording+0xc4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3b24      	subs	r3, #36	@ 0x24
 8000860:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <stop_recording+0xc4>)
 8000862:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <stop_recording+0xc4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <stop_recording+0xc8>)
 800086c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <stop_recording+0xc4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <stop_recording+0xc8>)
 800087a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <stop_recording+0xc4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	0c1b      	lsrs	r3, r3, #16
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <stop_recording+0xc8>)
 8000888:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <stop_recording+0xc4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	0e1b      	lsrs	r3, r3, #24
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <stop_recording+0xc8>)
 8000896:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// regresar al encabezado para actualizar el formato de archivo
	f_lseek(&wavFile, 0);
 800089a:	2100      	movs	r1, #0
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <stop_recording+0xcc>)
 800089e:	f007 fa90 	bl	8007dc2 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	222c      	movs	r2, #44	@ 0x2c
 80008a6:	490f      	ldr	r1, [pc, #60]	@ (80008e4 <stop_recording+0xc8>)
 80008a8:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <stop_recording+0xcc>)
 80008aa:	f007 f86d 	bl	8007988 <f_write>
	if(sd_result != 0)
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <stop_recording+0xd0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d007      	beq.n	80008c6 <stop_recording+0xaa>
	{
		printf("Error al actualizar el primer sector: %d \n", sd_result);
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <stop_recording+0xd0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <stop_recording+0xd4>)
 80008be:	f007 fda7 	bl	8008410 <iprintf>
		while(1);
 80008c2:	bf00      	nop
 80008c4:	e7fd      	b.n	80008c2 <stop_recording+0xa6>
	}
	f_close(&wavFile);
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <stop_recording+0xcc>)
 80008c8:	f007 fa51 	bl	8007d6e <f_close>
	first_time = 0;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <stop_recording+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	printf("Archivo de audio cerrado. \n");
 80008d2:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <stop_recording+0xdc>)
 80008d4:	f007 fe04 	bl	80084e0 <puts>

}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000524 	.word	0x20000524
 80008e4:	20000000 	.word	0x20000000
 80008e8:	200002f4 	.word	0x200002f4
 80008ec:	200000c0 	.word	0x200000c0
 80008f0:	08009288 	.word	0x08009288
 80008f4:	20000528 	.word	0x20000528
 80008f8:	080092b4 	.word	0x080092b4

080008fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000904:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000908:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d013      	beq.n	800093c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000914:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000918:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800091c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00b      	beq.n	800093c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000924:	e000      	b.n	8000928 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000926:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000928:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f9      	beq.n	8000926 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000932:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000950:	f000 f9f6 	bl	8000d40 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 fc95 	bl	8001282 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f872 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f944 	bl	8000be8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000960:	f000 f924 	bl	8000bac <MX_DMA_Init>
  MX_I2S2_Init();
 8000964:	f000 f8d6 	bl	8000b14 <MX_I2S2_Init>
  MX_SDMMC1_SD_Init();
 8000968:	f000 f8fe 	bl	8000b68 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800096c:	f004 ff2c 	bl	80057c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000970:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000974:	f000 fce2 	bl	800133c <HAL_Delay>
  sd_card_init();
 8000978:	f7ff fe2a 	bl	80005d0 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_flag) {
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <main+0xd0>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d023      	beq.n	80009ce <main+0x82>
		  if (start_stop_recording) {
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <main+0xd4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00b      	beq.n	80009a8 <main+0x5c>
			  HAL_I2S_DMAStop(&hi2s2);
 8000990:	4824      	ldr	r0, [pc, #144]	@ (8000a24 <main+0xd8>)
 8000992:	f001 fde7 	bl	8002564 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8000996:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <main+0xd4>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 800099c:	f7ff ff3e 	bl	800081c <stop_recording>
			  printf("Grabación terminada.\n");
 80009a0:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <main+0xdc>)
 80009a2:	f007 fd9d 	bl	80084e0 <puts>
 80009a6:	e00f      	b.n	80009c8 <main+0x7c>
		  }
		  else {
			  start_stop_recording = 1;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <main+0xd4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 80009ae:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 80009b2:	f7ff fe33 	bl	800061c <start_recording>
			  printf("Grabando...\n");
 80009b6:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <main+0xe0>)
 80009b8:	f007 fd92 	bl	80084e0 <puts>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) data_i2s, sizeof(data_i2s)/2);
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	491b      	ldr	r1, [pc, #108]	@ (8000a30 <main+0xe4>)
 80009c2:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <main+0xd8>)
 80009c4:	f001 fd12 	bl	80023ec <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <main+0xd0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_stop_recording == 1 && half_i2s == 1)
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <main+0xd4>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d10c      	bne.n	80009f2 <main+0xa6>
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <main+0xe8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d107      	bne.n	80009f2 <main+0xa6>
	  {
		  write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 80009e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009e6:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <main+0xe4>)
 80009e8:	f7ff fec8 	bl	800077c <write2wave_file>
		  half_i2s = 0;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <main+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	  }
	  if (start_stop_recording == 1 && full_i2s == 1)
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <main+0xd4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d1bf      	bne.n	800097c <main+0x30>
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <main+0xec>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d1ba      	bne.n	800097c <main+0x30>
	  {
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <main+0xf0>)
 8000a08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff feb5 	bl	800077c <write2wave_file>
		  full_i2s = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <main+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
	  if (button_flag) {
 8000a18:	e7b0      	b.n	800097c <main+0x30>
 8000a1a:	bf00      	nop
 8000a1c:	20001650 	.word	0x20001650
 8000a20:	20001651 	.word	0x20001651
 8000a24:	2000052c 	.word	0x2000052c
 8000a28:	080092d0 	.word	0x080092d0
 8000a2c:	080092e8 	.word	0x080092e8
 8000a30:	20000650 	.word	0x20000650
 8000a34:	20001652 	.word	0x20001652
 8000a38:	20001653 	.word	0x20001653
 8000a3c:	20000e50 	.word	0x20000e50

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	@ 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2234      	movs	r2, #52	@ 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 fe26 	bl	80086a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <SystemClock_Config+0xcc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a28      	ldr	r2, [pc, #160]	@ (8000b0c <SystemClock_Config+0xcc>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a7c:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a84:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aac:	2308      	movs	r3, #8
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ab0:	23a0      	movs	r3, #160	@ 0xa0
 8000ab2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 feed 	bl	80028a4 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad0:	f000 f962 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2105      	movs	r1, #5
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f984 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000afe:	f000 f94b 	bl	8000d98 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	@ 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <MX_I2S2_Init+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b20:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b24:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b3a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b3e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_I2S2_Init+0x4c>)
 8000b4e:	f001 fb67 	bl	8002220 <HAL_I2S_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8000b58:	f000 f91e 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000052c 	.word	0x2000052c
 8000b64:	40003800 	.word	0x40003800

08000b68 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <MX_SDMMC1_SD_Init+0x40>)
 8000b70:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b8a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 8000b92:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <MX_SDMMC1_SD_Init+0x3c>)
 8000b94:	2208      	movs	r2, #8
 8000b96:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200005cc 	.word	0x200005cc
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <MX_DMA_Init+0x38>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <MX_DMA_Init+0x38>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_DMA_Init+0x38>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	200c      	movs	r0, #12
 8000bd0:	f000 fcb3 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bd4:	200c      	movs	r0, #12
 8000bd6:	f000 fccc 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a24      	ldr	r2, [pc, #144]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_GPIO_Init+0xac>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8000c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MX_GPIO_Init+0xb0>)
 8000c5e:	f001 f903 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <MX_GPIO_Init+0xb4>)
 8000c76:	f001 f8f7 	bl	8001e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2028      	movs	r0, #40	@ 0x28
 8000c80:	f000 fc5b 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c84:	2028      	movs	r0, #40	@ 0x28
 8000c86:	f000 fc74 	bl	8001572 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020c00 	.word	0x40020c00

08000ca0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e009      	b.n	8000cc6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fe1e 	bl	80008fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	dbf1      	blt.n	8000cb2 <_write+0x12>
  }
  return len;
 8000cce:	687b      	ldr	r3, [r7, #4]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

	full_i2s = 1;
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <HAL_I2S_RxCpltCallback+0x1c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20001653 	.word	0x20001653

08000cf8 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_i2s = 1;
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20001652 	.word	0x20001652

08000d18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin) {
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d28:	d102      	bne.n	8000d30 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0x24>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20001650 	.word	0x20001650

08000d40 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d52:	f000 fc29 	bl	80015a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d62:	231f      	movs	r3, #31
 8000d64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d66:	2387      	movs	r3, #135	@ 0x87
 8000d68:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d82:	463b      	mov	r3, r7
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fc47 	bl	8001618 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f000 fc24 	bl	80015d8 <HAL_MPU_Enable>

}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <HAL_MspInit+0x44>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <HAL_MspInit+0x44>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ae      	sub	sp, #184	@ 0xb8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2290      	movs	r2, #144	@ 0x90
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fc47 	bl	80086a0 <memset>
  if(hi2s->Instance==SPI2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a4f      	ldr	r2, [pc, #316]	@ (8000f54 <HAL_I2S_MspInit+0x168>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	f040 8096 	bne.w	8000f4a <HAL_I2S_MspInit+0x15e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000e1e:	2360      	movs	r3, #96	@ 0x60
 8000e20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000e32:	2300      	movs	r3, #0
 8000e34:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 f992 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 8000e46:	f7ff ffa7 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4a:	4b43      	ldr	r3, [pc, #268]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a42      	ldr	r2, [pc, #264]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b40      	ldr	r3, [pc, #256]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a3c      	ldr	r2, [pc, #240]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b37      	ldr	r3, [pc, #220]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a36      	ldr	r2, [pc, #216]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <HAL_I2S_MspInit+0x16c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4829      	ldr	r0, [pc, #164]	@ (8000f5c <HAL_I2S_MspInit+0x170>)
 8000eb8:	f000 ffd6 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <HAL_I2S_MspInit+0x174>)
 8000ee4:	f000 ffc0 	bl	8001e68 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000eea:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <HAL_I2S_MspInit+0x17c>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000ef0:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f20:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f30:	f000 fbb2 	bl	8001698 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 8000f3a:	f7ff ff2d 	bl	8000d98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f42:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_I2S_MspInit+0x178>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f4a:	bf00      	nop
 8000f4c:	37b8      	adds	r7, #184	@ 0xb8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40003800 	.word	0x40003800
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	2000056c 	.word	0x2000056c
 8000f68:	40026028 	.word	0x40026028

08000f6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2290      	movs	r2, #144	@ 0x90
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 fb87 	bl	80086a0 <memset>
  if(hsd->Instance==SDMMC1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a34      	ldr	r2, [pc, #208]	@ (8001068 <HAL_SD_MspInit+0xfc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d161      	bne.n	8001060 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000f9c:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8000fa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f8d6 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000fbe:	f7ff feeb 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a29      	ldr	r2, [pc, #164]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000fc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b27      	ldr	r3, [pc, #156]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b24      	ldr	r3, [pc, #144]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a23      	ldr	r2, [pc, #140]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <HAL_SD_MspInit+0x100>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_SD_MspInit+0x100>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800100a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800100e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001024:	230c      	movs	r3, #12
 8001026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <HAL_SD_MspInit+0x104>)
 8001032:	f000 ff19 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001036:	2304      	movs	r3, #4
 8001038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800104e:	230c      	movs	r3, #12
 8001050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001054:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	@ (8001074 <HAL_SD_MspInit+0x108>)
 800105c:	f000 ff04 	bl	8001e68 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001060:	bf00      	nop
 8001062:	37b8      	adds	r7, #184	@ 0xb8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40012c00 	.word	0x40012c00
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <NMI_Handler+0x4>

08001080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <MemManage_Handler+0x4>

08001090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <UsageFault_Handler+0x4>

080010a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f000 f915 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DMA1_Stream1_IRQHandler+0x10>)
 80010de:	f000 fc59 	bl	8001994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000056c 	.word	0x2000056c

080010ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 80010f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010f4:	f001 f87c 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
  }

  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800115e:	605a      	str	r2, [r3, #4]
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f007 fab4 	bl	800873c <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20080000 	.word	0x20080000
 8001200:	00000400 	.word	0x00000400
 8001204:	20001654 	.word	0x20001654
 8001208:	200017e8 	.word	0x200017e8

0800120c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	@ (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001234:	f7ff ffea 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	@ (8001270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	@ (800127c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800125e:	f007 fa73 	bl	8008748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fb73 	bl	800094c <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001274:	08009428 	.word	0x08009428
  ldr r2, =_sbss
 8001278:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800127c:	200017e4 	.word	0x200017e4

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>

08001282 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f94c 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128c:	200f      	movs	r0, #15
 800128e:	f000 f805 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fd87 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f967 	bl	800158e <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f92f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000003c 	.word	0x2000003c
 80012f4:	20000044 	.word	0x20000044
 80012f8:	20000040 	.word	0x20000040

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000044 	.word	0x20000044
 8001320:	20001658 	.word	0x20001658

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20001658 	.word	0x20001658

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000044 	.word	0x20000044

08001384 <__NVIC_SetPriorityGrouping>:
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0000 	.word	0x05fa0000

080013cc <__NVIC_GetPriorityGrouping>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015ac:	f3bf 8f5f 	dmb	sy
}
 80015b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <HAL_MPU_Disable+0x28>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_MPU_Disable+0x28>)
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015bc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_MPU_Disable+0x2c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	e000ed90 	.word	0xe000ed90

080015d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_MPU_Enable+0x38>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_MPU_Enable+0x3c>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_MPU_Enable+0x3c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015f6:	f3bf 8f4f 	dsb	sy
}
 80015fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015fc:	f3bf 8f6f 	isb	sy
}
 8001600:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed90 	.word	0xe000ed90
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	785a      	ldrb	r2, [r3, #1]
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 8001626:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001634:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
 8001640:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7adb      	ldrb	r3, [r3, #11]
 8001646:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a9b      	ldrb	r3, [r3, #10]
 800164e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7b5b      	ldrb	r3, [r3, #13]
 8001656:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7b9b      	ldrb	r3, [r3, #14]
 800165e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7bdb      	ldrb	r3, [r3, #15]
 8001666:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a5b      	ldrb	r3, [r3, #9]
 800166e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7a1b      	ldrb	r3, [r3, #8]
 8001676:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001678:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001682:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001684:	6113      	str	r3, [r2, #16]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed90 	.word	0xe000ed90

08001698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fe3e 	bl	8001324 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e099      	b.n	80017e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d4:	e00f      	b.n	80016f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d6:	f7ff fe25 	bl	8001324 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d908      	bls.n	80016f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e078      	b.n	80017e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e8      	bne.n	80016d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <HAL_DMA_Init+0x158>)
 8001710:	4013      	ands	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	2b04      	cmp	r3, #4
 800174e:	d107      	bne.n	8001760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	4313      	orrs	r3, r2
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f023 0307 	bic.w	r3, r3, #7
 8001776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4313      	orrs	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	2b04      	cmp	r3, #4
 8001788:	d117      	bne.n	80017ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fae7 	bl	8001d70 <DMA_CheckFifoParam>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2240      	movs	r2, #64	@ 0x40
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017b6:	2301      	movs	r3, #1
 80017b8:	e016      	b.n	80017e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fa9e 	bl	8001d04 <DMA_CalcBaseAndBitshift>
 80017c8:	4603      	mov	r3, r0
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	223f      	movs	r2, #63	@ 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	e010803f 	.word	0xe010803f

080017f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_DMA_Start_IT+0x26>
 8001816:	2302      	movs	r3, #2
 8001818:	e048      	b.n	80018ac <HAL_DMA_Start_IT+0xb8>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d137      	bne.n	800189e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2202      	movs	r2, #2
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fa30 	bl	8001ca8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	223f      	movs	r2, #63	@ 0x3f
 800184e:	409a      	lsls	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0216 	orr.w	r2, r2, #22
 8001862:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001872:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e005      	b.n	80018aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
 80018a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018c2:	f7ff fd2f 	bl	8001324 <HAL_GetTick>
 80018c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e052      	b.n	800198c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0216 	bic.w	r2, r2, #22
 80018f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001904:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_DMA_Abort+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001936:	e013      	b.n	8001960 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001938:	f7ff fcf4 	bl	8001324 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b05      	cmp	r3, #5
 8001944:	d90c      	bls.n	8001960 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e015      	b.n	800198c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e4      	bne.n	8001938 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001972:	223f      	movs	r2, #63	@ 0x3f
 8001974:	409a      	lsls	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80019a0:	4b8e      	ldr	r3, [pc, #568]	@ (8001bdc <HAL_DMA_IRQHandler+0x248>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a8e      	ldr	r2, [pc, #568]	@ (8001be0 <HAL_DMA_IRQHandler+0x24c>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0a9b      	lsrs	r3, r3, #10
 80019ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	2208      	movs	r2, #8
 80019c0:	409a      	lsls	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01a      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ec:	2208      	movs	r2, #8
 80019ee:	409a      	lsls	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d012      	beq.n	8001a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a22:	2201      	movs	r2, #1
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2e:	f043 0202 	orr.w	r2, r3, #2
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	2204      	movs	r2, #4
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	f043 0204 	orr.w	r2, r3, #4
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a70:	2210      	movs	r2, #16
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d043      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d03c      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8e:	2210      	movs	r2, #16
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d018      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d024      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
 8001ac2:	e01f      	b.n	8001b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01b      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
 8001ad4:	e016      	b.n	8001b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0208 	bic.w	r2, r2, #8
 8001af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b08:	2220      	movs	r2, #32
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 808f 	beq.w	8001c34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8087 	beq.w	8001c34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d136      	bne.n	8001bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0216 	bic.w	r2, r2, #22
 8001b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <HAL_DMA_IRQHandler+0x1da>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0208 	bic.w	r2, r2, #8
 8001b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	223f      	movs	r2, #63	@ 0x3f
 8001b84:	409a      	lsls	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d07e      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
        }
        return;
 8001baa:	e079      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d031      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
 8001bd8:	e02c      	b.n	8001c34 <HAL_DMA_IRQHandler+0x2a0>
 8001bda:	bf00      	nop
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
 8001bf4:	e01e      	b.n	8001c34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10f      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0210 	bic.w	r2, r2, #16
 8001c12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d032      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d022      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2205      	movs	r2, #5
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d307      	bcc.n	8001c7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f2      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x2cc>
 8001c7a:	e000      	b.n	8001c7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
 8001c9e:	e000      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ca0:	bf00      	nop
    }
  }
}
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b40      	cmp	r3, #64	@ 0x40
 8001cd4:	d108      	bne.n	8001ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ce6:	e007      	b.n	8001cf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3b10      	subs	r3, #16
 8001d14:	4a13      	ldr	r2, [pc, #76]	@ (8001d64 <DMA_CalcBaseAndBitshift+0x60>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <DMA_CalcBaseAndBitshift+0x64>)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d908      	bls.n	8001d44 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <DMA_CalcBaseAndBitshift+0x68>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	1d1a      	adds	r2, r3, #4
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d42:	e006      	b.n	8001d52 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <DMA_CalcBaseAndBitshift+0x68>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	aaaaaaab 	.word	0xaaaaaaab
 8001d68:	08009348 	.word	0x08009348
 8001d6c:	fffffc00 	.word	0xfffffc00

08001d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d11f      	bne.n	8001dca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d856      	bhi.n	8001e3e <DMA_CheckFifoParam+0xce>
 8001d90:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <DMA_CheckFifoParam+0x28>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001dbb 	.word	0x08001dbb
 8001da0:	08001da9 	.word	0x08001da9
 8001da4:	08001e3f 	.word	0x08001e3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d046      	beq.n	8001e42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db8:	e043      	b.n	8001e42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dc2:	d140      	bne.n	8001e46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc8:	e03d      	b.n	8001e46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dd2:	d121      	bne.n	8001e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d837      	bhi.n	8001e4a <DMA_CheckFifoParam+0xda>
 8001dda:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <DMA_CheckFifoParam+0x70>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001df7 	.word	0x08001df7
 8001de8:	08001df1 	.word	0x08001df1
 8001dec:	08001e09 	.word	0x08001e09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
      break;
 8001df4:	e030      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d025      	beq.n	8001e4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e06:	e022      	b.n	8001e4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e10:	d11f      	bne.n	8001e52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e16:	e01c      	b.n	8001e52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d903      	bls.n	8001e26 <DMA_CheckFifoParam+0xb6>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d003      	beq.n	8001e2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e24:	e018      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2a:	e015      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00e      	beq.n	8001e56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e3c:	e00b      	b.n	8001e56 <DMA_CheckFifoParam+0xe6>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e00a      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      break;
 8001e42:	bf00      	nop
 8001e44:	e008      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
 8001e48:	e006      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e004      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e002      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e52:	bf00      	nop
 8001e54:	e000      	b.n	8001e58 <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
    }
  } 
  
  return status; 
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e175      	b.n	8002174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8164 	bne.w	800216e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x56>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80be 	beq.w	800216e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_GPIO_Init+0x324>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_GPIO_Init+0x324>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffe:	4b63      	ldr	r3, [pc, #396]	@ (800218c <HAL_GPIO_Init+0x324>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800200a:	4a61      	ldr	r2, [pc, #388]	@ (8002190 <HAL_GPIO_Init+0x328>)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a58      	ldr	r2, [pc, #352]	@ (8002194 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d037      	beq.n	80020a6 <HAL_GPIO_Init+0x23e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a57      	ldr	r2, [pc, #348]	@ (8002198 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_GPIO_Init+0x23a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a56      	ldr	r2, [pc, #344]	@ (800219c <HAL_GPIO_Init+0x334>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x236>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a55      	ldr	r2, [pc, #340]	@ (80021a0 <HAL_GPIO_Init+0x338>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x232>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a54      	ldr	r2, [pc, #336]	@ (80021a4 <HAL_GPIO_Init+0x33c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x22e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a53      	ldr	r2, [pc, #332]	@ (80021a8 <HAL_GPIO_Init+0x340>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x22a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_GPIO_Init+0x344>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x226>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a51      	ldr	r2, [pc, #324]	@ (80021b0 <HAL_GPIO_Init+0x348>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x222>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a50      	ldr	r2, [pc, #320]	@ (80021b4 <HAL_GPIO_Init+0x34c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x21e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	@ (80021b8 <HAL_GPIO_Init+0x350>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x21a>
 800207e:	2309      	movs	r3, #9
 8002080:	e012      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002082:	230a      	movs	r3, #10
 8002084:	e010      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002086:	2308      	movs	r3, #8
 8002088:	e00e      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800208a:	2307      	movs	r3, #7
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800208e:	2306      	movs	r3, #6
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	@ (8002190 <HAL_GPIO_Init+0x328>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a29      	ldr	r2, [pc, #164]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_GPIO_Init+0x354>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1f      	ldr	r2, [pc, #124]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <HAL_GPIO_Init+0x354>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae86 	bls.w	8001e88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40021c00 	.word	0x40021c00
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022400 	.word	0x40022400
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fd82 	bl	8000d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0d2      	b.n	80023d8 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fdd0 	bl	8000dec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69d9      	ldr	r1, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b60      	ldr	r3, [pc, #384]	@ (80023e0 <HAL_I2S_Init+0x1c0>)
 8002260:	400b      	ands	r3, r1
 8002262:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2202      	movs	r2, #2
 800226a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d067      	beq.n	8002344 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800227c:	2310      	movs	r3, #16
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e001      	b.n	8002286 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b20      	cmp	r3, #32
 800228c:	d802      	bhi.n	8002294 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 800229c:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <HAL_I2S_Init+0x1c4>)
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e003      	b.n	80022aa <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fa24 	bl	80026f0 <I2S_GetClockFreq>
 80022a8:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b2:	d125      	bne.n	8002300 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	3305      	adds	r3, #5
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e01f      	b.n	800231e <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	461a      	mov	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	3305      	adds	r3, #5
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e00e      	b.n	800231e <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fbb2 f2f3 	udiv	r2, r2, r3
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	3305      	adds	r3, #5
 800231c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <HAL_I2S_Init+0x1c8>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	08db      	lsrs	r3, r3, #3
 8002328:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002344:	2302      	movs	r3, #2
 8002346:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d902      	bls.n	8002358 <HAL_I2S_Init+0x138>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2bff      	cmp	r3, #255	@ 0xff
 8002356:	d907      	bls.n	8002368 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	f043 0210 	orr.w	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e037      	b.n	80023d8 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	ea42 0103 	orr.w	r1, r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	430a      	orrs	r2, r1
 800237a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_I2S_Init+0x1c0>)
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6851      	ldr	r1, [r2, #4]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6892      	ldr	r2, [r2, #8]
 800238e:	4311      	orrs	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68d2      	ldr	r2, [r2, #12]
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6992      	ldr	r2, [r2, #24]
 800239a:	430a      	orrs	r2, r1
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023a6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b30      	cmp	r3, #48	@ 0x30
 80023ae:	d003      	beq.n	80023b8 <HAL_I2S_Init+0x198>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80023b6:	d107      	bne.n	80023c8 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	fffff040 	.word	0xfffff040
 80023e4:	00bb8000 	.word	0x00bb8000
 80023e8:	cccccccd 	.word	0xcccccccd

080023ec <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_I2S_Receive_DMA+0x1a>
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0a1      	b.n	800254e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_I2S_Receive_DMA+0x2e>
 8002416:	2302      	movs	r3, #2
 8002418:	e099      	b.n	800254e <HAL_I2S_Receive_DMA+0x162>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	e089      	b.n	800254e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2204      	movs	r2, #4
 800243e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d002      	beq.n	8002466 <HAL_I2S_Receive_DMA+0x7a>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10a      	bne.n	800247c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800247a:	e005      	b.n	8002488 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	4a32      	ldr	r2, [pc, #200]	@ (8002558 <HAL_I2S_Receive_DMA+0x16c>)
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002494:	4a31      	ldr	r2, [pc, #196]	@ (800255c <HAL_I2S_Receive_DMA+0x170>)
 8002496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	4a30      	ldr	r2, [pc, #192]	@ (8002560 <HAL_I2S_Receive_DMA+0x174>)
 800249e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024ae:	d10a      	bne.n	80024c6 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	4619      	mov	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80024de:	f7ff f989 	bl	80017f4 <HAL_DMA_Start_IT>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00f      	beq.n	8002508 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	f043 0208 	orr.w	r2, r3, #8
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e022      	b.n	800254e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002524:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	080027cb 	.word	0x080027cb
 800255c:	08002789 	.word	0x08002789
 8002560:	080027e7 	.word	0x080027e7

08002564 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002578:	d003      	beq.n	8002582 <HAL_I2S_DMAStop+0x1e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d155      	bne.n	800262e <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00f      	beq.n	80025aa <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f990 	bl	80018b4 <HAL_DMA_Abort>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259e:	f043 0208 	orr.w	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80025aa:	2364      	movs	r3, #100	@ 0x64
 80025ac:	2201      	movs	r2, #1
 80025ae:	2102      	movs	r1, #2
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f93e 	bl	8002832 <I2S_WaitFlagStateUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80025d4:	2364      	movs	r3, #100	@ 0x64
 80025d6:	2200      	movs	r2, #0
 80025d8:	2180      	movs	r1, #128	@ 0x80
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f929 	bl	8002832 <I2S_WaitFlagStateUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0202 	bic.w	r2, r2, #2
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	e04d      	b.n	80026ca <HAL_I2S_DMAStop+0x166>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002636:	d004      	beq.n	8002642 <HAL_I2S_DMAStop+0xde>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002640:	d143      	bne.n	80026ca <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00f      	beq.n	800266a <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f930 	bl	80018b4 <HAL_DMA_Abort>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265e:	f043 0208 	orr.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002678:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026a8:	d10c      	bne.n	80026c4 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
 80026c2:	e002      	b.n	80026ca <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return errorcode;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d02d      	beq.n	800275c <I2S_GetClockFreq+0x6c>
 8002700:	2b02      	cmp	r3, #2
 8002702:	d12e      	bne.n	8002762 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002704:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <I2S_GetClockFreq+0x88>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <I2S_GetClockFreq+0x88>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <I2S_GetClockFreq+0x8c>)
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e007      	b.n	8002732 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <I2S_GetClockFreq+0x88>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800272a:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <I2S_GetClockFreq+0x90>)
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002732:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <I2S_GetClockFreq+0x88>)
 8002734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002738:	0f1b      	lsrs	r3, r3, #28
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <I2S_GetClockFreq+0x88>)
 8002742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	fb03 f202 	mul.w	r2, r3, r2
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	613b      	str	r3, [r7, #16]

      break;
 800275a:	e005      	b.n	8002768 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <I2S_GetClockFreq+0x94>)
 800275e:	613b      	str	r3, [r7, #16]
      break;
 8002760:	e002      	b.n	8002768 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
      break;
 8002766:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8002768:	693b      	ldr	r3, [r7, #16]
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	00f42400 	.word	0x00f42400
 8002780:	017d7840 	.word	0x017d7840
 8002784:	00bb8000 	.word	0x00bb8000

08002788 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10e      	bne.n	80027bc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7fe fa8b 	bl	8000cd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7fe fa8d 	bl	8000cf8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0203 	bic.w	r2, r2, #3
 8002802:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281c:	f043 0208 	orr.w	r2, r3, #8
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff ff59 	bl	80026dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002842:	f7fe fd6f 	bl	8001324 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002848:	e018      	b.n	800287c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d014      	beq.n	800287c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002852:	f7fe fd67 	bl	8001324 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d902      	bls.n	8002868 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e00f      	b.n	800289c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	429a      	cmp	r2, r3
 8002898:	d1d7      	bne.n	800284a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e29b      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8087 	beq.w	80029d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c8:	4b96      	ldr	r3, [pc, #600]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00c      	beq.n	80028ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d4:	4b93      	ldr	r3, [pc, #588]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d112      	bne.n	8002906 <HAL_RCC_OscConfig+0x62>
 80028e0:	4b90      	ldr	r3, [pc, #576]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ec:	d10b      	bne.n	8002906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d06c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x130>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d168      	bne.n	80029d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e275      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x7a>
 8002910:	4b84      	ldr	r3, [pc, #528]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a83      	ldr	r2, [pc, #524]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x9c>
 8002926:	4b7f      	ldr	r3, [pc, #508]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b7c      	ldr	r3, [pc, #496]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7b      	ldr	r2, [pc, #492]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002938:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0xc0>
 800294a:	4b76      	ldr	r3, [pc, #472]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b73      	ldr	r3, [pc, #460]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a72      	ldr	r2, [pc, #456]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 8002964:	4b6f      	ldr	r3, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6e      	ldr	r2, [pc, #440]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6b      	ldr	r2, [pc, #428]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fcce 	bl	8001324 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fcca 	bl	8001324 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	@ 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e229      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b61      	ldr	r3, [pc, #388]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xe8>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fcba 	bl	8001324 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fcb6 	bl	8001324 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e215      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	4b57      	ldr	r3, [pc, #348]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x110>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d069      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e2:	4b50      	ldr	r3, [pc, #320]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x190>
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1e9      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	493d      	ldr	r1, [pc, #244]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	e040      	b.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d023      	beq.n	8002a84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3c:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a38      	ldr	r2, [pc, #224]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fc6c 	bl	8001324 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a50:	f7fe fc68 	bl	8001324 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1c7      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4929      	ldr	r1, [pc, #164]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
 8002a82:	e018      	b.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fc48 	bl	8001324 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe fc44 	bl	8001324 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1a3      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d038      	beq.n	8002b34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d019      	beq.n	8002afe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aca:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ace:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fc25 	bl	8001324 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe fc21 	bl	8001324 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e180      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x23a>
 8002afc:	e01a      	b.n	8002b34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b02:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fc0b 	bl	8001324 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fe fc07 	bl	8001324 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d903      	bls.n	8002b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e166      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
 8002b24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b92      	ldr	r3, [pc, #584]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a4 	beq.w	8002c8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b8c      	ldr	r3, [pc, #560]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b89      	ldr	r3, [pc, #548]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	4a88      	ldr	r2, [pc, #544]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5a:	4b86      	ldr	r3, [pc, #536]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6a:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <HAL_RCC_OscConfig+0x4d4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b76:	4b80      	ldr	r3, [pc, #512]	@ (8002d78 <HAL_RCC_OscConfig+0x4d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7f      	ldr	r2, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x4d4>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fbcf 	bl	8001324 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe fbcb 	bl	8001324 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	@ 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e12a      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9c:	4b76      	ldr	r3, [pc, #472]	@ (8002d78 <HAL_RCC_OscConfig+0x4d4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x31a>
 8002bb0:	4b70      	ldr	r3, [pc, #448]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	4a6f      	ldr	r2, [pc, #444]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bbc:	e02d      	b.n	8002c1a <HAL_RCC_OscConfig+0x376>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x33c>
 8002bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	4a6a      	ldr	r2, [pc, #424]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd2:	4b68      	ldr	r3, [pc, #416]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a67      	ldr	r2, [pc, #412]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	e01c      	b.n	8002c1a <HAL_RCC_OscConfig+0x376>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x35e>
 8002be8:	4b62      	ldr	r3, [pc, #392]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	4a61      	ldr	r2, [pc, #388]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf4:	4b5f      	ldr	r3, [pc, #380]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	4a5e      	ldr	r2, [pc, #376]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c00:	e00b      	b.n	8002c1a <HAL_RCC_OscConfig+0x376>
 8002c02:	4b5c      	ldr	r3, [pc, #368]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	4a5b      	ldr	r2, [pc, #364]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0e:	4b59      	ldr	r3, [pc, #356]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	4a58      	ldr	r2, [pc, #352]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d015      	beq.n	8002c4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fb7f 	bl	8001324 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fb7b 	bl	8001324 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0d8      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	4b4c      	ldr	r3, [pc, #304]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ee      	beq.n	8002c2a <HAL_RCC_OscConfig+0x386>
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fb69 	bl	8001324 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe fb65 	bl	8001324 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0c2      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ee      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a3c      	ldr	r2, [pc, #240]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80ae 	beq.w	8002df0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c94:	4b37      	ldr	r3, [pc, #220]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d06d      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d14b      	bne.n	8002d40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b32      	ldr	r3, [pc, #200]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a31      	ldr	r2, [pc, #196]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fb36 	bl	8001324 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fb32 	bl	8001324 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e091      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	071b      	lsls	r3, r3, #28
 8002d06:	491b      	ldr	r1, [pc, #108]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fb04 	bl	8001324 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fb00 	bl	8001324 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e05f      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x47c>
 8002d3e:	e057      	b.n	8002df0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0b      	ldr	r2, [pc, #44]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe faea 	bl	8001324 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe fae6 	bl	8001324 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e045      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4b0>
 8002d72:	e03d      	b.n	8002df0 <HAL_RCC_OscConfig+0x54c>
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <HAL_RCC_OscConfig+0x558>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d030      	beq.n	8002dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d129      	bne.n	8002dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d122      	bne.n	8002dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002db2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d119      	bne.n	8002dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d10f      	bne.n	8002dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0d0      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b67      	ldr	r3, [pc, #412]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4965      	ldr	r1, [pc, #404]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a58      	ldr	r2, [pc, #352]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d040      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d115      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b41      	ldr	r3, [pc, #260]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e073      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06b      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4936      	ldr	r1, [pc, #216]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fa16 	bl	8001324 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fa12 	bl	8001324 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e053      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b27      	ldr	r3, [pc, #156]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d210      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	4922      	ldr	r1, [pc, #136]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f821 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x1cc>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1d4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe f972 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08009338 	.word	0x08009338
 8002fd0:	2000003c 	.word	0x2000003c
 8002fd4:	20000040 	.word	0x20000040

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b090      	sub	sp, #64	@ 0x40
 8002fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff0:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	f200 80a1 	bhi.w	8003144 <HAL_RCC_GetSysClockFreq+0x16c>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x3a>
 800300a:	e09b      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b53      	ldr	r3, [pc, #332]	@ (800315c <HAL_RCC_GetSysClockFreq+0x184>)
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003010:	e09b      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003012:	4b53      	ldr	r3, [pc, #332]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003014:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003016:	e098      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003018:	4b4f      	ldr	r3, [pc, #316]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003022:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d028      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	627a      	str	r2, [r7, #36]	@ 0x24
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003040:	2100      	movs	r1, #0
 8003042:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003044:	fb03 f201 	mul.w	r2, r3, r1
 8003048:	2300      	movs	r3, #0
 800304a:	fb00 f303 	mul.w	r3, r0, r3
 800304e:	4413      	add	r3, r2
 8003050:	4a43      	ldr	r2, [pc, #268]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003052:	fba0 1202 	umull	r1, r2, r0, r2
 8003056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003058:	460a      	mov	r2, r1
 800305a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800305c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305e:	4413      	add	r3, r2
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003064:	2200      	movs	r2, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	61fa      	str	r2, [r7, #28]
 800306a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003072:	f7fd f935 	bl	80002e0 <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4613      	mov	r3, r2
 800307c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800307e:	e053      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	617a      	str	r2, [r7, #20]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003092:	f04f 0b00 	mov.w	fp, #0
 8003096:	4652      	mov	r2, sl
 8003098:	465b      	mov	r3, fp
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ebb2 080a 	subs.w	r8, r2, sl
 80030b2:	eb63 090b 	sbc.w	r9, r3, fp
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030ca:	ebb2 0408 	subs.w	r4, r2, r8
 80030ce:	eb63 0509 	sbc.w	r5, r3, r9
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	00eb      	lsls	r3, r5, #3
 80030dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e0:	00e2      	lsls	r2, r4, #3
 80030e2:	4614      	mov	r4, r2
 80030e4:	461d      	mov	r5, r3
 80030e6:	eb14 030a 	adds.w	r3, r4, sl
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	eb45 030b 	adc.w	r3, r5, fp
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fe:	4629      	mov	r1, r5
 8003100:	028b      	lsls	r3, r1, #10
 8003102:	4621      	mov	r1, r4
 8003104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003108:	4621      	mov	r1, r4
 800310a:	028a      	lsls	r2, r1, #10
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	2200      	movs	r2, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	60fa      	str	r2, [r7, #12]
 8003118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311c:	f7fd f8e0 	bl	80002e0 <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4613      	mov	r3, r2
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	3301      	adds	r3, #1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003138:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003142:	e002      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetSysClockFreq+0x184>)
 8003146:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800314c:	4618      	mov	r0, r3
 800314e:	3740      	adds	r7, #64	@ 0x40
 8003150:	46bd      	mov	sp, r7
 8003152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	017d7840 	.word	0x017d7840

08003164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800318c:	4b69      	ldr	r3, [pc, #420]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a68      	ldr	r2, [pc, #416]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003196:	6093      	str	r3, [r2, #8]
 8003198:	4b66      	ldr	r3, [pc, #408]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a0:	4964      	ldr	r1, [pc, #400]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031be:	4b5d      	ldr	r3, [pc, #372]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	4959      	ldr	r1, [pc, #356]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031dc:	d101      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003200:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	494a      	ldr	r1, [pc, #296]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003218:	d101      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 808b 	beq.w	800335e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b3a      	ldr	r3, [pc, #232]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	4a39      	ldr	r2, [pc, #228]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003252:	6413      	str	r3, [r2, #64]	@ 0x40
 8003254:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003260:	4b35      	ldr	r3, [pc, #212]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a34      	ldr	r2, [pc, #208]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe f85a 	bl	8001324 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe f856 	bl	8001324 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e38f      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003286:	4b2c      	ldr	r3, [pc, #176]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003292:	4b28      	ldr	r3, [pc, #160]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d035      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d02e      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b0:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	4a1d      	ldr	r2, [pc, #116]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032d2:	4a18      	ldr	r2, [pc, #96]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032d8:	4b16      	ldr	r3, [pc, #88]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d114      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe f81e 	bl	8001324 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ea:	e00a      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe f81a 	bl	8001324 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e351      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003302:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0ee      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800331a:	d111      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003328:	4b04      	ldr	r3, [pc, #16]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800332a:	400b      	ands	r3, r1
 800332c:	4901      	ldr	r1, [pc, #4]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
 8003332:	e00b      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003334:	40023800 	.word	0x40023800
 8003338:	40007000 	.word	0x40007000
 800333c:	0ffffcff 	.word	0x0ffffcff
 8003340:	4bac      	ldr	r3, [pc, #688]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4aab      	ldr	r2, [pc, #684]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003346:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800334a:	6093      	str	r3, [r2, #8]
 800334c:	4ba9      	ldr	r3, [pc, #676]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003358:	49a6      	ldr	r1, [pc, #664]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	4313      	orrs	r3, r2
 800335c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800336a:	4ba2      	ldr	r3, [pc, #648]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003370:	4aa0      	ldr	r2, [pc, #640]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003376:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800337a:	4b9e      	ldr	r3, [pc, #632]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	499b      	ldr	r1, [pc, #620]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003398:	4b96      	ldr	r3, [pc, #600]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a6:	4993      	ldr	r1, [pc, #588]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ba:	4b8e      	ldr	r3, [pc, #568]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033c8:	498a      	ldr	r1, [pc, #552]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033dc:	4b85      	ldr	r3, [pc, #532]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ea:	4982      	ldr	r1, [pc, #520]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033fe:	4b7d      	ldr	r3, [pc, #500]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	4979      	ldr	r1, [pc, #484]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003420:	4b74      	ldr	r3, [pc, #464]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	4971      	ldr	r1, [pc, #452]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003442:	4b6c      	ldr	r3, [pc, #432]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	f023 020c 	bic.w	r2, r3, #12
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	4968      	ldr	r1, [pc, #416]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003464:	4b63      	ldr	r3, [pc, #396]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	4960      	ldr	r1, [pc, #384]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003486:	4b5b      	ldr	r3, [pc, #364]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	4957      	ldr	r1, [pc, #348]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034a8:	4b52      	ldr	r3, [pc, #328]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	494f      	ldr	r1, [pc, #316]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034ca:	4b4a      	ldr	r3, [pc, #296]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	4946      	ldr	r1, [pc, #280]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034ec:	4b41      	ldr	r3, [pc, #260]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fa:	493e      	ldr	r1, [pc, #248]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800350e:	4b39      	ldr	r3, [pc, #228]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351c:	4935      	ldr	r1, [pc, #212]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003530:	4b30      	ldr	r3, [pc, #192]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800353e:	492d      	ldr	r1, [pc, #180]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d011      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003552:	4b28      	ldr	r3, [pc, #160]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003558:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003560:	4924      	ldr	r1, [pc, #144]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800356c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003570:	d101      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003592:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003598:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a0:	4914      	ldr	r1, [pc, #80]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035c4:	490b      	ldr	r1, [pc, #44]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00f      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035e8:	4902      	ldr	r1, [pc, #8]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003604:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800360a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003614:	4986      	ldr	r1, [pc, #536]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003628:	4b81      	ldr	r3, [pc, #516]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800362e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003638:	497d      	ldr	r1, [pc, #500]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d006      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80d6 	beq.w	8003800 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003654:	4b76      	ldr	r3, [pc, #472]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a75      	ldr	r2, [pc, #468]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800365e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fd fe60 	bl	8001324 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003668:	f7fd fe5c 	bl	8001324 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e195      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800367a:	4b6d      	ldr	r3, [pc, #436]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d021      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11d      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800369a:	4b65      	ldr	r3, [pc, #404]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a8:	4b61      	ldr	r3, [pc, #388]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ae:	0e1b      	lsrs	r3, r3, #24
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4958      	ldr	r1, [pc, #352]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02e      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003700:	d129      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003702:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003710:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003716:	0f1b      	lsrs	r3, r3, #28
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	019a      	lsls	r2, r3, #6
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	493e      	ldr	r1, [pc, #248]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800373e:	4b3c      	ldr	r3, [pc, #240]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003744:	f023 021f 	bic.w	r2, r3, #31
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	3b01      	subs	r3, #1
 800374e:	4938      	ldr	r1, [pc, #224]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01d      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003762:	4b33      	ldr	r3, [pc, #204]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003768:	0e1b      	lsrs	r3, r3, #24
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003770:	4b2f      	ldr	r3, [pc, #188]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003776:	0f1b      	lsrs	r3, r3, #28
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	019a      	lsls	r2, r3, #6
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	431a      	orrs	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	4926      	ldr	r1, [pc, #152]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	019a      	lsls	r2, r3, #6
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	071b      	lsls	r3, r3, #28
 80037c6:	491a      	ldr	r1, [pc, #104]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ce:	4b18      	ldr	r3, [pc, #96]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037da:	f7fd fda3 	bl	8001324 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037e2:	f7fd fd9f 	bl	8001324 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b64      	cmp	r3, #100	@ 0x64
 80037ee:	d901      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0d8      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	f040 80ce 	bne.w	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fd fd86 	bl	8001324 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800381a:	e00b      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800381c:	f7fd fd82 	bl	8001324 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	@ 0x64
 8003828:	d904      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0bb      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003834:	4b5e      	ldr	r3, [pc, #376]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800383c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003840:	d0ec      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02e      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d12a      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800386a:	4b51      	ldr	r3, [pc, #324]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003878:	4b4d      	ldr	r3, [pc, #308]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	0f1b      	lsrs	r3, r3, #28
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	019a      	lsls	r2, r3, #6
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	4944      	ldr	r1, [pc, #272]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038a6:	4b42      	ldr	r3, [pc, #264]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	493d      	ldr	r1, [pc, #244]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d022      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038d4:	d11d      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038d6:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038dc:	0e1b      	lsrs	r3, r3, #24
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e4:	4b32      	ldr	r3, [pc, #200]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ea:	0f1b      	lsrs	r3, r3, #28
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	019a      	lsls	r2, r3, #6
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	4929      	ldr	r1, [pc, #164]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d028      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800391e:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003924:	0e1b      	lsrs	r3, r3, #24
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800392c:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	019a      	lsls	r2, r3, #6
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	071b      	lsls	r3, r3, #28
 8003952:	4917      	ldr	r1, [pc, #92]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003960:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	4911      	ldr	r1, [pc, #68]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003970:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fd fcd2 	bl	8001324 <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003984:	f7fd fcce 	bl	8001324 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	@ 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e007      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a2:	d1ef      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800

080039b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e022      	b.n	8003a0c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd fac7 	bl	8000f6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2203      	movs	r2, #3
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f814 	bl	8003a14 <HAL_SD_InitCard>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00a      	b.n	8003a0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b08e      	sub	sp, #56	@ 0x38
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003a30:	2376      	movs	r3, #118	@ 0x76
 8003a32:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681d      	ldr	r5, [r3, #0]
 8003a38:	466c      	mov	r4, sp
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f001 f945 	bl	8004cdc <SDMMC_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e059      	b.n	8003b18 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a72:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f979 	bl	8004d70 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003a8e:	2002      	movs	r0, #2
 8003a90:	f7fd fc54 	bl	800133c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 ff01 	bl	800489c <SD_PowerON>
 8003a9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e02e      	b.n	8003b18 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fe20 	bl	8004700 <SD_InitCard>
 8003ac0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e01b      	b.n	8003b18 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f9d3 	bl	8004e94 <SDMMC_CmdBlockLength>
 8003aee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00f      	beq.n	8003b16 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <HAL_SD_InitCard+0x10c>)
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3728      	adds	r7, #40	@ 0x28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b20:	004005ff 	.word	0x004005ff

08003b24 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b092      	sub	sp, #72	@ 0x48
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003b32:	f7fd fbf7 	bl	8001324 <HAL_GetTick>
 8003b36:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e1bd      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 81b0 	bne.w	8003ec4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d907      	bls.n	8003b88 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e1a4      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2200      	movs	r2, #0
 8003b96:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d002      	beq.n	8003ba6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	025b      	lsls	r3, r3, #9
 8003ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	025b      	lsls	r3, r3, #9
 8003bb0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003bb2:	2390      	movs	r3, #144	@ 0x90
 8003bb4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f107 0214 	add.w	r2, r7, #20
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f935 	bl	8004e3c <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d90a      	bls.n	8003bee <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 f999 	bl	8004f1c <SDMMC_CmdReadMultiBlock>
 8003bea:	6478      	str	r0, [r7, #68]	@ 0x44
 8003bec:	e009      	b.n	8003c02 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 f96c 	bl	8004ed8 <SDMMC_CmdReadSingleBlock>
 8003c00:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d012      	beq.n	8003c2e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a7a      	ldr	r2, [pc, #488]	@ (8003df8 <HAL_SD_ReadBlocks+0x2d4>)
 8003c0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e151      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003c32:	e061      	b.n	8003cf8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d03c      	beq.n	8003cbc <HAL_SD_ReadBlocks+0x198>
 8003c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d039      	beq.n	8003cbc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c4c:	e033      	b.n	8003cb6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f86e 	bl	8004d34 <SDMMC_ReadFIFO>
 8003c58:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c64:	3301      	adds	r3, #1
 8003c66:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c76:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c80:	3b01      	subs	r3, #1
 8003c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c90:	3301      	adds	r3, #1
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c96:	3b01      	subs	r3, #1
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	0e1b      	lsrs	r3, r3, #24
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cac:	3b01      	subs	r3, #1
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb8:	2b07      	cmp	r3, #7
 8003cba:	d9c8      	bls.n	8003c4e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003cbc:	f7fd fb32 	bl	8001324 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d902      	bls.n	8003cd2 <HAL_SD_ReadBlocks+0x1ae>
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d112      	bne.n	8003cf8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a48      	ldr	r2, [pc, #288]	@ (8003df8 <HAL_SD_ReadBlocks+0x2d4>)
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0ec      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfe:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d096      	beq.n	8003c34 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d022      	beq.n	8003d5a <HAL_SD_ReadBlocks+0x236>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d91f      	bls.n	8003d5a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d01b      	beq.n	8003d5a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f95e 	bl	8004fe8 <SDMMC_CmdStopTransfer>
 8003d2c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2f      	ldr	r2, [pc, #188]	@ (8003df8 <HAL_SD_ReadBlocks+0x2d4>)
 8003d3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0bb      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	@ (8003df8 <HAL_SD_ReadBlocks+0x2d4>)
 8003d6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	f043 0208 	orr.w	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0a1      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a15      	ldr	r2, [pc, #84]	@ (8003df8 <HAL_SD_ReadBlocks+0x2d4>)
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	f043 0202 	orr.w	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e087      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d064      	beq.n	8003e9a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a08      	ldr	r2, [pc, #32]	@ (8003df8 <HAL_SD_ReadBlocks+0x2d4>)
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06d      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
 8003df6:	bf00      	nop
 8003df8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 ff97 	bl	8004d34 <SDMMC_ReadFIFO>
 8003e06:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	3301      	adds	r3, #1
 8003e14:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e24:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e28:	3301      	adds	r3, #1
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	3301      	adds	r3, #1
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e44:	3b01      	subs	r3, #1
 8003e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	0e1b      	lsrs	r3, r3, #24
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e50:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	3301      	adds	r3, #1
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e5e:	f7fd fa61 	bl	8001324 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d902      	bls.n	8003e74 <HAL_SD_ReadBlocks+0x350>
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d112      	bne.n	8003e9a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_SD_ReadBlocks+0x3b8>)
 8003e7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e01b      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SD_ReadBlocks+0x38a>
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1a6      	bne.n	8003dfc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e006      	b.n	8003ed2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3748      	adds	r7, #72	@ 0x48
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	004005ff 	.word	0x004005ff

08003ee0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b092      	sub	sp, #72	@ 0x48
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003eee:	f7fd fa19 	bl	8001324 <HAL_GetTick>
 8003ef2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e165      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	f040 8158 	bne.w	80041d0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d907      	bls.n	8003f44 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e14c      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2203      	movs	r2, #3
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d002      	beq.n	8003f62 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5e:	025b      	lsls	r3, r3, #9
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	025b      	lsls	r3, r3, #9
 8003f6c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003f6e:	2390      	movs	r3, #144	@ 0x90
 8003f70:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003f72:	2300      	movs	r3, #0
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f107 0218 	add.w	r2, r7, #24
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 ff57 	bl	8004e3c <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d90a      	bls.n	8003faa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 ffff 	bl	8004fa4 <SDMMC_CmdWriteMultiBlock>
 8003fa6:	6478      	str	r0, [r7, #68]	@ 0x44
 8003fa8:	e009      	b.n	8003fbe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2210      	movs	r2, #16
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ffd2 	bl	8004f60 <SDMMC_CmdWriteSingleBlock>
 8003fbc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a87      	ldr	r2, [pc, #540]	@ (80041e8 <HAL_SD_WriteBlocks+0x308>)
 8003fca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0f9      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003fee:	e065      	b.n	80040bc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d040      	beq.n	8004080 <HAL_SD_WriteBlocks+0x1a0>
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03d      	beq.n	8004080 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004004:	2300      	movs	r3, #0
 8004006:	643b      	str	r3, [r7, #64]	@ 0x40
 8004008:	e037      	b.n	800407a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	3301      	adds	r3, #1
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	3b01      	subs	r3, #1
 800401a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402a:	3301      	adds	r3, #1
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800402e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004030:	3b01      	subs	r3, #1
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	041a      	lsls	r2, r3, #16
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004042:	3301      	adds	r3, #1
 8004044:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004048:	3b01      	subs	r3, #1
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	061a      	lsls	r2, r3, #24
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405a:	3301      	adds	r3, #1
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800405e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004060:	3b01      	subs	r3, #1
 8004062:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f107 0214 	add.w	r2, r7, #20
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fe6d 	bl	8004d4e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004076:	3301      	adds	r3, #1
 8004078:	643b      	str	r3, [r7, #64]	@ 0x40
 800407a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407c:	2b07      	cmp	r3, #7
 800407e:	d9c4      	bls.n	800400a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004080:	f7fd f950 	bl	8001324 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800408c:	429a      	cmp	r2, r3
 800408e:	d902      	bls.n	8004096 <HAL_SD_WriteBlocks+0x1b6>
 8004090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004092:	2b00      	cmp	r3, #0
 8004094:	d112      	bne.n	80040bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a53      	ldr	r2, [pc, #332]	@ (80041e8 <HAL_SD_WriteBlocks+0x308>)
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e090      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c2:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d092      	beq.n	8003ff0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d022      	beq.n	800411e <HAL_SD_WriteBlocks+0x23e>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d91f      	bls.n	800411e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d01b      	beq.n	800411e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff7c 	bl	8004fe8 <SDMMC_CmdStopTransfer>
 80040f0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80040f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d012      	beq.n	800411e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3a      	ldr	r2, [pc, #232]	@ (80041e8 <HAL_SD_WriteBlocks+0x308>)
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e05f      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <HAL_SD_WriteBlocks+0x308>)
 8004132:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	f043 0208 	orr.w	r2, r3, #8
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e045      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a20      	ldr	r2, [pc, #128]	@ (80041e8 <HAL_SD_WriteBlocks+0x308>)
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416c:	f043 0202 	orr.w	r2, r3, #2
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02b      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_SD_WriteBlocks+0x308>)
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	f043 0210 	orr.w	r2, r3, #16
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e011      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e006      	b.n	80041de <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3748      	adds	r7, #72	@ 0x48
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	004005ff 	.word	0x004005ff

080041ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041fa:	0f9b      	lsrs	r3, r3, #30
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	b2da      	uxtb	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	b2da      	uxtb	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	b2da      	uxtb	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	b2da      	uxtb	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004242:	b2da      	uxtb	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	b29a      	uxth	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	b2da      	uxtb	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800426a:	0bdb      	lsrs	r3, r3, #15
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427c:	0b9b      	lsrs	r3, r3, #14
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	b2da      	uxtb	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800428e:	0b5b      	lsrs	r3, r3, #13
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042a0:	0b1b      	lsrs	r3, r3, #12
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d163      	bne.n	8004384 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c0:	009a      	lsls	r2, r3, #2
 80042c2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80042cc:	0f92      	lsrs	r2, r2, #30
 80042ce:	431a      	orrs	r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d8:	0edb      	lsrs	r3, r3, #27
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ea:	0e1b      	lsrs	r3, r3, #24
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fc:	0d5b      	lsrs	r3, r3, #21
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	b2da      	uxtb	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800430e:	0c9b      	lsrs	r3, r3, #18
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	b2da      	uxtb	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004320:	0bdb      	lsrs	r3, r3, #15
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	b2da      	uxtb	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	7e1b      	ldrb	r3, [r3, #24]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	3302      	adds	r3, #2
 8004344:	2201      	movs	r2, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800434e:	fb03 f202 	mul.w	r2, r3, r2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	7a1b      	ldrb	r3, [r3, #8]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004370:	0a52      	lsrs	r2, r2, #9
 8004372:	fb03 f202 	mul.w	r2, r3, r2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004380:	661a      	str	r2, [r3, #96]	@ 0x60
 8004382:	e031      	b.n	80043e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004388:	2b01      	cmp	r3, #1
 800438a:	d11d      	bne.n	80043c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	3301      	adds	r3, #1
 80043a8:	029a      	lsls	r2, r3, #10
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043bc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80043c6:	e00f      	b.n	80043e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a58      	ldr	r2, [pc, #352]	@ (8004530 <HAL_SD_GetCardCSD+0x344>)
 80043ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e09d      	b.n	8004524 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ec:	0b9b      	lsrs	r3, r3, #14
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fe:	09db      	lsrs	r3, r3, #7
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	b2da      	uxtb	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004416:	b2da      	uxtb	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	0fdb      	lsrs	r3, r3, #31
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	0f5b      	lsrs	r3, r3, #29
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	b2da      	uxtb	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	b2da      	uxtb	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	0d9b      	lsrs	r3, r3, #22
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	b2da      	uxtb	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	0d5b      	lsrs	r3, r3, #21
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	b2da      	uxtb	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447e:	0c1b      	lsrs	r3, r3, #16
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	0bdb      	lsrs	r3, r3, #15
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	b2da      	uxtb	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	0b9b      	lsrs	r3, r3, #14
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	0b5b      	lsrs	r3, r3, #13
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	0b1b      	lsrs	r3, r3, #12
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	0a9b      	lsrs	r3, r3, #10
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	004005ff 	.word	0x004005ff

08004534 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b08e      	sub	sp, #56	@ 0x38
 8004590:	af04      	add	r7, sp, #16
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2203      	movs	r2, #3
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d02e      	beq.n	800460a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b2:	d106      	bne.n	80045c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
 80045c0:	e029      	b.n	8004616 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c8:	d10a      	bne.n	80045e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa1c 	bl	8004a08 <SD_WideBus_Enable>
 80045d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80045de:	e01a      	b.n	8004616 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa59 	bl	8004a9e <SD_WideBus_Disable>
 80045ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80045fa:	e00c      	b.n	8004616 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
 8004608:	e005      	b.n	8004616 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004634:	e01f      	b.n	8004676 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681d      	ldr	r5, [r3, #0]
 800465c:	466c      	mov	r4, sp
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800466a:	f107 0308 	add.w	r3, r7, #8
 800466e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004670:	4628      	mov	r0, r5
 8004672:	f000 fb33 	bl	8004cdc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fc08 	bl	8004e94 <SDMMC_CmdBlockLength>
 8004684:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0a      	ldr	r2, [pc, #40]	@ (80046bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004692:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80046ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	@ 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ba:	bf00      	nop
 80046bc:	004005ff 	.word	0x004005ff

080046c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f970 	bl	80049b8 <SD_SendStatus>
 80046d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0a5b      	lsrs	r3, r3, #9
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80046f6:	693b      	ldr	r3, [r7, #16]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b094      	sub	sp, #80	@ 0x50
 8004704:	af04      	add	r7, sp, #16
 8004706:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004708:	2301      	movs	r3, #1
 800470a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fb3b 	bl	8004d8c <SDMMC_GetPowerState>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800471c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004720:	e0b8      	b.n	8004894 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	2b03      	cmp	r3, #3
 8004728:	d02f      	beq.n	800478a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fd65 	bl	80051fe <SDMMC_CmdSendCID>
 8004734:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <SD_InitCard+0x40>
    {
      return errorstate;
 800473c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473e:	e0a9      	b.n	8004894 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb65 	bl	8004e16 <SDMMC_GetResponse>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2104      	movs	r1, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fb5c 	bl	8004e16 <SDMMC_GetResponse>
 800475e:	4602      	mov	r2, r0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2108      	movs	r1, #8
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fb53 	bl	8004e16 <SDMMC_GetResponse>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	210c      	movs	r1, #12
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fb4a 	bl	8004e16 <SDMMC_GetResponse>
 8004782:	4602      	mov	r2, r0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478e:	2b03      	cmp	r3, #3
 8004790:	d00d      	beq.n	80047ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f107 020e 	add.w	r2, r7, #14
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fd6b 	bl	8005278 <SDMMC_CmdSetRelAdd>
 80047a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <SD_InitCard+0xae>
    {
      return errorstate;
 80047aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ac:	e072      	b.n	8004894 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d036      	beq.n	8004824 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	461a      	mov	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 fd35 	bl	800523a <SDMMC_CmdSendCSD>
 80047d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80047d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047da:	e05b      	b.n	8004894 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fb17 	bl	8004e16 <SDMMC_GetResponse>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2104      	movs	r1, #4
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fb0e 	bl	8004e16 <SDMMC_GetResponse>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2108      	movs	r1, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fb05 	bl	8004e16 <SDMMC_GetResponse>
 800480c:	4602      	mov	r2, r0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	210c      	movs	r1, #12
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fafc 	bl	8004e16 <SDMMC_GetResponse>
 800481e:	4602      	mov	r2, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2104      	movs	r1, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f000 faf3 	bl	8004e16 <SDMMC_GetResponse>
 8004830:	4603      	mov	r3, r0
 8004832:	0d1a      	lsrs	r2, r3, #20
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fcd4 	bl	80041ec <HAL_SD_GetCardCSD>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800484a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800484e:	e021      	b.n	8004894 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	2200      	movs	r2, #0
 800485c:	461c      	mov	r4, r3
 800485e:	4615      	mov	r5, r2
 8004860:	4622      	mov	r2, r4
 8004862:	462b      	mov	r3, r5
 8004864:	4608      	mov	r0, r1
 8004866:	f000 fbe1 	bl	800502c <SDMMC_CmdSelDesel>
 800486a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800486c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <SD_InitCard+0x176>
  {
    return errorstate;
 8004872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004874:	e00e      	b.n	8004894 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681d      	ldr	r5, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	466c      	mov	r4, sp
 800487e:	f103 0210 	add.w	r2, r3, #16
 8004882:	ca07      	ldmia	r2, {r0, r1, r2}
 8004884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004888:	3304      	adds	r3, #4
 800488a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800488c:	4628      	mov	r0, r5
 800488e:	f000 fa25 	bl	8004cdc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3740      	adds	r7, #64	@ 0x40
 8004898:	46bd      	mov	sp, r7
 800489a:	bdb0      	pop	{r4, r5, r7, pc}

0800489c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fbdc 	bl	8005072 <SDMMC_CmdGoIdleState>
 80048ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	e072      	b.n	80049ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fbef 	bl	80050ae <SDMMC_CmdOperCond>
 80048d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fbc5 	bl	8005072 <SDMMC_CmdGoIdleState>
 80048e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	e05b      	b.n	80049ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d137      	bne.n	8004972 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fbef 	bl	80050ec <SDMMC_CmdAppCommand>
 800490e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02d      	beq.n	8004972 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004916:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800491a:	e047      	b.n	80049ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fbe2 	bl	80050ec <SDMMC_CmdAppCommand>
 8004928:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SD_PowerON+0x98>
    {
      return errorstate;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	e03b      	b.n	80049ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	491e      	ldr	r1, [pc, #120]	@ (80049b4 <SD_PowerON+0x118>)
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fbf8 	bl	8005130 <SDMMC_CmdAppOperCommand>
 8004940:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004948:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800494c:	e02e      	b.n	80049ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fa5e 	bl	8004e16 <SDMMC_GetResponse>
 800495a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	0fdb      	lsrs	r3, r3, #31
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <SD_PowerON+0xcc>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <SD_PowerON+0xce>
 8004968:	2300      	movs	r3, #0
 800496a:	613b      	str	r3, [r7, #16]

    count++;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3301      	adds	r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004978:	4293      	cmp	r3, r2
 800497a:	d802      	bhi.n	8004982 <SD_PowerON+0xe6>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0cc      	beq.n	800491c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004988:	4293      	cmp	r3, r2
 800498a:	d902      	bls.n	8004992 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800498c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004990:	e00c      	b.n	80049ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80049a2:	e002      	b.n	80049aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	c1100000 	.word	0xc1100000

080049b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80049c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049cc:	e018      	b.n	8004a00 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 fc6d 	bl	80052ba <SDMMC_CmdSendStatus>
 80049e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	e009      	b.n	8004a00 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa0f 	bl	8004e16 <SDMMC_GetResponse>
 80049f8:	4602      	mov	r2, r0
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f9f9 	bl	8004e16 <SDMMC_GetResponse>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a2e:	d102      	bne.n	8004a36 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a34:	e02f      	b.n	8004a96 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a36:	f107 030c 	add.w	r3, r7, #12
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f879 	bl	8004b34 <SD_FindSCR>
 8004a42:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	e023      	b.n	8004a96 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01c      	beq.n	8004a92 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f000 fb41 	bl	80050ec <SDMMC_CmdAppCommand>
 8004a6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	e00f      	b.n	8004a96 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fb7b 	bl	8005178 <SDMMC_CmdBusWidth>
 8004a82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	e003      	b.n	8004a96 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e001      	b.n	8004a96 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f9ae 	bl	8004e16 <SDMMC_GetResponse>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ac4:	d102      	bne.n	8004acc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ac6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004aca:	e02f      	b.n	8004b2c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004acc:	f107 030c 	add.w	r3, r7, #12
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f82e 	bl	8004b34 <SD_FindSCR>
 8004ad8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	e023      	b.n	8004b2c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01c      	beq.n	8004b28 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 faf6 	bl	80050ec <SDMMC_CmdAppCommand>
 8004b00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	e00f      	b.n	8004b2c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fb30 	bl	8005178 <SDMMC_CmdBusWidth>
 8004b18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	e003      	b.n	8004b2c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e001      	b.n	8004b2c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b28:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b08f      	sub	sp, #60	@ 0x3c
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004b3e:	f7fc fbf1 	bl	8001324 <HAL_GetTick>
 8004b42:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2108      	movs	r1, #8
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f99a 	bl	8004e94 <SDMMC_CmdBlockLength>
 8004b60:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	e0b2      	b.n	8004cd2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f000 fab7 	bl	80050ec <SDMMC_CmdAppCommand>
 8004b7e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	e0a3      	b.n	8004cd2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004b90:	2308      	movs	r3, #8
 8004b92:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004b94:	2330      	movs	r3, #48	@ 0x30
 8004b96:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f107 0210 	add.w	r2, r7, #16
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f944 	bl	8004e3c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 faff 	bl	80051bc <SDMMC_CmdSendSCR>
 8004bbe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d02a      	beq.n	8004c1c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	e083      	b.n	8004cd2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00f      	beq.n	8004bf8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	f107 0208 	add.w	r2, r7, #8
 8004be4:	18d4      	adds	r4, r2, r3
 8004be6:	4608      	mov	r0, r1
 8004be8:	f000 f8a4 	bl	8004d34 <SDMMC_ReadFIFO>
 8004bec:	4603      	mov	r3, r0
 8004bee:	6023      	str	r3, [r4, #0]
      index++;
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf6:	e006      	b.n	8004c06 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c06:	f7fc fb8d 	bl	8001324 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d102      	bne.n	8004c1c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c16:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c1a:	e05a      	b.n	8004cd2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c22:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0cf      	beq.n	8004bca <SD_FindSCR+0x96>
 8004c2a:	e000      	b.n	8004c2e <SD_FindSCR+0xfa>
      break;
 8004c2c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2208      	movs	r2, #8
 8004c42:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004c44:	2308      	movs	r3, #8
 8004c46:	e044      	b.n	8004cd2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e037      	b.n	8004cd2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2220      	movs	r2, #32
 8004c76:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	e02a      	b.n	8004cd2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004c84:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	061a      	lsls	r2, r3, #24
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0e1b      	lsrs	r3, r3, #24
 8004ca2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca6:	601a      	str	r2, [r3, #0]
    scr++;
 8004ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004caa:	3304      	adds	r3, #4
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	061a      	lsls	r2, r3, #24
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004cba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004cc4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cce:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	373c      	adds	r7, #60	@ 0x3c
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd90      	pop	{r4, r7, pc}
	...

08004cdc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004cdc:	b084      	sub	sp, #16
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	f107 001c 	add.w	r0, r7, #28
 8004cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004cf2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004cf6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004cfa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004cfe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004d02:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004d06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <SDMMC_Init+0x54>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	b004      	add	sp, #16
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	ffff8100 	.word	0xffff8100

08004d34 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0303 	and.w	r3, r3, #3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dc6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004dcc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004dd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <SDMMC_SendCommand+0x50>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	fffff000 	.word	0xfffff000

08004dfc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	b2db      	uxtb	r3, r3
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3314      	adds	r3, #20
 8004e24:	461a      	mov	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
}  
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e62:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004e68:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004e6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0

}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ea6:	2340      	movs	r3, #64	@ 0x40
 8004ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004eb4:	f107 0308 	add.w	r3, r7, #8
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff74 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	2110      	movs	r1, #16
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa1a 	bl	8005300 <SDMMC_GetCmdResp1>
 8004ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ece:	69fb      	ldr	r3, [r7, #28]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ee6:	2311      	movs	r3, #17
 8004ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004eea:	2340      	movs	r3, #64	@ 0x40
 8004eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff ff52 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f08:	2111      	movs	r1, #17
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f9f8 	bl	8005300 <SDMMC_GetCmdResp1>
 8004f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f12:	69fb      	ldr	r3, [r7, #28]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004f2a:	2312      	movs	r3, #18
 8004f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f2e:	2340      	movs	r3, #64	@ 0x40
 8004f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff30 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4c:	2112      	movs	r1, #18
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9d6 	bl	8005300 <SDMMC_GetCmdResp1>
 8004f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f56:	69fb      	ldr	r3, [r7, #28]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004f6e:	2318      	movs	r3, #24
 8004f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f72:	2340      	movs	r3, #64	@ 0x40
 8004f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f80:	f107 0308 	add.w	r3, r7, #8
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ff0e 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f90:	2118      	movs	r1, #24
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9b4 	bl	8005300 <SDMMC_GetCmdResp1>
 8004f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004fb2:	2319      	movs	r3, #25
 8004fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fb6:	2340      	movs	r3, #64	@ 0x40
 8004fb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fc4:	f107 0308 	add.w	r3, r7, #8
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff feec 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd4:	2119      	movs	r1, #25
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f992 	bl	8005300 <SDMMC_GetCmdResp1>
 8004fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fde:	69fb      	ldr	r3, [r7, #28]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004ff4:	230c      	movs	r3, #12
 8004ff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ff8:	2340      	movs	r3, #64	@ 0x40
 8004ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005006:	f107 0308 	add.w	r3, r7, #8
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fecb 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005012:	4a05      	ldr	r2, [pc, #20]	@ (8005028 <SDMMC_CmdStopTransfer+0x40>)
 8005014:	210c      	movs	r1, #12
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f972 	bl	8005300 <SDMMC_GetCmdResp1>
 800501c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501e:	69fb      	ldr	r3, [r7, #28]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	05f5e100 	.word	0x05f5e100

0800502c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800503c:	2307      	movs	r3, #7
 800503e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005040:	2340      	movs	r3, #64	@ 0x40
 8005042:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800504c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800504e:	f107 0310 	add.w	r3, r7, #16
 8005052:	4619      	mov	r1, r3
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff fea7 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	2107      	movs	r1, #7
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f94d 	bl	8005300 <SDMMC_GetCmdResp1>
 8005066:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800506a:	4618      	mov	r0, r3
 800506c:	3728      	adds	r7, #40	@ 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b088      	sub	sp, #32
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005082:	2300      	movs	r3, #0
 8005084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800508a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800508e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fe86 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fb67 	bl	8005770 <SDMMC_GetCmdError>
 80050a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050a4:	69fb      	ldr	r3, [r7, #28]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b088      	sub	sp, #32
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80050b6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80050ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80050bc:	2308      	movs	r3, #8
 80050be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050c0:	2340      	movs	r3, #64	@ 0x40
 80050c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fe67 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fafa 	bl	80056d4 <SDMMC_GetCmdResp7>
 80050e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050e2:	69fb      	ldr	r3, [r7, #28]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80050fa:	2337      	movs	r3, #55	@ 0x37
 80050fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050fe:	2340      	movs	r3, #64	@ 0x40
 8005100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800510a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fe48 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511c:	2137      	movs	r1, #55	@ 0x37
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8ee 	bl	8005300 <SDMMC_GetCmdResp1>
 8005124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <SDMMC_CmdAppOperCommand+0x44>)
 800513e:	4313      	orrs	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005142:	2329      	movs	r3, #41	@ 0x29
 8005144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005146:	2340      	movs	r3, #64	@ 0x40
 8005148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800514e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005154:	f107 0308 	add.w	r3, r7, #8
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fe24 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa03 	bl	800556c <SDMMC_GetCmdResp3>
 8005166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005168:	69fb      	ldr	r3, [r7, #28]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	80100000 	.word	0x80100000

08005178 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005186:	2306      	movs	r3, #6
 8005188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800518a:	2340      	movs	r3, #64	@ 0x40
 800518c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005196:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fe02 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80051a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a8:	2106      	movs	r1, #6
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8a8 	bl	8005300 <SDMMC_GetCmdResp1>
 80051b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051b2:	69fb      	ldr	r3, [r7, #28]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80051c8:	2333      	movs	r3, #51	@ 0x33
 80051ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051cc:	2340      	movs	r3, #64	@ 0x40
 80051ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fde1 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	2133      	movs	r1, #51	@ 0x33
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f887 	bl	8005300 <SDMMC_GetCmdResp1>
 80051f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051f4:	69fb      	ldr	r3, [r7, #28]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800520a:	2302      	movs	r3, #2
 800520c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800520e:	23c0      	movs	r3, #192	@ 0xc0
 8005210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800521a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fdc0 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f957 	bl	80054dc <SDMMC_GetCmdResp2>
 800522e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005230:	69fb      	ldr	r3, [r7, #28]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005248:	2309      	movs	r3, #9
 800524a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800524c:	23c0      	movs	r3, #192	@ 0xc0
 800524e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fda1 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f938 	bl	80054dc <SDMMC_GetCmdResp2>
 800526c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005286:	2303      	movs	r3, #3
 8005288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800528a:	2340      	movs	r3, #64	@ 0x40
 800528c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005296:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fd82 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	2103      	movs	r1, #3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f99d 	bl	80055e8 <SDMMC_GetCmdResp6>
 80052ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b0:	69fb      	ldr	r3, [r7, #28]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80052c8:	230d      	movs	r3, #13
 80052ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052cc:	2340      	movs	r3, #64	@ 0x40
 80052ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fd61 	bl	8004da8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80052e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ea:	210d      	movs	r1, #13
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f807 	bl	8005300 <SDMMC_GetCmdResp1>
 80052f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f4:	69fb      	ldr	r3, [r7, #28]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	460b      	mov	r3, r1
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800530e:	4b70      	ldr	r3, [pc, #448]	@ (80054d0 <SDMMC_GetCmdResp1+0x1d0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a70      	ldr	r2, [pc, #448]	@ (80054d4 <SDMMC_GetCmdResp1+0x1d4>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	0a5a      	lsrs	r2, r3, #9
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	1e5a      	subs	r2, r3, #1
 8005326:	61fa      	str	r2, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800532c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005330:	e0c9      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005336:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ef      	beq.n	8005322 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ea      	bne.n	8005322 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2204      	movs	r2, #4
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800535e:	2304      	movs	r3, #4
 8005360:	e0b1      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005374:	2301      	movs	r3, #1
 8005376:	e0a6      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	22c5      	movs	r2, #197	@ 0xc5
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff fd3c 	bl	8004dfc <SDMMC_GetCommandResponse>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	7afb      	ldrb	r3, [r7, #11]
 800538a:	4293      	cmp	r3, r2
 800538c:	d001      	beq.n	8005392 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800538e:	2301      	movs	r3, #1
 8005390:	e099      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005392:	2100      	movs	r1, #0
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff fd3e 	bl	8004e16 <SDMMC_GetResponse>
 800539a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4b4e      	ldr	r3, [pc, #312]	@ (80054d8 <SDMMC_GetCmdResp1+0x1d8>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e08d      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	da02      	bge.n	80053b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80053b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053b4:	e087      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80053c0:	2340      	movs	r3, #64	@ 0x40
 80053c2:	e080      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	e079      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80053dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053e0:	e071      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80053ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053f0:	e069      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80053fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005400:	e061      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800540c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005410:	e059      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800541c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005420:	e051      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800542c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005430:	e049      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800543c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005440:	e041      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800544c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005450:	e039      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800545c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005460:	e031      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800546c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005470:	e029      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800547c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005480:	e021      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800548c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005490:	e019      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800549c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80054a0:	e011      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80054ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054b0:	e009      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80054bc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80054c0:	e001      	b.n	80054c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2000003c 	.word	0x2000003c
 80054d4:	10624dd3 	.word	0x10624dd3
 80054d8:	fdffe008 	.word	0xfdffe008

080054dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005564 <SDMMC_GetCmdResp2+0x88>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005568 <SDMMC_GetCmdResp2+0x8c>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	0a5b      	lsrs	r3, r3, #9
 80054f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	60fa      	str	r2, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d102      	bne.n	800550a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005504:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005508:	e026      	b.n	8005558 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ef      	beq.n	80054fa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1ea      	bne.n	80054fa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2204      	movs	r2, #4
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005536:	2304      	movs	r3, #4
 8005538:	e00e      	b.n	8005558 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800554c:	2301      	movs	r3, #1
 800554e:	e003      	b.n	8005558 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	22c5      	movs	r2, #197	@ 0xc5
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	2000003c 	.word	0x2000003c
 8005568:	10624dd3 	.word	0x10624dd3

0800556c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005574:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <SDMMC_GetCmdResp3+0x74>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1a      	ldr	r2, [pc, #104]	@ (80055e4 <SDMMC_GetCmdResp3+0x78>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0a5b      	lsrs	r3, r3, #9
 8005580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005584:	fb02 f303 	mul.w	r3, r2, r3
 8005588:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	60fa      	str	r2, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005594:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005598:	e01b      	b.n	80055d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ef      	beq.n	800558a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1ea      	bne.n	800558a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2204      	movs	r2, #4
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055c6:	2304      	movs	r3, #4
 80055c8:	e003      	b.n	80055d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	22c5      	movs	r2, #197	@ 0xc5
 80055ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	2000003c 	.word	0x2000003c
 80055e4:	10624dd3 	.word	0x10624dd3

080055e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	460b      	mov	r3, r1
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055f6:	4b35      	ldr	r3, [pc, #212]	@ (80056cc <SDMMC_GetCmdResp6+0xe4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a35      	ldr	r2, [pc, #212]	@ (80056d0 <SDMMC_GetCmdResp6+0xe8>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	0a5b      	lsrs	r3, r3, #9
 8005602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	1e5a      	subs	r2, r3, #1
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005616:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800561a:	e052      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005620:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ef      	beq.n	800560c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ea      	bne.n	800560c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2204      	movs	r2, #4
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005648:	2304      	movs	r3, #4
 800564a:	e03a      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800565e:	2301      	movs	r3, #1
 8005660:	e02f      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fbca 	bl	8004dfc <SDMMC_GetCommandResponse>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	7afb      	ldrb	r3, [r7, #11]
 800566e:	4293      	cmp	r3, r2
 8005670:	d001      	beq.n	8005676 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005672:	2301      	movs	r3, #1
 8005674:	e025      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	22c5      	movs	r2, #197	@ 0xc5
 800567a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800567c:	2100      	movs	r1, #0
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff fbc9 	bl	8004e16 <SDMMC_GetResponse>
 8005684:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	0c1b      	lsrs	r3, r3, #16
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800569a:	2300      	movs	r3, #0
 800569c:	e011      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056ac:	e009      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056bc:	e001      	b.n	80056c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2000003c 	.word	0x2000003c
 80056d0:	10624dd3 	.word	0x10624dd3

080056d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056dc:	4b22      	ldr	r3, [pc, #136]	@ (8005768 <SDMMC_GetCmdResp7+0x94>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a22      	ldr	r2, [pc, #136]	@ (800576c <SDMMC_GetCmdResp7+0x98>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	0a5b      	lsrs	r3, r3, #9
 80056e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
 80056f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1e5a      	subs	r2, r3, #1
 80056f6:	60fa      	str	r2, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005700:	e02c      	b.n	800575c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005706:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ef      	beq.n	80056f2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ea      	bne.n	80056f2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2204      	movs	r2, #4
 800572c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800572e:	2304      	movs	r3, #4
 8005730:	e014      	b.n	800575c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005744:	2301      	movs	r3, #1
 8005746:	e009      	b.n	800575c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2240      	movs	r2, #64	@ 0x40
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800575a:	2300      	movs	r3, #0
  
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	2000003c 	.word	0x2000003c
 800576c:	10624dd3 	.word	0x10624dd3

08005770 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005778:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <SDMMC_GetCmdError+0x50>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a11      	ldr	r2, [pc, #68]	@ (80057c4 <SDMMC_GetCmdError+0x54>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1e5a      	subs	r2, r3, #1
 8005792:	60fa      	str	r2, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005798:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800579c:	e009      	b.n	80057b2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f1      	beq.n	800578e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	22c5      	movs	r2, #197	@ 0xc5
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	2000003c 	.word	0x2000003c
 80057c4:	10624dd3 	.word	0x10624dd3

080057c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80057cc:	4904      	ldr	r1, [pc, #16]	@ (80057e0 <MX_FATFS_Init+0x18>)
 80057ce:	4805      	ldr	r0, [pc, #20]	@ (80057e4 <MX_FATFS_Init+0x1c>)
 80057d0:	f002 fd4c 	bl	800826c <FATFS_LinkDriver>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	4b03      	ldr	r3, [pc, #12]	@ (80057e8 <MX_FATFS_Init+0x20>)
 80057da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80057dc:	bf00      	nop
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20001660 	.word	0x20001660
 80057e4:	08009350 	.word	0x08009350
 80057e8:	2000165c 	.word	0x2000165c

080057ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80057f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005806:	f000 f879 	bl	80058fc <BSP_SD_IsDetected>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d001      	beq.n	8005814 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005810:	2302      	movs	r3, #2
 8005812:	e012      	b.n	800583a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005814:	480b      	ldr	r0, [pc, #44]	@ (8005844 <BSP_SD_Init+0x48>)
 8005816:	f7fe f8cd 	bl	80039b4 <HAL_SD_Init>
 800581a:	4603      	mov	r3, r0
 800581c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005824:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005828:	4806      	ldr	r0, [pc, #24]	@ (8005844 <BSP_SD_Init+0x48>)
 800582a:	f7fe feaf 	bl	800458c <HAL_SD_ConfigWideBusOperation>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005838:	79fb      	ldrb	r3, [r7, #7]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200005cc 	.word	0x200005cc

08005848 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	4806      	ldr	r0, [pc, #24]	@ (8005880 <BSP_SD_ReadBlocks+0x38>)
 8005866:	f7fe f95d 	bl	8003b24 <HAL_SD_ReadBlocks>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200005cc 	.word	0x200005cc

08005884 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	4806      	ldr	r0, [pc, #24]	@ (80058bc <BSP_SD_WriteBlocks+0x38>)
 80058a2:	f7fe fb1d 	bl	8003ee0 <HAL_SD_WriteBlocks>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200005cc 	.word	0x200005cc

080058c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80058c4:	4805      	ldr	r0, [pc, #20]	@ (80058dc <BSP_SD_GetCardState+0x1c>)
 80058c6:	f7fe fefb 	bl	80046c0 <HAL_SD_GetCardState>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200005cc 	.word	0x200005cc

080058e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4803      	ldr	r0, [pc, #12]	@ (80058f8 <BSP_SD_GetCardInfo+0x18>)
 80058ec:	f7fe fe22 	bl	8004534 <HAL_SD_GetCardInfo>
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200005cc 	.word	0x200005cc

080058fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005902:	2301      	movs	r3, #1
 8005904:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005906:	f000 f80b 	bl	8005920 <BSP_PlatformIsDetected>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005910:	2300      	movs	r3, #0
 8005912:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	b2db      	uxtb	r3, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005926:	2301      	movs	r3, #1
 8005928:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800592a:	2101      	movs	r1, #1
 800592c:	4806      	ldr	r0, [pc, #24]	@ (8005948 <BSP_PlatformIsDetected+0x28>)
 800592e:	f7fc fc47 	bl	80021c0 <HAL_GPIO_ReadPin>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005938:	2300      	movs	r3, #0
 800593a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800593c:	79fb      	ldrb	r3, [r7, #7]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40020c00 	.word	0x40020c00

0800594c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005956:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <SD_CheckStatus+0x38>)
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800595c:	f7ff ffb0 	bl	80058c0 <BSP_SD_GetCardState>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005966:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <SD_CheckStatus+0x38>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <SD_CheckStatus+0x38>)
 8005974:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005976:	4b03      	ldr	r3, [pc, #12]	@ (8005984 <SD_CheckStatus+0x38>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b2db      	uxtb	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000045 	.word	0x20000045

08005988 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005992:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <SD_initialize+0x38>)
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005998:	f7ff ff30 	bl	80057fc <BSP_SD_Init>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff ffd1 	bl	800594c <SD_CheckStatus>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <SD_initialize+0x38>)
 80059b0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80059b2:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <SD_initialize+0x38>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b2db      	uxtb	r3, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000045 	.word	0x20000045

080059c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ffbb 	bl	800594c <SD_CheckStatus>
 80059d6:	4603      	mov	r3, r0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80059f4:	f04f 33ff 	mov.w	r3, #4294967295
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	68b8      	ldr	r0, [r7, #8]
 80059fe:	f7ff ff23 	bl	8005848 <BSP_SD_ReadBlocks>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005a08:	bf00      	nop
 8005a0a:	f7ff ff59 	bl	80058c0 <BSP_SD_GetCardState>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1fa      	bne.n	8005a0a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	68b8      	ldr	r0, [r7, #8]
 8005a40:	f7ff ff20 	bl	8005884 <BSP_SD_WriteBlocks>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005a4a:	bf00      	nop
 8005a4c:	f7ff ff38 	bl	80058c0 <BSP_SD_GetCardState>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1fa      	bne.n	8005a4c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08c      	sub	sp, #48	@ 0x30
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	603a      	str	r2, [r7, #0]
 8005a6e:	71fb      	strb	r3, [r7, #7]
 8005a70:	460b      	mov	r3, r1
 8005a72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a7a:	4b25      	ldr	r3, [pc, #148]	@ (8005b10 <SD_ioctl+0xac>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <SD_ioctl+0x28>
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e03c      	b.n	8005b06 <SD_ioctl+0xa2>

  switch (cmd)
 8005a8c:	79bb      	ldrb	r3, [r7, #6]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d834      	bhi.n	8005afc <SD_ioctl+0x98>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <SD_ioctl+0x34>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005ab1 	.word	0x08005ab1
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ae3 	.word	0x08005ae3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005aae:	e028      	b.n	8005b02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff13 	bl	80058e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005ac6:	e01c      	b.n	8005b02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff ff07 	bl	80058e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005ae0:	e00f      	b.n	8005b02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ae2:	f107 030c 	add.w	r3, r7, #12
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fefa 	bl	80058e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	0a5a      	lsrs	r2, r3, #9
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005afa:	e002      	b.n	8005b02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005afc:	2304      	movs	r3, #4
 8005afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3730      	adds	r7, #48	@ 0x30
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000045 	.word	0x20000045

08005b14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	4a08      	ldr	r2, [pc, #32]	@ (8005b44 <disk_status+0x30>)
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	79fa      	ldrb	r2, [r7, #7]
 8005b2c:	4905      	ldr	r1, [pc, #20]	@ (8005b44 <disk_status+0x30>)
 8005b2e:	440a      	add	r2, r1
 8005b30:	7a12      	ldrb	r2, [r2, #8]
 8005b32:	4610      	mov	r0, r2
 8005b34:	4798      	blx	r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	2000168c 	.word	0x2000168c

08005b48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	4a0d      	ldr	r2, [pc, #52]	@ (8005b90 <disk_initialize+0x48>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d111      	bne.n	8005b84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	4a0b      	ldr	r2, [pc, #44]	@ (8005b90 <disk_initialize+0x48>)
 8005b64:	2101      	movs	r1, #1
 8005b66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	4a09      	ldr	r2, [pc, #36]	@ (8005b90 <disk_initialize+0x48>)
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	79fa      	ldrb	r2, [r7, #7]
 8005b76:	4906      	ldr	r1, [pc, #24]	@ (8005b90 <disk_initialize+0x48>)
 8005b78:	440a      	add	r2, r1
 8005b7a:	7a12      	ldrb	r2, [r2, #8]
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000168c 	.word	0x2000168c

08005b94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd0 <disk_read+0x3c>)
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	689c      	ldr	r4, [r3, #8]
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <disk_read+0x3c>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	7a18      	ldrb	r0, [r3, #8]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	47a0      	blx	r4
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd90      	pop	{r4, r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	2000168c 	.word	0x2000168c

08005bd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <disk_write+0x3c>)
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	68dc      	ldr	r4, [r3, #12]
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	4a07      	ldr	r2, [pc, #28]	@ (8005c10 <disk_write+0x3c>)
 8005bf4:	4413      	add	r3, r2
 8005bf6:	7a18      	ldrb	r0, [r3, #8]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	47a0      	blx	r4
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd90      	pop	{r4, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	2000168c 	.word	0x2000168c

08005c14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	603a      	str	r2, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
 8005c20:	460b      	mov	r3, r1
 8005c22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <disk_ioctl+0x38>)
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	79fa      	ldrb	r2, [r7, #7]
 8005c32:	4906      	ldr	r1, [pc, #24]	@ (8005c4c <disk_ioctl+0x38>)
 8005c34:	440a      	add	r2, r1
 8005c36:	7a10      	ldrb	r0, [r2, #8]
 8005c38:	79b9      	ldrb	r1, [r7, #6]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	4798      	blx	r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2000168c 	.word	0x2000168c

08005c50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	b21a      	sxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	b21b      	sxth	r3, r3
 8005c70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c72:	89fb      	ldrh	r3, [r7, #14]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	3202      	adds	r2, #2
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	3201      	adds	r2, #1
 8005ca6:	7812      	ldrb	r2, [r2, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	887b      	ldrh	r3, [r7, #2]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	1c53      	adds	r3, r2, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1c59      	adds	r1, r3, #1
 8005d78:	6179      	str	r1, [r7, #20]
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f1      	bne.n	8005d6e <mem_cpy+0x1a>
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	617a      	str	r2, [r7, #20]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f3      	bne.n	8005da6 <mem_set+0x10>
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005dcc:	b480      	push	{r7}
 8005dce:	b089      	sub	sp, #36	@ 0x24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	61fa      	str	r2, [r7, #28]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	61ba      	str	r2, [r7, #24]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	1acb      	subs	r3, r1, r3
 8005df8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <mem_cmp+0x40>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0eb      	beq.n	8005de4 <mem_cmp+0x18>

	return r;
 8005e0c:	697b      	ldr	r3, [r7, #20]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	@ 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e24:	e002      	b.n	8005e2c <chk_chr+0x12>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <chk_chr+0x26>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d1f2      	bne.n	8005e26 <chk_chr+0xc>
	return *str;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	781b      	ldrb	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e029      	b.n	8005eb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e64:	4a27      	ldr	r2, [pc, #156]	@ (8005f04 <chk_lock+0xb4>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	4413      	add	r3, r2
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01d      	beq.n	8005eae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <chk_lock+0xb4>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	4413      	add	r3, r2
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d116      	bne.n	8005eb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e84:	4a1f      	ldr	r2, [pc, #124]	@ (8005f04 <chk_lock+0xb4>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d10c      	bne.n	8005eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e98:	4a1a      	ldr	r2, [pc, #104]	@ (8005f04 <chk_lock+0xb4>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d102      	bne.n	8005eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005eac:	e007      	b.n	8005ebe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d9d2      	bls.n	8005e64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d109      	bne.n	8005ed8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <chk_lock+0x80>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d101      	bne.n	8005ed4 <chk_lock+0x84>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e010      	b.n	8005ef6 <chk_lock+0xa6>
 8005ed4:	2312      	movs	r3, #18
 8005ed6:	e00e      	b.n	8005ef6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <chk_lock+0xa0>
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <chk_lock+0xb4>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eee:	d101      	bne.n	8005ef4 <chk_lock+0xa4>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	e000      	b.n	8005ef6 <chk_lock+0xa6>
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	2000166c 	.word	0x2000166c

08005f08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e002      	b.n	8005f1a <enq_lock+0x12>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d806      	bhi.n	8005f2e <enq_lock+0x26>
 8005f20:	4a09      	ldr	r2, [pc, #36]	@ (8005f48 <enq_lock+0x40>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4413      	add	r3, r2
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f2      	bne.n	8005f14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2000166c 	.word	0x2000166c

08005f4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e01f      	b.n	8005f9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f5c:	4a41      	ldr	r2, [pc, #260]	@ (8006064 <inc_lock+0x118>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d113      	bne.n	8005f96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006064 <inc_lock+0x118>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	4413      	add	r3, r2
 8005f76:	3304      	adds	r3, #4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d109      	bne.n	8005f96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f82:	4a38      	ldr	r2, [pc, #224]	@ (8006064 <inc_lock+0x118>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d006      	beq.n	8005fa4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d9dc      	bls.n	8005f5c <inc_lock+0x10>
 8005fa2:	e000      	b.n	8005fa6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fa4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d132      	bne.n	8006012 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e002      	b.n	8005fb8 <inc_lock+0x6c>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d806      	bhi.n	8005fcc <inc_lock+0x80>
 8005fbe:	4a29      	ldr	r2, [pc, #164]	@ (8006064 <inc_lock+0x118>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	4413      	add	r3, r2
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f2      	bne.n	8005fb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d101      	bne.n	8005fd6 <inc_lock+0x8a>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e040      	b.n	8006058 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4922      	ldr	r1, [pc, #136]	@ (8006064 <inc_lock+0x118>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	440b      	add	r3, r1
 8005fe2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	491e      	ldr	r1, [pc, #120]	@ (8006064 <inc_lock+0x118>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	440b      	add	r3, r1
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	491a      	ldr	r1, [pc, #104]	@ (8006064 <inc_lock+0x118>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	440b      	add	r3, r1
 8006000:	3308      	adds	r3, #8
 8006002:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006004:	4a17      	ldr	r2, [pc, #92]	@ (8006064 <inc_lock+0x118>)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	4413      	add	r3, r2
 800600c:	330c      	adds	r3, #12
 800600e:	2200      	movs	r2, #0
 8006010:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <inc_lock+0xe0>
 8006018:	4a12      	ldr	r2, [pc, #72]	@ (8006064 <inc_lock+0x118>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	4413      	add	r3, r2
 8006020:	330c      	adds	r3, #12
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <inc_lock+0xe0>
 8006028:	2300      	movs	r3, #0
 800602a:	e015      	b.n	8006058 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <inc_lock+0xf8>
 8006032:	4a0c      	ldr	r2, [pc, #48]	@ (8006064 <inc_lock+0x118>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4413      	add	r3, r2
 800603a:	330c      	adds	r3, #12
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	e001      	b.n	8006048 <inc_lock+0xfc>
 8006044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006048:	4906      	ldr	r1, [pc, #24]	@ (8006064 <inc_lock+0x118>)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	440b      	add	r3, r1
 8006050:	330c      	adds	r3, #12
 8006052:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	2000166c 	.word	0x2000166c

08006068 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d825      	bhi.n	80060c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800607c:	4a17      	ldr	r2, [pc, #92]	@ (80060dc <dec_lock+0x74>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	4413      	add	r3, r2
 8006084:	330c      	adds	r3, #12
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800608a:	89fb      	ldrh	r3, [r7, #14]
 800608c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006090:	d101      	bne.n	8006096 <dec_lock+0x2e>
 8006092:	2300      	movs	r3, #0
 8006094:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006096:	89fb      	ldrh	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <dec_lock+0x3a>
 800609c:	89fb      	ldrh	r3, [r7, #14]
 800609e:	3b01      	subs	r3, #1
 80060a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80060a2:	4a0e      	ldr	r2, [pc, #56]	@ (80060dc <dec_lock+0x74>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	4413      	add	r3, r2
 80060aa:	330c      	adds	r3, #12
 80060ac:	89fa      	ldrh	r2, [r7, #14]
 80060ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <dec_lock+0x5a>
 80060b6:	4a09      	ldr	r2, [pc, #36]	@ (80060dc <dec_lock+0x74>)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	737b      	strb	r3, [r7, #13]
 80060c6:	e001      	b.n	80060cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060c8:	2302      	movs	r3, #2
 80060ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80060cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000166c 	.word	0x2000166c

080060e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e010      	b.n	8006110 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006124 <clear_lock+0x44>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	4413      	add	r3, r2
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d105      	bne.n	800610a <clear_lock+0x2a>
 80060fe:	4a09      	ldr	r2, [pc, #36]	@ (8006124 <clear_lock+0x44>)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	4413      	add	r3, r2
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3301      	adds	r3, #1
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d9eb      	bls.n	80060ee <clear_lock+0xe>
	}
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	2000166c 	.word	0x2000166c

08006128 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	78db      	ldrb	r3, [r3, #3]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d034      	beq.n	80061a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	7858      	ldrb	r0, [r3, #1]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800614c:	2301      	movs	r3, #1
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	f7ff fd40 	bl	8005bd4 <disk_write>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <sync_window+0x38>
			res = FR_DISK_ERR;
 800615a:	2301      	movs	r3, #1
 800615c:	73fb      	strb	r3, [r7, #15]
 800615e:	e022      	b.n	80061a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	1ad2      	subs	r2, r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	429a      	cmp	r2, r3
 8006174:	d217      	bcs.n	80061a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	789b      	ldrb	r3, [r3, #2]
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	e010      	b.n	80061a0 <sync_window+0x78>
					wsect += fs->fsize;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7858      	ldrb	r0, [r3, #1]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006192:	2301      	movs	r3, #1
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	f7ff fd1d 	bl	8005bd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3b01      	subs	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d8eb      	bhi.n	800617e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d01b      	beq.n	8006200 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff ffad 	bl	8006128 <sync_window>
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d113      	bne.n	8006200 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	7858      	ldrb	r0, [r3, #1]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061e2:	2301      	movs	r3, #1
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	f7ff fcd5 	bl	8005b94 <disk_read>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ff87 	bl	8006128 <sync_window>
 800621a:	4603      	mov	r3, r0
 800621c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d158      	bne.n	80062d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d148      	bne.n	80062be <sync_fs+0xb2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	791b      	ldrb	r3, [r3, #4]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d144      	bne.n	80062be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3330      	adds	r3, #48	@ 0x30
 8006238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fda9 	bl	8005d96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3330      	adds	r3, #48	@ 0x30
 8006248:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800624c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fd38 	bl	8005cc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3330      	adds	r3, #48	@ 0x30
 800625a:	4921      	ldr	r1, [pc, #132]	@ (80062e0 <sync_fs+0xd4>)
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fd4d 	bl	8005cfc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3330      	adds	r3, #48	@ 0x30
 8006266:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800626a:	491e      	ldr	r1, [pc, #120]	@ (80062e4 <sync_fs+0xd8>)
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fd45 	bl	8005cfc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3330      	adds	r3, #48	@ 0x30
 8006276:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7ff fd3b 	bl	8005cfc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3330      	adds	r3, #48	@ 0x30
 800628a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7ff fd31 	bl	8005cfc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7858      	ldrb	r0, [r3, #1]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b2:	2301      	movs	r3, #1
 80062b4:	f7ff fc8e 	bl	8005bd4 <disk_write>
			fs->fsi_flag = 0;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2200      	movs	r2, #0
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fca4 	bl	8005c14 <disk_ioctl>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <sync_fs+0xca>
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	41615252 	.word	0x41615252
 80062e4:	61417272 	.word	0x61417272

080062e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	3b02      	subs	r3, #2
 80062f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	3b02      	subs	r3, #2
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d301      	bcc.n	8006308 <clust2sect+0x20>
 8006304:	2300      	movs	r3, #0
 8006306:	e008      	b.n	800631a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	895b      	ldrh	r3, [r3, #10]
 800630c:	461a      	mov	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	fb03 f202 	mul.w	r2, r3, r2
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	4413      	add	r3, r2
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d904      	bls.n	8006346 <get_fat+0x20>
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d302      	bcc.n	800634c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006346:	2301      	movs	r3, #1
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e08e      	b.n	800646a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800634c:	f04f 33ff 	mov.w	r3, #4294967295
 8006350:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d061      	beq.n	800641e <get_fat+0xf8>
 800635a:	2b03      	cmp	r3, #3
 800635c:	dc7b      	bgt.n	8006456 <get_fat+0x130>
 800635e:	2b01      	cmp	r3, #1
 8006360:	d002      	beq.n	8006368 <get_fat+0x42>
 8006362:	2b02      	cmp	r3, #2
 8006364:	d041      	beq.n	80063ea <get_fat+0xc4>
 8006366:	e076      	b.n	8006456 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	0a5b      	lsrs	r3, r3, #9
 800637e:	4413      	add	r3, r2
 8006380:	4619      	mov	r1, r3
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7ff ff14 	bl	80061b0 <move_window>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d166      	bne.n	800645c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	60fa      	str	r2, [r7, #12]
 8006394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	0a5b      	lsrs	r3, r3, #9
 80063aa:	4413      	add	r3, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	6938      	ldr	r0, [r7, #16]
 80063b0:	f7ff fefe 	bl	80061b0 <move_window>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d152      	bne.n	8006460 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <get_fat+0xba>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	e002      	b.n	80063e6 <get_fat+0xc0>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e6:	617b      	str	r3, [r7, #20]
			break;
 80063e8:	e03f      	b.n	800646a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6a1a      	ldr	r2, [r3, #32]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	4413      	add	r3, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	6938      	ldr	r0, [r7, #16]
 80063f8:	f7ff feda 	bl	80061b0 <move_window>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d130      	bne.n	8006464 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006410:	4413      	add	r3, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fc1c 	bl	8005c50 <ld_word>
 8006418:	4603      	mov	r3, r0
 800641a:	617b      	str	r3, [r7, #20]
			break;
 800641c:	e025      	b.n	800646a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	09db      	lsrs	r3, r3, #7
 8006426:	4413      	add	r3, r2
 8006428:	4619      	mov	r1, r3
 800642a:	6938      	ldr	r0, [r7, #16]
 800642c:	f7ff fec0 	bl	80061b0 <move_window>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d118      	bne.n	8006468 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006444:	4413      	add	r3, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fc1a 	bl	8005c80 <ld_dword>
 800644c:	4603      	mov	r3, r0
 800644e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006452:	617b      	str	r3, [r7, #20]
			break;
 8006454:	e009      	b.n	800646a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006456:	2301      	movs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	e006      	b.n	800646a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800645c:	bf00      	nop
 800645e:	e004      	b.n	800646a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006460:	bf00      	nop
 8006462:	e002      	b.n	800646a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006468:	bf00      	nop
		}
	}

	return val;
 800646a:	697b      	ldr	r3, [r7, #20]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b089      	sub	sp, #36	@ 0x24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006480:	2302      	movs	r3, #2
 8006482:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b01      	cmp	r3, #1
 8006488:	f240 80d9 	bls.w	800663e <put_fat+0x1ca>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	f080 80d3 	bcs.w	800663e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b03      	cmp	r3, #3
 800649e:	f000 8096 	beq.w	80065ce <put_fat+0x15a>
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	f300 80cb 	bgt.w	800663e <put_fat+0x1ca>
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d002      	beq.n	80064b2 <put_fat+0x3e>
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d06e      	beq.n	800658e <put_fat+0x11a>
 80064b0:	e0c5      	b.n	800663e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4413      	add	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1a      	ldr	r2, [r3, #32]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	0a5b      	lsrs	r3, r3, #9
 80064c8:	4413      	add	r3, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fe6f 	bl	80061b0 <move_window>
 80064d2:	4603      	mov	r3, r0
 80064d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f040 80a9 	bne.w	8006630 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	61b9      	str	r1, [r7, #24]
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	4413      	add	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <put_fat+0xa4>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b25b      	sxtb	r3, r3
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	b25a      	sxtb	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	b25b      	sxtb	r3, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	b25b      	sxtb	r3, r3
 8006514:	b2db      	uxtb	r3, r3
 8006516:	e001      	b.n	800651c <put_fat+0xa8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1a      	ldr	r2, [r3, #32]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	0a5b      	lsrs	r3, r3, #9
 800652e:	4413      	add	r3, r2
 8006530:	4619      	mov	r1, r3
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fe3c 	bl	80061b0 <move_window>
 8006538:	4603      	mov	r3, r0
 800653a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800653c:	7ffb      	ldrb	r3, [r7, #31]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d178      	bne.n	8006634 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654e:	4413      	add	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <put_fat+0xf0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e00e      	b.n	8006582 <put_fat+0x10e>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b25b      	sxtb	r3, r3
 800656a:	f023 030f 	bic.w	r3, r3, #15
 800656e:	b25a      	sxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b25b      	sxtb	r3, r3
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	b25b      	sxtb	r3, r3
 800657c:	4313      	orrs	r3, r2
 800657e:	b25b      	sxtb	r3, r3
 8006580:	b2db      	uxtb	r3, r3
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	70da      	strb	r2, [r3, #3]
			break;
 800658c:	e057      	b.n	800663e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	4413      	add	r3, r2
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fe08 	bl	80061b0 <move_window>
 80065a0:	4603      	mov	r3, r0
 80065a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065a4:	7ffb      	ldrb	r3, [r7, #31]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d146      	bne.n	8006638 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80065b8:	4413      	add	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	b292      	uxth	r2, r2
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff fb80 	bl	8005cc6 <st_word>
			fs->wflag = 1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	70da      	strb	r2, [r3, #3]
			break;
 80065cc:	e037      	b.n	800663e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1a      	ldr	r2, [r3, #32]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	4413      	add	r3, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fde8 	bl	80061b0 <move_window>
 80065e0:	4603      	mov	r3, r0
 80065e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065e4:	7ffb      	ldrb	r3, [r7, #31]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d128      	bne.n	800663c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80065fe:	4413      	add	r3, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fb3d 	bl	8005c80 <ld_dword>
 8006606:	4603      	mov	r3, r0
 8006608:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800660c:	4323      	orrs	r3, r4
 800660e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800661e:	4413      	add	r3, r2
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fb6a 	bl	8005cfc <st_dword>
			fs->wflag = 1;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	70da      	strb	r2, [r3, #3]
			break;
 800662e:	e006      	b.n	800663e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006630:	bf00      	nop
 8006632:	e004      	b.n	800663e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800663c:	bf00      	nop
		}
	}
	return res;
 800663e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3724      	adds	r7, #36	@ 0x24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd90      	pop	{r4, r7, pc}

08006648 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d904      	bls.n	800666e <remove_chain+0x26>
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d301      	bcc.n	8006672 <remove_chain+0x2a>
 800666e:	2302      	movs	r3, #2
 8006670:	e04b      	b.n	800670a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00c      	beq.n	8006692 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006678:	f04f 32ff 	mov.w	r2, #4294967295
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	69b8      	ldr	r0, [r7, #24]
 8006680:	f7ff fef8 	bl	8006474 <put_fat>
 8006684:	4603      	mov	r3, r0
 8006686:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006688:	7ffb      	ldrb	r3, [r7, #31]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <remove_chain+0x4a>
 800668e:	7ffb      	ldrb	r3, [r7, #31]
 8006690:	e03b      	b.n	800670a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff fe46 	bl	8006326 <get_fat>
 800669a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d031      	beq.n	8006706 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <remove_chain+0x64>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e02e      	b.n	800670a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d101      	bne.n	80066b8 <remove_chain+0x70>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e028      	b.n	800670a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80066b8:	2200      	movs	r2, #0
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	69b8      	ldr	r0, [r7, #24]
 80066be:	f7ff fed9 	bl	8006474 <put_fat>
 80066c2:	4603      	mov	r3, r0
 80066c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80066c6:	7ffb      	ldrb	r3, [r7, #31]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <remove_chain+0x88>
 80066cc:	7ffb      	ldrb	r3, [r7, #31]
 80066ce:	e01c      	b.n	800670a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	3b02      	subs	r3, #2
 80066da:	429a      	cmp	r2, r3
 80066dc:	d20b      	bcs.n	80066f6 <remove_chain+0xae>
			fs->free_clst++;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	791b      	ldrb	r3, [r3, #4]
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	d3c6      	bcc.n	8006692 <remove_chain+0x4a>
 8006704:	e000      	b.n	8006708 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006706:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10d      	bne.n	8006744 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <create_chain+0x2c>
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	429a      	cmp	r2, r3
 800673c:	d31b      	bcc.n	8006776 <create_chain+0x64>
 800673e:	2301      	movs	r3, #1
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e018      	b.n	8006776 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fded 	bl	8006326 <get_fat>
 800674c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d801      	bhi.n	8006758 <create_chain+0x46>
 8006754:	2301      	movs	r3, #1
 8006756:	e070      	b.n	800683a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d101      	bne.n	8006764 <create_chain+0x52>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	e06a      	b.n	800683a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	429a      	cmp	r2, r3
 800676c:	d201      	bcs.n	8006772 <create_chain+0x60>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	e063      	b.n	800683a <create_chain+0x128>
		scl = clst;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	3301      	adds	r3, #1
 800677e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	429a      	cmp	r2, r3
 8006788:	d307      	bcc.n	800679a <create_chain+0x88>
				ncl = 2;
 800678a:	2302      	movs	r3, #2
 800678c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	429a      	cmp	r2, r3
 8006794:	d901      	bls.n	800679a <create_chain+0x88>
 8006796:	2300      	movs	r3, #0
 8006798:	e04f      	b.n	800683a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff fdc2 	bl	8006326 <get_fat>
 80067a2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d003      	beq.n	80067b8 <create_chain+0xa6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d101      	bne.n	80067bc <create_chain+0xaa>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	e03e      	b.n	800683a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d1da      	bne.n	800677a <create_chain+0x68>
 80067c4:	2300      	movs	r3, #0
 80067c6:	e038      	b.n	800683a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80067c8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	69f9      	ldr	r1, [r7, #28]
 80067d0:	6938      	ldr	r0, [r7, #16]
 80067d2:	f7ff fe4f 	bl	8006474 <put_fat>
 80067d6:	4603      	mov	r3, r0
 80067d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80067da:	7dfb      	ldrb	r3, [r7, #23]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d109      	bne.n	80067f4 <create_chain+0xe2>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6938      	ldr	r0, [r7, #16]
 80067ec:	f7ff fe42 	bl	8006474 <put_fat>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d116      	bne.n	8006828 <create_chain+0x116>
		fs->last_clst = ncl;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	3b02      	subs	r3, #2
 800680a:	429a      	cmp	r2, r3
 800680c:	d804      	bhi.n	8006818 <create_chain+0x106>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	1e5a      	subs	r2, r3, #1
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	791b      	ldrb	r3, [r3, #4]
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	711a      	strb	r2, [r3, #4]
 8006826:	e007      	b.n	8006838 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d102      	bne.n	8006834 <create_chain+0x122>
 800682e:	f04f 33ff 	mov.w	r3, #4294967295
 8006832:	e000      	b.n	8006836 <create_chain+0x124>
 8006834:	2301      	movs	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006838:	69fb      	ldr	r3, [r7, #28]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006842:	b480      	push	{r7}
 8006844:	b087      	sub	sp, #28
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006856:	3304      	adds	r3, #4
 8006858:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	0a5b      	lsrs	r3, r3, #9
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	8952      	ldrh	r2, [r2, #10]
 8006862:	fbb3 f3f2 	udiv	r3, r3, r2
 8006866:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1d1a      	adds	r2, r3, #4
 800686c:	613a      	str	r2, [r7, #16]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <clmt_clust+0x3a>
 8006878:	2300      	movs	r3, #0
 800687a:	e010      	b.n	800689e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	429a      	cmp	r2, r3
 8006882:	d307      	bcc.n	8006894 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3304      	adds	r3, #4
 8006890:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006892:	e7e9      	b.n	8006868 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006894:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4413      	add	r3, r2
}
 800689e:	4618      	mov	r0, r3
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b086      	sub	sp, #24
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068c0:	d204      	bcs.n	80068cc <dir_sdi+0x22>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80068cc:	2302      	movs	r3, #2
 80068ce:	e063      	b.n	8006998 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <dir_sdi+0x46>
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d902      	bls.n	80068f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	8912      	ldrh	r2, [r2, #8]
 80068fe:	4293      	cmp	r3, r2
 8006900:	d301      	bcc.n	8006906 <dir_sdi+0x5c>
 8006902:	2302      	movs	r3, #2
 8006904:	e048      	b.n	8006998 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	61da      	str	r2, [r3, #28]
 800690e:	e029      	b.n	8006964 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	895b      	ldrh	r3, [r3, #10]
 8006914:	025b      	lsls	r3, r3, #9
 8006916:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006918:	e019      	b.n	800694e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6979      	ldr	r1, [r7, #20]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fd01 	bl	8006326 <get_fat>
 8006924:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d101      	bne.n	8006932 <dir_sdi+0x88>
 800692e:	2301      	movs	r3, #1
 8006930:	e032      	b.n	8006998 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d904      	bls.n	8006942 <dir_sdi+0x98>
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	429a      	cmp	r2, r3
 8006940:	d301      	bcc.n	8006946 <dir_sdi+0x9c>
 8006942:	2302      	movs	r3, #2
 8006944:	e028      	b.n	8006998 <dir_sdi+0xee>
			ofs -= csz;
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	429a      	cmp	r2, r3
 8006954:	d2e1      	bcs.n	800691a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	6938      	ldr	r0, [r7, #16]
 800695a:	f7ff fcc5 	bl	80062e8 <clust2sect>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <dir_sdi+0xcc>
 8006972:	2302      	movs	r3, #2
 8006974:	e010      	b.n	8006998 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	0a5b      	lsrs	r3, r3, #9
 800697e:	441a      	add	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006990:	441a      	add	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	3320      	adds	r3, #32
 80069b6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <dir_next+0x28>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069c6:	d301      	bcc.n	80069cc <dir_next+0x2c>
 80069c8:	2304      	movs	r3, #4
 80069ca:	e0aa      	b.n	8006b22 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 8098 	bne.w	8006b08 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10b      	bne.n	8006a02 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	8912      	ldrh	r2, [r2, #8]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f0c0 8088 	bcc.w	8006b08 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	61da      	str	r2, [r3, #28]
 80069fe:	2304      	movs	r3, #4
 8006a00:	e08f      	b.n	8006b22 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	0a5b      	lsrs	r3, r3, #9
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	8952      	ldrh	r2, [r2, #10]
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d17a      	bne.n	8006b08 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7ff fc83 	bl	8006326 <get_fat>
 8006a20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d801      	bhi.n	8006a2c <dir_next+0x8c>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e07a      	b.n	8006b22 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d101      	bne.n	8006a38 <dir_next+0x98>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e074      	b.n	8006b22 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d358      	bcc.n	8006af4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61da      	str	r2, [r3, #28]
 8006a4e:	2304      	movs	r3, #4
 8006a50:	e067      	b.n	8006b22 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7ff fe59 	bl	8006712 <create_chain>
 8006a60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <dir_next+0xcc>
 8006a68:	2307      	movs	r3, #7
 8006a6a:	e05a      	b.n	8006b22 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <dir_next+0xd6>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e055      	b.n	8006b22 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d101      	bne.n	8006a82 <dir_next+0xe2>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e04f      	b.n	8006b22 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff fb50 	bl	8006128 <sync_window>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <dir_next+0xf2>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e047      	b.n	8006b22 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3330      	adds	r3, #48	@ 0x30
 8006a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff f97a 	bl	8005d96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	6979      	ldr	r1, [r7, #20]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fc1d 	bl	80062e8 <clust2sect>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ab4:	e012      	b.n	8006adc <dir_next+0x13c>
						fs->wflag = 1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7ff fb33 	bl	8006128 <sync_window>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <dir_next+0x12c>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e02a      	b.n	8006b22 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	895b      	ldrh	r3, [r3, #10]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d3e6      	bcc.n	8006ab6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006afa:	6979      	ldr	r1, [r7, #20]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7ff fbf3 	bl	80062e8 <clust2sect>
 8006b02:	4602      	mov	r2, r0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	441a      	add	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff feb4 	bl	80068aa <dir_sdi>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d12b      	bne.n	8006ba4 <dir_alloc+0x7a>
		n = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4619      	mov	r1, r3
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f7ff fb2a 	bl	80061b0 <move_window>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11d      	bne.n	8006ba2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2be5      	cmp	r3, #229	@ 0xe5
 8006b6e:	d004      	beq.n	8006b7a <dir_alloc+0x50>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d107      	bne.n	8006b8a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d102      	bne.n	8006b8e <dir_alloc+0x64>
 8006b88:	e00c      	b.n	8006ba4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b8e:	2101      	movs	r1, #1
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff05 	bl	80069a0 <dir_next>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0d7      	beq.n	8006b50 <dir_alloc+0x26>
 8006ba0:	e000      	b.n	8006ba4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006ba2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d101      	bne.n	8006bae <dir_alloc+0x84>
 8006baa:	2307      	movs	r3, #7
 8006bac:	75fb      	strb	r3, [r7, #23]
	return res;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	331a      	adds	r3, #26
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff f842 	bl	8005c50 <ld_word>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d109      	bne.n	8006bec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	3314      	adds	r3, #20
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff f837 	bl	8005c50 <ld_word>
 8006be2:	4603      	mov	r3, r0
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006bec:	68fb      	ldr	r3, [r7, #12]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	331a      	adds	r3, #26
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	b292      	uxth	r2, r2
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff f85a 	bl	8005cc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d109      	bne.n	8006c2e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f103 0214 	add.w	r2, r3, #20
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7ff f84c 	bl	8005cc6 <st_word>
	}
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fe2f 	bl	80068aa <dir_sdi>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <dir_find+0x24>
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	e03e      	b.n	8006cd8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f7ff faa5 	bl	80061b0 <move_window>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d12f      	bne.n	8006cd0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <dir_find+0x4e>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	75fb      	strb	r3, [r7, #23]
 8006c82:	e028      	b.n	8006cd6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	330b      	adds	r3, #11
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	330b      	adds	r3, #11
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <dir_find+0x86>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a18      	ldr	r0, [r3, #32]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	@ 0x24
 8006cae:	220b      	movs	r2, #11
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	f7ff f88b 	bl	8005dcc <mem_cmp>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fe6e 	bl	80069a0 <dir_next>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0c5      	beq.n	8006c5a <dir_find+0x24>
 8006cce:	e002      	b.n	8006cd6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006cd4:	bf00      	nop

	return res;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006cee:	2101      	movs	r1, #1
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff ff1a 	bl	8006b2a <dir_alloc>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d11c      	bne.n	8006d3a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	4619      	mov	r1, r3
 8006d06:	68b8      	ldr	r0, [r7, #8]
 8006d08:	f7ff fa52 	bl	80061b0 <move_window>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d111      	bne.n	8006d3a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff f839 	bl	8005d96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a18      	ldr	r0, [r3, #32]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3324      	adds	r3, #36	@ 0x24
 8006d2c:	220b      	movs	r2, #11
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f7ff f810 	bl	8005d54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2201      	movs	r2, #1
 8006d38:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3324      	adds	r3, #36	@ 0x24
 8006d58:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006d5a:	220b      	movs	r2, #11
 8006d5c:	2120      	movs	r1, #32
 8006d5e:	68b8      	ldr	r0, [r7, #8]
 8006d60:	f7ff f819 	bl	8005d96 <mem_set>
	si = i = 0; ni = 8;
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	61fa      	str	r2, [r7, #28]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d7e:	7efb      	ldrb	r3, [r7, #27]
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d94e      	bls.n	8006e22 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006d84:	7efb      	ldrb	r3, [r7, #27]
 8006d86:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d88:	d006      	beq.n	8006d98 <create_name+0x54>
 8006d8a:	7efb      	ldrb	r3, [r7, #27]
 8006d8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d8e:	d110      	bne.n	8006db2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006d90:	e002      	b.n	8006d98 <create_name+0x54>
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3301      	adds	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b2f      	cmp	r3, #47	@ 0x2f
 8006da2:	d0f6      	beq.n	8006d92 <create_name+0x4e>
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b5c      	cmp	r3, #92	@ 0x5c
 8006dae:	d0f0      	beq.n	8006d92 <create_name+0x4e>
			break;
 8006db0:	e038      	b.n	8006e24 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006db2:	7efb      	ldrb	r3, [r7, #27]
 8006db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006db6:	d003      	beq.n	8006dc0 <create_name+0x7c>
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d30c      	bcc.n	8006dda <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b0b      	cmp	r3, #11
 8006dc4:	d002      	beq.n	8006dcc <create_name+0x88>
 8006dc6:	7efb      	ldrb	r3, [r7, #27]
 8006dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dca:	d001      	beq.n	8006dd0 <create_name+0x8c>
 8006dcc:	2306      	movs	r3, #6
 8006dce:	e044      	b.n	8006e5a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	230b      	movs	r3, #11
 8006dd6:	617b      	str	r3, [r7, #20]
			continue;
 8006dd8:	e022      	b.n	8006e20 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006dda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da04      	bge.n	8006dec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006de2:	7efb      	ldrb	r3, [r7, #27]
 8006de4:	3b80      	subs	r3, #128	@ 0x80
 8006de6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e64 <create_name+0x120>)
 8006de8:	5cd3      	ldrb	r3, [r2, r3]
 8006dea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006dec:	7efb      	ldrb	r3, [r7, #27]
 8006dee:	4619      	mov	r1, r3
 8006df0:	481d      	ldr	r0, [pc, #116]	@ (8006e68 <create_name+0x124>)
 8006df2:	f7ff f812 	bl	8005e1a <chk_chr>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <create_name+0xbc>
 8006dfc:	2306      	movs	r3, #6
 8006dfe:	e02c      	b.n	8006e5a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006e00:	7efb      	ldrb	r3, [r7, #27]
 8006e02:	2b60      	cmp	r3, #96	@ 0x60
 8006e04:	d905      	bls.n	8006e12 <create_name+0xce>
 8006e06:	7efb      	ldrb	r3, [r7, #27]
 8006e08:	2b7a      	cmp	r3, #122	@ 0x7a
 8006e0a:	d802      	bhi.n	8006e12 <create_name+0xce>
 8006e0c:	7efb      	ldrb	r3, [r7, #27]
 8006e0e:	3b20      	subs	r3, #32
 8006e10:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	613a      	str	r2, [r7, #16]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	7efa      	ldrb	r2, [r7, #27]
 8006e1e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006e20:	e7a6      	b.n	8006d70 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006e22:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	441a      	add	r2, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <create_name+0xf4>
 8006e34:	2306      	movs	r3, #6
 8006e36:	e010      	b.n	8006e5a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2be5      	cmp	r3, #229	@ 0xe5
 8006e3e:	d102      	bne.n	8006e46 <create_name+0x102>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2205      	movs	r2, #5
 8006e44:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006e46:	7efb      	ldrb	r3, [r7, #27]
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d801      	bhi.n	8006e50 <create_name+0x10c>
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	e000      	b.n	8006e52 <create_name+0x10e>
 8006e50:	2200      	movs	r2, #0
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	330b      	adds	r3, #11
 8006e56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e58:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	08009364 	.word	0x08009364
 8006e68:	080092f4 	.word	0x080092f4

08006e6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006e80:	e002      	b.n	8006e88 <follow_path+0x1c>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	3301      	adds	r3, #1
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e8e:	d0f8      	beq.n	8006e82 <follow_path+0x16>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e96:	d0f4      	beq.n	8006e82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b1f      	cmp	r3, #31
 8006ea4:	d80a      	bhi.n	8006ebc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2280      	movs	r2, #128	@ 0x80
 8006eaa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fcfa 	bl	80068aa <dir_sdi>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
 8006eba:	e043      	b.n	8006f44 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ff3f 	bl	8006d44 <create_name>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d134      	bne.n	8006f3a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff feb0 	bl	8006c36 <dir_find>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006ee0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d127      	bne.n	8006f3e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d122      	bne.n	8006f3e <follow_path+0xd2>
 8006ef8:	2305      	movs	r3, #5
 8006efa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006efc:	e01f      	b.n	8006f3e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d11c      	bne.n	8006f42 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	799b      	ldrb	r3, [r3, #6]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006f14:	2305      	movs	r3, #5
 8006f16:	75fb      	strb	r3, [r7, #23]
 8006f18:	e014      	b.n	8006f44 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f28:	4413      	add	r3, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fe43 	bl	8006bb8 <ld_clust>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f38:	e7c0      	b.n	8006ebc <follow_path+0x50>
			if (res != FR_OK) break;
 8006f3a:	bf00      	nop
 8006f3c:	e002      	b.n	8006f44 <follow_path+0xd8>
				break;
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f42:	bf00      	nop
			}
		}
	}

	return res;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b087      	sub	sp, #28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d031      	beq.n	8006fc8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e002      	b.n	8006f72 <get_ldnumber+0x24>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d903      	bls.n	8006f82 <get_ldnumber+0x34>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f80:	d1f4      	bne.n	8006f6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f88:	d11c      	bne.n	8006fc4 <get_ldnumber+0x76>
			tp = *path;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	60fa      	str	r2, [r7, #12]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	3b30      	subs	r3, #48	@ 0x30
 8006f9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	d80e      	bhi.n	8006fc0 <get_ldnumber+0x72>
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d10a      	bne.n	8006fc0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d107      	bne.n	8006fc0 <get_ldnumber+0x72>
					vol = (int)i;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	e002      	b.n	8006fca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fc8:	693b      	ldr	r3, [r7, #16]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
	...

08006fd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	70da      	strb	r2, [r3, #3]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295
 8006fee:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff f8dc 	bl	80061b0 <move_window>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <check_fs+0x2a>
 8006ffe:	2304      	movs	r3, #4
 8007000:	e038      	b.n	8007074 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3330      	adds	r3, #48	@ 0x30
 8007006:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fe20 	bl	8005c50 <ld_word>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007018:	429a      	cmp	r2, r3
 800701a:	d001      	beq.n	8007020 <check_fs+0x48>
 800701c:	2303      	movs	r3, #3
 800701e:	e029      	b.n	8007074 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007026:	2be9      	cmp	r3, #233	@ 0xe9
 8007028:	d009      	beq.n	800703e <check_fs+0x66>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007030:	2beb      	cmp	r3, #235	@ 0xeb
 8007032:	d11e      	bne.n	8007072 <check_fs+0x9a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800703a:	2b90      	cmp	r3, #144	@ 0x90
 800703c:	d119      	bne.n	8007072 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3330      	adds	r3, #48	@ 0x30
 8007042:	3336      	adds	r3, #54	@ 0x36
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fe1b 	bl	8005c80 <ld_dword>
 800704a:	4603      	mov	r3, r0
 800704c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007050:	4a0a      	ldr	r2, [pc, #40]	@ (800707c <check_fs+0xa4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <check_fs+0x82>
 8007056:	2300      	movs	r3, #0
 8007058:	e00c      	b.n	8007074 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3330      	adds	r3, #48	@ 0x30
 800705e:	3352      	adds	r3, #82	@ 0x52
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fe0d 	bl	8005c80 <ld_dword>
 8007066:	4603      	mov	r3, r0
 8007068:	4a05      	ldr	r2, [pc, #20]	@ (8007080 <check_fs+0xa8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d101      	bne.n	8007072 <check_fs+0x9a>
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007072:	2302      	movs	r3, #2
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	00544146 	.word	0x00544146
 8007080:	33544146 	.word	0x33544146

08007084 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b096      	sub	sp, #88	@ 0x58
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff ff58 	bl	8006f4e <get_ldnumber>
 800709e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80070a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da01      	bge.n	80070aa <find_volume+0x26>
 80070a6:	230b      	movs	r3, #11
 80070a8:	e22d      	b.n	8007506 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070aa:	4aa1      	ldr	r2, [pc, #644]	@ (8007330 <find_volume+0x2ac>)
 80070ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <find_volume+0x3a>
 80070ba:	230c      	movs	r3, #12
 80070bc:	e223      	b.n	8007506 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01a      	beq.n	800710a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80070d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fd1b 	bl	8005b14 <disk_status>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10c      	bne.n	800710a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d007      	beq.n	8007106 <find_volume+0x82>
 80070f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007102:	230a      	movs	r3, #10
 8007104:	e1ff      	b.n	8007506 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007106:	2300      	movs	r3, #0
 8007108:	e1fd      	b.n	8007506 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007112:	b2da      	uxtb	r2, r3
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fd13 	bl	8005b48 <disk_initialize>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007128:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007134:	2303      	movs	r3, #3
 8007136:	e1e6      	b.n	8007506 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <find_volume+0xca>
 800713e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800714a:	230a      	movs	r3, #10
 800714c:	e1db      	b.n	8007506 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007152:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007154:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007156:	f7ff ff3f 	bl	8006fd8 <check_fs>
 800715a:	4603      	mov	r3, r0
 800715c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007164:	2b02      	cmp	r3, #2
 8007166:	d149      	bne.n	80071fc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007168:	2300      	movs	r3, #0
 800716a:	643b      	str	r3, [r7, #64]	@ 0x40
 800716c:	e01e      	b.n	80071ac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800717c:	4413      	add	r3, r2
 800717e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	3304      	adds	r3, #4
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d006      	beq.n	8007198 <find_volume+0x114>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	3308      	adds	r3, #8
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fd76 	bl	8005c80 <ld_dword>
 8007194:	4602      	mov	r2, r0
 8007196:	e000      	b.n	800719a <find_volume+0x116>
 8007198:	2200      	movs	r2, #0
 800719a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	3358      	adds	r3, #88	@ 0x58
 80071a0:	443b      	add	r3, r7
 80071a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a8:	3301      	adds	r3, #1
 80071aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d9dd      	bls.n	800716e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80071b2:	2300      	movs	r3, #0
 80071b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80071b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <find_volume+0x13e>
 80071bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071be:	3b01      	subs	r3, #1
 80071c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80071c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	3358      	adds	r3, #88	@ 0x58
 80071c8:	443b      	add	r3, r7
 80071ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <find_volume+0x15e>
 80071d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071da:	f7ff fefd 	bl	8006fd8 <check_fs>
 80071de:	4603      	mov	r3, r0
 80071e0:	e000      	b.n	80071e4 <find_volume+0x160>
 80071e2:	2303      	movs	r3, #3
 80071e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80071e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d905      	bls.n	80071fc <find_volume+0x178>
 80071f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f2:	3301      	adds	r3, #1
 80071f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80071f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d9e2      	bls.n	80071c2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80071fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007200:	2b04      	cmp	r3, #4
 8007202:	d101      	bne.n	8007208 <find_volume+0x184>
 8007204:	2301      	movs	r3, #1
 8007206:	e17e      	b.n	8007506 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007208:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800720c:	2b01      	cmp	r3, #1
 800720e:	d901      	bls.n	8007214 <find_volume+0x190>
 8007210:	230d      	movs	r3, #13
 8007212:	e178      	b.n	8007506 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007216:	3330      	adds	r3, #48	@ 0x30
 8007218:	330b      	adds	r3, #11
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fd18 	bl	8005c50 <ld_word>
 8007220:	4603      	mov	r3, r0
 8007222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007226:	d001      	beq.n	800722c <find_volume+0x1a8>
 8007228:	230d      	movs	r3, #13
 800722a:	e16c      	b.n	8007506 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722e:	3330      	adds	r3, #48	@ 0x30
 8007230:	3316      	adds	r3, #22
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fd0c 	bl	8005c50 <ld_word>
 8007238:	4603      	mov	r3, r0
 800723a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800723c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <find_volume+0x1cc>
 8007242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007244:	3330      	adds	r3, #48	@ 0x30
 8007246:	3324      	adds	r3, #36	@ 0x24
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe fd19 	bl	8005c80 <ld_dword>
 800724e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007254:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800725c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	789b      	ldrb	r3, [r3, #2]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d005      	beq.n	8007274 <find_volume+0x1f0>
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	789b      	ldrb	r3, [r3, #2]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d001      	beq.n	8007274 <find_volume+0x1f0>
 8007270:	230d      	movs	r3, #13
 8007272:	e148      	b.n	8007506 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	789b      	ldrb	r3, [r3, #2]
 8007278:	461a      	mov	r2, r3
 800727a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800727c:	fb02 f303 	mul.w	r3, r2, r3
 8007280:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007288:	461a      	mov	r2, r3
 800728a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007290:	895b      	ldrh	r3, [r3, #10]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <find_volume+0x224>
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	895b      	ldrh	r3, [r3, #10]
 800729a:	461a      	mov	r2, r3
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	895b      	ldrh	r3, [r3, #10]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <find_volume+0x228>
 80072a8:	230d      	movs	r3, #13
 80072aa:	e12c      	b.n	8007506 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	3330      	adds	r3, #48	@ 0x30
 80072b0:	3311      	adds	r3, #17
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fccc 	bl	8005c50 <ld_word>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	891b      	ldrh	r3, [r3, #8]
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <find_volume+0x24e>
 80072ce:	230d      	movs	r3, #13
 80072d0:	e119      	b.n	8007506 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80072d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d4:	3330      	adds	r3, #48	@ 0x30
 80072d6:	3313      	adds	r3, #19
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fcb9 	bl	8005c50 <ld_word>
 80072de:	4603      	mov	r3, r0
 80072e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80072e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <find_volume+0x272>
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	3330      	adds	r3, #48	@ 0x30
 80072ec:	3320      	adds	r3, #32
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fcc6 	bl	8005c80 <ld_dword>
 80072f4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	3330      	adds	r3, #48	@ 0x30
 80072fa:	330e      	adds	r3, #14
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fca7 	bl	8005c50 <ld_word>
 8007302:	4603      	mov	r3, r0
 8007304:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007306:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <find_volume+0x28c>
 800730c:	230d      	movs	r3, #13
 800730e:	e0fa      	b.n	8007506 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007310:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007314:	4413      	add	r3, r2
 8007316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007318:	8912      	ldrh	r2, [r2, #8]
 800731a:	0912      	lsrs	r2, r2, #4
 800731c:	b292      	uxth	r2, r2
 800731e:	4413      	add	r3, r2
 8007320:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	429a      	cmp	r2, r3
 8007328:	d204      	bcs.n	8007334 <find_volume+0x2b0>
 800732a:	230d      	movs	r3, #13
 800732c:	e0eb      	b.n	8007506 <find_volume+0x482>
 800732e:	bf00      	nop
 8007330:	20001664 	.word	0x20001664
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800733c:	8952      	ldrh	r2, [r2, #10]
 800733e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <find_volume+0x2ca>
 800734a:	230d      	movs	r3, #13
 800734c:	e0db      	b.n	8007506 <find_volume+0x482>
		fmt = FS_FAT32;
 800734e:	2303      	movs	r3, #3
 8007350:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800735a:	4293      	cmp	r3, r2
 800735c:	d802      	bhi.n	8007364 <find_volume+0x2e0>
 800735e:	2302      	movs	r3, #2
 8007360:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800736a:	4293      	cmp	r3, r2
 800736c:	d802      	bhi.n	8007374 <find_volume+0x2f0>
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800737c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007380:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007382:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007386:	441a      	add	r2, r3
 8007388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800738c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	441a      	add	r2, r3
 8007392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007394:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800739a:	2b03      	cmp	r3, #3
 800739c:	d11e      	bne.n	80073dc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	3330      	adds	r3, #48	@ 0x30
 80073a2:	332a      	adds	r3, #42	@ 0x2a
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe fc53 	bl	8005c50 <ld_word>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <find_volume+0x330>
 80073b0:	230d      	movs	r3, #13
 80073b2:	e0a8      	b.n	8007506 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	891b      	ldrh	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <find_volume+0x33c>
 80073bc:	230d      	movs	r3, #13
 80073be:	e0a2      	b.n	8007506 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	3330      	adds	r3, #48	@ 0x30
 80073c4:	332c      	adds	r3, #44	@ 0x2c
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fc5a 	bl	8005c80 <ld_dword>
 80073cc:	4602      	mov	r2, r0
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073da:	e01f      	b.n	800741c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	891b      	ldrh	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <find_volume+0x364>
 80073e4:	230d      	movs	r3, #13
 80073e6:	e08e      	b.n	8007506 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	6a1a      	ldr	r2, [r3, #32]
 80073ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ee:	441a      	add	r2, r3
 80073f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80073f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d103      	bne.n	8007404 <find_volume+0x380>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	e00a      	b.n	800741a <find_volume+0x396>
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	4613      	mov	r3, r2
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	4413      	add	r3, r2
 800740e:	085a      	lsrs	r2, r3, #1
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800741a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800741c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007422:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007426:	0a5b      	lsrs	r3, r3, #9
 8007428:	429a      	cmp	r2, r3
 800742a:	d201      	bcs.n	8007430 <find_volume+0x3ac>
 800742c:	230d      	movs	r3, #13
 800742e:	e06a      	b.n	8007506 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	611a      	str	r2, [r3, #16]
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	2280      	movs	r2, #128	@ 0x80
 8007444:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800744a:	2b03      	cmp	r3, #3
 800744c:	d149      	bne.n	80074e2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	3330      	adds	r3, #48	@ 0x30
 8007452:	3330      	adds	r3, #48	@ 0x30
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fbfb 	bl	8005c50 <ld_word>
 800745a:	4603      	mov	r3, r0
 800745c:	2b01      	cmp	r3, #1
 800745e:	d140      	bne.n	80074e2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007462:	3301      	adds	r3, #1
 8007464:	4619      	mov	r1, r3
 8007466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007468:	f7fe fea2 	bl	80061b0 <move_window>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d137      	bne.n	80074e2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	2200      	movs	r2, #0
 8007476:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747a:	3330      	adds	r3, #48	@ 0x30
 800747c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fbe5 	bl	8005c50 <ld_word>
 8007486:	4603      	mov	r3, r0
 8007488:	461a      	mov	r2, r3
 800748a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800748e:	429a      	cmp	r2, r3
 8007490:	d127      	bne.n	80074e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	3330      	adds	r3, #48	@ 0x30
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fbf2 	bl	8005c80 <ld_dword>
 800749c:	4603      	mov	r3, r0
 800749e:	4a1c      	ldr	r2, [pc, #112]	@ (8007510 <find_volume+0x48c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d11e      	bne.n	80074e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	3330      	adds	r3, #48	@ 0x30
 80074a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fbe7 	bl	8005c80 <ld_dword>
 80074b2:	4603      	mov	r3, r0
 80074b4:	4a17      	ldr	r2, [pc, #92]	@ (8007514 <find_volume+0x490>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d113      	bne.n	80074e2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	3330      	adds	r3, #48	@ 0x30
 80074be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fbdc 	bl	8005c80 <ld_dword>
 80074c8:	4602      	mov	r2, r0
 80074ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074cc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80074ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d0:	3330      	adds	r3, #48	@ 0x30
 80074d2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fbd2 	bl	8005c80 <ld_dword>
 80074dc:	4602      	mov	r2, r0
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80074e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80074e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80074ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <find_volume+0x494>)
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	3301      	adds	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	4b09      	ldr	r3, [pc, #36]	@ (8007518 <find_volume+0x494>)
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	4b08      	ldr	r3, [pc, #32]	@ (8007518 <find_volume+0x494>)
 80074f8:	881a      	ldrh	r2, [r3, #0]
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80074fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007500:	f7fe fdee 	bl	80060e0 <clear_lock>
#endif
	return FR_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3758      	adds	r7, #88	@ 0x58
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	41615252 	.word	0x41615252
 8007514:	61417272 	.word	0x61417272
 8007518:	20001668 	.word	0x20001668

0800751c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007526:	2309      	movs	r3, #9
 8007528:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01c      	beq.n	800756a <validate+0x4e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d018      	beq.n	800756a <validate+0x4e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d013      	beq.n	800756a <validate+0x4e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	889a      	ldrh	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	88db      	ldrh	r3, [r3, #6]
 800754c:	429a      	cmp	r2, r3
 800754e:	d10c      	bne.n	800756a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fadc 	bl	8005b14 <disk_status>
 800755c:	4603      	mov	r3, r0
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <validate+0x4e>
			res = FR_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <validate+0x5a>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	e000      	b.n	8007578 <validate+0x5c>
 8007576:	2300      	movs	r3, #0
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	6013      	str	r3, [r2, #0]
	return res;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800759a:	f107 0310 	add.w	r3, r7, #16
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fcd5 	bl	8006f4e <get_ldnumber>
 80075a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da01      	bge.n	80075b0 <f_mount+0x28>
 80075ac:	230b      	movs	r3, #11
 80075ae:	e02b      	b.n	8007608 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80075b0:	4a17      	ldr	r2, [pc, #92]	@ (8007610 <f_mount+0x88>)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80075c0:	69b8      	ldr	r0, [r7, #24]
 80075c2:	f7fe fd8d 	bl	80060e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	490d      	ldr	r1, [pc, #52]	@ (8007610 <f_mount+0x88>)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <f_mount+0x66>
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d001      	beq.n	80075f2 <f_mount+0x6a>
 80075ee:	2300      	movs	r3, #0
 80075f0:	e00a      	b.n	8007608 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80075f2:	f107 010c 	add.w	r1, r7, #12
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	2200      	movs	r2, #0
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fd41 	bl	8007084 <find_volume>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007606:	7dfb      	ldrb	r3, [r7, #23]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20001664 	.word	0x20001664

08007614 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b098      	sub	sp, #96	@ 0x60
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <f_open+0x18>
 8007628:	2309      	movs	r3, #9
 800762a:	e1a9      	b.n	8007980 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007632:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007634:	79fa      	ldrb	r2, [r7, #7]
 8007636:	f107 0110 	add.w	r1, r7, #16
 800763a:	f107 0308 	add.w	r3, r7, #8
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fd20 	bl	8007084 <find_volume>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800764a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 818d 	bne.w	800796e <f_open+0x35a>
		dj.obj.fs = fs;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fc03 	bl	8006e6c <follow_path>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800766c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007670:	2b00      	cmp	r3, #0
 8007672:	d118      	bne.n	80076a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007674:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007678:	b25b      	sxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	da03      	bge.n	8007686 <f_open+0x72>
				res = FR_INVALID_NAME;
 800767e:	2306      	movs	r3, #6
 8007680:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007684:	e00f      	b.n	80076a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	2b01      	cmp	r3, #1
 800768a:	bf8c      	ite	hi
 800768c:	2301      	movhi	r3, #1
 800768e:	2300      	movls	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	f107 0314 	add.w	r3, r7, #20
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fbd8 	bl	8005e50 <chk_lock>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	f003 031c 	and.w	r3, r3, #28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d07f      	beq.n	80077b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80076b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d017      	beq.n	80076e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80076b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d10e      	bne.n	80076de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076c0:	f7fe fc22 	bl	8005f08 <enq_lock>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <f_open+0xc4>
 80076ca:	f107 0314 	add.w	r3, r7, #20
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fb06 	bl	8006ce0 <dir_register>
 80076d4:	4603      	mov	r3, r0
 80076d6:	e000      	b.n	80076da <f_open+0xc6>
 80076d8:	2312      	movs	r3, #18
 80076da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	f043 0308 	orr.w	r3, r3, #8
 80076e4:	71fb      	strb	r3, [r7, #7]
 80076e6:	e010      	b.n	800770a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076e8:	7ebb      	ldrb	r3, [r7, #26]
 80076ea:	f003 0311 	and.w	r3, r3, #17
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <f_open+0xe6>
					res = FR_DENIED;
 80076f2:	2307      	movs	r3, #7
 80076f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076f8:	e007      	b.n	800770a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <f_open+0xf6>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800770a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d168      	bne.n	80077e4 <f_open+0x1d0>
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b00      	cmp	r3, #0
 800771a:	d063      	beq.n	80077e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800771c:	f7fe f866 	bl	80057ec <get_fattime>
 8007720:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007724:	330e      	adds	r3, #14
 8007726:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fae7 	bl	8005cfc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800772e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007730:	3316      	adds	r3, #22
 8007732:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fae1 	bl	8005cfc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800773a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773c:	330b      	adds	r3, #11
 800773e:	2220      	movs	r2, #32
 8007740:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fa35 	bl	8006bb8 <ld_clust>
 800774e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007754:	2200      	movs	r2, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fa4d 	bl	8006bf6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	331c      	adds	r3, #28
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe faca 	bl	8005cfc <st_dword>
					fs->wflag = 1;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2201      	movs	r2, #1
 800776c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d037      	beq.n	80077e4 <f_open+0x1d0>
						dw = fs->winsect;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800777a:	f107 0314 	add.w	r3, r7, #20
 800777e:	2200      	movs	r2, #0
 8007780:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe ff60 	bl	8006648 <remove_chain>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800778e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d126      	bne.n	80077e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fd08 	bl	80061b0 <move_window>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077aa:	3a01      	subs	r2, #1
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	e019      	b.n	80077e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80077b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d115      	bne.n	80077e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80077b8:	7ebb      	ldrb	r3, [r7, #26]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80077c2:	2304      	movs	r3, #4
 80077c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80077c8:	e00c      	b.n	80077e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <f_open+0x1d0>
 80077d4:	7ebb      	ldrb	r3, [r7, #26]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <f_open+0x1d0>
						res = FR_DENIED;
 80077de:	2307      	movs	r3, #7
 80077e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80077e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d126      	bne.n	800783a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	f003 0308 	and.w	r3, r3, #8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	2b01      	cmp	r3, #1
 8007810:	bf8c      	ite	hi
 8007812:	2301      	movhi	r3, #1
 8007814:	2300      	movls	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	f107 0314 	add.w	r3, r7, #20
 800781e:	4611      	mov	r1, r2
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe fb93 	bl	8005f4c <inc_lock>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <f_open+0x226>
 8007834:	2302      	movs	r3, #2
 8007836:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800783a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 8095 	bne.w	800796e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff f9b4 	bl	8006bb8 <ld_clust>
 8007850:	4602      	mov	r2, r0
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007858:	331c      	adds	r3, #28
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fa10 	bl	8005c80 <ld_dword>
 8007860:	4602      	mov	r2, r0
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	88da      	ldrh	r2, [r3, #6]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	79fa      	ldrb	r2, [r7, #7]
 800787e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3330      	adds	r3, #48	@ 0x30
 8007896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fa7a 	bl	8005d96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d060      	beq.n	800796e <f_open+0x35a>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d05c      	beq.n	800796e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	895b      	ldrh	r3, [r3, #10]
 80078c0:	025b      	lsls	r3, r3, #9
 80078c2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80078d0:	e016      	b.n	8007900 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fd25 	bl	8006326 <get_fat>
 80078dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80078de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d802      	bhi.n	80078ea <f_open+0x2d6>
 80078e4:	2302      	movs	r3, #2
 80078e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80078ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f0:	d102      	bne.n	80078f8 <f_open+0x2e4>
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80078f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007900:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007904:	2b00      	cmp	r3, #0
 8007906:	d103      	bne.n	8007910 <f_open+0x2fc>
 8007908:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800790a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800790c:	429a      	cmp	r2, r3
 800790e:	d8e0      	bhi.n	80078d2 <f_open+0x2be>
				}
				fp->clust = clst;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007914:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007916:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800791a:	2b00      	cmp	r3, #0
 800791c:	d127      	bne.n	800796e <f_open+0x35a>
 800791e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007924:	2b00      	cmp	r3, #0
 8007926:	d022      	beq.n	800796e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe fcdb 	bl	80062e8 <clust2sect>
 8007932:	6478      	str	r0, [r7, #68]	@ 0x44
 8007934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <f_open+0x32e>
						res = FR_INT_ERR;
 800793a:	2302      	movs	r3, #2
 800793c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007940:	e015      	b.n	800796e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007944:	0a5a      	lsrs	r2, r3, #9
 8007946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007948:	441a      	add	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	7858      	ldrb	r0, [r3, #1]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1a      	ldr	r2, [r3, #32]
 800795c:	2301      	movs	r3, #1
 800795e:	f7fe f919 	bl	8005b94 <disk_read>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <f_open+0x35a>
 8007968:	2301      	movs	r3, #1
 800796a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800796e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <f_open+0x368>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800797c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007980:	4618      	mov	r0, r3
 8007982:	3760      	adds	r7, #96	@ 0x60
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08c      	sub	sp, #48	@ 0x30
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f107 0210 	add.w	r2, r7, #16
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff fdb7 	bl	800751c <validate>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80079b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <f_write+0x44>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	7d5b      	ldrb	r3, [r3, #21]
 80079c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80079c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <f_write+0x4a>
 80079cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079d0:	e14b      	b.n	8007c6a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	7d1b      	ldrb	r3, [r3, #20]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <f_write+0x5a>
 80079de:	2307      	movs	r3, #7
 80079e0:	e143      	b.n	8007c6a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	699a      	ldr	r2, [r3, #24]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	f080 812d 	bcs.w	8007c4e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	43db      	mvns	r3, r3
 80079fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80079fc:	e127      	b.n	8007c4e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f040 80e3 	bne.w	8007bd2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	0a5b      	lsrs	r3, r3, #9
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	8952      	ldrh	r2, [r2, #10]
 8007a16:	3a01      	subs	r2, #1
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d143      	bne.n	8007aaa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10c      	bne.n	8007a44 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d11a      	bne.n	8007a6c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fe69 	bl	8006712 <create_chain>
 8007a40:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007a42:	e013      	b.n	8007a6c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7fe fef5 	bl	8006842 <clmt_clust>
 8007a58:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007a5a:	e007      	b.n	8007a6c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f7fe fe54 	bl	8006712 <create_chain>
 8007a6a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 80f2 	beq.w	8007c58 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d104      	bne.n	8007a84 <f_write+0xfc>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	755a      	strb	r2, [r3, #21]
 8007a80:	2302      	movs	r3, #2
 8007a82:	e0f2      	b.n	8007c6a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d104      	bne.n	8007a96 <f_write+0x10e>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	755a      	strb	r2, [r3, #21]
 8007a92:	2301      	movs	r3, #1
 8007a94:	e0e9      	b.n	8007c6a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a9a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <f_write+0x122>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aa8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	7d1b      	ldrb	r3, [r3, #20]
 8007aae:	b25b      	sxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	da18      	bge.n	8007ae6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	7858      	ldrb	r0, [r3, #1]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f7fe f886 	bl	8005bd4 <disk_write>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <f_write+0x150>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	755a      	strb	r2, [r3, #21]
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0c8      	b.n	8007c6a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	7d1b      	ldrb	r3, [r3, #20]
 8007adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fe fbfa 	bl	80062e8 <clust2sect>
 8007af4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <f_write+0x17e>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2202      	movs	r2, #2
 8007b00:	755a      	strb	r2, [r3, #21]
 8007b02:	2302      	movs	r3, #2
 8007b04:	e0b1      	b.n	8007c6a <f_write+0x2e2>
			sect += csect;
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0a5b      	lsrs	r3, r3, #9
 8007b12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d03c      	beq.n	8007b94 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	4413      	add	r3, r2
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	8952      	ldrh	r2, [r2, #10]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d905      	bls.n	8007b34 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	895b      	ldrh	r3, [r3, #10]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	7858      	ldrb	r0, [r3, #1]
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	69f9      	ldr	r1, [r7, #28]
 8007b3e:	f7fe f849 	bl	8005bd4 <disk_write>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <f_write+0x1ca>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	755a      	strb	r2, [r3, #21]
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e08b      	b.n	8007c6a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a1a      	ldr	r2, [r3, #32]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	6a3a      	ldr	r2, [r7, #32]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d915      	bls.n	8007b8c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	025b      	lsls	r3, r3, #9
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7fe f8eb 	bl	8005d54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	7d1b      	ldrb	r3, [r3, #20]
 8007b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	025b      	lsls	r3, r3, #9
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007b92:	e03f      	b.n	8007c14 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d016      	beq.n	8007bcc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d210      	bcs.n	8007bcc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	7858      	ldrb	r0, [r3, #1]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	f7fd ffec 	bl	8005b94 <disk_read>
 8007bbc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	755a      	strb	r2, [r3, #21]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e04e      	b.n	8007c6a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007bde:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d901      	bls.n	8007bec <f_write+0x264>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	4413      	add	r3, r2
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bfe:	69f9      	ldr	r1, [r7, #28]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe f8a7 	bl	8005d54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	7d1b      	ldrb	r3, [r3, #20]
 8007c0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	4413      	add	r3, r2
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	441a      	add	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	619a      	str	r2, [r3, #24]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	bf38      	it	cc
 8007c34:	461a      	movcc	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	441a      	add	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f47f aed4 	bne.w	80079fe <f_write+0x76>
 8007c56:	e000      	b.n	8007c5a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	7d1b      	ldrb	r3, [r3, #20]
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3730      	adds	r7, #48	@ 0x30
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fc4a 	bl	800751c <validate>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d168      	bne.n	8007d64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7d1b      	ldrb	r3, [r3, #20]
 8007c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d062      	beq.n	8007d64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7d1b      	ldrb	r3, [r3, #20]
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da15      	bge.n	8007cd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	7858      	ldrb	r0, [r3, #1]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1a      	ldr	r2, [r3, #32]
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f7fd ff8c 	bl	8005bd4 <disk_write>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <f_sync+0x54>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e04f      	b.n	8007d66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7d1b      	ldrb	r3, [r3, #20]
 8007cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007cd4:	f7fd fd8a 	bl	80057ec <get_fattime>
 8007cd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7fe fa64 	bl	80061b0 <move_window>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d138      	bne.n	8007d64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	330b      	adds	r3, #11
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	330b      	adds	r3, #11
 8007d02:	f042 0220 	orr.w	r2, r2, #32
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	461a      	mov	r2, r3
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	f7fe ff6e 	bl	8006bf6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f103 021c 	add.w	r2, r3, #28
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fd ffe8 	bl	8005cfc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3316      	adds	r3, #22
 8007d30:	6939      	ldr	r1, [r7, #16]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fd ffe2 	bl	8005cfc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3312      	adds	r3, #18
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fd ffc1 	bl	8005cc6 <st_word>
					fs->wflag = 1;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2201      	movs	r2, #1
 8007d48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fa5d 	bl	800620c <sync_fs>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7d1b      	ldrb	r3, [r3, #20]
 8007d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff ff7b 	bl	8007c72 <f_sync>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d118      	bne.n	8007db8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f107 0208 	add.w	r2, r7, #8
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fbc4 	bl	800751c <validate>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10c      	bne.n	8007db8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe f960 	bl	8006068 <dec_lock>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b090      	sub	sp, #64	@ 0x40
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f107 0208 	add.w	r2, r7, #8
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fba1 	bl	800751c <validate>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007de0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d103      	bne.n	8007df0 <f_lseek+0x2e>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7d5b      	ldrb	r3, [r3, #21]
 8007dec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007df0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <f_lseek+0x3c>
 8007df8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007dfc:	e1e6      	b.n	80081cc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80d1 	beq.w	8007faa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d15a      	bne.n	8007ec6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	2302      	movs	r3, #2
 8007e22:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d03a      	beq.n	8007ea6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	2300      	movs	r3, #0
 8007e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e44:	3301      	adds	r3, #1
 8007e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fa6a 	bl	8006326 <get_fat>
 8007e52:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d804      	bhi.n	8007e64 <f_lseek+0xa2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	755a      	strb	r2, [r3, #21]
 8007e60:	2302      	movs	r3, #2
 8007e62:	e1b3      	b.n	80081cc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d104      	bne.n	8007e76 <f_lseek+0xb4>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	755a      	strb	r2, [r3, #21]
 8007e72:	2301      	movs	r3, #1
 8007e74:	e1aa      	b.n	80081cc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d0de      	beq.n	8007e3e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d809      	bhi.n	8007e9c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	1d1a      	adds	r2, r3, #4
 8007e8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3c4      	bcc.n	8007e30 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d803      	bhi.n	8007ebe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e184      	b.n	80081c8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007ebe:	2311      	movs	r3, #17
 8007ec0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007ec4:	e180      	b.n	80081c8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d902      	bls.n	8007ed6 <f_lseek+0x114>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8172 	beq.w	80081c8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fe fca9 	bl	8006842 <clmt_clust>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f7fe f9f2 	bl	80062e8 <clust2sect>
 8007f04:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <f_lseek+0x154>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	755a      	strb	r2, [r3, #21]
 8007f12:	2302      	movs	r3, #2
 8007f14:	e15a      	b.n	80081cc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	0a5b      	lsrs	r3, r3, #9
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	8952      	ldrh	r2, [r2, #10]
 8007f20:	3a01      	subs	r2, #1
 8007f22:	4013      	ands	r3, r2
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	4413      	add	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8148 	beq.w	80081c8 <f_lseek+0x406>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	f000 8142 	beq.w	80081c8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7d1b      	ldrb	r3, [r3, #20]
 8007f48:	b25b      	sxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da18      	bge.n	8007f80 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	7858      	ldrb	r0, [r3, #1]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1a      	ldr	r2, [r3, #32]
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f7fd fe39 	bl	8005bd4 <disk_write>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <f_lseek+0x1b0>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	755a      	strb	r2, [r3, #21]
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e12c      	b.n	80081cc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	7d1b      	ldrb	r3, [r3, #20]
 8007f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	7858      	ldrb	r0, [r3, #1]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	f7fd fe01 	bl	8005b94 <disk_read>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <f_lseek+0x1e0>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	755a      	strb	r2, [r3, #21]
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e114      	b.n	80081cc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	621a      	str	r2, [r3, #32]
 8007fa8:	e10e      	b.n	80081c8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d908      	bls.n	8007fc6 <f_lseek+0x204>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7d1b      	ldrb	r3, [r3, #20]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fd4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80a7 	beq.w	800812c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	895b      	ldrh	r3, [r3, #10]
 8007fe2:	025b      	lsls	r3, r3, #9
 8007fe4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	1e5a      	subs	r2, r3, #1
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	1e59      	subs	r1, r3, #1
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008000:	429a      	cmp	r2, r3
 8008002:	d30f      	bcc.n	8008024 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	1e5a      	subs	r2, r3, #1
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	425b      	negs	r3, r3
 800800c:	401a      	ands	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008022:	e022      	b.n	800806a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800802a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802c:	2b00      	cmp	r3, #0
 800802e:	d119      	bne.n	8008064 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fb6c 	bl	8006712 <create_chain>
 800803a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	2b01      	cmp	r3, #1
 8008040:	d104      	bne.n	800804c <f_lseek+0x28a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	755a      	strb	r2, [r3, #21]
 8008048:	2302      	movs	r3, #2
 800804a:	e0bf      	b.n	80081cc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d104      	bne.n	800805e <f_lseek+0x29c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	755a      	strb	r2, [r3, #21]
 800805a:	2301      	movs	r3, #1
 800805c:	e0b6      	b.n	80081cc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008062:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008068:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05d      	beq.n	800812c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008070:	e03a      	b.n	80080e8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	441a      	add	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	7d1b      	ldrb	r3, [r3, #20]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fb3b 	bl	8006712 <create_chain>
 800809c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <f_lseek+0x2f4>
							ofs = 0; break;
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	e022      	b.n	80080f0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe f939 	bl	8006326 <get_fat>
 80080b4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d104      	bne.n	80080c8 <f_lseek+0x306>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	755a      	strb	r2, [r3, #21]
 80080c4:	2301      	movs	r3, #1
 80080c6:	e081      	b.n	80081cc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80080c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d904      	bls.n	80080d8 <f_lseek+0x316>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d304      	bcc.n	80080e2 <f_lseek+0x320>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	755a      	strb	r2, [r3, #21]
 80080de:	2302      	movs	r3, #2
 80080e0:	e074      	b.n	80081cc <f_lseek+0x40a>
					fp->clust = clst;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080e6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d8c0      	bhi.n	8008072 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	441a      	add	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008102:	2b00      	cmp	r3, #0
 8008104:	d012      	beq.n	800812c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe f8ec 	bl	80062e8 <clust2sect>
 8008110:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008114:	2b00      	cmp	r3, #0
 8008116:	d104      	bne.n	8008122 <f_lseek+0x360>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	755a      	strb	r2, [r3, #21]
 800811e:	2302      	movs	r3, #2
 8008120:	e054      	b.n	80081cc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	0a5b      	lsrs	r3, r3, #9
 8008126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008128:	4413      	add	r3, r2
 800812a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699a      	ldr	r2, [r3, #24]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	429a      	cmp	r2, r3
 8008136:	d90a      	bls.n	800814e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7d1b      	ldrb	r3, [r3, #20]
 8008144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008148:	b2da      	uxtb	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	2b00      	cmp	r3, #0
 8008158:	d036      	beq.n	80081c8 <f_lseek+0x406>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008160:	429a      	cmp	r2, r3
 8008162:	d031      	beq.n	80081c8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7d1b      	ldrb	r3, [r3, #20]
 8008168:	b25b      	sxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	da18      	bge.n	80081a0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	7858      	ldrb	r0, [r3, #1]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	2301      	movs	r3, #1
 800817e:	f7fd fd29 	bl	8005bd4 <disk_write>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <f_lseek+0x3d0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	755a      	strb	r2, [r3, #21]
 800818e:	2301      	movs	r3, #1
 8008190:	e01c      	b.n	80081cc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7d1b      	ldrb	r3, [r3, #20]
 8008196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800819a:	b2da      	uxtb	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	7858      	ldrb	r0, [r3, #1]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081aa:	2301      	movs	r3, #1
 80081ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081ae:	f7fd fcf1 	bl	8005b94 <disk_read>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <f_lseek+0x400>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	755a      	strb	r2, [r3, #21]
 80081be:	2301      	movs	r3, #1
 80081c0:	e004      	b.n	80081cc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081c6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80081c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3740      	adds	r7, #64	@ 0x40
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80081e2:	2301      	movs	r3, #1
 80081e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80081ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 80081ec:	7a5b      	ldrb	r3, [r3, #9]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d131      	bne.n	8008258 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80081f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 80081f6:	7a5b      	ldrb	r3, [r3, #9]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 80081fe:	2100      	movs	r1, #0
 8008200:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008202:	4b19      	ldr	r3, [pc, #100]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 8008204:	7a5b      	ldrb	r3, [r3, #9]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	4a17      	ldr	r2, [pc, #92]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008212:	4b15      	ldr	r3, [pc, #84]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 8008214:	7a5b      	ldrb	r3, [r3, #9]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 800821c:	4413      	add	r3, r2
 800821e:	79fa      	ldrb	r2, [r7, #7]
 8008220:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008222:	4b11      	ldr	r3, [pc, #68]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 8008224:	7a5b      	ldrb	r3, [r3, #9]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	b2d1      	uxtb	r1, r2
 800822c:	4a0e      	ldr	r2, [pc, #56]	@ (8008268 <FATFS_LinkDriverEx+0x94>)
 800822e:	7251      	strb	r1, [r2, #9]
 8008230:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008232:	7dbb      	ldrb	r3, [r7, #22]
 8008234:	3330      	adds	r3, #48	@ 0x30
 8008236:	b2da      	uxtb	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	3301      	adds	r3, #1
 8008240:	223a      	movs	r2, #58	@ 0x3a
 8008242:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	3302      	adds	r3, #2
 8008248:	222f      	movs	r2, #47	@ 0x2f
 800824a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3303      	adds	r3, #3
 8008250:	2200      	movs	r2, #0
 8008252:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
}
 800825a:	4618      	mov	r0, r3
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	2000168c 	.word	0x2000168c

0800826c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008276:	2200      	movs	r2, #0
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff ffaa 	bl	80081d4 <FATFS_LinkDriverEx>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <std>:
 800828c:	2300      	movs	r3, #0
 800828e:	b510      	push	{r4, lr}
 8008290:	4604      	mov	r4, r0
 8008292:	e9c0 3300 	strd	r3, r3, [r0]
 8008296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829a:	6083      	str	r3, [r0, #8]
 800829c:	8181      	strh	r1, [r0, #12]
 800829e:	6643      	str	r3, [r0, #100]	@ 0x64
 80082a0:	81c2      	strh	r2, [r0, #14]
 80082a2:	6183      	str	r3, [r0, #24]
 80082a4:	4619      	mov	r1, r3
 80082a6:	2208      	movs	r2, #8
 80082a8:	305c      	adds	r0, #92	@ 0x5c
 80082aa:	f000 f9f9 	bl	80086a0 <memset>
 80082ae:	4b0d      	ldr	r3, [pc, #52]	@ (80082e4 <std+0x58>)
 80082b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80082b2:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <std+0x5c>)
 80082b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <std+0x60>)
 80082b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082ba:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <std+0x64>)
 80082bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <std+0x68>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	429c      	cmp	r4, r3
 80082c4:	d006      	beq.n	80082d4 <std+0x48>
 80082c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082ca:	4294      	cmp	r4, r2
 80082cc:	d002      	beq.n	80082d4 <std+0x48>
 80082ce:	33d0      	adds	r3, #208	@ 0xd0
 80082d0:	429c      	cmp	r4, r3
 80082d2:	d105      	bne.n	80082e0 <std+0x54>
 80082d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082dc:	f000 ba58 	b.w	8008790 <__retarget_lock_init_recursive>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	080084f1 	.word	0x080084f1
 80082e8:	08008513 	.word	0x08008513
 80082ec:	0800854b 	.word	0x0800854b
 80082f0:	0800856f 	.word	0x0800856f
 80082f4:	20001698 	.word	0x20001698

080082f8 <stdio_exit_handler>:
 80082f8:	4a02      	ldr	r2, [pc, #8]	@ (8008304 <stdio_exit_handler+0xc>)
 80082fa:	4903      	ldr	r1, [pc, #12]	@ (8008308 <stdio_exit_handler+0x10>)
 80082fc:	4803      	ldr	r0, [pc, #12]	@ (800830c <stdio_exit_handler+0x14>)
 80082fe:	f000 b869 	b.w	80083d4 <_fwalk_sglue>
 8008302:	bf00      	nop
 8008304:	20000048 	.word	0x20000048
 8008308:	08009031 	.word	0x08009031
 800830c:	20000058 	.word	0x20000058

08008310 <cleanup_stdio>:
 8008310:	6841      	ldr	r1, [r0, #4]
 8008312:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <cleanup_stdio+0x34>)
 8008314:	4299      	cmp	r1, r3
 8008316:	b510      	push	{r4, lr}
 8008318:	4604      	mov	r4, r0
 800831a:	d001      	beq.n	8008320 <cleanup_stdio+0x10>
 800831c:	f000 fe88 	bl	8009030 <_fflush_r>
 8008320:	68a1      	ldr	r1, [r4, #8]
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <cleanup_stdio+0x38>)
 8008324:	4299      	cmp	r1, r3
 8008326:	d002      	beq.n	800832e <cleanup_stdio+0x1e>
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fe81 	bl	8009030 <_fflush_r>
 800832e:	68e1      	ldr	r1, [r4, #12]
 8008330:	4b06      	ldr	r3, [pc, #24]	@ (800834c <cleanup_stdio+0x3c>)
 8008332:	4299      	cmp	r1, r3
 8008334:	d004      	beq.n	8008340 <cleanup_stdio+0x30>
 8008336:	4620      	mov	r0, r4
 8008338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833c:	f000 be78 	b.w	8009030 <_fflush_r>
 8008340:	bd10      	pop	{r4, pc}
 8008342:	bf00      	nop
 8008344:	20001698 	.word	0x20001698
 8008348:	20001700 	.word	0x20001700
 800834c:	20001768 	.word	0x20001768

08008350 <global_stdio_init.part.0>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <global_stdio_init.part.0+0x30>)
 8008354:	4c0b      	ldr	r4, [pc, #44]	@ (8008384 <global_stdio_init.part.0+0x34>)
 8008356:	4a0c      	ldr	r2, [pc, #48]	@ (8008388 <global_stdio_init.part.0+0x38>)
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	4620      	mov	r0, r4
 800835c:	2200      	movs	r2, #0
 800835e:	2104      	movs	r1, #4
 8008360:	f7ff ff94 	bl	800828c <std>
 8008364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008368:	2201      	movs	r2, #1
 800836a:	2109      	movs	r1, #9
 800836c:	f7ff ff8e 	bl	800828c <std>
 8008370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008374:	2202      	movs	r2, #2
 8008376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837a:	2112      	movs	r1, #18
 800837c:	f7ff bf86 	b.w	800828c <std>
 8008380:	200017d0 	.word	0x200017d0
 8008384:	20001698 	.word	0x20001698
 8008388:	080082f9 	.word	0x080082f9

0800838c <__sfp_lock_acquire>:
 800838c:	4801      	ldr	r0, [pc, #4]	@ (8008394 <__sfp_lock_acquire+0x8>)
 800838e:	f000 ba00 	b.w	8008792 <__retarget_lock_acquire_recursive>
 8008392:	bf00      	nop
 8008394:	200017d9 	.word	0x200017d9

08008398 <__sfp_lock_release>:
 8008398:	4801      	ldr	r0, [pc, #4]	@ (80083a0 <__sfp_lock_release+0x8>)
 800839a:	f000 b9fb 	b.w	8008794 <__retarget_lock_release_recursive>
 800839e:	bf00      	nop
 80083a0:	200017d9 	.word	0x200017d9

080083a4 <__sinit>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	4604      	mov	r4, r0
 80083a8:	f7ff fff0 	bl	800838c <__sfp_lock_acquire>
 80083ac:	6a23      	ldr	r3, [r4, #32]
 80083ae:	b11b      	cbz	r3, 80083b8 <__sinit+0x14>
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b4:	f7ff bff0 	b.w	8008398 <__sfp_lock_release>
 80083b8:	4b04      	ldr	r3, [pc, #16]	@ (80083cc <__sinit+0x28>)
 80083ba:	6223      	str	r3, [r4, #32]
 80083bc:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <__sinit+0x2c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f5      	bne.n	80083b0 <__sinit+0xc>
 80083c4:	f7ff ffc4 	bl	8008350 <global_stdio_init.part.0>
 80083c8:	e7f2      	b.n	80083b0 <__sinit+0xc>
 80083ca:	bf00      	nop
 80083cc:	08008311 	.word	0x08008311
 80083d0:	200017d0 	.word	0x200017d0

080083d4 <_fwalk_sglue>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4607      	mov	r7, r0
 80083da:	4688      	mov	r8, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	2600      	movs	r6, #0
 80083e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083e4:	f1b9 0901 	subs.w	r9, r9, #1
 80083e8:	d505      	bpl.n	80083f6 <_fwalk_sglue+0x22>
 80083ea:	6824      	ldr	r4, [r4, #0]
 80083ec:	2c00      	cmp	r4, #0
 80083ee:	d1f7      	bne.n	80083e0 <_fwalk_sglue+0xc>
 80083f0:	4630      	mov	r0, r6
 80083f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d907      	bls.n	800840c <_fwalk_sglue+0x38>
 80083fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008400:	3301      	adds	r3, #1
 8008402:	d003      	beq.n	800840c <_fwalk_sglue+0x38>
 8008404:	4629      	mov	r1, r5
 8008406:	4638      	mov	r0, r7
 8008408:	47c0      	blx	r8
 800840a:	4306      	orrs	r6, r0
 800840c:	3568      	adds	r5, #104	@ 0x68
 800840e:	e7e9      	b.n	80083e4 <_fwalk_sglue+0x10>

08008410 <iprintf>:
 8008410:	b40f      	push	{r0, r1, r2, r3}
 8008412:	b507      	push	{r0, r1, r2, lr}
 8008414:	4906      	ldr	r1, [pc, #24]	@ (8008430 <iprintf+0x20>)
 8008416:	ab04      	add	r3, sp, #16
 8008418:	6808      	ldr	r0, [r1, #0]
 800841a:	f853 2b04 	ldr.w	r2, [r3], #4
 800841e:	6881      	ldr	r1, [r0, #8]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	f000 fadb 	bl	80089dc <_vfiprintf_r>
 8008426:	b003      	add	sp, #12
 8008428:	f85d eb04 	ldr.w	lr, [sp], #4
 800842c:	b004      	add	sp, #16
 800842e:	4770      	bx	lr
 8008430:	20000054 	.word	0x20000054

08008434 <_puts_r>:
 8008434:	6a03      	ldr	r3, [r0, #32]
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	6884      	ldr	r4, [r0, #8]
 800843a:	4605      	mov	r5, r0
 800843c:	460e      	mov	r6, r1
 800843e:	b90b      	cbnz	r3, 8008444 <_puts_r+0x10>
 8008440:	f7ff ffb0 	bl	80083a4 <__sinit>
 8008444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008446:	07db      	lsls	r3, r3, #31
 8008448:	d405      	bmi.n	8008456 <_puts_r+0x22>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	0598      	lsls	r0, r3, #22
 800844e:	d402      	bmi.n	8008456 <_puts_r+0x22>
 8008450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008452:	f000 f99e 	bl	8008792 <__retarget_lock_acquire_recursive>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	0719      	lsls	r1, r3, #28
 800845a:	d502      	bpl.n	8008462 <_puts_r+0x2e>
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d135      	bne.n	80084ce <_puts_r+0x9a>
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f000 f8c5 	bl	80085f4 <__swsetup_r>
 800846a:	b380      	cbz	r0, 80084ce <_puts_r+0x9a>
 800846c:	f04f 35ff 	mov.w	r5, #4294967295
 8008470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008472:	07da      	lsls	r2, r3, #31
 8008474:	d405      	bmi.n	8008482 <_puts_r+0x4e>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	059b      	lsls	r3, r3, #22
 800847a:	d402      	bmi.n	8008482 <_puts_r+0x4e>
 800847c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847e:	f000 f989 	bl	8008794 <__retarget_lock_release_recursive>
 8008482:	4628      	mov	r0, r5
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	2b00      	cmp	r3, #0
 8008488:	da04      	bge.n	8008494 <_puts_r+0x60>
 800848a:	69a2      	ldr	r2, [r4, #24]
 800848c:	429a      	cmp	r2, r3
 800848e:	dc17      	bgt.n	80084c0 <_puts_r+0x8c>
 8008490:	290a      	cmp	r1, #10
 8008492:	d015      	beq.n	80084c0 <_puts_r+0x8c>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	6022      	str	r2, [r4, #0]
 800849a:	7019      	strb	r1, [r3, #0]
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084a2:	3b01      	subs	r3, #1
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d1ed      	bne.n	8008486 <_puts_r+0x52>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da11      	bge.n	80084d2 <_puts_r+0x9e>
 80084ae:	4622      	mov	r2, r4
 80084b0:	210a      	movs	r1, #10
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 f85f 	bl	8008576 <__swbuf_r>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d0d7      	beq.n	800846c <_puts_r+0x38>
 80084bc:	250a      	movs	r5, #10
 80084be:	e7d7      	b.n	8008470 <_puts_r+0x3c>
 80084c0:	4622      	mov	r2, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 f857 	bl	8008576 <__swbuf_r>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d1e7      	bne.n	800849c <_puts_r+0x68>
 80084cc:	e7ce      	b.n	800846c <_puts_r+0x38>
 80084ce:	3e01      	subs	r6, #1
 80084d0:	e7e4      	b.n	800849c <_puts_r+0x68>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	220a      	movs	r2, #10
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	e7ee      	b.n	80084bc <_puts_r+0x88>
	...

080084e0 <puts>:
 80084e0:	4b02      	ldr	r3, [pc, #8]	@ (80084ec <puts+0xc>)
 80084e2:	4601      	mov	r1, r0
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f7ff bfa5 	b.w	8008434 <_puts_r>
 80084ea:	bf00      	nop
 80084ec:	20000054 	.word	0x20000054

080084f0 <__sread>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	460c      	mov	r4, r1
 80084f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f8:	f000 f8fc 	bl	80086f4 <_read_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	bfab      	itete	ge
 8008500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008502:	89a3      	ldrhlt	r3, [r4, #12]
 8008504:	181b      	addge	r3, r3, r0
 8008506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800850a:	bfac      	ite	ge
 800850c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800850e:	81a3      	strhlt	r3, [r4, #12]
 8008510:	bd10      	pop	{r4, pc}

08008512 <__swrite>:
 8008512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008516:	461f      	mov	r7, r3
 8008518:	898b      	ldrh	r3, [r1, #12]
 800851a:	05db      	lsls	r3, r3, #23
 800851c:	4605      	mov	r5, r0
 800851e:	460c      	mov	r4, r1
 8008520:	4616      	mov	r6, r2
 8008522:	d505      	bpl.n	8008530 <__swrite+0x1e>
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	2302      	movs	r3, #2
 800852a:	2200      	movs	r2, #0
 800852c:	f000 f8d0 	bl	80086d0 <_lseek_r>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	4632      	mov	r2, r6
 800853e:	463b      	mov	r3, r7
 8008540:	4628      	mov	r0, r5
 8008542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008546:	f000 b8e7 	b.w	8008718 <_write_r>

0800854a <__sseek>:
 800854a:	b510      	push	{r4, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008552:	f000 f8bd 	bl	80086d0 <_lseek_r>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	bf15      	itete	ne
 800855c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800855e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008566:	81a3      	strheq	r3, [r4, #12]
 8008568:	bf18      	it	ne
 800856a:	81a3      	strhne	r3, [r4, #12]
 800856c:	bd10      	pop	{r4, pc}

0800856e <__sclose>:
 800856e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008572:	f000 b89d 	b.w	80086b0 <_close_r>

08008576 <__swbuf_r>:
 8008576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008578:	460e      	mov	r6, r1
 800857a:	4614      	mov	r4, r2
 800857c:	4605      	mov	r5, r0
 800857e:	b118      	cbz	r0, 8008588 <__swbuf_r+0x12>
 8008580:	6a03      	ldr	r3, [r0, #32]
 8008582:	b90b      	cbnz	r3, 8008588 <__swbuf_r+0x12>
 8008584:	f7ff ff0e 	bl	80083a4 <__sinit>
 8008588:	69a3      	ldr	r3, [r4, #24]
 800858a:	60a3      	str	r3, [r4, #8]
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	071a      	lsls	r2, r3, #28
 8008590:	d501      	bpl.n	8008596 <__swbuf_r+0x20>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	b943      	cbnz	r3, 80085a8 <__swbuf_r+0x32>
 8008596:	4621      	mov	r1, r4
 8008598:	4628      	mov	r0, r5
 800859a:	f000 f82b 	bl	80085f4 <__swsetup_r>
 800859e:	b118      	cbz	r0, 80085a8 <__swbuf_r+0x32>
 80085a0:	f04f 37ff 	mov.w	r7, #4294967295
 80085a4:	4638      	mov	r0, r7
 80085a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	6922      	ldr	r2, [r4, #16]
 80085ac:	1a98      	subs	r0, r3, r2
 80085ae:	6963      	ldr	r3, [r4, #20]
 80085b0:	b2f6      	uxtb	r6, r6
 80085b2:	4283      	cmp	r3, r0
 80085b4:	4637      	mov	r7, r6
 80085b6:	dc05      	bgt.n	80085c4 <__swbuf_r+0x4e>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 fd38 	bl	8009030 <_fflush_r>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1ed      	bne.n	80085a0 <__swbuf_r+0x2a>
 80085c4:	68a3      	ldr	r3, [r4, #8]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	701e      	strb	r6, [r3, #0]
 80085d2:	6962      	ldr	r2, [r4, #20]
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d004      	beq.n	80085e4 <__swbuf_r+0x6e>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	07db      	lsls	r3, r3, #31
 80085de:	d5e1      	bpl.n	80085a4 <__swbuf_r+0x2e>
 80085e0:	2e0a      	cmp	r6, #10
 80085e2:	d1df      	bne.n	80085a4 <__swbuf_r+0x2e>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 fd22 	bl	8009030 <_fflush_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d0d9      	beq.n	80085a4 <__swbuf_r+0x2e>
 80085f0:	e7d6      	b.n	80085a0 <__swbuf_r+0x2a>
	...

080085f4 <__swsetup_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4b29      	ldr	r3, [pc, #164]	@ (800869c <__swsetup_r+0xa8>)
 80085f8:	4605      	mov	r5, r0
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	460c      	mov	r4, r1
 80085fe:	b118      	cbz	r0, 8008608 <__swsetup_r+0x14>
 8008600:	6a03      	ldr	r3, [r0, #32]
 8008602:	b90b      	cbnz	r3, 8008608 <__swsetup_r+0x14>
 8008604:	f7ff fece 	bl	80083a4 <__sinit>
 8008608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	d422      	bmi.n	8008656 <__swsetup_r+0x62>
 8008610:	06da      	lsls	r2, r3, #27
 8008612:	d407      	bmi.n	8008624 <__swsetup_r+0x30>
 8008614:	2209      	movs	r2, #9
 8008616:	602a      	str	r2, [r5, #0]
 8008618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	f04f 30ff 	mov.w	r0, #4294967295
 8008622:	e033      	b.n	800868c <__swsetup_r+0x98>
 8008624:	0758      	lsls	r0, r3, #29
 8008626:	d512      	bpl.n	800864e <__swsetup_r+0x5a>
 8008628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800862a:	b141      	cbz	r1, 800863e <__swsetup_r+0x4a>
 800862c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008630:	4299      	cmp	r1, r3
 8008632:	d002      	beq.n	800863a <__swsetup_r+0x46>
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f8af 	bl	8008798 <_free_r>
 800863a:	2300      	movs	r3, #0
 800863c:	6363      	str	r3, [r4, #52]	@ 0x34
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	2300      	movs	r3, #0
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f043 0308 	orr.w	r3, r3, #8
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	b94b      	cbnz	r3, 800866e <__swsetup_r+0x7a>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008664:	d003      	beq.n	800866e <__swsetup_r+0x7a>
 8008666:	4621      	mov	r1, r4
 8008668:	4628      	mov	r0, r5
 800866a:	f000 fd2f 	bl	80090cc <__smakebuf_r>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	f013 0201 	ands.w	r2, r3, #1
 8008676:	d00a      	beq.n	800868e <__swsetup_r+0x9a>
 8008678:	2200      	movs	r2, #0
 800867a:	60a2      	str	r2, [r4, #8]
 800867c:	6962      	ldr	r2, [r4, #20]
 800867e:	4252      	negs	r2, r2
 8008680:	61a2      	str	r2, [r4, #24]
 8008682:	6922      	ldr	r2, [r4, #16]
 8008684:	b942      	cbnz	r2, 8008698 <__swsetup_r+0xa4>
 8008686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800868a:	d1c5      	bne.n	8008618 <__swsetup_r+0x24>
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	0799      	lsls	r1, r3, #30
 8008690:	bf58      	it	pl
 8008692:	6962      	ldrpl	r2, [r4, #20]
 8008694:	60a2      	str	r2, [r4, #8]
 8008696:	e7f4      	b.n	8008682 <__swsetup_r+0x8e>
 8008698:	2000      	movs	r0, #0
 800869a:	e7f7      	b.n	800868c <__swsetup_r+0x98>
 800869c:	20000054 	.word	0x20000054

080086a0 <memset>:
 80086a0:	4402      	add	r2, r0
 80086a2:	4603      	mov	r3, r0
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d100      	bne.n	80086aa <memset+0xa>
 80086a8:	4770      	bx	lr
 80086aa:	f803 1b01 	strb.w	r1, [r3], #1
 80086ae:	e7f9      	b.n	80086a4 <memset+0x4>

080086b0 <_close_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d06      	ldr	r5, [pc, #24]	@ (80086cc <_close_r+0x1c>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7f8 fd3b 	bl	8001136 <_close>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_close_r+0x1a>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_close_r+0x1a>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	200017d4 	.word	0x200017d4

080086d0 <_lseek_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_lseek_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7f8 fd50 	bl	8001184 <_lseek>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_lseek_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_lseek_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	200017d4 	.word	0x200017d4

080086f4 <_read_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d07      	ldr	r5, [pc, #28]	@ (8008714 <_read_r+0x20>)
 80086f8:	4604      	mov	r4, r0
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	602a      	str	r2, [r5, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f7f8 fcfa 	bl	80010fc <_read>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_read_r+0x1e>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_read_r+0x1e>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	200017d4 	.word	0x200017d4

08008718 <_write_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	@ (8008738 <_write_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7f8 faba 	bl	8000ca0 <_write>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_write_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_write_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	200017d4 	.word	0x200017d4

0800873c <__errno>:
 800873c:	4b01      	ldr	r3, [pc, #4]	@ (8008744 <__errno+0x8>)
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	20000054 	.word	0x20000054

08008748 <__libc_init_array>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4d0d      	ldr	r5, [pc, #52]	@ (8008780 <__libc_init_array+0x38>)
 800874c:	4c0d      	ldr	r4, [pc, #52]	@ (8008784 <__libc_init_array+0x3c>)
 800874e:	1b64      	subs	r4, r4, r5
 8008750:	10a4      	asrs	r4, r4, #2
 8008752:	2600      	movs	r6, #0
 8008754:	42a6      	cmp	r6, r4
 8008756:	d109      	bne.n	800876c <__libc_init_array+0x24>
 8008758:	4d0b      	ldr	r5, [pc, #44]	@ (8008788 <__libc_init_array+0x40>)
 800875a:	4c0c      	ldr	r4, [pc, #48]	@ (800878c <__libc_init_array+0x44>)
 800875c:	f000 fd24 	bl	80091a8 <_init>
 8008760:	1b64      	subs	r4, r4, r5
 8008762:	10a4      	asrs	r4, r4, #2
 8008764:	2600      	movs	r6, #0
 8008766:	42a6      	cmp	r6, r4
 8008768:	d105      	bne.n	8008776 <__libc_init_array+0x2e>
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008770:	4798      	blx	r3
 8008772:	3601      	adds	r6, #1
 8008774:	e7ee      	b.n	8008754 <__libc_init_array+0xc>
 8008776:	f855 3b04 	ldr.w	r3, [r5], #4
 800877a:	4798      	blx	r3
 800877c:	3601      	adds	r6, #1
 800877e:	e7f2      	b.n	8008766 <__libc_init_array+0x1e>
 8008780:	08009420 	.word	0x08009420
 8008784:	08009420 	.word	0x08009420
 8008788:	08009420 	.word	0x08009420
 800878c:	08009424 	.word	0x08009424

08008790 <__retarget_lock_init_recursive>:
 8008790:	4770      	bx	lr

08008792 <__retarget_lock_acquire_recursive>:
 8008792:	4770      	bx	lr

08008794 <__retarget_lock_release_recursive>:
 8008794:	4770      	bx	lr
	...

08008798 <_free_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4605      	mov	r5, r0
 800879c:	2900      	cmp	r1, #0
 800879e:	d041      	beq.n	8008824 <_free_r+0x8c>
 80087a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a4:	1f0c      	subs	r4, r1, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfb8      	it	lt
 80087aa:	18e4      	addlt	r4, r4, r3
 80087ac:	f000 f8e0 	bl	8008970 <__malloc_lock>
 80087b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008828 <_free_r+0x90>)
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	b933      	cbnz	r3, 80087c4 <_free_r+0x2c>
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	6014      	str	r4, [r2, #0]
 80087ba:	4628      	mov	r0, r5
 80087bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c0:	f000 b8dc 	b.w	800897c <__malloc_unlock>
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	d908      	bls.n	80087da <_free_r+0x42>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	1821      	adds	r1, r4, r0
 80087cc:	428b      	cmp	r3, r1
 80087ce:	bf01      	itttt	eq
 80087d0:	6819      	ldreq	r1, [r3, #0]
 80087d2:	685b      	ldreq	r3, [r3, #4]
 80087d4:	1809      	addeq	r1, r1, r0
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	e7ed      	b.n	80087b6 <_free_r+0x1e>
 80087da:	461a      	mov	r2, r3
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b10b      	cbz	r3, 80087e4 <_free_r+0x4c>
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d9fa      	bls.n	80087da <_free_r+0x42>
 80087e4:	6811      	ldr	r1, [r2, #0]
 80087e6:	1850      	adds	r0, r2, r1
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d10b      	bne.n	8008804 <_free_r+0x6c>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	4401      	add	r1, r0
 80087f0:	1850      	adds	r0, r2, r1
 80087f2:	4283      	cmp	r3, r0
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	d1e0      	bne.n	80087ba <_free_r+0x22>
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	6053      	str	r3, [r2, #4]
 80087fe:	4408      	add	r0, r1
 8008800:	6010      	str	r0, [r2, #0]
 8008802:	e7da      	b.n	80087ba <_free_r+0x22>
 8008804:	d902      	bls.n	800880c <_free_r+0x74>
 8008806:	230c      	movs	r3, #12
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	e7d6      	b.n	80087ba <_free_r+0x22>
 800880c:	6820      	ldr	r0, [r4, #0]
 800880e:	1821      	adds	r1, r4, r0
 8008810:	428b      	cmp	r3, r1
 8008812:	bf04      	itt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	bf04      	itt	eq
 800881c:	1809      	addeq	r1, r1, r0
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	6054      	str	r4, [r2, #4]
 8008822:	e7ca      	b.n	80087ba <_free_r+0x22>
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	bf00      	nop
 8008828:	200017e0 	.word	0x200017e0

0800882c <sbrk_aligned>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	4e0f      	ldr	r6, [pc, #60]	@ (800886c <sbrk_aligned+0x40>)
 8008830:	460c      	mov	r4, r1
 8008832:	6831      	ldr	r1, [r6, #0]
 8008834:	4605      	mov	r5, r0
 8008836:	b911      	cbnz	r1, 800883e <sbrk_aligned+0x12>
 8008838:	f000 fca6 	bl	8009188 <_sbrk_r>
 800883c:	6030      	str	r0, [r6, #0]
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f000 fca1 	bl	8009188 <_sbrk_r>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d103      	bne.n	8008852 <sbrk_aligned+0x26>
 800884a:	f04f 34ff 	mov.w	r4, #4294967295
 800884e:	4620      	mov	r0, r4
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	1cc4      	adds	r4, r0, #3
 8008854:	f024 0403 	bic.w	r4, r4, #3
 8008858:	42a0      	cmp	r0, r4
 800885a:	d0f8      	beq.n	800884e <sbrk_aligned+0x22>
 800885c:	1a21      	subs	r1, r4, r0
 800885e:	4628      	mov	r0, r5
 8008860:	f000 fc92 	bl	8009188 <_sbrk_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d1f2      	bne.n	800884e <sbrk_aligned+0x22>
 8008868:	e7ef      	b.n	800884a <sbrk_aligned+0x1e>
 800886a:	bf00      	nop
 800886c:	200017dc 	.word	0x200017dc

08008870 <_malloc_r>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	1ccd      	adds	r5, r1, #3
 8008876:	f025 0503 	bic.w	r5, r5, #3
 800887a:	3508      	adds	r5, #8
 800887c:	2d0c      	cmp	r5, #12
 800887e:	bf38      	it	cc
 8008880:	250c      	movcc	r5, #12
 8008882:	2d00      	cmp	r5, #0
 8008884:	4606      	mov	r6, r0
 8008886:	db01      	blt.n	800888c <_malloc_r+0x1c>
 8008888:	42a9      	cmp	r1, r5
 800888a:	d904      	bls.n	8008896 <_malloc_r+0x26>
 800888c:	230c      	movs	r3, #12
 800888e:	6033      	str	r3, [r6, #0]
 8008890:	2000      	movs	r0, #0
 8008892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800896c <_malloc_r+0xfc>
 800889a:	f000 f869 	bl	8008970 <__malloc_lock>
 800889e:	f8d8 3000 	ldr.w	r3, [r8]
 80088a2:	461c      	mov	r4, r3
 80088a4:	bb44      	cbnz	r4, 80088f8 <_malloc_r+0x88>
 80088a6:	4629      	mov	r1, r5
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff ffbf 	bl	800882c <sbrk_aligned>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	4604      	mov	r4, r0
 80088b2:	d158      	bne.n	8008966 <_malloc_r+0xf6>
 80088b4:	f8d8 4000 	ldr.w	r4, [r8]
 80088b8:	4627      	mov	r7, r4
 80088ba:	2f00      	cmp	r7, #0
 80088bc:	d143      	bne.n	8008946 <_malloc_r+0xd6>
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d04b      	beq.n	800895a <_malloc_r+0xea>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	4639      	mov	r1, r7
 80088c6:	4630      	mov	r0, r6
 80088c8:	eb04 0903 	add.w	r9, r4, r3
 80088cc:	f000 fc5c 	bl	8009188 <_sbrk_r>
 80088d0:	4581      	cmp	r9, r0
 80088d2:	d142      	bne.n	800895a <_malloc_r+0xea>
 80088d4:	6821      	ldr	r1, [r4, #0]
 80088d6:	1a6d      	subs	r5, r5, r1
 80088d8:	4629      	mov	r1, r5
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ffa6 	bl	800882c <sbrk_aligned>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d03a      	beq.n	800895a <_malloc_r+0xea>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	442b      	add	r3, r5
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	f8d8 3000 	ldr.w	r3, [r8]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	bb62      	cbnz	r2, 800894c <_malloc_r+0xdc>
 80088f2:	f8c8 7000 	str.w	r7, [r8]
 80088f6:	e00f      	b.n	8008918 <_malloc_r+0xa8>
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	1b52      	subs	r2, r2, r5
 80088fc:	d420      	bmi.n	8008940 <_malloc_r+0xd0>
 80088fe:	2a0b      	cmp	r2, #11
 8008900:	d917      	bls.n	8008932 <_malloc_r+0xc2>
 8008902:	1961      	adds	r1, r4, r5
 8008904:	42a3      	cmp	r3, r4
 8008906:	6025      	str	r5, [r4, #0]
 8008908:	bf18      	it	ne
 800890a:	6059      	strne	r1, [r3, #4]
 800890c:	6863      	ldr	r3, [r4, #4]
 800890e:	bf08      	it	eq
 8008910:	f8c8 1000 	streq.w	r1, [r8]
 8008914:	5162      	str	r2, [r4, r5]
 8008916:	604b      	str	r3, [r1, #4]
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f82f 	bl	800897c <__malloc_unlock>
 800891e:	f104 000b 	add.w	r0, r4, #11
 8008922:	1d23      	adds	r3, r4, #4
 8008924:	f020 0007 	bic.w	r0, r0, #7
 8008928:	1ac2      	subs	r2, r0, r3
 800892a:	bf1c      	itt	ne
 800892c:	1a1b      	subne	r3, r3, r0
 800892e:	50a3      	strne	r3, [r4, r2]
 8008930:	e7af      	b.n	8008892 <_malloc_r+0x22>
 8008932:	6862      	ldr	r2, [r4, #4]
 8008934:	42a3      	cmp	r3, r4
 8008936:	bf0c      	ite	eq
 8008938:	f8c8 2000 	streq.w	r2, [r8]
 800893c:	605a      	strne	r2, [r3, #4]
 800893e:	e7eb      	b.n	8008918 <_malloc_r+0xa8>
 8008940:	4623      	mov	r3, r4
 8008942:	6864      	ldr	r4, [r4, #4]
 8008944:	e7ae      	b.n	80088a4 <_malloc_r+0x34>
 8008946:	463c      	mov	r4, r7
 8008948:	687f      	ldr	r7, [r7, #4]
 800894a:	e7b6      	b.n	80088ba <_malloc_r+0x4a>
 800894c:	461a      	mov	r2, r3
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	42a3      	cmp	r3, r4
 8008952:	d1fb      	bne.n	800894c <_malloc_r+0xdc>
 8008954:	2300      	movs	r3, #0
 8008956:	6053      	str	r3, [r2, #4]
 8008958:	e7de      	b.n	8008918 <_malloc_r+0xa8>
 800895a:	230c      	movs	r3, #12
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	4630      	mov	r0, r6
 8008960:	f000 f80c 	bl	800897c <__malloc_unlock>
 8008964:	e794      	b.n	8008890 <_malloc_r+0x20>
 8008966:	6005      	str	r5, [r0, #0]
 8008968:	e7d6      	b.n	8008918 <_malloc_r+0xa8>
 800896a:	bf00      	nop
 800896c:	200017e0 	.word	0x200017e0

08008970 <__malloc_lock>:
 8008970:	4801      	ldr	r0, [pc, #4]	@ (8008978 <__malloc_lock+0x8>)
 8008972:	f7ff bf0e 	b.w	8008792 <__retarget_lock_acquire_recursive>
 8008976:	bf00      	nop
 8008978:	200017d8 	.word	0x200017d8

0800897c <__malloc_unlock>:
 800897c:	4801      	ldr	r0, [pc, #4]	@ (8008984 <__malloc_unlock+0x8>)
 800897e:	f7ff bf09 	b.w	8008794 <__retarget_lock_release_recursive>
 8008982:	bf00      	nop
 8008984:	200017d8 	.word	0x200017d8

08008988 <__sfputc_r>:
 8008988:	6893      	ldr	r3, [r2, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	b410      	push	{r4}
 8008990:	6093      	str	r3, [r2, #8]
 8008992:	da08      	bge.n	80089a6 <__sfputc_r+0x1e>
 8008994:	6994      	ldr	r4, [r2, #24]
 8008996:	42a3      	cmp	r3, r4
 8008998:	db01      	blt.n	800899e <__sfputc_r+0x16>
 800899a:	290a      	cmp	r1, #10
 800899c:	d103      	bne.n	80089a6 <__sfputc_r+0x1e>
 800899e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a2:	f7ff bde8 	b.w	8008576 <__swbuf_r>
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	1c58      	adds	r0, r3, #1
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	7019      	strb	r1, [r3, #0]
 80089ae:	4608      	mov	r0, r1
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <__sfputs_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	18d5      	adds	r5, r2, r3
 80089c0:	42ac      	cmp	r4, r5
 80089c2:	d101      	bne.n	80089c8 <__sfputs_r+0x12>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e007      	b.n	80089d8 <__sfputs_r+0x22>
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	463a      	mov	r2, r7
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ffda 	bl	8008988 <__sfputc_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d1f3      	bne.n	80089c0 <__sfputs_r+0xa>
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089dc <_vfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	b09d      	sub	sp, #116	@ 0x74
 80089e4:	4614      	mov	r4, r2
 80089e6:	4698      	mov	r8, r3
 80089e8:	4606      	mov	r6, r0
 80089ea:	b118      	cbz	r0, 80089f4 <_vfiprintf_r+0x18>
 80089ec:	6a03      	ldr	r3, [r0, #32]
 80089ee:	b90b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x18>
 80089f0:	f7ff fcd8 	bl	80083a4 <__sinit>
 80089f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f6:	07d9      	lsls	r1, r3, #31
 80089f8:	d405      	bmi.n	8008a06 <_vfiprintf_r+0x2a>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	059a      	lsls	r2, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_vfiprintf_r+0x2a>
 8008a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a02:	f7ff fec6 	bl	8008792 <__retarget_lock_acquire_recursive>
 8008a06:	89ab      	ldrh	r3, [r5, #12]
 8008a08:	071b      	lsls	r3, r3, #28
 8008a0a:	d501      	bpl.n	8008a10 <_vfiprintf_r+0x34>
 8008a0c:	692b      	ldr	r3, [r5, #16]
 8008a0e:	b99b      	cbnz	r3, 8008a38 <_vfiprintf_r+0x5c>
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff fdee 	bl	80085f4 <__swsetup_r>
 8008a18:	b170      	cbz	r0, 8008a38 <_vfiprintf_r+0x5c>
 8008a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a1c:	07dc      	lsls	r4, r3, #31
 8008a1e:	d504      	bpl.n	8008a2a <_vfiprintf_r+0x4e>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	b01d      	add	sp, #116	@ 0x74
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	0598      	lsls	r0, r3, #22
 8008a2e:	d4f7      	bmi.n	8008a20 <_vfiprintf_r+0x44>
 8008a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a32:	f7ff feaf 	bl	8008794 <__retarget_lock_release_recursive>
 8008a36:	e7f3      	b.n	8008a20 <_vfiprintf_r+0x44>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a46:	2330      	movs	r3, #48	@ 0x30
 8008a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bf8 <_vfiprintf_r+0x21c>
 8008a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	4623      	mov	r3, r4
 8008a56:	469a      	mov	sl, r3
 8008a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_vfiprintf_r+0x86>
 8008a5e:	2a25      	cmp	r2, #37	@ 0x25
 8008a60:	d1f9      	bne.n	8008a56 <_vfiprintf_r+0x7a>
 8008a62:	ebba 0b04 	subs.w	fp, sl, r4
 8008a66:	d00b      	beq.n	8008a80 <_vfiprintf_r+0xa4>
 8008a68:	465b      	mov	r3, fp
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff ffa1 	bl	80089b6 <__sfputs_r>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f000 80a7 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a7c:	445a      	add	r2, fp
 8008a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a80:	f89a 3000 	ldrb.w	r3, [sl]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 809f 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a94:	f10a 0a01 	add.w	sl, sl, #1
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	4853      	ldr	r0, [pc, #332]	@ (8008bf8 <_vfiprintf_r+0x21c>)
 8008aac:	f7f7 fbc8 	bl	8000240 <memchr>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	b9d8      	cbnz	r0, 8008aec <_vfiprintf_r+0x110>
 8008ab4:	06d1      	lsls	r1, r2, #27
 8008ab6:	bf44      	itt	mi
 8008ab8:	2320      	movmi	r3, #32
 8008aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008abe:	0713      	lsls	r3, r2, #28
 8008ac0:	bf44      	itt	mi
 8008ac2:	232b      	movmi	r3, #43	@ 0x2b
 8008ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8008acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ace:	d015      	beq.n	8008afc <_vfiprintf_r+0x120>
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	4654      	mov	r4, sl
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f04f 0c0a 	mov.w	ip, #10
 8008ada:	4621      	mov	r1, r4
 8008adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae0:	3b30      	subs	r3, #48	@ 0x30
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d94b      	bls.n	8008b7e <_vfiprintf_r+0x1a2>
 8008ae6:	b1b0      	cbz	r0, 8008b16 <_vfiprintf_r+0x13a>
 8008ae8:	9207      	str	r2, [sp, #28]
 8008aea:	e014      	b.n	8008b16 <_vfiprintf_r+0x13a>
 8008aec:	eba0 0308 	sub.w	r3, r0, r8
 8008af0:	fa09 f303 	lsl.w	r3, r9, r3
 8008af4:	4313      	orrs	r3, r2
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	46a2      	mov	sl, r4
 8008afa:	e7d2      	b.n	8008aa2 <_vfiprintf_r+0xc6>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9103      	str	r1, [sp, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfbb      	ittet	lt
 8008b08:	425b      	neglt	r3, r3
 8008b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0e:	9307      	strge	r3, [sp, #28]
 8008b10:	9307      	strlt	r3, [sp, #28]
 8008b12:	bfb8      	it	lt
 8008b14:	9204      	strlt	r2, [sp, #16]
 8008b16:	7823      	ldrb	r3, [r4, #0]
 8008b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b1a:	d10a      	bne.n	8008b32 <_vfiprintf_r+0x156>
 8008b1c:	7863      	ldrb	r3, [r4, #1]
 8008b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b20:	d132      	bne.n	8008b88 <_vfiprintf_r+0x1ac>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	1d1a      	adds	r2, r3, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	9203      	str	r2, [sp, #12]
 8008b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b2e:	3402      	adds	r4, #2
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c08 <_vfiprintf_r+0x22c>
 8008b36:	7821      	ldrb	r1, [r4, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	f7f7 fb80 	bl	8000240 <memchr>
 8008b40:	b138      	cbz	r0, 8008b52 <_vfiprintf_r+0x176>
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	eba0 000a 	sub.w	r0, r0, sl
 8008b48:	2240      	movs	r2, #64	@ 0x40
 8008b4a:	4082      	lsls	r2, r0
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	3401      	adds	r4, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4829      	ldr	r0, [pc, #164]	@ (8008bfc <_vfiprintf_r+0x220>)
 8008b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	f7f7 fb6f 	bl	8000240 <memchr>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d03f      	beq.n	8008be6 <_vfiprintf_r+0x20a>
 8008b66:	4b26      	ldr	r3, [pc, #152]	@ (8008c00 <_vfiprintf_r+0x224>)
 8008b68:	bb1b      	cbnz	r3, 8008bb2 <_vfiprintf_r+0x1d6>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	3308      	adds	r3, #8
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	443b      	add	r3, r7
 8008b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7c:	e76a      	b.n	8008a54 <_vfiprintf_r+0x78>
 8008b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b82:	460c      	mov	r4, r1
 8008b84:	2001      	movs	r0, #1
 8008b86:	e7a8      	b.n	8008ada <_vfiprintf_r+0xfe>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	3401      	adds	r4, #1
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f04f 0c0a 	mov.w	ip, #10
 8008b94:	4620      	mov	r0, r4
 8008b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b9a:	3a30      	subs	r2, #48	@ 0x30
 8008b9c:	2a09      	cmp	r2, #9
 8008b9e:	d903      	bls.n	8008ba8 <_vfiprintf_r+0x1cc>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0c6      	beq.n	8008b32 <_vfiprintf_r+0x156>
 8008ba4:	9105      	str	r1, [sp, #20]
 8008ba6:	e7c4      	b.n	8008b32 <_vfiprintf_r+0x156>
 8008ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bac:	4604      	mov	r4, r0
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e7f0      	b.n	8008b94 <_vfiprintf_r+0x1b8>
 8008bb2:	ab03      	add	r3, sp, #12
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <_vfiprintf_r+0x228>)
 8008bba:	a904      	add	r1, sp, #16
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f3af 8000 	nop.w
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	1c78      	adds	r0, r7, #1
 8008bc6:	d1d6      	bne.n	8008b76 <_vfiprintf_r+0x19a>
 8008bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bca:	07d9      	lsls	r1, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_vfiprintf_r+0x1fe>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	059a      	lsls	r2, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_vfiprintf_r+0x1fe>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd6:	f7ff fddd 	bl	8008794 <__retarget_lock_release_recursive>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	065b      	lsls	r3, r3, #25
 8008bde:	f53f af1f 	bmi.w	8008a20 <_vfiprintf_r+0x44>
 8008be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008be4:	e71e      	b.n	8008a24 <_vfiprintf_r+0x48>
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462a      	mov	r2, r5
 8008bec:	4b05      	ldr	r3, [pc, #20]	@ (8008c04 <_vfiprintf_r+0x228>)
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f000 f879 	bl	8008ce8 <_printf_i>
 8008bf6:	e7e4      	b.n	8008bc2 <_vfiprintf_r+0x1e6>
 8008bf8:	080093e4 	.word	0x080093e4
 8008bfc:	080093ee 	.word	0x080093ee
 8008c00:	00000000 	.word	0x00000000
 8008c04:	080089b7 	.word	0x080089b7
 8008c08:	080093ea 	.word	0x080093ea

08008c0c <_printf_common>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	4616      	mov	r6, r2
 8008c12:	4698      	mov	r8, r3
 8008c14:	688a      	ldr	r2, [r1, #8]
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bfb8      	it	lt
 8008c20:	4613      	movlt	r3, r2
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c28:	4607      	mov	r7, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b10a      	cbz	r2, 8008c32 <_printf_common+0x26>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	6833      	ldrmi	r3, [r6, #0]
 8008c3a:	3302      	addmi	r3, #2
 8008c3c:	6033      	strmi	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	f015 0506 	ands.w	r5, r5, #6
 8008c44:	d106      	bne.n	8008c54 <_printf_common+0x48>
 8008c46:	f104 0a19 	add.w	sl, r4, #25
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	6832      	ldr	r2, [r6, #0]
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc26      	bgt.n	8008ca2 <_printf_common+0x96>
 8008c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	3b00      	subs	r3, #0
 8008c5c:	bf18      	it	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	0692      	lsls	r2, r2, #26
 8008c62:	d42b      	bmi.n	8008cbc <_printf_common+0xb0>
 8008c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c68:	4641      	mov	r1, r8
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c8      	blx	r9
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d01e      	beq.n	8008cb0 <_printf_common+0xa4>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	6922      	ldr	r2, [r4, #16]
 8008c76:	f003 0306 	and.w	r3, r3, #6
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	bf02      	ittt	eq
 8008c7e:	68e5      	ldreq	r5, [r4, #12]
 8008c80:	6833      	ldreq	r3, [r6, #0]
 8008c82:	1aed      	subeq	r5, r5, r3
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	2600      	movs	r6, #0
 8008c98:	341a      	adds	r4, #26
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	d11a      	bne.n	8008cd4 <_printf_common+0xc8>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e008      	b.n	8008cb4 <_printf_common+0xa8>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4641      	mov	r1, r8
 8008ca8:	4638      	mov	r0, r7
 8008caa:	47c8      	blx	r9
 8008cac:	3001      	adds	r0, #1
 8008cae:	d103      	bne.n	8008cb8 <_printf_common+0xac>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7c6      	b.n	8008c4a <_printf_common+0x3e>
 8008cbc:	18e1      	adds	r1, r4, r3
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	2030      	movs	r0, #48	@ 0x30
 8008cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cc6:	4422      	add	r2, r4
 8008cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	e7c7      	b.n	8008c64 <_printf_common+0x58>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c8      	blx	r9
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d0e6      	beq.n	8008cb0 <_printf_common+0xa4>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7d9      	b.n	8008c9a <_printf_common+0x8e>
	...

08008ce8 <_printf_i>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	7e0f      	ldrb	r7, [r1, #24]
 8008cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cf0:	2f78      	cmp	r7, #120	@ 0x78
 8008cf2:	4691      	mov	r9, r2
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cfe:	d807      	bhi.n	8008d10 <_printf_i+0x28>
 8008d00:	2f62      	cmp	r7, #98	@ 0x62
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x32>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f000 80d2 	beq.w	8008eae <_printf_i+0x1c6>
 8008d0a:	2f58      	cmp	r7, #88	@ 0x58
 8008d0c:	f000 80b9 	beq.w	8008e82 <_printf_i+0x19a>
 8008d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d18:	e03a      	b.n	8008d90 <_printf_i+0xa8>
 8008d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	d8f6      	bhi.n	8008d10 <_printf_i+0x28>
 8008d22:	a101      	add	r1, pc, #4	@ (adr r1, 8008d28 <_printf_i+0x40>)
 8008d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d11 	.word	0x08008d11
 8008d34:	08008d11 	.word	0x08008d11
 8008d38:	08008d11 	.word	0x08008d11
 8008d3c:	08008d11 	.word	0x08008d11
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d11 	.word	0x08008d11
 8008d48:	08008d11 	.word	0x08008d11
 8008d4c:	08008d11 	.word	0x08008d11
 8008d50:	08008d11 	.word	0x08008d11
 8008d54:	08008e95 	.word	0x08008e95
 8008d58:	08008dbf 	.word	0x08008dbf
 8008d5c:	08008e4f 	.word	0x08008e4f
 8008d60:	08008d11 	.word	0x08008d11
 8008d64:	08008d11 	.word	0x08008d11
 8008d68:	08008eb7 	.word	0x08008eb7
 8008d6c:	08008d11 	.word	0x08008d11
 8008d70:	08008dbf 	.word	0x08008dbf
 8008d74:	08008d11 	.word	0x08008d11
 8008d78:	08008d11 	.word	0x08008d11
 8008d7c:	08008e57 	.word	0x08008e57
 8008d80:	6833      	ldr	r3, [r6, #0]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6032      	str	r2, [r6, #0]
 8008d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d90:	2301      	movs	r3, #1
 8008d92:	e09d      	b.n	8008ed0 <_printf_i+0x1e8>
 8008d94:	6833      	ldr	r3, [r6, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6031      	str	r1, [r6, #0]
 8008d9c:	0606      	lsls	r6, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xbc>
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	e003      	b.n	8008dac <_printf_i+0xc4>
 8008da4:	0645      	lsls	r5, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xb8>
 8008da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	da03      	bge.n	8008db8 <_printf_i+0xd0>
 8008db0:	232d      	movs	r3, #45	@ 0x2d
 8008db2:	426d      	negs	r5, r5
 8008db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008db8:	4859      	ldr	r0, [pc, #356]	@ (8008f20 <_printf_i+0x238>)
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e011      	b.n	8008de2 <_printf_i+0xfa>
 8008dbe:	6821      	ldr	r1, [r4, #0]
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	0608      	lsls	r0, r1, #24
 8008dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dc8:	d402      	bmi.n	8008dd0 <_printf_i+0xe8>
 8008dca:	0649      	lsls	r1, r1, #25
 8008dcc:	bf48      	it	mi
 8008dce:	b2ad      	uxthmi	r5, r5
 8008dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dd2:	4853      	ldr	r0, [pc, #332]	@ (8008f20 <_printf_i+0x238>)
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	bf14      	ite	ne
 8008dd8:	230a      	movne	r3, #10
 8008dda:	2308      	moveq	r3, #8
 8008ddc:	2100      	movs	r1, #0
 8008dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008de2:	6866      	ldr	r6, [r4, #4]
 8008de4:	60a6      	str	r6, [r4, #8]
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	bfa2      	ittt	ge
 8008dea:	6821      	ldrge	r1, [r4, #0]
 8008dec:	f021 0104 	bicge.w	r1, r1, #4
 8008df0:	6021      	strge	r1, [r4, #0]
 8008df2:	b90d      	cbnz	r5, 8008df8 <_printf_i+0x110>
 8008df4:	2e00      	cmp	r6, #0
 8008df6:	d04b      	beq.n	8008e90 <_printf_i+0x1a8>
 8008df8:	4616      	mov	r6, r2
 8008dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8008e02:	5dc7      	ldrb	r7, [r0, r7]
 8008e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e08:	462f      	mov	r7, r5
 8008e0a:	42bb      	cmp	r3, r7
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	d9f4      	bls.n	8008dfa <_printf_i+0x112>
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d10b      	bne.n	8008e2c <_printf_i+0x144>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	07df      	lsls	r7, r3, #31
 8008e18:	d508      	bpl.n	8008e2c <_printf_i+0x144>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6861      	ldr	r1, [r4, #4]
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	bfde      	ittt	le
 8008e22:	2330      	movle	r3, #48	@ 0x30
 8008e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e2c:	1b92      	subs	r2, r2, r6
 8008e2e:	6122      	str	r2, [r4, #16]
 8008e30:	f8cd a000 	str.w	sl, [sp]
 8008e34:	464b      	mov	r3, r9
 8008e36:	aa03      	add	r2, sp, #12
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	f7ff fee6 	bl	8008c0c <_printf_common>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d14a      	bne.n	8008eda <_printf_i+0x1f2>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	b004      	add	sp, #16
 8008e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	4833      	ldr	r0, [pc, #204]	@ (8008f24 <_printf_i+0x23c>)
 8008e58:	2778      	movs	r7, #120	@ 0x78
 8008e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	6831      	ldr	r1, [r6, #0]
 8008e62:	061f      	lsls	r7, r3, #24
 8008e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e68:	d402      	bmi.n	8008e70 <_printf_i+0x188>
 8008e6a:	065f      	lsls	r7, r3, #25
 8008e6c:	bf48      	it	mi
 8008e6e:	b2ad      	uxthmi	r5, r5
 8008e70:	6031      	str	r1, [r6, #0]
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	bf44      	itt	mi
 8008e76:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7a:	6023      	strmi	r3, [r4, #0]
 8008e7c:	b11d      	cbz	r5, 8008e86 <_printf_i+0x19e>
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e7ac      	b.n	8008ddc <_printf_i+0xf4>
 8008e82:	4827      	ldr	r0, [pc, #156]	@ (8008f20 <_printf_i+0x238>)
 8008e84:	e7e9      	b.n	8008e5a <_printf_i+0x172>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	f023 0320 	bic.w	r3, r3, #32
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	e7f6      	b.n	8008e7e <_printf_i+0x196>
 8008e90:	4616      	mov	r6, r2
 8008e92:	e7bd      	b.n	8008e10 <_printf_i+0x128>
 8008e94:	6833      	ldr	r3, [r6, #0]
 8008e96:	6825      	ldr	r5, [r4, #0]
 8008e98:	6961      	ldr	r1, [r4, #20]
 8008e9a:	1d18      	adds	r0, r3, #4
 8008e9c:	6030      	str	r0, [r6, #0]
 8008e9e:	062e      	lsls	r6, r5, #24
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	d501      	bpl.n	8008ea8 <_printf_i+0x1c0>
 8008ea4:	6019      	str	r1, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <_printf_i+0x1c6>
 8008ea8:	0668      	lsls	r0, r5, #25
 8008eaa:	d5fb      	bpl.n	8008ea4 <_printf_i+0x1bc>
 8008eac:	8019      	strh	r1, [r3, #0]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	4616      	mov	r6, r2
 8008eb4:	e7bc      	b.n	8008e30 <_printf_i+0x148>
 8008eb6:	6833      	ldr	r3, [r6, #0]
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	6032      	str	r2, [r6, #0]
 8008ebc:	681e      	ldr	r6, [r3, #0]
 8008ebe:	6862      	ldr	r2, [r4, #4]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7f7 f9bc 	bl	8000240 <memchr>
 8008ec8:	b108      	cbz	r0, 8008ece <_printf_i+0x1e6>
 8008eca:	1b80      	subs	r0, r0, r6
 8008ecc:	6060      	str	r0, [r4, #4]
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ed8:	e7aa      	b.n	8008e30 <_printf_i+0x148>
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	4632      	mov	r2, r6
 8008ede:	4649      	mov	r1, r9
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	47d0      	blx	sl
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d0ad      	beq.n	8008e44 <_printf_i+0x15c>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	079b      	lsls	r3, r3, #30
 8008eec:	d413      	bmi.n	8008f16 <_printf_i+0x22e>
 8008eee:	68e0      	ldr	r0, [r4, #12]
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	bfb8      	it	lt
 8008ef6:	4618      	movlt	r0, r3
 8008ef8:	e7a6      	b.n	8008e48 <_printf_i+0x160>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4632      	mov	r2, r6
 8008efe:	4649      	mov	r1, r9
 8008f00:	4640      	mov	r0, r8
 8008f02:	47d0      	blx	sl
 8008f04:	3001      	adds	r0, #1
 8008f06:	d09d      	beq.n	8008e44 <_printf_i+0x15c>
 8008f08:	3501      	adds	r5, #1
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	9903      	ldr	r1, [sp, #12]
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dcf2      	bgt.n	8008efa <_printf_i+0x212>
 8008f14:	e7eb      	b.n	8008eee <_printf_i+0x206>
 8008f16:	2500      	movs	r5, #0
 8008f18:	f104 0619 	add.w	r6, r4, #25
 8008f1c:	e7f5      	b.n	8008f0a <_printf_i+0x222>
 8008f1e:	bf00      	nop
 8008f20:	080093f5 	.word	0x080093f5
 8008f24:	08009406 	.word	0x08009406

08008f28 <__sflush_r>:
 8008f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f30:	0716      	lsls	r6, r2, #28
 8008f32:	4605      	mov	r5, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	d454      	bmi.n	8008fe2 <__sflush_r+0xba>
 8008f38:	684b      	ldr	r3, [r1, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dc02      	bgt.n	8008f44 <__sflush_r+0x1c>
 8008f3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd48      	ble.n	8008fd6 <__sflush_r+0xae>
 8008f44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d045      	beq.n	8008fd6 <__sflush_r+0xae>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f50:	682f      	ldr	r7, [r5, #0]
 8008f52:	6a21      	ldr	r1, [r4, #32]
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	d030      	beq.n	8008fba <__sflush_r+0x92>
 8008f58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	0759      	lsls	r1, r3, #29
 8008f5e:	d505      	bpl.n	8008f6c <__sflush_r+0x44>
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f66:	b10b      	cbz	r3, 8008f6c <__sflush_r+0x44>
 8008f68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b0      	blx	r6
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	d106      	bne.n	8008f8a <__sflush_r+0x62>
 8008f7c:	6829      	ldr	r1, [r5, #0]
 8008f7e:	291d      	cmp	r1, #29
 8008f80:	d82b      	bhi.n	8008fda <__sflush_r+0xb2>
 8008f82:	4a2a      	ldr	r2, [pc, #168]	@ (800902c <__sflush_r+0x104>)
 8008f84:	410a      	asrs	r2, r1
 8008f86:	07d6      	lsls	r6, r2, #31
 8008f88:	d427      	bmi.n	8008fda <__sflush_r+0xb2>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	04d9      	lsls	r1, r3, #19
 8008f90:	6922      	ldr	r2, [r4, #16]
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	d504      	bpl.n	8008fa0 <__sflush_r+0x78>
 8008f96:	1c42      	adds	r2, r0, #1
 8008f98:	d101      	bne.n	8008f9e <__sflush_r+0x76>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b903      	cbnz	r3, 8008fa0 <__sflush_r+0x78>
 8008f9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fa2:	602f      	str	r7, [r5, #0]
 8008fa4:	b1b9      	cbz	r1, 8008fd6 <__sflush_r+0xae>
 8008fa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008faa:	4299      	cmp	r1, r3
 8008fac:	d002      	beq.n	8008fb4 <__sflush_r+0x8c>
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f7ff fbf2 	bl	8008798 <_free_r>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb8:	e00d      	b.n	8008fd6 <__sflush_r+0xae>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b0      	blx	r6
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	1c50      	adds	r0, r2, #1
 8008fc4:	d1c9      	bne.n	8008f5a <__sflush_r+0x32>
 8008fc6:	682b      	ldr	r3, [r5, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0c6      	beq.n	8008f5a <__sflush_r+0x32>
 8008fcc:	2b1d      	cmp	r3, #29
 8008fce:	d001      	beq.n	8008fd4 <__sflush_r+0xac>
 8008fd0:	2b16      	cmp	r3, #22
 8008fd2:	d11e      	bne.n	8009012 <__sflush_r+0xea>
 8008fd4:	602f      	str	r7, [r5, #0]
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e022      	b.n	8009020 <__sflush_r+0xf8>
 8008fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fde:	b21b      	sxth	r3, r3
 8008fe0:	e01b      	b.n	800901a <__sflush_r+0xf2>
 8008fe2:	690f      	ldr	r7, [r1, #16]
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	d0f6      	beq.n	8008fd6 <__sflush_r+0xae>
 8008fe8:	0793      	lsls	r3, r2, #30
 8008fea:	680e      	ldr	r6, [r1, #0]
 8008fec:	bf08      	it	eq
 8008fee:	694b      	ldreq	r3, [r1, #20]
 8008ff0:	600f      	str	r7, [r1, #0]
 8008ff2:	bf18      	it	ne
 8008ff4:	2300      	movne	r3, #0
 8008ff6:	eba6 0807 	sub.w	r8, r6, r7
 8008ffa:	608b      	str	r3, [r1, #8]
 8008ffc:	f1b8 0f00 	cmp.w	r8, #0
 8009000:	dde9      	ble.n	8008fd6 <__sflush_r+0xae>
 8009002:	6a21      	ldr	r1, [r4, #32]
 8009004:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009006:	4643      	mov	r3, r8
 8009008:	463a      	mov	r2, r7
 800900a:	4628      	mov	r0, r5
 800900c:	47b0      	blx	r6
 800900e:	2800      	cmp	r0, #0
 8009010:	dc08      	bgt.n	8009024 <__sflush_r+0xfc>
 8009012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	4407      	add	r7, r0
 8009026:	eba8 0800 	sub.w	r8, r8, r0
 800902a:	e7e7      	b.n	8008ffc <__sflush_r+0xd4>
 800902c:	dfbffffe 	.word	0xdfbffffe

08009030 <_fflush_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	690b      	ldr	r3, [r1, #16]
 8009034:	4605      	mov	r5, r0
 8009036:	460c      	mov	r4, r1
 8009038:	b913      	cbnz	r3, 8009040 <_fflush_r+0x10>
 800903a:	2500      	movs	r5, #0
 800903c:	4628      	mov	r0, r5
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	b118      	cbz	r0, 800904a <_fflush_r+0x1a>
 8009042:	6a03      	ldr	r3, [r0, #32]
 8009044:	b90b      	cbnz	r3, 800904a <_fflush_r+0x1a>
 8009046:	f7ff f9ad 	bl	80083a4 <__sinit>
 800904a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f3      	beq.n	800903a <_fflush_r+0xa>
 8009052:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009054:	07d0      	lsls	r0, r2, #31
 8009056:	d404      	bmi.n	8009062 <_fflush_r+0x32>
 8009058:	0599      	lsls	r1, r3, #22
 800905a:	d402      	bmi.n	8009062 <_fflush_r+0x32>
 800905c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800905e:	f7ff fb98 	bl	8008792 <__retarget_lock_acquire_recursive>
 8009062:	4628      	mov	r0, r5
 8009064:	4621      	mov	r1, r4
 8009066:	f7ff ff5f 	bl	8008f28 <__sflush_r>
 800906a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800906c:	07da      	lsls	r2, r3, #31
 800906e:	4605      	mov	r5, r0
 8009070:	d4e4      	bmi.n	800903c <_fflush_r+0xc>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d4e1      	bmi.n	800903c <_fflush_r+0xc>
 8009078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907a:	f7ff fb8b 	bl	8008794 <__retarget_lock_release_recursive>
 800907e:	e7dd      	b.n	800903c <_fflush_r+0xc>

08009080 <__swhatbuf_r>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009088:	2900      	cmp	r1, #0
 800908a:	b096      	sub	sp, #88	@ 0x58
 800908c:	4615      	mov	r5, r2
 800908e:	461e      	mov	r6, r3
 8009090:	da0d      	bge.n	80090ae <__swhatbuf_r+0x2e>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009098:	f04f 0100 	mov.w	r1, #0
 800909c:	bf14      	ite	ne
 800909e:	2340      	movne	r3, #64	@ 0x40
 80090a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090a4:	2000      	movs	r0, #0
 80090a6:	6031      	str	r1, [r6, #0]
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	b016      	add	sp, #88	@ 0x58
 80090ac:	bd70      	pop	{r4, r5, r6, pc}
 80090ae:	466a      	mov	r2, sp
 80090b0:	f000 f848 	bl	8009144 <_fstat_r>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	dbec      	blt.n	8009092 <__swhatbuf_r+0x12>
 80090b8:	9901      	ldr	r1, [sp, #4]
 80090ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090c2:	4259      	negs	r1, r3
 80090c4:	4159      	adcs	r1, r3
 80090c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ca:	e7eb      	b.n	80090a4 <__swhatbuf_r+0x24>

080090cc <__smakebuf_r>:
 80090cc:	898b      	ldrh	r3, [r1, #12]
 80090ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d0:	079d      	lsls	r5, r3, #30
 80090d2:	4606      	mov	r6, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	d507      	bpl.n	80090e8 <__smakebuf_r+0x1c>
 80090d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	2301      	movs	r3, #1
 80090e2:	6163      	str	r3, [r4, #20]
 80090e4:	b003      	add	sp, #12
 80090e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e8:	ab01      	add	r3, sp, #4
 80090ea:	466a      	mov	r2, sp
 80090ec:	f7ff ffc8 	bl	8009080 <__swhatbuf_r>
 80090f0:	9f00      	ldr	r7, [sp, #0]
 80090f2:	4605      	mov	r5, r0
 80090f4:	4639      	mov	r1, r7
 80090f6:	4630      	mov	r0, r6
 80090f8:	f7ff fbba 	bl	8008870 <_malloc_r>
 80090fc:	b948      	cbnz	r0, 8009112 <__smakebuf_r+0x46>
 80090fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009102:	059a      	lsls	r2, r3, #22
 8009104:	d4ee      	bmi.n	80090e4 <__smakebuf_r+0x18>
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	f043 0302 	orr.w	r3, r3, #2
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	e7e2      	b.n	80090d8 <__smakebuf_r+0xc>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	6020      	str	r0, [r4, #0]
 8009116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009122:	b15b      	cbz	r3, 800913c <__smakebuf_r+0x70>
 8009124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009128:	4630      	mov	r0, r6
 800912a:	f000 f81d 	bl	8009168 <_isatty_r>
 800912e:	b128      	cbz	r0, 800913c <__smakebuf_r+0x70>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	431d      	orrs	r5, r3
 8009140:	81a5      	strh	r5, [r4, #12]
 8009142:	e7cf      	b.n	80090e4 <__smakebuf_r+0x18>

08009144 <_fstat_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	@ (8009164 <_fstat_r+0x20>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7f7 fffc 	bl	800114e <_fstat>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d102      	bne.n	8009160 <_fstat_r+0x1c>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	b103      	cbz	r3, 8009160 <_fstat_r+0x1c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	200017d4 	.word	0x200017d4

08009168 <_isatty_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d06      	ldr	r5, [pc, #24]	@ (8009184 <_isatty_r+0x1c>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f7 fffb 	bl	800116e <_isatty>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_isatty_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_isatty_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	200017d4 	.word	0x200017d4

08009188 <_sbrk_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	@ (80091a4 <_sbrk_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f8 f804 	bl	80011a0 <_sbrk>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_sbrk_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_sbrk_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	200017d4 	.word	0x200017d4

080091a8 <_init>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr

080091b4 <_fini>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr
