
MAAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a120  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800a320  0800a320  0000b320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a98c  0800a98c  0000c0bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a98c  0800a98c  0000b98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a994  0800a994  0000c0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a994  0800a994  0000b994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a998  0800a998  0000b998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800a99c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000357c  200000bc  0800aa58  0000c0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003638  0800aa58  0000c638  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d91  00000000  00000000  0000c0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003110  00000000  00000000  0001ee7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00021f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e72  00000000  00000000  00023258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aecf  00000000  00000000  000240ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c93  00000000  00000000  0004ef99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6d4  00000000  00000000  00068c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005598  00000000  00000000  00166344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0016b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000bc 	.word	0x200000bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a308 	.word	0x0800a308

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c0 	.word	0x200000c0
 800023c:	0800a308 	.word	0x0800a308

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sd_card_init>:
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0x7d, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x80, 0xa9, 0x03, 0x00};
static uint32_t wav_file_size;
static uint8_t first_time = 0;

void sd_card_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	uint8_t file_name[] = "test.txt";
	uint8_t temp_number;
	uint8_t test_text[] = "Hola, esto es un texto de prueba.";
	*/
	// montando una tarjeta SD
	sd_result = f_mount(&sdCard,"",0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <sd_card_init+0x38>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <sd_card_init+0x3c>)
 80005da:	f007 ff77 	bl	80084cc <f_mount>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <sd_card_init+0x40>)
 80005e4:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <sd_card_init+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <sd_card_init+0x2e>
		printf("Error montando la tarjeta SD: %d \n", sd_result);
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <sd_card_init+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <sd_card_init+0x44>)
 80005f6:	f008 ffbb 	bl	8009570 <iprintf>
		while(1);
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <sd_card_init+0x2a>
	}
	else {
		printf("Tarjeta SD montada \n");
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <sd_card_init+0x48>)
 8000600:	f009 f81e 	bl	8009640 <puts>
	else {
		printf("Contenido del archivo escrito: %d \n", temp_number);
	}
	f_close(&testFile);
	*/
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	0800a320 	.word	0x0800a320
 800060c:	200000dc 	.word	0x200000dc
 8000610:	200000d8 	.word	0x200000d8
 8000614:	0800a324 	.word	0x0800a324
 8000618:	0800a348 	.word	0x0800a348

0800061c <start_recording>:

void start_recording (uint32_t frequency) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	static char file_name[] = "MAAS_000.wav";
	static uint8_t file_counter = 1;
	int file_number_digits = file_counter;
 8000624:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <start_recording+0x134>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t) frequency;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b47      	ldr	r3, [pc, #284]	@ (8000754 <start_recording+0x138>)
 8000636:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b45      	ldr	r3, [pc, #276]	@ (8000754 <start_recording+0x138>)
 8000640:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b42      	ldr	r3, [pc, #264]	@ (8000754 <start_recording+0x138>)
 800064a:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b40      	ldr	r3, [pc, #256]	@ (8000754 <start_recording+0x138>)
 8000654:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t) byte_rate;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <start_recording+0x138>)
 800065c:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b3b      	ldr	r3, [pc, #236]	@ (8000754 <start_recording+0x138>)
 8000666:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <start_recording+0x138>)
 8000670:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	0e1b      	lsrs	r3, r3, #24
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b36      	ldr	r3, [pc, #216]	@ (8000754 <start_recording+0x138>)
 800067a:	77da      	strb	r2, [r3, #31]

	// definiendo el nombre del archivo
	file_name[7] = file_number_digits % 10 + 48;
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <start_recording+0x13c>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	1099      	asrs	r1, r3, #2
 8000686:	17d3      	asrs	r3, r2, #31
 8000688:	1ac9      	subs	r1, r1, r3
 800068a:	460b      	mov	r3, r1
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	1ad1      	subs	r1, r2, r3
 8000694:	b2cb      	uxtb	r3, r1
 8000696:	3330      	adds	r3, #48	@ 0x30
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b30      	ldr	r3, [pc, #192]	@ (800075c <start_recording+0x140>)
 800069c:	71da      	strb	r2, [r3, #7]
	file_number_digits /= 10;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000758 <start_recording+0x13c>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	1092      	asrs	r2, r2, #2
 80006a8:	17db      	asrs	r3, r3, #31
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	60fb      	str	r3, [r7, #12]
	file_name[6] = file_number_digits % 10 + 48;
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <start_recording+0x13c>)
 80006b2:	fb83 1302 	smull	r1, r3, r3, r2
 80006b6:	1099      	asrs	r1, r3, #2
 80006b8:	17d3      	asrs	r3, r2, #31
 80006ba:	1ac9      	subs	r1, r1, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ad1      	subs	r1, r2, r3
 80006c6:	b2cb      	uxtb	r3, r1
 80006c8:	3330      	adds	r3, #48	@ 0x30
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <start_recording+0x140>)
 80006ce:	719a      	strb	r2, [r3, #6]
	file_number_digits /= 10;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <start_recording+0x13c>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	60fb      	str	r3, [r7, #12]
	file_name[5] = file_number_digits % 10 + 48;
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <start_recording+0x13c>)
 80006e4:	fb83 1302 	smull	r1, r3, r3, r2
 80006e8:	1099      	asrs	r1, r3, #2
 80006ea:	17d3      	asrs	r3, r2, #31
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ad1      	subs	r1, r2, r3
 80006f8:	b2cb      	uxtb	r3, r1
 80006fa:	3330      	adds	r3, #48	@ 0x30
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <start_recording+0x140>)
 8000700:	715a      	strb	r2, [r3, #5]
	file_counter++;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <start_recording+0x134>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <start_recording+0x134>)
 800070c:	701a      	strb	r2, [r3, #0]

	// creando el archivo
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 800070e:	220a      	movs	r2, #10
 8000710:	4912      	ldr	r1, [pc, #72]	@ (800075c <start_recording+0x140>)
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <start_recording+0x144>)
 8000714:	f007 ff20 	bl	8008558 <f_open>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <start_recording+0x148>)
 800071e:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <start_recording+0x148>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <start_recording+0x11c>
		printf("Error creando un archivo: %d \n", sd_result);
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <start_recording+0x148>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <start_recording+0x14c>)
 8000730:	f008 ff1e 	bl	8009570 <iprintf>
		while(1);
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <start_recording+0x118>
	}
	else {
		printf("Archivo de audio %s creado \n", file_name);
 8000738:	4908      	ldr	r1, [pc, #32]	@ (800075c <start_recording+0x140>)
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <start_recording+0x150>)
 800073c:	f008 ff18 	bl	8009570 <iprintf>
	}
	wav_file_size = 0;
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <start_recording+0x154>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	20000000 	.word	0x20000000
 8000758:	66666667 	.word	0x66666667
 800075c:	20000030 	.word	0x20000030
 8000760:	20001114 	.word	0x20001114
 8000764:	200000d8 	.word	0x200000d8
 8000768:	0800a35c 	.word	0x0800a35c
 800076c:	0800a37c 	.word	0x0800a37c
 8000770:	20002144 	.word	0x20002144

08000774 <write2wave_file>:

void write2wave_file (uint8_t *data, uint16_t data_size) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	if(first_time == 0)
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <write2wave_file+0x84>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d116      	bne.n	80007b6 <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00a      	b.n	80007a4 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	4919      	ldr	r1, [pc, #100]	@ (80007fc <write2wave_file+0x88>)
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	440a      	add	r2, r1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80007a8:	ddf1      	ble.n	800078e <write2wave_file+0x1a>
		}
		first_time = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <write2wave_file+0x84>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
		printf("El encabezado ha sido escrito. \n");
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <write2wave_file+0x8c>)
 80007b2:	f008 ff45 	bl	8009640 <puts>
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <write2wave_file+0x90>)
 80007c0:	f008 f892 	bl	80088e8 <f_write>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <write2wave_file+0x94>)
 80007ca:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0) {
 80007cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <write2wave_file+0x94>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d007      	beq.n	80007e4 <write2wave_file+0x70>
		printf("Error escribiendo al archivo: %d \n", sd_result);
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <write2wave_file+0x94>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <write2wave_file+0x98>)
 80007dc:	f008 fec8 	bl	8009570 <iprintf>
		while(1);
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 80007e4:	887a      	ldrh	r2, [r7, #2]
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <write2wave_file+0x9c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <write2wave_file+0x9c>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20002148 	.word	0x20002148
 80007fc:	20000000 	.word	0x20000000
 8000800:	0800a39c 	.word	0x0800a39c
 8000804:	20001114 	.word	0x20001114
 8000808:	200000d8 	.word	0x200000d8
 800080c:	0800a3bc 	.word	0x0800a3bc
 8000810:	20002144 	.word	0x20002144

08000814 <stop_recording>:

void stop_recording () {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// actualizando el tamaño de archivo
	wav_file_size -= 8;
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <stop_recording+0xc4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3b08      	subs	r3, #8
 8000820:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <stop_recording+0xc4>)
 8000822:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <stop_recording+0xc4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <stop_recording+0xc8>)
 800082c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <stop_recording+0xc4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <stop_recording+0xc8>)
 8000838:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <stop_recording+0xc4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <stop_recording+0xc8>)
 8000844:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <stop_recording+0xc4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <stop_recording+0xc8>)
 8000850:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <stop_recording+0xc4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b24      	subs	r3, #36	@ 0x24
 8000858:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <stop_recording+0xc4>)
 800085a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <stop_recording+0xc4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <stop_recording+0xc8>)
 8000864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <stop_recording+0xc4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <stop_recording+0xc8>)
 8000872:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <stop_recording+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <stop_recording+0xc8>)
 8000880:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <stop_recording+0xc4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	0e1b      	lsrs	r3, r3, #24
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <stop_recording+0xc8>)
 800088e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// regresar al encabezado para actualizar el formato de archivo
	f_lseek(&wavFile, 0);
 8000892:	2100      	movs	r1, #0
 8000894:	4812      	ldr	r0, [pc, #72]	@ (80008e0 <stop_recording+0xcc>)
 8000896:	f008 fa63 	bl	8008d60 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	222c      	movs	r2, #44	@ 0x2c
 800089e:	490f      	ldr	r1, [pc, #60]	@ (80008dc <stop_recording+0xc8>)
 80008a0:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <stop_recording+0xcc>)
 80008a2:	f008 f821 	bl	80088e8 <f_write>
	if(sd_result != 0)
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <stop_recording+0xd0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <stop_recording+0xaa>
	{
		printf("Error al actualizar el primer sector: %d \n", sd_result);
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <stop_recording+0xd0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <stop_recording+0xd4>)
 80008b6:	f008 fe5b 	bl	8009570 <iprintf>
		while(1);
 80008ba:	bf00      	nop
 80008bc:	e7fd      	b.n	80008ba <stop_recording+0xa6>
	}
	f_close(&wavFile);
 80008be:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <stop_recording+0xcc>)
 80008c0:	f008 fa24 	bl	8008d0c <f_close>
	first_time = 0;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <stop_recording+0xd8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	printf("Archivo de audio cerrado. \n");
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <stop_recording+0xdc>)
 80008cc:	f008 feb8 	bl	8009640 <puts>

}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20002144 	.word	0x20002144
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20001114 	.word	0x20001114
 80008e4:	200000d8 	.word	0x200000d8
 80008e8:	0800a3e0 	.word	0x0800a3e0
 80008ec:	20002148 	.word	0x20002148
 80008f0:	0800a40c 	.word	0x0800a40c

080008f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <SELECT+0x1c>)
 8000900:	f002 f9ec 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 faa7 	bl	8001e58 <HAL_Delay>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <DESELECT+0x1c>)
 8000920:	f002 f9dc 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f001 fa97 	bl	8001e58 <HAL_Delay>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020400 	.word	0x40020400

08000934 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800093e:	bf00      	nop
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <SPI_TxByte+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1f8      	bne.n	8000940 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800094e:	1df9      	adds	r1, r7, #7
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	2201      	movs	r2, #1
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <SPI_TxByte+0x30>)
 8000956:	f003 fe68 	bl	800462a <HAL_SPI_Transmit>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200021f0 	.word	0x200021f0

08000968 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000974:	bf00      	nop
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <SPI_TxBuffer+0x30>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b02      	cmp	r3, #2
 8000982:	d1f8      	bne.n	8000976 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	2364      	movs	r3, #100	@ 0x64
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <SPI_TxBuffer+0x30>)
 800098c:	f003 fe4d 	bl	800462a <HAL_SPI_Transmit>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200021f0 	.word	0x200021f0

0800099c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009a2:	23ff      	movs	r3, #255	@ 0xff
 80009a4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009a6:	bf00      	nop
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <SPI_RxByte+0x34>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d1f8      	bne.n	80009a8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009b6:	1dba      	adds	r2, r7, #6
 80009b8:	1df9      	adds	r1, r7, #7
 80009ba:	2364      	movs	r3, #100	@ 0x64
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <SPI_RxByte+0x34>)
 80009c2:	f003 ffa7 	bl	8004914 <HAL_SPI_TransmitReceive>

	return data;
 80009c6:	79bb      	ldrb	r3, [r7, #6]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200021f0 	.word	0x200021f0

080009d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009dc:	f7ff ffde 	bl	800099c <SPI_RxByte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <SD_ReadyWait+0x30>)
 80009f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009fc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80009fe:	f7ff ffcd 	bl	800099c <SPI_RxByte>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2bff      	cmp	r3, #255	@ 0xff
 8000a0a:	d003      	beq.n	8000a14 <SD_ReadyWait+0x24>
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <SD_ReadyWait+0x30>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f4      	bne.n	80009fe <SD_ReadyWait+0xe>

	return res;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000214c 	.word	0x2000214c

08000a24 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a2a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000a2e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a30:	f7ff ff70 	bl	8000914 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	e005      	b.n	8000a46 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff ff7a 	bl	8000934 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	ddf6      	ble.n	8000a3a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a4c:	f7ff ff52 	bl	80008f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a50:	2340      	movs	r3, #64	@ 0x40
 8000a52:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a64:	2395      	movs	r3, #149	@ 0x95
 8000a66:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2106      	movs	r1, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff7b 	bl	8000968 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a72:	e002      	b.n	8000a7a <SD_PowerOn+0x56>
	{
		cnt--;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a7a:	f7ff ff8f 	bl	800099c <SPI_RxByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d002      	beq.n	8000a8a <SD_PowerOn+0x66>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f4      	bne.n	8000a74 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a8a:	f7ff ff43 	bl	8000914 <DESELECT>
	SPI_TxByte(0XFF);
 8000a8e:	20ff      	movs	r0, #255	@ 0xff
 8000a90:	f7ff ff50 	bl	8000934 <SPI_TxByte>

	PowerFlag = 1;
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <SD_PowerOn+0x80>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000214f 	.word	0x2000214f

08000aa8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <SD_PowerOff+0x14>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000214f 	.word	0x2000214f

08000ac0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <SD_CheckPower+0x14>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000214f 	.word	0x2000214f

08000ad8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <SD_RxDataBlock+0x58>)
 8000ae4:	22c8      	movs	r2, #200	@ 0xc8
 8000ae6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000ae8:	f7ff ff58 	bl	800099c <SPI_RxByte>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2bff      	cmp	r3, #255	@ 0xff
 8000af4:	d103      	bne.n	8000afe <SD_RxDataBlock+0x26>
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <SD_RxDataBlock+0x58>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f4      	bne.n	8000ae8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b02:	d001      	beq.n	8000b08 <SD_RxDataBlock+0x30>
 8000b04:	2300      	movs	r3, #0
 8000b06:	e00f      	b.n	8000b28 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff60 	bl	80009d4 <SPI_RxBytePtr>
	} while(len--);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f4      	bne.n	8000b08 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b1e:	f7ff ff3d 	bl	800099c <SPI_RxByte>
	SPI_RxByte();
 8000b22:	f7ff ff3b 	bl	800099c <SPI_RxByte>

	return TRUE;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000214a 	.word	0x2000214a

08000b34 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b44:	f7ff ff54 	bl	80009f0 <SD_ReadyWait>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d001      	beq.n	8000b52 <SD_TxDataBlock+0x1e>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e02f      	b.n	8000bb2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff feed 	bl	8000934 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000b5e:	d020      	beq.n	8000ba2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff feff 	bl	8000968 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b6a:	f7ff ff17 	bl	800099c <SPI_RxByte>
		SPI_RxByte();
 8000b6e:	f7ff ff15 	bl	800099c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b72:	e00b      	b.n	8000b8c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b74:	f7ff ff12 	bl	800099c <SPI_RxByte>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	f003 031f 	and.w	r3, r3, #31
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d006      	beq.n	8000b94 <SD_TxDataBlock+0x60>
			i++;
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	2b40      	cmp	r3, #64	@ 0x40
 8000b90:	d9f0      	bls.n	8000b74 <SD_TxDataBlock+0x40>
 8000b92:	e000      	b.n	8000b96 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b94:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b96:	bf00      	nop
 8000b98:	f7ff ff00 	bl	800099c <SPI_RxByte>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0fa      	beq.n	8000b98 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	d101      	bne.n	8000bb0 <SD_TxDataBlock+0x7c>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	6039      	str	r1, [r7, #0]
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bc6:	f7ff ff13 	bl	80009f0 <SD_ReadyWait>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2bff      	cmp	r3, #255	@ 0xff
 8000bce:	d001      	beq.n	8000bd4 <SD_SendCmd+0x1a>
 8000bd0:	23ff      	movs	r3, #255	@ 0xff
 8000bd2:	e042      	b.n	8000c5a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff feac 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	0e1b      	lsrs	r3, r3, #24
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fea6 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fea0 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe9a 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe95 	bl	8000934 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b40      	cmp	r3, #64	@ 0x40
 8000c0e:	d102      	bne.n	8000c16 <SD_SendCmd+0x5c>
 8000c10:	2395      	movs	r3, #149	@ 0x95
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e007      	b.n	8000c26 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b48      	cmp	r3, #72	@ 0x48
 8000c1a:	d102      	bne.n	8000c22 <SD_SendCmd+0x68>
 8000c1c:	2387      	movs	r3, #135	@ 0x87
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e001      	b.n	8000c26 <SD_SendCmd+0x6c>
	else crc = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe83 	bl	8000934 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b4c      	cmp	r3, #76	@ 0x4c
 8000c32:	d101      	bne.n	8000c38 <SD_SendCmd+0x7e>
 8000c34:	f7ff feb2 	bl	800099c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c3c:	f7ff feae 	bl	800099c <SPI_RxByte>
 8000c40:	4603      	mov	r3, r0
 8000c42:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da05      	bge.n	8000c58 <SD_SendCmd+0x9e>
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	73bb      	strb	r3, [r7, #14]
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f1      	bne.n	8000c3c <SD_SendCmd+0x82>

	return res;
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SD_disk_initialize+0x14>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0d1      	b.n	8000e1c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c78:	4b6a      	ldr	r3, [pc, #424]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <SD_disk_initialize+0x2a>
 8000c86:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	e0c6      	b.n	8000e1c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000c8e:	f7ff fec9 	bl	8000a24 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c92:	f7ff fe2f 	bl	80008f4 <SELECT>

	/* check disk type */
	type = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2040      	movs	r0, #64	@ 0x40
 8000c9e:	f7ff ff8c 	bl	8000bba <SD_SendCmd>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	f040 80a1 	bne.w	8000dec <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000caa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cb2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000cb6:	2048      	movs	r0, #72	@ 0x48
 8000cb8:	f7ff ff7f 	bl	8000bba <SD_SendCmd>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d155      	bne.n	8000d6e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e00c      	b.n	8000ce2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cc8:	7bfc      	ldrb	r4, [r7, #15]
 8000cca:	f7ff fe67 	bl	800099c <SPI_RxByte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f104 0310 	add.w	r3, r4, #16
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d9ef      	bls.n	8000cc8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ce8:	7abb      	ldrb	r3, [r7, #10]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d17e      	bne.n	8000dec <SD_disk_initialize+0x188>
 8000cee:	7afb      	ldrb	r3, [r7, #11]
 8000cf0:	2baa      	cmp	r3, #170	@ 0xaa
 8000cf2:	d17b      	bne.n	8000dec <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2077      	movs	r0, #119	@ 0x77
 8000cf8:	f7ff ff5f 	bl	8000bba <SD_SendCmd>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d807      	bhi.n	8000d12 <SD_disk_initialize+0xae>
 8000d02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d06:	2069      	movs	r0, #105	@ 0x69
 8000d08:	f7ff ff57 	bl	8000bba <SD_SendCmd>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1ec      	bne.n	8000cf4 <SD_disk_initialize+0x90>
 8000d1a:	e000      	b.n	8000d1e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d1c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d1e:	4b42      	ldr	r3, [pc, #264]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d062      	beq.n	8000dec <SD_disk_initialize+0x188>
 8000d26:	2100      	movs	r1, #0
 8000d28:	207a      	movs	r0, #122	@ 0x7a
 8000d2a:	f7ff ff46 	bl	8000bba <SD_SendCmd>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d15b      	bne.n	8000dec <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e00c      	b.n	8000d54 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d3a:	7bfc      	ldrb	r4, [r7, #15]
 8000d3c:	f7ff fe2e 	bl	800099c <SPI_RxByte>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	f104 0310 	add.w	r3, r4, #16
 8000d48:	443b      	add	r3, r7
 8000d4a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	3301      	adds	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d9ef      	bls.n	8000d3a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SD_disk_initialize+0x104>
 8000d64:	230c      	movs	r3, #12
 8000d66:	e000      	b.n	8000d6a <SD_disk_initialize+0x106>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	73bb      	strb	r3, [r7, #14]
 8000d6c:	e03e      	b.n	8000dec <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2077      	movs	r0, #119	@ 0x77
 8000d72:	f7ff ff22 	bl	8000bba <SD_SendCmd>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d808      	bhi.n	8000d8e <SD_disk_initialize+0x12a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2069      	movs	r0, #105	@ 0x69
 8000d80:	f7ff ff1b 	bl	8000bba <SD_SendCmd>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d801      	bhi.n	8000d8e <SD_disk_initialize+0x12a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e000      	b.n	8000d90 <SD_disk_initialize+0x12c>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d10e      	bne.n	8000db6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2077      	movs	r0, #119	@ 0x77
 8000d9c:	f7ff ff0d 	bl	8000bba <SD_SendCmd>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d80e      	bhi.n	8000dc4 <SD_disk_initialize+0x160>
 8000da6:	2100      	movs	r1, #0
 8000da8:	2069      	movs	r0, #105	@ 0x69
 8000daa:	f7ff ff06 	bl	8000bba <SD_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d107      	bne.n	8000dc4 <SD_disk_initialize+0x160>
 8000db4:	e00c      	b.n	8000dd0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000db6:	2100      	movs	r1, #0
 8000db8:	2041      	movs	r0, #65	@ 0x41
 8000dba:	f7ff fefe 	bl	8000bba <SD_SendCmd>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e2      	bne.n	8000d92 <SD_disk_initialize+0x12e>
 8000dcc:	e000      	b.n	8000dd0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dce:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <SD_disk_initialize+0x184>
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	2050      	movs	r0, #80	@ 0x50
 8000dde:	f7ff feec 	bl	8000bba <SD_SendCmd>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_initialize+0x188>
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <SD_disk_initialize+0x1c8>)
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000df2:	f7ff fd8f 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8000df6:	f7ff fdd1 	bl	800099c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d008      	beq.n	8000e12 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e001      	b.n	8000e16 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e12:	f7ff fe49 	bl	8000aa8 <SD_PowerOff>
	}

	return Stat;
 8000e16:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	2000003d 	.word	0x2000003d
 8000e28:	2000214a 	.word	0x2000214a
 8000e2c:	2000214e 	.word	0x2000214e

08000e30 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SD_disk_status+0x14>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e002      	b.n	8000e4a <SD_disk_status+0x1a>
	return Stat;
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SD_disk_status+0x28>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2000003d 	.word	0x2000003d

08000e5c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <SD_disk_read+0x1c>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SD_disk_read+0x20>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e051      	b.n	8000f20 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <SD_disk_read+0xcc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SD_disk_read+0x32>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e048      	b.n	8000f20 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <SD_disk_read+0xd0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <SD_disk_read+0x44>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ea0:	f7ff fd28 	bl	80008f4 <SELECT>

	if (count == 1)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d111      	bne.n	8000ece <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	2051      	movs	r0, #81	@ 0x51
 8000eae:	f7ff fe84 	bl	8000bba <SD_SendCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d129      	bne.n	8000f0c <SD_disk_read+0xb0>
 8000eb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ebc:	68b8      	ldr	r0, [r7, #8]
 8000ebe:	f7ff fe0b 	bl	8000ad8 <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d021      	beq.n	8000f0c <SD_disk_read+0xb0>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	e01e      	b.n	8000f0c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2052      	movs	r0, #82	@ 0x52
 8000ed2:	f7ff fe72 	bl	8000bba <SD_SendCmd>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d117      	bne.n	8000f0c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f7ff fdf9 	bl	8000ad8 <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00a      	beq.n	8000f02 <SD_disk_read+0xa6>
				buff += 512;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ef2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ed      	bne.n	8000edc <SD_disk_read+0x80>
 8000f00:	e000      	b.n	8000f04 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f02:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f04:	2100      	movs	r1, #0
 8000f06:	204c      	movs	r0, #76	@ 0x4c
 8000f08:	f7ff fe57 	bl	8000bba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f0c:	f7ff fd02 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8000f10:	f7ff fd44 	bl	800099c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000003d 	.word	0x2000003d
 8000f2c:	2000214e 	.word	0x2000214e

08000f30 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <SD_disk_write+0x1c>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <SD_disk_write+0x20>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e06b      	b.n	8001028 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f50:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <SD_disk_write+0x100>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SD_disk_write+0x32>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e062      	b.n	8001028 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <SD_disk_write+0x100>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SD_disk_write+0x44>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e059      	b.n	8001028 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <SD_disk_write+0x104>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <SD_disk_write+0x56>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f86:	f7ff fcb5 	bl	80008f4 <SELECT>

	if (count == 1)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d110      	bne.n	8000fb2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	2058      	movs	r0, #88	@ 0x58
 8000f94:	f7ff fe11 	bl	8000bba <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d13a      	bne.n	8001014 <SD_disk_write+0xe4>
 8000f9e:	21fe      	movs	r1, #254	@ 0xfe
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f7ff fdc7 	bl	8000b34 <SD_TxDataBlock>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d033      	beq.n	8001014 <SD_disk_write+0xe4>
			count = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	e030      	b.n	8001014 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <SD_disk_write+0x104>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2077      	movs	r0, #119	@ 0x77
 8000fc2:	f7ff fdfa 	bl	8000bba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	2057      	movs	r0, #87	@ 0x57
 8000fca:	f7ff fdf6 	bl	8000bba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2059      	movs	r0, #89	@ 0x59
 8000fd2:	f7ff fdf2 	bl	8000bba <SD_SendCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d11b      	bne.n	8001014 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fdc:	21fc      	movs	r1, #252	@ 0xfc
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f7ff fda8 	bl	8000b34 <SD_TxDataBlock>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <SD_disk_write+0xd0>
				buff += 512;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ff0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1ee      	bne.n	8000fdc <SD_disk_write+0xac>
 8000ffe:	e000      	b.n	8001002 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001000:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001002:	21fd      	movs	r1, #253	@ 0xfd
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fd95 	bl	8000b34 <SD_TxDataBlock>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_write+0xe4>
			{
				count = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001014:	f7ff fc7e 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8001018:	f7ff fcc0 	bl	800099c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000003d 	.word	0x2000003d
 8001034:	2000214e 	.word	0x2000214e

08001038 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08b      	sub	sp, #44	@ 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	603a      	str	r2, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	460b      	mov	r3, r1
 8001046:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SD_disk_ioctl+0x1e>
 8001052:	2304      	movs	r3, #4
 8001054:	e113      	b.n	800127e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d124      	bne.n	80010ac <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d012      	beq.n	8001090 <SD_disk_ioctl+0x58>
 800106a:	2b02      	cmp	r3, #2
 800106c:	dc1a      	bgt.n	80010a4 <SD_disk_ioctl+0x6c>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <SD_disk_ioctl+0x40>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d006      	beq.n	8001084 <SD_disk_ioctl+0x4c>
 8001076:	e015      	b.n	80010a4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001078:	f7ff fd16 	bl	8000aa8 <SD_PowerOff>
			res = RES_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001082:	e0fa      	b.n	800127a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001084:	f7ff fcce 	bl	8000a24 <SD_PowerOn>
			res = RES_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800108e:	e0f4      	b.n	800127a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	1c5c      	adds	r4, r3, #1
 8001094:	f7ff fd14 	bl	8000ac0 <SD_CheckPower>
 8001098:	4603      	mov	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010a2:	e0ea      	b.n	800127a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010aa:	e0e6      	b.n	800127a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010ac:	4b76      	ldr	r3, [pc, #472]	@ (8001288 <SD_disk_ioctl+0x250>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SD_disk_ioctl+0x86>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e0df      	b.n	800127e <SD_disk_ioctl+0x246>

		SELECT();
 80010be:	f7ff fc19 	bl	80008f4 <SELECT>

		switch (ctrl)
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b0d      	cmp	r3, #13
 80010c6:	f200 80c9 	bhi.w	800125c <SD_disk_ioctl+0x224>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <SD_disk_ioctl+0x98>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080011c7 	.word	0x080011c7
 80010d4:	08001109 	.word	0x08001109
 80010d8:	080011b7 	.word	0x080011b7
 80010dc:	0800125d 	.word	0x0800125d
 80010e0:	0800125d 	.word	0x0800125d
 80010e4:	0800125d 	.word	0x0800125d
 80010e8:	0800125d 	.word	0x0800125d
 80010ec:	0800125d 	.word	0x0800125d
 80010f0:	0800125d 	.word	0x0800125d
 80010f4:	0800125d 	.word	0x0800125d
 80010f8:	0800125d 	.word	0x0800125d
 80010fc:	080011d9 	.word	0x080011d9
 8001100:	080011fd 	.word	0x080011fd
 8001104:	08001221 	.word	0x08001221
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001108:	2100      	movs	r1, #0
 800110a:	2049      	movs	r0, #73	@ 0x49
 800110c:	f7ff fd55 	bl	8000bba <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 80a6 	bne.w	8001264 <SD_disk_ioctl+0x22c>
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2110      	movs	r1, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fcda 	bl	8000ad8 <SD_RxDataBlock>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 809c 	beq.w	8001264 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	099b      	lsrs	r3, r3, #6
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10d      	bne.n	8001152 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	461a      	mov	r2, r3
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001148:	8bfb      	ldrh	r3, [r7, #30]
 800114a:	029a      	lsls	r2, r3, #10
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e02d      	b.n	80011ae <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001152:	7c7b      	ldrb	r3, [r7, #17]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	09db      	lsrs	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	7d7b      	ldrb	r3, [r7, #21]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0306 	and.w	r3, r3, #6
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3302      	adds	r3, #2
 8001176:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800117a:	7d3b      	ldrb	r3, [r7, #20]
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	b29b      	uxth	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	7cbb      	ldrb	r3, [r7, #18]
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	b29b      	uxth	r3, r3
 8001192:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011a0:	8bfa      	ldrh	r2, [r7, #30]
 80011a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011a6:	3b09      	subs	r3, #9
 80011a8:	409a      	lsls	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80011b4:	e056      	b.n	8001264 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011bc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011c4:	e055      	b.n	8001272 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011c6:	f7ff fc13 	bl	80009f0 <SD_ReadyWait>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2bff      	cmp	r3, #255	@ 0xff
 80011ce:	d14b      	bne.n	8001268 <SD_disk_ioctl+0x230>
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011d6:	e047      	b.n	8001268 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011d8:	2100      	movs	r1, #0
 80011da:	2049      	movs	r0, #73	@ 0x49
 80011dc:	f7ff fced 	bl	8000bba <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d142      	bne.n	800126c <SD_disk_ioctl+0x234>
 80011e6:	2110      	movs	r1, #16
 80011e8:	6a38      	ldr	r0, [r7, #32]
 80011ea:	f7ff fc75 	bl	8000ad8 <SD_RxDataBlock>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03b      	beq.n	800126c <SD_disk_ioctl+0x234>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011fa:	e037      	b.n	800126c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011fc:	2100      	movs	r1, #0
 80011fe:	204a      	movs	r0, #74	@ 0x4a
 8001200:	f7ff fcdb 	bl	8000bba <SD_SendCmd>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d132      	bne.n	8001270 <SD_disk_ioctl+0x238>
 800120a:	2110      	movs	r1, #16
 800120c:	6a38      	ldr	r0, [r7, #32]
 800120e:	f7ff fc63 	bl	8000ad8 <SD_RxDataBlock>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d02b      	beq.n	8001270 <SD_disk_ioctl+0x238>
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800121e:	e027      	b.n	8001270 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001220:	2100      	movs	r1, #0
 8001222:	207a      	movs	r0, #122	@ 0x7a
 8001224:	f7ff fcc9 	bl	8000bba <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001234:	e00b      	b.n	800124e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001236:	6a3c      	ldr	r4, [r7, #32]
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	f7ff fbae 	bl	800099c <SPI_RxByte>
 8001240:	4603      	mov	r3, r0
 8001242:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001248:	3301      	adds	r3, #1
 800124a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800124e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001252:	2b03      	cmp	r3, #3
 8001254:	d9ef      	bls.n	8001236 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800125c:	2304      	movs	r3, #4
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001262:	e006      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001264:	bf00      	nop
 8001266:	e004      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001268:	bf00      	nop
 800126a:	e002      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001270:	bf00      	nop
		}

		DESELECT();
 8001272:	f7ff fb4f 	bl	8000914 <DESELECT>
		SPI_RxByte();
 8001276:	f7ff fb91 	bl	800099c <SPI_RxByte>
	}

	return res;
 800127a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800127e:	4618      	mov	r0, r3
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	2000003d 	.word	0x2000003d

0800128c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001294:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001298:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012b4:	e000      	b.n	80012b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f9      	beq.n	80012b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80012e0:	f000 fab6 	bl	8001850 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fd5b 	bl	8001d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f88a 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 f9ee 	bl	80016cc <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f000 f9ce 	bl	8001690 <MX_DMA_Init>
  MX_I2S2_Init();
 80012f4:	f000 f8ee 	bl	80014d4 <MX_I2S2_Init>
  MX_SPI1_Init();
 80012f8:	f000 f916 	bl	8001528 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012fc:	f004 fe9c 	bl	8006038 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001300:	f000 f950 	bl	80015a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 8001304:	4834      	ldr	r0, [pc, #208]	@ (80013d8 <main+0xfc>)
 8001306:	f001 febd 	bl	8003084 <HAL_I2S_DMAStop>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800130a:	210c      	movs	r1, #12
 800130c:	4833      	ldr	r0, [pc, #204]	@ (80013dc <main+0x100>)
 800130e:	f003 ff63 	bl	80051d8 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8001312:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001316:	f000 fd9f 	bl	8001e58 <HAL_Delay>
  sd_card_init();
 800131a:	f7ff f959 	bl	80005d0 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_flag) {
 800131e:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <main+0x104>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d031      	beq.n	800138c <main+0xb0>
		  if (start_stop_recording) {
 8001328:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <main+0x108>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <main+0x7a>
			  HAL_I2S_DMAStop(&hi2s2);
 8001332:	4829      	ldr	r0, [pc, #164]	@ (80013d8 <main+0xfc>)
 8001334:	f001 fea6 	bl	8003084 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <main+0x108>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 800133e:	f7ff fa69 	bl	8000814 <stop_recording>
			  half_i2s = 0;
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <main+0x10c>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 8001348:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <main+0x110>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
			  printf("Grabación terminada.\n");
 800134e:	4828      	ldr	r0, [pc, #160]	@ (80013f0 <main+0x114>)
 8001350:	f008 f976 	bl	8009640 <puts>
 8001354:	e017      	b.n	8001386 <main+0xaa>
		  }
		  else {
			  start_stop_recording = 1;
 8001356:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <main+0x108>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 800135c:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8001360:	f7ff f95c 	bl	800061c <start_recording>
			  printf("Grabando... (banderas en %d y %d)\n", half_i2s, full_i2s);
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <main+0x10c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <main+0x110>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <main+0x118>)
 8001376:	f008 f8fb 	bl	8009570 <iprintf>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) data_i2s, sizeof(data_i2s)/2);
 800137a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800137e:	491e      	ldr	r1, [pc, #120]	@ (80013f8 <main+0x11c>)
 8001380:	4815      	ldr	r0, [pc, #84]	@ (80013d8 <main+0xfc>)
 8001382:	f001 fdc3 	bl	8002f0c <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <main+0x104>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_stop_recording == 1 && half_i2s == 1)
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <main+0x108>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10c      	bne.n	80013b0 <main+0xd4>
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <main+0x10c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d107      	bne.n	80013b0 <main+0xd4>
	  {
		  write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 80013a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013a4:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <main+0x11c>)
 80013a6:	f7ff f9e5 	bl	8000774 <write2wave_file>
		  half_i2s = 0;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <main+0x10c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	  }
	  if (start_stop_recording == 1 && full_i2s == 1)
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <main+0x108>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1b1      	bne.n	800131e <main+0x42>
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <main+0x110>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d1ac      	bne.n	800131e <main+0x42>
	  {
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <main+0x120>)
 80013c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f9d2 	bl	8000774 <write2wave_file>
		  full_i2s = 0;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <main+0x110>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	  if (button_flag) {
 80013d6:	e7a2      	b.n	800131e <main+0x42>
 80013d8:	20002150 	.word	0x20002150
 80013dc:	20002254 	.word	0x20002254
 80013e0:	200032a2 	.word	0x200032a2
 80013e4:	200032a3 	.word	0x200032a3
 80013e8:	200032a4 	.word	0x200032a4
 80013ec:	200032a5 	.word	0x200032a5
 80013f0:	0800a428 	.word	0x0800a428
 80013f4:	0800a440 	.word	0x0800a440
 80013f8:	200022a0 	.word	0x200022a0
 80013fc:	20002aa0 	.word	0x20002aa0

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	@ 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	2234      	movs	r2, #52	@ 0x34
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f9f6 	bl	8009800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <SystemClock_Config+0xcc>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	4a28      	ldr	r2, [pc, #160]	@ (80014cc <SystemClock_Config+0xcc>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <SystemClock_Config+0xcc>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001444:	4a22      	ldr	r2, [pc, #136]	@ (80014d0 <SystemClock_Config+0xd0>)
 8001446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <SystemClock_Config+0xd0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800146c:	2308      	movs	r3, #8
 800146e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001470:	23a0      	movs	r3, #160	@ 0xa0
 8001472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001474:	2302      	movs	r3, #2
 8001476:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001478:	2307      	movs	r3, #7
 800147a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800147c:	2302      	movs	r3, #2
 800147e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4618      	mov	r0, r3
 8001486:	f001 ff9d 	bl	80033c4 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001490:	f000 fa0a 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2302      	movs	r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2105      	movs	r1, #5
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fa34 	bl	8003920 <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014be:	f000 f9f3 	bl	80018a8 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3750      	adds	r7, #80	@ 0x50
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000

080014d4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_I2S2_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_I2S2_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_I2S2_Init+0x4c>)
 80014e0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014e4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_I2S2_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_I2S2_Init+0x4c>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_I2S2_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_I2S2_Init+0x4c>)
 80014fa:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80014fe:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <MX_I2S2_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_I2S2_Init+0x4c>)
 8001508:	2202      	movs	r2, #2
 800150a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_I2S2_Init+0x4c>)
 800150e:	f001 fc17 	bl	8002d40 <HAL_I2S_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8001518:	f000 f9c6 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20002150 	.word	0x20002150
 8001524:	40003800 	.word	0x40003800

08001528 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <MX_SPI1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <MX_SPI1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_SPI1_Init+0x74>)
 8001534:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <MX_SPI1_Init+0x74>)
 8001542:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001546:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_SPI1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_SPI1_Init+0x74>)
 8001556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_SPI1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_SPI1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_SPI1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_SPI1_Init+0x74>)
 8001576:	2207      	movs	r2, #7
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_SPI1_Init+0x74>)
 8001582:	2208      	movs	r2, #8
 8001584:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_SPI1_Init+0x74>)
 8001588:	f002 ffa4 	bl	80044d4 <HAL_SPI_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f000 f989 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200021f0 	.word	0x200021f0
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	@ 0x38
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015ec:	2209      	movs	r2, #9
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b26      	ldr	r3, [pc, #152]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4823      	ldr	r0, [pc, #140]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015fe:	f003 fd33 	bl	8005068 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001608:	f000 f94e 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001616:	4619      	mov	r1, r3
 8001618:	481c      	ldr	r0, [pc, #112]	@ (800168c <MX_TIM2_Init+0xe8>)
 800161a:	f003 ffeb 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001624:	f000 f940 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001628:	4818      	ldr	r0, [pc, #96]	@ (800168c <MX_TIM2_Init+0xe8>)
 800162a:	f003 fd74 	bl	8005116 <HAL_TIM_PWM_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001634:	f000 f938 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_TIM2_Init+0xe8>)
 8001648:	f004 fc68 	bl	8005f1c <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001652:	f000 f929 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001656:	2360      	movs	r3, #96	@ 0x60
 8001658:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 800165a:	2305      	movs	r3, #5
 800165c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	220c      	movs	r2, #12
 800166a:	4619      	mov	r1, r3
 800166c:	4807      	ldr	r0, [pc, #28]	@ (800168c <MX_TIM2_Init+0xe8>)
 800166e:	f003 fead 	bl	80053cc <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001678:	f000 f916 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800167c:	4803      	ldr	r0, [pc, #12]	@ (800168c <MX_TIM2_Init+0xe8>)
 800167e:	f000 fa3b 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	@ 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20002254 	.word	0x20002254

08001690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_DMA_Init+0x38>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <MX_DMA_Init+0x38>)
 800169c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_DMA_Init+0x38>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200c      	movs	r0, #12
 80016b4:	f000 fccf 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016b8:	200c      	movs	r0, #12
 80016ba:	f000 fce8 	bl	800208e <HAL_NVIC_EnableIRQ>

}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <MX_GPIO_Init+0xbc>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <MX_GPIO_Init+0xbc>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <MX_GPIO_Init+0xbc>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <MX_GPIO_Init+0xbc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a22      	ldr	r2, [pc, #136]	@ (8001788 <MX_GPIO_Init+0xbc>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <MX_GPIO_Init+0xbc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <MX_GPIO_Init+0xbc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <MX_GPIO_Init+0xbc>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <MX_GPIO_Init+0xbc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001730:	4816      	ldr	r0, [pc, #88]	@ (800178c <MX_GPIO_Init+0xc0>)
 8001732:	f001 fad3 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 8001736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <MX_GPIO_Init+0xc4>)
 800174e:	f001 f919 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	@ (800178c <MX_GPIO_Init+0xc0>)
 800176c:	f001 f90a 	bl	8002984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2028      	movs	r0, #40	@ 0x28
 8001776:	f000 fc6e 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800177a:	2028      	movs	r0, #40	@ 0x28
 800177c:	f000 fc87 	bl	800208e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800

08001794 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e009      	b.n	80017ba <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	60ba      	str	r2, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fd6c 	bl	800128c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf1      	blt.n	80017a6 <_write+0x12>
  }
  return len;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	printf("Se ha recibido un bloque entero de audio.");
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <HAL_I2S_RxCpltCallback+0x1c>)
 80017d6:	f007 fecb 	bl	8009570 <iprintf>

	full_i2s = 1;
 80017da:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <HAL_I2S_RxCpltCallback+0x20>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	0800a464 	.word	0x0800a464
 80017ec:	200032a5 	.word	0x200032a5

080017f0 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	printf("Se ha recibido medio bloque de audio.");
 80017f8:	4807      	ldr	r0, [pc, #28]	@ (8001818 <HAL_I2S_RxHalfCpltCallback+0x28>)
 80017fa:	f007 feb9 	bl	8009570 <iprintf>
	sample_i2s = data_i2s[0];
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001800:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8001806:	801a      	strh	r2, [r3, #0]
	half_i2s = 1;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_I2S_RxHalfCpltCallback+0x34>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	0800a490 	.word	0x0800a490
 800181c:	200022a0 	.word	0x200022a0
 8001820:	200032a0 	.word	0x200032a0
 8001824:	200032a4 	.word	0x200032a4

08001828 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin) {
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001838:	d102      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 800183a:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_GPIO_EXTI_Callback+0x24>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
	}
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	200032a2 	.word	0x200032a2

08001850 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001856:	463b      	mov	r3, r7
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001862:	f000 fc2f 	bl	80020c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800186a:	2300      	movs	r3, #0
 800186c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001872:	231f      	movs	r3, #31
 8001874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001876:	2387      	movs	r3, #135	@ 0x87
 8001878:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800187a:	2300      	movs	r3, #0
 800187c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800187e:	2300      	movs	r3, #0
 8001880:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001882:	2301      	movs	r3, #1
 8001884:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001892:	463b      	mov	r3, r7
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fc4d 	bl	8002134 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800189a:	2004      	movs	r0, #4
 800189c:	f000 fc2a 	bl	80020f4 <HAL_MPU_Enable>

}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <HAL_MspInit+0x44>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a0e      	ldr	r2, [pc, #56]	@ (80018f8 <HAL_MspInit+0x44>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <HAL_MspInit+0x44>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_MspInit+0x44>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_MspInit+0x44>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_MspInit+0x44>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2290      	movs	r2, #144	@ 0x90
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f007 ff6f 	bl	8009800 <memset>
  if(hi2s->Instance==SPI2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a3e      	ldr	r2, [pc, #248]	@ (8001a20 <HAL_I2S_MspInit+0x124>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d175      	bne.n	8001a18 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 135;
 800192c:	2387      	movs	r3, #135	@ 0x87
 800192e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001930:	2302      	movs	r3, #2
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001934:	2303      	movs	r3, #3
 8001936:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8001940:	2300      	movs	r3, #0
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4618      	mov	r0, r3
 800194a:	f002 f99b 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8001954:	f7ff ffa8 	bl	80018a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001958:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <HAL_I2S_MspInit+0x128>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <HAL_I2S_MspInit+0x128>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_I2S_MspInit+0x128>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b2c      	ldr	r3, [pc, #176]	@ (8001a24 <HAL_I2S_MspInit+0x128>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <HAL_I2S_MspInit+0x128>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	6313      	str	r3, [r2, #48]	@ 0x30
 800197c:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <HAL_I2S_MspInit+0x128>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001988:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800198c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a2:	2305      	movs	r3, #5
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ac:	4619      	mov	r1, r3
 80019ae:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <HAL_I2S_MspInit+0x12c>)
 80019b0:	f000 ffe8 	bl	8002984 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a30 <HAL_I2S_MspInit+0x134>)
 80019b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019bc:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 80019c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019dc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019f4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80019fc:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 80019fe:	f000 fbd9 	bl	80021b4 <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001a08:	f7ff ff4e 	bl	80018a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 8001a10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a12:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <HAL_I2S_MspInit+0x130>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001a18:	bf00      	nop
 8001a1a:	37b8      	adds	r7, #184	@ 0xb8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40003800 	.word	0x40003800
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	20002190 	.word	0x20002190
 8001a30:	40026028 	.word	0x40026028

08001a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a17      	ldr	r2, [pc, #92]	@ (8001ab0 <HAL_SPI_MspInit+0x7c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d127      	bne.n	8001aa6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_SPI_MspInit+0x80>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	4a16      	ldr	r2, [pc, #88]	@ (8001ab4 <HAL_SPI_MspInit+0x80>)
 8001a5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_SPI_MspInit+0x80>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_SPI_MspInit+0x80>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a10      	ldr	r2, [pc, #64]	@ (8001ab4 <HAL_SPI_MspInit+0x80>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_SPI_MspInit+0x80>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001a86:	23e0      	movs	r3, #224	@ 0xe0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a96:	2305      	movs	r3, #5
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <HAL_SPI_MspInit+0x84>)
 8001aa2:	f000 ff6f 	bl	8002984 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	@ 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40013000 	.word	0x40013000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000

08001abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b18:	d11b      	bne.n	8001b52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_CK_Pin;
 8001b32:	2308      	movs	r3, #8
 8001b34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_CK_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b4e:	f000 ff19 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <NMI_Handler+0x4>

08001b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <SysTick_Handler+0x34>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <SysTick_Handler+0x18>
		Timer1--;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <SysTick_Handler+0x34>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <SysTick_Handler+0x34>)
 8001bce:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001bd0:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <SysTick_Handler+0x38>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <SysTick_Handler+0x2c>
		Timer2--;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <SysTick_Handler+0x38>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <SysTick_Handler+0x38>)
 8001be2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 f918 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000214a 	.word	0x2000214a
 8001bf0:	2000214c 	.word	0x2000214c

08001bf4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <DMA1_Stream1_IRQHandler+0x10>)
 8001bfa:	f000 fc59 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20002190 	.word	0x20002190

08001c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8001c0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c10:	f001 f87e 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00a      	b.n	8001c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	4601      	mov	r1, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf0      	blt.n	8001c2a <_read+0x12>
  }

  return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_isatty>:

int _isatty(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f007 fdd6 	bl	800989c <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20080000 	.word	0x20080000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	200032a8 	.word	0x200032a8
 8001d24:	20003638 	.word	0x20003638

08001d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d50:	f7ff ffea 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f007 fd95 	bl	80098a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7ff faad 	bl	80012dc <main>
  bx  lr    
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001d90:	0800a99c 	.word	0x0800a99c
  ldr r2, =_sbss
 8001d94:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001d98:	20003638 	.word	0x20003638

08001d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>

08001d9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da2:	2003      	movs	r0, #3
 8001da4:	f000 f94c 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da8:	200f      	movs	r0, #15
 8001daa:	f000 f805 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dae:	f7ff fd81 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f967 	bl	80020aa <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f92f 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000040 	.word	0x20000040
 8001e10:	20000048 	.word	0x20000048
 8001e14:	20000044 	.word	0x20000044

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000048 	.word	0x20000048
 8001e3c:	200032ac 	.word	0x200032ac

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200032ac 	.word	0x200032ac

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000048 	.word	0x20000048

08001ea0 <__NVIC_SetPriorityGrouping>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	05fa0000 	.word	0x05fa0000

08001ee8 <__NVIC_GetPriorityGrouping>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020c8:	f3bf 8f5f 	dmb	sy
}
 80020cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <HAL_MPU_Disable+0x28>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <HAL_MPU_Disable+0x28>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_MPU_Disable+0x2c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00
 80020f0:	e000ed90 	.word	0xe000ed90

080020f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_MPU_Enable+0x38>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_MPU_Enable+0x3c>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_MPU_Enable+0x3c>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002110:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002112:	f3bf 8f4f 	dsb	sy
}
 8002116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002118:	f3bf 8f6f 	isb	sy
}
 800211c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed90 	.word	0xe000ed90
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	785a      	ldrb	r2, [r3, #1]
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002142:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <HAL_MPU_ConfigRegion+0x7c>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002150:	4a17      	ldr	r2, [pc, #92]	@ (80021b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7b1b      	ldrb	r3, [r3, #12]
 800215c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7adb      	ldrb	r3, [r3, #11]
 8002162:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7a9b      	ldrb	r3, [r3, #10]
 800216a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800216c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b5b      	ldrb	r3, [r3, #13]
 8002172:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002174:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7b9b      	ldrb	r3, [r3, #14]
 800217a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800217c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7bdb      	ldrb	r3, [r3, #15]
 8002182:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7a5b      	ldrb	r3, [r3, #9]
 800218a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800218c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7a1b      	ldrb	r3, [r3, #8]
 8002192:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002194:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800219c:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800219e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a0:	6113      	str	r3, [r2, #16]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed90 	.word	0xe000ed90

080021b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff fe3e 	bl	8001e40 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e099      	b.n	8002304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f0:	e00f      	b.n	8002212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f2:	f7ff fe25 	bl	8001e40 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d908      	bls.n	8002212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e078      	b.n	8002304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e8      	bne.n	80021f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4b38      	ldr	r3, [pc, #224]	@ (800230c <HAL_DMA_Init+0x158>)
 800222c:	4013      	ands	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	2b04      	cmp	r3, #4
 800226a:	d107      	bne.n	800227c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	4313      	orrs	r3, r2
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0307 	bic.w	r3, r3, #7
 8002292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d117      	bne.n	80022d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fae7 	bl	800288c <DMA_CheckFifoParam>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022d2:	2301      	movs	r3, #1
 80022d4:	e016      	b.n	8002304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa9e 	bl	8002820 <DMA_CalcBaseAndBitshift>
 80022e4:	4603      	mov	r3, r0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	223f      	movs	r2, #63	@ 0x3f
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	e010803f 	.word	0xe010803f

08002310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_DMA_Start_IT+0x26>
 8002332:	2302      	movs	r3, #2
 8002334:	e048      	b.n	80023c8 <HAL_DMA_Start_IT+0xb8>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d137      	bne.n	80023ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fa30 	bl	80027c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	223f      	movs	r2, #63	@ 0x3f
 800236a:	409a      	lsls	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0216 	orr.w	r2, r2, #22
 800237e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800238e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0208 	orr.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e005      	b.n	80023c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023de:	f7ff fd2f 	bl	8001e40 <HAL_GetTick>
 80023e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d008      	beq.n	8002402 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2280      	movs	r2, #128	@ 0x80
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e052      	b.n	80024a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0216 	bic.w	r2, r2, #22
 8002410:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002420:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_DMA_Abort+0x62>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002452:	e013      	b.n	800247c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002454:	f7ff fcf4 	bl	8001e40 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b05      	cmp	r3, #5
 8002460:	d90c      	bls.n	800247c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2203      	movs	r2, #3
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e015      	b.n	80024a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e4      	bne.n	8002454 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	223f      	movs	r2, #63	@ 0x3f
 8002490:	409a      	lsls	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <HAL_DMA_IRQHandler+0x248>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	@ (80026fc <HAL_DMA_IRQHandler+0x24c>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0a9b      	lsrs	r3, r3, #10
 80024c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	2208      	movs	r2, #8
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01a      	beq.n	800251c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0204 	bic.w	r2, r2, #4
 8002502:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	2208      	movs	r2, #8
 800250a:	409a      	lsls	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d012      	beq.n	8002552 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	2201      	movs	r2, #1
 8002540:	409a      	lsls	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	2204      	movs	r2, #4
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d012      	beq.n	8002588 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002574:	2204      	movs	r2, #4
 8002576:	409a      	lsls	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	2210      	movs	r2, #16
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d043      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d03c      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	2210      	movs	r2, #16
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d024      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4798      	blx	r3
 80025de:	e01f      	b.n	8002620 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
 80025f0:	e016      	b.n	8002620 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0208 	bic.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	2220      	movs	r2, #32
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 808f 	beq.w	8002750 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8087 	beq.w	8002750 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2220      	movs	r2, #32
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b05      	cmp	r3, #5
 8002658:	d136      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0216 	bic.w	r2, r2, #22
 8002668:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002678:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <HAL_DMA_IRQHandler+0x1da>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0208 	bic.w	r2, r2, #8
 8002698:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	223f      	movs	r2, #63	@ 0x3f
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d07e      	beq.n	80027bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
        }
        return;
 80026c6:	e079      	b.n	80027bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01d      	beq.n	8002712 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10d      	bne.n	8002700 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d031      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e02c      	b.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
 80026f6:	bf00      	nop
 80026f8:	20000040 	.word	0x20000040
 80026fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e01e      	b.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10f      	bne.n	8002740 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0210 	bic.w	r2, r2, #16
 800272e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d022      	beq.n	80027aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2205      	movs	r2, #5
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3301      	adds	r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	d307      	bcc.n	8002798 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f2      	bne.n	800277c <HAL_DMA_IRQHandler+0x2cc>
 8002796:	e000      	b.n	800279a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002798:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e000      	b.n	80027be <HAL_DMA_IRQHandler+0x30e>
        return;
 80027bc:	bf00      	nop
    }
  }
}
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b40      	cmp	r3, #64	@ 0x40
 80027f0:	d108      	bne.n	8002804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002802:	e007      	b.n	8002814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3b10      	subs	r3, #16
 8002830:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <DMA_CalcBaseAndBitshift+0x60>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <DMA_CalcBaseAndBitshift+0x64>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d908      	bls.n	8002860 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <DMA_CalcBaseAndBitshift+0x68>)
 8002856:	4013      	ands	r3, r2
 8002858:	1d1a      	adds	r2, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	@ 0x58
 800285e:	e006      	b.n	800286e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	aaaaaaab 	.word	0xaaaaaaab
 8002884:	0800a510 	.word	0x0800a510
 8002888:	fffffc00 	.word	0xfffffc00

0800288c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d856      	bhi.n	800295a <DMA_CheckFifoParam+0xce>
 80028ac:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <DMA_CheckFifoParam+0x28>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028d7 	.word	0x080028d7
 80028bc:	080028c5 	.word	0x080028c5
 80028c0:	0800295b 	.word	0x0800295b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d046      	beq.n	800295e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e043      	b.n	800295e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028de:	d140      	bne.n	8002962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e03d      	b.n	8002962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ee:	d121      	bne.n	8002934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d837      	bhi.n	8002966 <DMA_CheckFifoParam+0xda>
 80028f6:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <DMA_CheckFifoParam+0x70>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002913 	.word	0x08002913
 8002904:	0800290d 	.word	0x0800290d
 8002908:	08002925 	.word	0x08002925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e030      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e022      	b.n	800296a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002932:	e01c      	b.n	800296e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d903      	bls.n	8002942 <DMA_CheckFifoParam+0xb6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002940:	e018      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      break;
 8002946:	e015      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e00b      	b.n	8002972 <DMA_CheckFifoParam+0xe6>
      break;
 800295a:	bf00      	nop
 800295c:	e00a      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e008      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e006      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;   
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
    }
  } 
  
  return status; 
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e175      	b.n	8002c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f040 8164 	bne.w	8002c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d005      	beq.n	80029da <HAL_GPIO_Init+0x56>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d130      	bne.n	8002a3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d017      	beq.n	8002a78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d123      	bne.n	8002acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	08da      	lsrs	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80be 	beq.w	8002c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	4b66      	ldr	r3, [pc, #408]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4a65      	ldr	r2, [pc, #404]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1a:	4b63      	ldr	r3, [pc, #396]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b26:	4a61      	ldr	r2, [pc, #388]	@ (8002cac <HAL_GPIO_Init+0x328>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	@ (8002cb0 <HAL_GPIO_Init+0x32c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d037      	beq.n	8002bc2 <HAL_GPIO_Init+0x23e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a57      	ldr	r2, [pc, #348]	@ (8002cb4 <HAL_GPIO_Init+0x330>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d031      	beq.n	8002bbe <HAL_GPIO_Init+0x23a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a56      	ldr	r2, [pc, #344]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02b      	beq.n	8002bba <HAL_GPIO_Init+0x236>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a55      	ldr	r2, [pc, #340]	@ (8002cbc <HAL_GPIO_Init+0x338>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x232>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a54      	ldr	r2, [pc, #336]	@ (8002cc0 <HAL_GPIO_Init+0x33c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x22e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a53      	ldr	r2, [pc, #332]	@ (8002cc4 <HAL_GPIO_Init+0x340>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x22a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	@ (8002cc8 <HAL_GPIO_Init+0x344>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a51      	ldr	r2, [pc, #324]	@ (8002ccc <HAL_GPIO_Init+0x348>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	@ (8002cd0 <HAL_GPIO_Init+0x34c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4f      	ldr	r2, [pc, #316]	@ (8002cd4 <HAL_GPIO_Init+0x350>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b9a:	2309      	movs	r3, #9
 8002b9c:	e012      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	e010      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	e00e      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00c      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002baa:	2306      	movs	r3, #6
 8002bac:	e00a      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bae:	2305      	movs	r3, #5
 8002bb0:	e008      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e004      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e002      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f002 0203 	and.w	r2, r2, #3
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bd4:	4935      	ldr	r1, [pc, #212]	@ (8002cac <HAL_GPIO_Init+0x328>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c06:	4a34      	ldr	r2, [pc, #208]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c0c:	4b32      	ldr	r3, [pc, #200]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c30:	4a29      	ldr	r2, [pc, #164]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c36:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	f67f ae86 	bls.w	80029a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3724      	adds	r7, #36	@ 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40013800 	.word	0x40013800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020c00 	.word	0x40020c00
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40021400 	.word	0x40021400
 8002cc8:	40021800 	.word	0x40021800
 8002ccc:	40021c00 	.word	0x40021c00
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40022400 	.word	0x40022400
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fd7a 	bl	8001828 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0d2      	b.n	8002ef8 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe fdc8 	bl	80018fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69d9      	ldr	r1, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <HAL_I2S_Init+0x1c0>)
 8002d80:	400b      	ands	r3, r1
 8002d82:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d067      	beq.n	8002e64 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e001      	b.n	8002da6 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d802      	bhi.n	8002db4 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002dbc:	4b51      	ldr	r3, [pc, #324]	@ (8002f04 <HAL_I2S_Init+0x1c4>)
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e003      	b.n	8002dca <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa24 	bl	8003210 <I2S_GetClockFreq>
 8002dc8:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd2:	d125      	bne.n	8002e20 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	3305      	adds	r3, #5
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e01f      	b.n	8002e3e <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	3305      	adds	r3, #5
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e00e      	b.n	8002e3e <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	3305      	adds	r3, #5
 8002e3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4a31      	ldr	r2, [pc, #196]	@ (8002f08 <HAL_I2S_Init+0x1c8>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	08db      	lsrs	r3, r3, #3
 8002e48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e003      	b.n	8002e6c <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d902      	bls.n	8002e78 <HAL_I2S_Init+0x138>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2bff      	cmp	r3, #255	@ 0xff
 8002e76:	d907      	bls.n	8002e88 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7c:	f043 0210 	orr.w	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e037      	b.n	8002ef8 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	ea42 0103 	orr.w	r1, r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <HAL_I2S_Init+0x1c0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6851      	ldr	r1, [r2, #4]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68d2      	ldr	r2, [r2, #12]
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6992      	ldr	r2, [r2, #24]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b30      	cmp	r3, #48	@ 0x30
 8002ece:	d003      	beq.n	8002ed8 <HAL_I2S_Init+0x198>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2bb0      	cmp	r3, #176	@ 0xb0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ee6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	fffff040 	.word	0xfffff040
 8002f04:	00bb8000 	.word	0x00bb8000
 8002f08:	cccccccd 	.word	0xcccccccd

08002f0c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_I2S_Receive_DMA+0x1a>
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0a1      	b.n	800306e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_I2S_Receive_DMA+0x2e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e099      	b.n	800306e <HAL_I2S_Receive_DMA+0x162>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d005      	beq.n	8002f5a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
 8002f58:	e089      	b.n	800306e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d002      	beq.n	8002f86 <HAL_I2S_Receive_DMA+0x7a>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d10a      	bne.n	8002f9c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8002f9a:	e005      	b.n	8002fa8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fac:	4a32      	ldr	r2, [pc, #200]	@ (8003078 <HAL_I2S_Receive_DMA+0x16c>)
 8002fae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	4a31      	ldr	r2, [pc, #196]	@ (800307c <HAL_I2S_Receive_DMA+0x170>)
 8002fb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbc:	4a30      	ldr	r2, [pc, #192]	@ (8003080 <HAL_I2S_Receive_DMA+0x174>)
 8002fbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fce:	d10a      	bne.n	8002fe6 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ffc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002ffe:	f7ff f987 	bl	8002310 <HAL_DMA_Start_IT>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	f043 0208 	orr.w	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e022      	b.n	800306e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003044:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	080032eb 	.word	0x080032eb
 800307c:	080032a9 	.word	0x080032a9
 8003080:	08003307 	.word	0x08003307

08003084 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d003      	beq.n	80030a2 <HAL_I2S_DMAStop+0x1e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d155      	bne.n	800314e <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00f      	beq.n	80030ca <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff f98e 	bl	80023d0 <HAL_DMA_Abort>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030be:	f043 0208 	orr.w	r2, r3, #8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80030ca:	2364      	movs	r3, #100	@ 0x64
 80030cc:	2201      	movs	r2, #1
 80030ce:	2102      	movs	r1, #2
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f93e 	bl	8003352 <I2S_WaitFlagStateUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80030f4:	2364      	movs	r3, #100	@ 0x64
 80030f6:	2200      	movs	r2, #0
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f929 	bl	8003352 <I2S_WaitFlagStateUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0202 	bic.w	r2, r2, #2
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	e04d      	b.n	80031ea <HAL_I2S_DMAStop+0x166>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003156:	d004      	beq.n	8003162 <HAL_I2S_DMAStop+0xde>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003160:	d143      	bne.n	80031ea <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00f      	beq.n	800318a <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f92e 	bl	80023d0 <HAL_DMA_Abort>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317e:	f043 0208 	orr.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003198:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c8:	d10c      	bne.n	80031e4 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
 80031e2:	e002      	b.n	80031ea <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return errorcode;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d02d      	beq.n	800327c <I2S_GetClockFreq+0x6c>
 8003220:	2b02      	cmp	r3, #2
 8003222:	d12e      	bne.n	8003282 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003224:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <I2S_GetClockFreq+0x88>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003230:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <I2S_GetClockFreq+0x88>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003238:	4a18      	ldr	r2, [pc, #96]	@ (800329c <I2S_GetClockFreq+0x8c>)
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e007      	b.n	8003252 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <I2S_GetClockFreq+0x88>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800324a:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <I2S_GetClockFreq+0x90>)
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <I2S_GetClockFreq+0x88>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003258:	0f1b      	lsrs	r3, r3, #28
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <I2S_GetClockFreq+0x88>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	fb03 f202 	mul.w	r2, r3, r2
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	613b      	str	r3, [r7, #16]

      break;
 800327a:	e005      	b.n	8003288 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <I2S_GetClockFreq+0x94>)
 800327e:	613b      	str	r3, [r7, #16]
      break;
 8003280:	e002      	b.n	8003288 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
      break;
 8003286:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8003288:	693b      	ldr	r3, [r7, #16]
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	00f42400 	.word	0x00f42400
 80032a0:	017d7840 	.word	0x017d7840
 80032a4:	00bb8000 	.word	0x00bb8000

080032a8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7fe fa75 	bl	80017cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7fe fa79 	bl	80017f0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003312:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0203 	bic.w	r2, r2, #3
 8003322:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	f043 0208 	orr.w	r2, r3, #8
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff59 	bl	80031fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003362:	f7fe fd6d 	bl	8001e40 <HAL_GetTick>
 8003366:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003368:	e018      	b.n	800339c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d014      	beq.n	800339c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003372:	f7fe fd65 	bl	8001e40 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d902      	bls.n	8003388 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e00f      	b.n	80033bc <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d1d7      	bne.n	800336a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e29b      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e8:	4b96      	ldr	r3, [pc, #600]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d00c      	beq.n	800340e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f4:	4b93      	ldr	r3, [pc, #588]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d112      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
 8003400:	4b90      	ldr	r3, [pc, #576]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	4b8d      	ldr	r3, [pc, #564]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x130>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d168      	bne.n	80034f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e275      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x7a>
 8003430:	4b84      	ldr	r3, [pc, #528]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a83      	ldr	r2, [pc, #524]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e02e      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x9c>
 8003446:	4b7f      	ldr	r3, [pc, #508]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b7c      	ldr	r3, [pc, #496]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7b      	ldr	r2, [pc, #492]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003458:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e01d      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0xc0>
 800346a:	4b76      	ldr	r3, [pc, #472]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b73      	ldr	r3, [pc, #460]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a72      	ldr	r2, [pc, #456]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 8003484:	4b6f      	ldr	r3, [pc, #444]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6e      	ldr	r2, [pc, #440]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b6c      	ldr	r3, [pc, #432]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6b      	ldr	r2, [pc, #428]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800349a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fccc 	bl	8001e40 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe fcc8 	bl	8001e40 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e229      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe fcb8 	bl	8001e40 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fcb4 	bl	8001e40 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e215      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	4b57      	ldr	r3, [pc, #348]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x110>
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d069      	beq.n	80035d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003502:	4b50      	ldr	r3, [pc, #320]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b4d      	ldr	r3, [pc, #308]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b08      	cmp	r3, #8
 8003518:	d11c      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
 800351a:	4b4a      	ldr	r3, [pc, #296]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	4b47      	ldr	r3, [pc, #284]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_RCC_OscConfig+0x17a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1e9      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b41      	ldr	r3, [pc, #260]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	493d      	ldr	r1, [pc, #244]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	e040      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355c:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a38      	ldr	r2, [pc, #224]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe fc6a 	bl	8001e40 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe fc66 	bl	8001e40 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1c7      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	4b30      	ldr	r3, [pc, #192]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b2d      	ldr	r3, [pc, #180]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4929      	ldr	r1, [pc, #164]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e018      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe fc46 	bl	8001e40 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe fc42 	bl	8001e40 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1a3      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d038      	beq.n	8003654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ee:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe fc23 	bl	8001e40 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe fc1f 	bl	8001e40 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e180      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x23a>
 800361c:	e01a      	b.n	8003654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361e:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <HAL_RCC_OscConfig+0x280>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe fc09 	bl	8001e40 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe fc05 	bl	8001e40 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d903      	bls.n	8003648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e166      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
 8003644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b92      	ldr	r3, [pc, #584]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a4 	beq.w	80037aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4b8c      	ldr	r3, [pc, #560]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	4b89      	ldr	r3, [pc, #548]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	4a88      	ldr	r2, [pc, #544]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	@ 0x40
 800367a:	4b86      	ldr	r3, [pc, #536]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368a:	4b83      	ldr	r3, [pc, #524]	@ (8003898 <HAL_RCC_OscConfig+0x4d4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003696:	4b80      	ldr	r3, [pc, #512]	@ (8003898 <HAL_RCC_OscConfig+0x4d4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7f      	ldr	r2, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x4d4>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fbcd 	bl	8001e40 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe fbc9 	bl	8001e40 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e12a      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036bc:	4b76      	ldr	r3, [pc, #472]	@ (8003898 <HAL_RCC_OscConfig+0x4d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x31a>
 80036d0:	4b70      	ldr	r3, [pc, #448]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a6f      	ldr	r2, [pc, #444]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	e02d      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x33c>
 80036e6:	4b6b      	ldr	r3, [pc, #428]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	4b68      	ldr	r3, [pc, #416]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a67      	ldr	r2, [pc, #412]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fe:	e01c      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b05      	cmp	r3, #5
 8003706:	d10c      	bne.n	8003722 <HAL_RCC_OscConfig+0x35e>
 8003708:	4b62      	ldr	r3, [pc, #392]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370c:	4a61      	ldr	r2, [pc, #388]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6713      	str	r3, [r2, #112]	@ 0x70
 8003714:	4b5f      	ldr	r3, [pc, #380]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003718:	4a5e      	ldr	r2, [pc, #376]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003720:	e00b      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 8003722:	4b5c      	ldr	r3, [pc, #368]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a5b      	ldr	r2, [pc, #364]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	4b59      	ldr	r3, [pc, #356]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a58      	ldr	r2, [pc, #352]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d015      	beq.n	800376e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe fb7d 	bl	8001e40 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe fb79 	bl	8001e40 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0d8      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	4b4c      	ldr	r3, [pc, #304]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ee      	beq.n	800374a <HAL_RCC_OscConfig+0x386>
 800376c:	e014      	b.n	8003798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe fb67 	bl	8001e40 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fe fb63 	bl	8001e40 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0c2      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379e:	4b3d      	ldr	r3, [pc, #244]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80ae 	beq.w	8003910 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	4b37      	ldr	r3, [pc, #220]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d06d      	beq.n	800389c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d14b      	bne.n	8003860 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c8:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a31      	ldr	r2, [pc, #196]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fb34 	bl	8001e40 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fb30 	bl	8001e40 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e091      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	491b      	ldr	r1, [pc, #108]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b19      	ldr	r3, [pc, #100]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe fb02 	bl	8001e40 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fafe 	bl	8001e40 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e05f      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x47c>
 800385e:	e057      	b.n	8003910 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0b      	ldr	r2, [pc, #44]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800386a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe fae8 	bl	8001e40 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fae4 	bl	8001e40 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e045      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x4b0>
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x54c>
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800389c:	4b1f      	ldr	r3, [pc, #124]	@ (800391c <HAL_RCC_OscConfig+0x558>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d030      	beq.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d129      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d122      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038cc:	4013      	ands	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d119      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	3b01      	subs	r3, #1
 80038e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d10f      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0d0      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b67      	ldr	r3, [pc, #412]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 020f 	bic.w	r2, r3, #15
 800394e:	4965      	ldr	r1, [pc, #404]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003980:	4b59      	ldr	r3, [pc, #356]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a58      	ldr	r2, [pc, #352]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800398a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003998:	4b53      	ldr	r3, [pc, #332]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a52      	ldr	r2, [pc, #328]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	494d      	ldr	r1, [pc, #308]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d040      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d115      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e073      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06b      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b39      	ldr	r3, [pc, #228]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4936      	ldr	r1, [pc, #216]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fe fa14 	bl	8001e40 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fe fa10 	bl	8001e40 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e053      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d210      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b24      	ldr	r3, [pc, #144]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 020f 	bic.w	r2, r3, #15
 8003a5a:	4922      	ldr	r1, [pc, #136]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b20      	ldr	r3, [pc, #128]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e032      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4916      	ldr	r1, [pc, #88]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	490e      	ldr	r1, [pc, #56]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab2:	f000 f821 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	490a      	ldr	r1, [pc, #40]	@ (8003aec <HAL_RCC_ClockConfig+0x1cc>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	4a09      	ldr	r2, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1d0>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ace:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f970 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023c00 	.word	0x40023c00
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	0800a500 	.word	0x0800a500
 8003af0:	20000040 	.word	0x20000040
 8003af4:	20000044 	.word	0x20000044

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b090      	sub	sp, #64	@ 0x40
 8003afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b04:	2300      	movs	r3, #0
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b08:	2300      	movs	r3, #0
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b10:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	f200 80a1 	bhi.w	8003c64 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x34>
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b2a:	e09b      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4b53      	ldr	r3, [pc, #332]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b30:	e09b      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b32:	4b53      	ldr	r3, [pc, #332]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b36:	e098      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b38:	4b4f      	ldr	r3, [pc, #316]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b42:	4b4d      	ldr	r3, [pc, #308]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d028      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2200      	movs	r2, #0
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b60:	2100      	movs	r1, #0
 8003b62:	4b47      	ldr	r3, [pc, #284]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b64:	fb03 f201 	mul.w	r2, r3, r1
 8003b68:	2300      	movs	r3, #0
 8003b6a:	fb00 f303 	mul.w	r3, r0, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a43      	ldr	r2, [pc, #268]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b72:	fba0 1202 	umull	r1, r2, r0, r2
 8003b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b78:	460a      	mov	r2, r1
 8003b7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b7e:	4413      	add	r3, r2
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	2200      	movs	r2, #0
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b92:	f7fc fba5 	bl	80002e0 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b9e:	e053      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba0:	4b35      	ldr	r3, [pc, #212]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	617a      	str	r2, [r7, #20]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bb2:	f04f 0b00 	mov.w	fp, #0
 8003bb6:	4652      	mov	r2, sl
 8003bb8:	465b      	mov	r3, fp
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	0159      	lsls	r1, r3, #5
 8003bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc8:	0150      	lsls	r0, r2, #5
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	ebb2 080a 	subs.w	r8, r2, sl
 8003bd2:	eb63 090b 	sbc.w	r9, r3, fp
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003be2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003be6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bea:	ebb2 0408 	subs.w	r4, r2, r8
 8003bee:	eb63 0509 	sbc.w	r5, r3, r9
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	00eb      	lsls	r3, r5, #3
 8003bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c00:	00e2      	lsls	r2, r4, #3
 8003c02:	4614      	mov	r4, r2
 8003c04:	461d      	mov	r5, r3
 8003c06:	eb14 030a 	adds.w	r3, r4, sl
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	eb45 030b 	adc.w	r3, r5, fp
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	028b      	lsls	r3, r1, #10
 8003c22:	4621      	mov	r1, r4
 8003c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c28:	4621      	mov	r1, r4
 8003c2a:	028a      	lsls	r2, r1, #10
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c32:	2200      	movs	r2, #0
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	60fa      	str	r2, [r7, #12]
 8003c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c3c:	f7fc fb50 	bl	80002e0 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4613      	mov	r3, r2
 8003c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	3301      	adds	r3, #1
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c62:	e002      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3740      	adds	r7, #64	@ 0x40
 8003c70:	46bd      	mov	sp, r7
 8003c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	017d7840 	.word	0x017d7840

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cac:	4b69      	ldr	r3, [pc, #420]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a68      	ldr	r2, [pc, #416]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cb6:	6093      	str	r3, [r2, #8]
 8003cb8:	4b66      	ldr	r3, [pc, #408]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc0:	4964      	ldr	r1, [pc, #400]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cde:	4b5d      	ldr	r3, [pc, #372]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ce4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	4959      	ldr	r1, [pc, #356]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d017      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	494a      	ldr	r1, [pc, #296]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 808b 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d68:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	4a39      	ldr	r2, [pc, #228]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d74:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a34      	ldr	r2, [pc, #208]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d8c:	f7fe f858 	bl	8001e40 <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fe f854 	bl	8001e40 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	@ 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e38f      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db2:	4b28      	ldr	r3, [pc, #160]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d035      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d02e      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd0:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dda:	4b1e      	ldr	r3, [pc, #120]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003df2:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003df8:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d114      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f81c 	bl	8001e40 <HAL_GetTick>
 8003e08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0c:	f7fe f818 	bl	8001e40 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e351      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ee      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e3a:	d111      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e4a:	400b      	ands	r3, r1
 8003e4c:	4901      	ldr	r1, [pc, #4]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
 8003e52:	e00b      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	0ffffcff 	.word	0x0ffffcff
 8003e60:	4bac      	ldr	r3, [pc, #688]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4aab      	ldr	r2, [pc, #684]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e66:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e6a:	6093      	str	r3, [r2, #8]
 8003e6c:	4ba9      	ldr	r3, [pc, #676]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e78:	49a6      	ldr	r1, [pc, #664]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e8a:	4ba2      	ldr	r3, [pc, #648]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e90:	4aa0      	ldr	r2, [pc, #640]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e9a:	4b9e      	ldr	r3, [pc, #632]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	499b      	ldr	r1, [pc, #620]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb8:	4b96      	ldr	r3, [pc, #600]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec6:	4993      	ldr	r1, [pc, #588]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eda:	4b8e      	ldr	r3, [pc, #568]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee8:	498a      	ldr	r1, [pc, #552]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003efc:	4b85      	ldr	r3, [pc, #532]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f0a:	4982      	ldr	r1, [pc, #520]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	4979      	ldr	r1, [pc, #484]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f40:	4b74      	ldr	r3, [pc, #464]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	4971      	ldr	r1, [pc, #452]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f62:	4b6c      	ldr	r3, [pc, #432]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f68:	f023 020c 	bic.w	r2, r3, #12
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	4968      	ldr	r1, [pc, #416]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f84:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	4960      	ldr	r1, [pc, #384]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb4:	4957      	ldr	r1, [pc, #348]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fc8:	4b52      	ldr	r3, [pc, #328]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	494f      	ldr	r1, [pc, #316]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fea:	4b4a      	ldr	r3, [pc, #296]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4946      	ldr	r1, [pc, #280]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800400c:	4b41      	ldr	r3, [pc, #260]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	493e      	ldr	r1, [pc, #248]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800402e:	4b39      	ldr	r3, [pc, #228]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403c:	4935      	ldr	r1, [pc, #212]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800405e:	492d      	ldr	r1, [pc, #180]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d011      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004072:	4b28      	ldr	r3, [pc, #160]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004080:	4924      	ldr	r1, [pc, #144]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800408c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040b2:	4b18      	ldr	r3, [pc, #96]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c0:	4914      	ldr	r1, [pc, #80]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e4:	490b      	ldr	r1, [pc, #44]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004108:	4902      	ldr	r1, [pc, #8]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004124:	4b8a      	ldr	r3, [pc, #552]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800412a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	4986      	ldr	r1, [pc, #536]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004148:	4b81      	ldr	r3, [pc, #516]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800414e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004158:	497d      	ldr	r1, [pc, #500]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d006      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80d6 	beq.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004174:	4b76      	ldr	r3, [pc, #472]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a75      	ldr	r2, [pc, #468]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800417e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd fe5e 	bl	8001e40 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004188:	f7fd fe5a 	bl	8001e40 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	@ 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e195      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419a:	4b6d      	ldr	r3, [pc, #436]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d021      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d11d      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041ba:	4b65      	ldr	r3, [pc, #404]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041c8:	4b61      	ldr	r3, [pc, #388]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ce:	0e1b      	lsrs	r3, r3, #24
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	4958      	ldr	r1, [pc, #352]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02e      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004220:	d129      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004222:	4b4b      	ldr	r3, [pc, #300]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004230:	4b47      	ldr	r3, [pc, #284]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004236:	0f1b      	lsrs	r3, r3, #28
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	019a      	lsls	r2, r3, #6
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	071b      	lsls	r3, r3, #28
 8004256:	493e      	ldr	r1, [pc, #248]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800425e:	4b3c      	ldr	r3, [pc, #240]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004264:	f023 021f 	bic.w	r2, r3, #31
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	3b01      	subs	r3, #1
 800426e:	4938      	ldr	r1, [pc, #224]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01d      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004282:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004288:	0e1b      	lsrs	r3, r3, #24
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004290:	4b2f      	ldr	r3, [pc, #188]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004296:	0f1b      	lsrs	r3, r3, #28
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	019a      	lsls	r2, r3, #6
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	431a      	orrs	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	4926      	ldr	r1, [pc, #152]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	019a      	lsls	r2, r3, #6
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	491a      	ldr	r1, [pc, #104]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042ee:	4b18      	ldr	r3, [pc, #96]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a17      	ldr	r2, [pc, #92]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fa:	f7fd fda1 	bl	8001e40 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004302:	f7fd fd9d 	bl	8001e40 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b64      	cmp	r3, #100	@ 0x64
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0d8      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004314:	4b0e      	ldr	r3, [pc, #56]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	f040 80ce 	bne.w	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004334:	f7fd fd84 	bl	8001e40 <HAL_GetTick>
 8004338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800433a:	e00b      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800433c:	f7fd fd80 	bl	8001e40 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d904      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0bb      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004354:	4b5e      	ldr	r3, [pc, #376]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800435c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004360:	d0ec      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02e      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d12a      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800438a:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004398:	4b4d      	ldr	r3, [pc, #308]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	0f1b      	lsrs	r3, r3, #28
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	019a      	lsls	r2, r3, #6
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	4944      	ldr	r1, [pc, #272]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043c6:	4b42      	ldr	r3, [pc, #264]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	493d      	ldr	r1, [pc, #244]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d022      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f4:	d11d      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043f6:	4b36      	ldr	r3, [pc, #216]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	0e1b      	lsrs	r3, r3, #24
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004404:	4b32      	ldr	r3, [pc, #200]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	0f1b      	lsrs	r3, r3, #28
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	019a      	lsls	r2, r3, #6
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	431a      	orrs	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	071b      	lsls	r3, r3, #28
 800442a:	4929      	ldr	r1, [pc, #164]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d028      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004444:	0e1b      	lsrs	r3, r3, #24
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800444c:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	019a      	lsls	r2, r3, #6
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	431a      	orrs	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	4917      	ldr	r1, [pc, #92]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004480:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	4911      	ldr	r1, [pc, #68]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004490:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0e      	ldr	r2, [pc, #56]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449c:	f7fd fcd0 	bl	8001e40 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044a4:	f7fd fccc 	bl	8001e40 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	@ 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e007      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044c2:	d1ef      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800

080044d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e09d      	b.n	8004622 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f6:	d009      	beq.n	800450c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	e005      	b.n	800450c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd fa84 	bl	8001a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800454c:	d902      	bls.n	8004554 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e002      	b.n	800455a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004558:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004562:	d007      	beq.n	8004574 <HAL_SPI_Init+0xa0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800456c:	d002      	beq.n	8004574 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b6:	ea42 0103 	orr.w	r1, r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	f003 0204 	and.w	r2, r3, #4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045f0:	ea42 0103 	orr.w	r1, r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004610:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b088      	sub	sp, #32
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_SPI_Transmit+0x22>
 8004648:	2302      	movs	r3, #2
 800464a:	e15f      	b.n	800490c <HAL_SPI_Transmit+0x2e2>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004654:	f7fd fbf4 	bl	8001e40 <HAL_GetTick>
 8004658:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d002      	beq.n	8004670 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800466e:	e148      	b.n	8004902 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_SPI_Transmit+0x52>
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004680:	e13f      	b.n	8004902 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2203      	movs	r2, #3
 8004686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046cc:	d10f      	bne.n	80046ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b40      	cmp	r3, #64	@ 0x40
 80046fa:	d007      	beq.n	800470c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800470a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004714:	d94f      	bls.n	80047b6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_SPI_Transmit+0xfa>
 800471e:	8afb      	ldrh	r3, [r7, #22]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d142      	bne.n	80047aa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004748:	e02f      	b.n	80047aa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d112      	bne.n	800477e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800477c:	e015      	b.n	80047aa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477e:	f7fd fb5f 	bl	8001e40 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d803      	bhi.n	8004796 <HAL_SPI_Transmit+0x16c>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d102      	bne.n	800479c <HAL_SPI_Transmit+0x172>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80047a8:	e0ab      	b.n	8004902 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ca      	bne.n	800474a <HAL_SPI_Transmit+0x120>
 80047b4:	e080      	b.n	80048b8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_Transmit+0x19a>
 80047be:	8afb      	ldrh	r3, [r7, #22]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d174      	bne.n	80048ae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d912      	bls.n	80047f4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	881a      	ldrh	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b02      	subs	r3, #2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047f2:	e05c      	b.n	80048ae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800481a:	e048      	b.n	80048ae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d12b      	bne.n	8004882 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d912      	bls.n	800485a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	881a      	ldrh	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	1c9a      	adds	r2, r3, #2
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b02      	subs	r3, #2
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004858:	e029      	b.n	80048ae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004880:	e015      	b.n	80048ae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004882:	f7fd fadd 	bl	8001e40 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d803      	bhi.n	800489a <HAL_SPI_Transmit+0x270>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d102      	bne.n	80048a0 <HAL_SPI_Transmit+0x276>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80048ac:	e029      	b.n	8004902 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1b1      	bne.n	800481c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fb69 	bl	8004f94 <SPI_EndRxTxTransaction>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048d6:	2300      	movs	r3, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e003      	b.n	8004902 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800490a:	7ffb      	ldrb	r3, [r7, #31]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	@ 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_SPI_TransmitReceive+0x26>
 8004936:	2302      	movs	r3, #2
 8004938:	e20a      	b.n	8004d50 <HAL_SPI_TransmitReceive+0x43c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004942:	f7fd fa7d 	bl	8001e40 <HAL_GetTick>
 8004946:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800494e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800495a:	887b      	ldrh	r3, [r7, #2]
 800495c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800495e:	7efb      	ldrb	r3, [r7, #27]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d00e      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x6e>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496a:	d106      	bne.n	800497a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_SPI_TransmitReceive+0x66>
 8004974:	7efb      	ldrb	r3, [r7, #27]
 8004976:	2b04      	cmp	r3, #4
 8004978:	d003      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004980:	e1e0      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x80>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x80>
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800499a:	e1d3      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d003      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2205      	movs	r2, #5
 80049ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049f2:	d802      	bhi.n	80049fa <HAL_SPI_TransmitReceive+0xe6>
 80049f4:	8a3b      	ldrh	r3, [r7, #16]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d908      	bls.n	8004a0c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	e007      	b.n	8004a1c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d007      	beq.n	8004a3a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a42:	f240 8081 	bls.w	8004b48 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x140>
 8004a4e:	8a7b      	ldrh	r3, [r7, #18]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d16d      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a78:	e05a      	b.n	8004b30 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d11b      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x1ac>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x1ac>
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d113      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d11c      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x1f4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b04:	2301      	movs	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b08:	f7fd f99a 	bl	8001e40 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d80b      	bhi.n	8004b30 <HAL_SPI_TransmitReceive+0x21c>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d007      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004b2e:	e109      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d19f      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x166>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d199      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x166>
 8004b46:	e0e3      	b.n	8004d10 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x244>
 8004b50:	8a7b      	ldrh	r3, [r7, #18]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	f040 80cf 	bne.w	8004cf6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d912      	bls.n	8004b88 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	881a      	ldrh	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	1c9a      	adds	r2, r3, #2
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b02      	subs	r3, #2
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b86:	e0b6      	b.n	8004cf6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bae:	e0a2      	b.n	8004cf6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d134      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x314>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d02f      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x314>
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d12c      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d912      	bls.n	8004bfe <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b02      	subs	r3, #2
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bfc:	e012      	b.n	8004c24 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	7812      	ldrb	r2, [r2, #0]
 8004c0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d148      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x3b4>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d042      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d923      	bls.n	8004c96 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b02      	subs	r3, #2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d81f      	bhi.n	8004cc4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	e016      	b.n	8004cc4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f103 020c 	add.w	r2, r3, #12
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	7812      	ldrb	r2, [r2, #0]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cc8:	f7fd f8ba 	bl	8001e40 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d803      	bhi.n	8004ce0 <HAL_SPI_TransmitReceive+0x3cc>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d2>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004cf4:	e026      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f47f af57 	bne.w	8004bb0 <HAL_SPI_TransmitReceive+0x29c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f47f af50 	bne.w	8004bb0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f93d 	bl	8004f94 <SPI_EndRxTxTransaction>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e003      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3728      	adds	r7, #40	@ 0x28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d68:	f7fd f86a 	bl	8001e40 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	4413      	add	r3, r2
 8004d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d78:	f7fd f862 	bl	8001e40 <HAL_GetTick>
 8004d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d7e:	4b39      	ldr	r3, [pc, #228]	@ (8004e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	015b      	lsls	r3, r3, #5
 8004d84:	0d1b      	lsrs	r3, r3, #20
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8e:	e054      	b.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d050      	beq.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d98:	f7fd f852 	bl	8001e40 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d902      	bls.n	8004dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d13d      	bne.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dc6:	d111      	bne.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd0:	d004      	beq.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dda:	d107      	bne.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df4:	d10f      	bne.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e017      	b.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4013      	ands	r3, r2
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d19b      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000040 	.word	0x20000040

08004e68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	@ 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e7a:	f7fc ffe1 	bl	8001e40 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	4413      	add	r3, r2
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e8a:	f7fc ffd9 	bl	8001e40 <HAL_GetTick>
 8004e8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e98:	4b3d      	ldr	r3, [pc, #244]	@ (8004f90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00da      	lsls	r2, r3, #3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	0d1b      	lsrs	r3, r3, #20
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004eb0:	e060      	b.n	8004f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004eb8:	d107      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x62>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d050      	beq.n	8004f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed2:	f7fc ffb5 	bl	8001e40 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d902      	bls.n	8004ee8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d13d      	bne.n	8004f64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f00:	d111      	bne.n	8004f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0a:	d004      	beq.n	8004f16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f14:	d107      	bne.n	8004f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f2e:	d10f      	bne.n	8004f50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e010      	b.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d196      	bne.n	8004eb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3728      	adds	r7, #40	@ 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000040 	.word	0x20000040

08004f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff ff5b 	bl	8004e68 <SPI_WaitFifoStateUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e046      	b.n	8005056 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fc8:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <SPI_EndRxTxTransaction+0xcc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a25      	ldr	r2, [pc, #148]	@ (8005064 <SPI_EndRxTxTransaction+0xd0>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0d5b      	lsrs	r3, r3, #21
 8004fd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe6:	d112      	bne.n	800500e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2180      	movs	r1, #128	@ 0x80
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff feb0 	bl	8004d58 <SPI_WaitFlagStateUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e023      	b.n	8005056 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	3b01      	subs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005024:	2b80      	cmp	r3, #128	@ 0x80
 8005026:	d0f2      	beq.n	800500e <SPI_EndRxTxTransaction+0x7a>
 8005028:	e000      	b.n	800502c <SPI_EndRxTxTransaction+0x98>
        break;
 800502a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ff15 	bl	8004e68 <SPI_WaitFifoStateUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e000      	b.n	8005056 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000040 	.word	0x20000040
 8005064:	165e9f81 	.word	0x165e9f81

08005068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e049      	b.n	800510e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fd14 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 fb6e 	bl	8005788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e049      	b.n	80051bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f841 	bl	80051c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 fb17 	bl	8005788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x24>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e03c      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d109      	bne.n	8005216 <HAL_TIM_PWM_Start+0x3e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e02f      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x58>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e022      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d109      	bne.n	800524a <HAL_TIM_PWM_Start+0x72>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e015      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b10      	cmp	r3, #16
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start+0x8c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <HAL_TIM_PWM_Start+0x9e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e092      	b.n	80053a4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xb6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528c:	e023      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xc6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	e01b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	e013      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0xe6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052bc:	e00b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Start+0xf6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052cc:	e003      	b.n	80052d6 <HAL_TIM_PWM_Start+0xfe>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fdf6 	bl	8005ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <HAL_TIM_PWM_Start+0x1d4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_PWM_Start+0x120>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2f      	ldr	r2, [pc, #188]	@ (80053b0 <HAL_TIM_PWM_Start+0x1d8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_PWM_Start+0x124>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_TIM_PWM_Start+0x126>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a25      	ldr	r2, [pc, #148]	@ (80053ac <HAL_TIM_PWM_Start+0x1d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d01d      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a22      	ldr	r2, [pc, #136]	@ (80053b4 <HAL_TIM_PWM_Start+0x1dc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a20      	ldr	r2, [pc, #128]	@ (80053b8 <HAL_TIM_PWM_Start+0x1e0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1f      	ldr	r2, [pc, #124]	@ (80053bc <HAL_TIM_PWM_Start+0x1e4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a19      	ldr	r2, [pc, #100]	@ (80053b0 <HAL_TIM_PWM_Start+0x1d8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_TIM_PWM_Start+0x1e8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIM_PWM_Start+0x18a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a19      	ldr	r2, [pc, #100]	@ (80053c4 <HAL_TIM_PWM_Start+0x1ec>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d115      	bne.n	800538e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	4b17      	ldr	r3, [pc, #92]	@ (80053c8 <HAL_TIM_PWM_Start+0x1f0>)
 800536a:	4013      	ands	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b06      	cmp	r3, #6
 8005372:	d015      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x1c8>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537a:	d011      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538c:	e008      	b.n	80053a0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e000      	b.n	80053a2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800
 80053c8:	00010007 	.word	0x00010007

080053cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e0ff      	b.n	80055ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b14      	cmp	r3, #20
 80053f6:	f200 80f0 	bhi.w	80055da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005455 	.word	0x08005455
 8005404:	080055db 	.word	0x080055db
 8005408:	080055db 	.word	0x080055db
 800540c:	080055db 	.word	0x080055db
 8005410:	08005495 	.word	0x08005495
 8005414:	080055db 	.word	0x080055db
 8005418:	080055db 	.word	0x080055db
 800541c:	080055db 	.word	0x080055db
 8005420:	080054d7 	.word	0x080054d7
 8005424:	080055db 	.word	0x080055db
 8005428:	080055db 	.word	0x080055db
 800542c:	080055db 	.word	0x080055db
 8005430:	08005517 	.word	0x08005517
 8005434:	080055db 	.word	0x080055db
 8005438:	080055db 	.word	0x080055db
 800543c:	080055db 	.word	0x080055db
 8005440:	08005559 	.word	0x08005559
 8005444:	080055db 	.word	0x080055db
 8005448:	080055db 	.word	0x080055db
 800544c:	080055db 	.word	0x080055db
 8005450:	08005599 	.word	0x08005599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa40 	bl	80058e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
      break;
 8005492:	e0a5      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa92 	bl	80059c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
      break;
 80054d4:	e084      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fae9 	bl	8005ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
      break;
 8005514:	e064      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb3f 	bl	8005ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	61da      	str	r2, [r3, #28]
      break;
 8005556:	e043      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fb76 	bl	8005c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0208 	orr.w	r2, r2, #8
 8005572:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0204 	bic.w	r2, r2, #4
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005596:	e023      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fba8 	bl	8005cf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055d8:	e002      	b.n	80055e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
      break;
 80055de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop

080055f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_TIM_ConfigClockSource+0x1c>
 800560c:	2302      	movs	r3, #2
 800560e:	e0b4      	b.n	800577a <HAL_TIM_ConfigClockSource+0x186>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	4b56      	ldr	r3, [pc, #344]	@ (8005784 <HAL_TIM_ConfigClockSource+0x190>)
 800562c:	4013      	ands	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005648:	d03e      	beq.n	80056c8 <HAL_TIM_ConfigClockSource+0xd4>
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564e:	f200 8087 	bhi.w	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005656:	f000 8086 	beq.w	8005766 <HAL_TIM_ConfigClockSource+0x172>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565e:	d87f      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b70      	cmp	r3, #112	@ 0x70
 8005662:	d01a      	beq.n	800569a <HAL_TIM_ConfigClockSource+0xa6>
 8005664:	2b70      	cmp	r3, #112	@ 0x70
 8005666:	d87b      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b60      	cmp	r3, #96	@ 0x60
 800566a:	d050      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x11a>
 800566c:	2b60      	cmp	r3, #96	@ 0x60
 800566e:	d877      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b50      	cmp	r3, #80	@ 0x50
 8005672:	d03c      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0xfa>
 8005674:	2b50      	cmp	r3, #80	@ 0x50
 8005676:	d873      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d058      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x13a>
 800567c:	2b40      	cmp	r3, #64	@ 0x40
 800567e:	d86f      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b30      	cmp	r3, #48	@ 0x30
 8005682:	d064      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b30      	cmp	r3, #48	@ 0x30
 8005686:	d86b      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d060      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 800568c:	2b20      	cmp	r3, #32
 800568e:	d867      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d05c      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005694:	2b10      	cmp	r3, #16
 8005696:	d05a      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	e062      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056aa:	f000 fbf1 	bl	8005e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	609a      	str	r2, [r3, #8]
      break;
 80056c6:	e04f      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056d8:	f000 fbda 	bl	8005e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ea:	609a      	str	r2, [r3, #8]
      break;
 80056ec:	e03c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 fb4e 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2150      	movs	r1, #80	@ 0x50
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fba7 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800570c:	e02c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800571a:	461a      	mov	r2, r3
 800571c:	f000 fb6d 	bl	8005dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2160      	movs	r1, #96	@ 0x60
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fb97 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800572c:	e01c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	461a      	mov	r2, r3
 800573c:	f000 fb2e 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2140      	movs	r1, #64	@ 0x40
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fb87 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800574c:	e00c      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f000 fb7e 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800575e:	e003      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e000      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	fffeff88 	.word	0xfffeff88

08005788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a46      	ldr	r2, [pc, #280]	@ (80058b4 <TIM_Base_SetConfig+0x12c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d013      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a6:	d00f      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a43      	ldr	r2, [pc, #268]	@ (80058b8 <TIM_Base_SetConfig+0x130>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <TIM_Base_SetConfig+0x134>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a41      	ldr	r2, [pc, #260]	@ (80058c0 <TIM_Base_SetConfig+0x138>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a40      	ldr	r2, [pc, #256]	@ (80058c4 <TIM_Base_SetConfig+0x13c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d108      	bne.n	80057da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <TIM_Base_SetConfig+0x12c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e8:	d027      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a32      	ldr	r2, [pc, #200]	@ (80058b8 <TIM_Base_SetConfig+0x130>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d023      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a31      	ldr	r2, [pc, #196]	@ (80058bc <TIM_Base_SetConfig+0x134>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01f      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a30      	ldr	r2, [pc, #192]	@ (80058c0 <TIM_Base_SetConfig+0x138>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2f      	ldr	r2, [pc, #188]	@ (80058c4 <TIM_Base_SetConfig+0x13c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d017      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2e      	ldr	r2, [pc, #184]	@ (80058c8 <TIM_Base_SetConfig+0x140>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2d      	ldr	r2, [pc, #180]	@ (80058cc <TIM_Base_SetConfig+0x144>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2c      	ldr	r2, [pc, #176]	@ (80058d0 <TIM_Base_SetConfig+0x148>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2b      	ldr	r2, [pc, #172]	@ (80058d4 <TIM_Base_SetConfig+0x14c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2a      	ldr	r2, [pc, #168]	@ (80058d8 <TIM_Base_SetConfig+0x150>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a29      	ldr	r2, [pc, #164]	@ (80058dc <TIM_Base_SetConfig+0x154>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d108      	bne.n	800584c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a10      	ldr	r2, [pc, #64]	@ (80058b4 <TIM_Base_SetConfig+0x12c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0xf8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <TIM_Base_SetConfig+0x13c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d103      	bne.n	8005888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]
  }
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800
 80058d4:	40001800 	.word	0x40001800
 80058d8:	40001c00 	.word	0x40001c00
 80058dc:	40002000 	.word	0x40002000

080058e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f023 0201 	bic.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4b2b      	ldr	r3, [pc, #172]	@ (80059b8 <TIM_OC1_SetConfig+0xd8>)
 800590c:	4013      	ands	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 0302 	bic.w	r3, r3, #2
 8005928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <TIM_OC1_SetConfig+0xdc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC1_SetConfig+0x64>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a20      	ldr	r2, [pc, #128]	@ (80059c0 <TIM_OC1_SetConfig+0xe0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d10c      	bne.n	800595e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0308 	bic.w	r3, r3, #8
 800594a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 0304 	bic.w	r3, r3, #4
 800595c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <TIM_OC1_SetConfig+0xdc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC1_SetConfig+0x8e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <TIM_OC1_SetConfig+0xe0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d111      	bne.n	8005992 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	fffeff8f 	.word	0xfffeff8f
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40010400 	.word	0x40010400

080059c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f023 0210 	bic.w	r2, r3, #16
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa8 <TIM_OC2_SetConfig+0xe4>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 0320 	bic.w	r3, r3, #32
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a23      	ldr	r2, [pc, #140]	@ (8005aac <TIM_OC2_SetConfig+0xe8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_OC2_SetConfig+0x68>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a22      	ldr	r2, [pc, #136]	@ (8005ab0 <TIM_OC2_SetConfig+0xec>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10d      	bne.n	8005a48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	@ (8005aac <TIM_OC2_SetConfig+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_OC2_SetConfig+0x94>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a17      	ldr	r2, [pc, #92]	@ (8005ab0 <TIM_OC2_SetConfig+0xec>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d113      	bne.n	8005a80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	feff8fff 	.word	0xfeff8fff
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4b2d      	ldr	r3, [pc, #180]	@ (8005b94 <TIM_OC3_SetConfig+0xe0>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a22      	ldr	r2, [pc, #136]	@ (8005b98 <TIM_OC3_SetConfig+0xe4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_OC3_SetConfig+0x66>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <TIM_OC3_SetConfig+0xe8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d10d      	bne.n	8005b36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a17      	ldr	r2, [pc, #92]	@ (8005b98 <TIM_OC3_SetConfig+0xe4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0x92>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <TIM_OC3_SetConfig+0xe8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d113      	bne.n	8005b6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	621a      	str	r2, [r3, #32]
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	fffeff8f 	.word	0xfffeff8f
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40010400 	.word	0x40010400

08005ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4b1e      	ldr	r3, [pc, #120]	@ (8005c44 <TIM_OC4_SetConfig+0xa4>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a13      	ldr	r2, [pc, #76]	@ (8005c48 <TIM_OC4_SetConfig+0xa8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC4_SetConfig+0x68>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <TIM_OC4_SetConfig+0xac>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d109      	bne.n	8005c1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	feff8fff 	.word	0xfeff8fff
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010400 	.word	0x40010400

08005c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce8 <TIM_OC5_SetConfig+0x98>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a12      	ldr	r2, [pc, #72]	@ (8005cec <TIM_OC5_SetConfig+0x9c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC5_SetConfig+0x5e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a11      	ldr	r2, [pc, #68]	@ (8005cf0 <TIM_OC5_SetConfig+0xa0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d109      	bne.n	8005cc2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	621a      	str	r2, [r3, #32]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	fffeff8f 	.word	0xfffeff8f
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40010400 	.word	0x40010400

08005cf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d90 <TIM_OC6_SetConfig+0x9c>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	051b      	lsls	r3, r3, #20
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a13      	ldr	r2, [pc, #76]	@ (8005d94 <TIM_OC6_SetConfig+0xa0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC6_SetConfig+0x60>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <TIM_OC6_SetConfig+0xa4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d109      	bne.n	8005d68 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	feff8fff 	.word	0xfeff8fff
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40010400 	.word	0x40010400

08005d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0201 	bic.w	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 030a 	bic.w	r3, r3, #10
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f023 0210 	bic.w	r2, r3, #16
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	031b      	lsls	r3, r3, #12
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f043 0307 	orr.w	r3, r3, #7
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1a      	ldr	r2, [r3, #32]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	401a      	ands	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e06d      	b.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a30      	ldr	r2, [pc, #192]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2f      	ldr	r2, [pc, #188]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d108      	bne.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a20      	ldr	r2, [pc, #128]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a16      	ldr	r2, [pc, #88]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a15      	ldr	r2, [pc, #84]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d10c      	bne.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40014000 	.word	0x40014000
 8006034:	40001800 	.word	0x40001800

08006038 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800603c:	4904      	ldr	r1, [pc, #16]	@ (8006050 <MX_FATFS_Init+0x18>)
 800603e:	4805      	ldr	r0, [pc, #20]	@ (8006054 <MX_FATFS_Init+0x1c>)
 8006040:	f003 f8fe 	bl	8009240 <FATFS_LinkDriver>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	4b03      	ldr	r3, [pc, #12]	@ (8006058 <MX_FATFS_Init+0x20>)
 800604a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800604c:	bf00      	nop
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200032b4 	.word	0x200032b4
 8006054:	2000004c 	.word	0x2000004c
 8006058:	200032b0 	.word	0x200032b0

0800605c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006060:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006062:	4618      	mov	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	4618      	mov	r0, r3
 800607a:	f7fa fdf3 	bl	8000c64 <SD_disk_initialize>
 800607e:	4603      	mov	r3, r0
 8006080:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	4603      	mov	r3, r0
 8006092:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa feca 	bl	8000e30 <SD_disk_status>
 800609c:	4603      	mov	r3, r0
 800609e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 80060b8:	7bf8      	ldrb	r0, [r7, #15]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	f7fa fecc 	bl	8000e5c <SD_disk_read>
 80060c4:	4603      	mov	r3, r0
 80060c6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 80060e0:	7bf8      	ldrb	r0, [r7, #15]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	f7fa ff22 	bl	8000f30 <SD_disk_write>
 80060ec:	4603      	mov	r3, r0
 80060ee:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	603a      	str	r2, [r7, #0]
 8006102:	71fb      	strb	r3, [r7, #7]
 8006104:	460b      	mov	r3, r1
 8006106:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	79b9      	ldrb	r1, [r7, #6]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fa ff92 	bl	8001038 <SD_disk_ioctl>
 8006114:	4603      	mov	r3, r0
 8006116:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	4a08      	ldr	r2, [pc, #32]	@ (8006150 <disk_status+0x30>)
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	79fa      	ldrb	r2, [r7, #7]
 8006138:	4905      	ldr	r1, [pc, #20]	@ (8006150 <disk_status+0x30>)
 800613a:	440a      	add	r2, r1
 800613c:	7a12      	ldrb	r2, [r2, #8]
 800613e:	4610      	mov	r0, r2
 8006140:	4798      	blx	r3
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	200034e0 	.word	0x200034e0

08006154 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	4a0d      	ldr	r2, [pc, #52]	@ (800619c <disk_initialize+0x48>)
 8006166:	5cd3      	ldrb	r3, [r2, r3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d111      	bne.n	8006190 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <disk_initialize+0x48>)
 8006170:	2101      	movs	r1, #1
 8006172:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	4a09      	ldr	r2, [pc, #36]	@ (800619c <disk_initialize+0x48>)
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	79fa      	ldrb	r2, [r7, #7]
 8006182:	4906      	ldr	r1, [pc, #24]	@ (800619c <disk_initialize+0x48>)
 8006184:	440a      	add	r2, r1
 8006186:	7a12      	ldrb	r2, [r2, #8]
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	4603      	mov	r3, r0
 800618e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200034e0 	.word	0x200034e0

080061a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4a0a      	ldr	r2, [pc, #40]	@ (80061dc <disk_read+0x3c>)
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	689c      	ldr	r4, [r3, #8]
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	4a07      	ldr	r2, [pc, #28]	@ (80061dc <disk_read+0x3c>)
 80061c0:	4413      	add	r3, r2
 80061c2:	7a18      	ldrb	r0, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	47a0      	blx	r4
 80061cc:	4603      	mov	r3, r0
 80061ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd90      	pop	{r4, r7, pc}
 80061da:	bf00      	nop
 80061dc:	200034e0 	.word	0x200034e0

080061e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	4a0a      	ldr	r2, [pc, #40]	@ (800621c <disk_write+0x3c>)
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68dc      	ldr	r4, [r3, #12]
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	4a07      	ldr	r2, [pc, #28]	@ (800621c <disk_write+0x3c>)
 8006200:	4413      	add	r3, r2
 8006202:	7a18      	ldrb	r0, [r3, #8]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	47a0      	blx	r4
 800620c:	4603      	mov	r3, r0
 800620e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006210:	7dfb      	ldrb	r3, [r7, #23]
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	200034e0 	.word	0x200034e0

08006220 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	603a      	str	r2, [r7, #0]
 800622a:	71fb      	strb	r3, [r7, #7]
 800622c:	460b      	mov	r3, r1
 800622e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	4a09      	ldr	r2, [pc, #36]	@ (8006258 <disk_ioctl+0x38>)
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	79fa      	ldrb	r2, [r7, #7]
 800623e:	4906      	ldr	r1, [pc, #24]	@ (8006258 <disk_ioctl+0x38>)
 8006240:	440a      	add	r2, r1
 8006242:	7a10      	ldrb	r0, [r2, #8]
 8006244:	79b9      	ldrb	r1, [r7, #6]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	4798      	blx	r3
 800624a:	4603      	mov	r3, r0
 800624c:	73fb      	strb	r3, [r7, #15]
  return res;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200034e0 	.word	0x200034e0

0800625c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	b21a      	sxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b21b      	sxth	r3, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	b21b      	sxth	r3, r3
 800627c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800627e:	89fb      	ldrh	r3, [r7, #14]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3303      	adds	r3, #3
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	3202      	adds	r2, #2
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	3201      	adds	r2, #1
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	7812      	ldrb	r2, [r2, #0]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80062c4:	68fb      	ldr	r3, [r7, #12]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	887a      	ldrh	r2, [r7, #2]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	887b      	ldrh	r3, [r7, #2]
 80062ec:	0a1b      	lsrs	r3, r3, #8
 80062ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	0a1b      	lsrs	r3, r3, #8
 8006346:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	1c53      	adds	r3, r2, #1
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6179      	str	r1, [r7, #20]
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3b01      	subs	r3, #1
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f1      	bne.n	800637a <mem_cpy+0x1a>
	}
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	617a      	str	r2, [r7, #20]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f3      	bne.n	80063b2 <mem_set+0x10>
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	@ 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	61fa      	str	r2, [r7, #28]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	61ba      	str	r2, [r7, #24]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	1acb      	subs	r3, r1, r3
 8006404:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3b01      	subs	r3, #1
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <mem_cmp+0x40>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0eb      	beq.n	80063f0 <mem_cmp+0x18>

	return r;
 8006418:	697b      	ldr	r3, [r7, #20]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3724      	adds	r7, #36	@ 0x24
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006430:	e002      	b.n	8006438 <chk_chr+0x12>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3301      	adds	r3, #1
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <chk_chr+0x26>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	4293      	cmp	r3, r2
 800644a:	d1f2      	bne.n	8006432 <chk_chr+0xc>
	return *str;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	781b      	ldrb	r3, [r3, #0]
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e029      	b.n	80064c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006470:	4a27      	ldr	r2, [pc, #156]	@ (8006510 <chk_lock+0xb4>)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	4413      	add	r3, r2
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01d      	beq.n	80064ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800647e:	4a24      	ldr	r2, [pc, #144]	@ (8006510 <chk_lock+0xb4>)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	4413      	add	r3, r2
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d116      	bne.n	80064be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006490:	4a1f      	ldr	r2, [pc, #124]	@ (8006510 <chk_lock+0xb4>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	4413      	add	r3, r2
 8006498:	3304      	adds	r3, #4
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d10c      	bne.n	80064be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006510 <chk_lock+0xb4>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	4413      	add	r3, r2
 80064ac:	3308      	adds	r3, #8
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d102      	bne.n	80064be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064b8:	e007      	b.n	80064ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80064ba:	2301      	movs	r3, #1
 80064bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d9d2      	bls.n	8006470 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d109      	bne.n	80064e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <chk_lock+0x80>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d101      	bne.n	80064e0 <chk_lock+0x84>
 80064dc:	2300      	movs	r3, #0
 80064de:	e010      	b.n	8006502 <chk_lock+0xa6>
 80064e0:	2312      	movs	r3, #18
 80064e2:	e00e      	b.n	8006502 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d108      	bne.n	80064fc <chk_lock+0xa0>
 80064ea:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <chk_lock+0xb4>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	4413      	add	r3, r2
 80064f2:	330c      	adds	r3, #12
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fa:	d101      	bne.n	8006500 <chk_lock+0xa4>
 80064fc:	2310      	movs	r3, #16
 80064fe:	e000      	b.n	8006502 <chk_lock+0xa6>
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	200032c0 	.word	0x200032c0

08006514 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800651a:	2300      	movs	r3, #0
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	e002      	b.n	8006526 <enq_lock+0x12>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3301      	adds	r3, #1
 8006524:	607b      	str	r3, [r7, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d806      	bhi.n	800653a <enq_lock+0x26>
 800652c:	4a09      	ldr	r2, [pc, #36]	@ (8006554 <enq_lock+0x40>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4413      	add	r3, r2
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f2      	bne.n	8006520 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b02      	cmp	r3, #2
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	200032c0 	.word	0x200032c0

08006558 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e01f      	b.n	80065a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006568:	4a41      	ldr	r2, [pc, #260]	@ (8006670 <inc_lock+0x118>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	4413      	add	r3, r2
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d113      	bne.n	80065a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800657a:	4a3d      	ldr	r2, [pc, #244]	@ (8006670 <inc_lock+0x118>)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	4413      	add	r3, r2
 8006582:	3304      	adds	r3, #4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d109      	bne.n	80065a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800658e:	4a38      	ldr	r2, [pc, #224]	@ (8006670 <inc_lock+0x118>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	4413      	add	r3, r2
 8006596:	3308      	adds	r3, #8
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800659e:	429a      	cmp	r2, r3
 80065a0:	d006      	beq.n	80065b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d9dc      	bls.n	8006568 <inc_lock+0x10>
 80065ae:	e000      	b.n	80065b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80065b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d132      	bne.n	800661e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e002      	b.n	80065c4 <inc_lock+0x6c>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d806      	bhi.n	80065d8 <inc_lock+0x80>
 80065ca:	4a29      	ldr	r2, [pc, #164]	@ (8006670 <inc_lock+0x118>)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	4413      	add	r3, r2
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f2      	bne.n	80065be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d101      	bne.n	80065e2 <inc_lock+0x8a>
 80065de:	2300      	movs	r3, #0
 80065e0:	e040      	b.n	8006664 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4922      	ldr	r1, [pc, #136]	@ (8006670 <inc_lock+0x118>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	440b      	add	r3, r1
 80065ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	491e      	ldr	r1, [pc, #120]	@ (8006670 <inc_lock+0x118>)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	440b      	add	r3, r1
 80065fc:	3304      	adds	r3, #4
 80065fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	491a      	ldr	r1, [pc, #104]	@ (8006670 <inc_lock+0x118>)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	440b      	add	r3, r1
 800660c:	3308      	adds	r3, #8
 800660e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006610:	4a17      	ldr	r2, [pc, #92]	@ (8006670 <inc_lock+0x118>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4413      	add	r3, r2
 8006618:	330c      	adds	r3, #12
 800661a:	2200      	movs	r2, #0
 800661c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <inc_lock+0xe0>
 8006624:	4a12      	ldr	r2, [pc, #72]	@ (8006670 <inc_lock+0x118>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	4413      	add	r3, r2
 800662c:	330c      	adds	r3, #12
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <inc_lock+0xe0>
 8006634:	2300      	movs	r3, #0
 8006636:	e015      	b.n	8006664 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d108      	bne.n	8006650 <inc_lock+0xf8>
 800663e:	4a0c      	ldr	r2, [pc, #48]	@ (8006670 <inc_lock+0x118>)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	4413      	add	r3, r2
 8006646:	330c      	adds	r3, #12
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	e001      	b.n	8006654 <inc_lock+0xfc>
 8006650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006654:	4906      	ldr	r1, [pc, #24]	@ (8006670 <inc_lock+0x118>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	440b      	add	r3, r1
 800665c:	330c      	adds	r3, #12
 800665e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	200032c0 	.word	0x200032c0

08006674 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3b01      	subs	r3, #1
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d825      	bhi.n	80066d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006688:	4a17      	ldr	r2, [pc, #92]	@ (80066e8 <dec_lock+0x74>)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	4413      	add	r3, r2
 8006690:	330c      	adds	r3, #12
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800669c:	d101      	bne.n	80066a2 <dec_lock+0x2e>
 800669e:	2300      	movs	r3, #0
 80066a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <dec_lock+0x3a>
 80066a8:	89fb      	ldrh	r3, [r7, #14]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80066ae:	4a0e      	ldr	r2, [pc, #56]	@ (80066e8 <dec_lock+0x74>)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	330c      	adds	r3, #12
 80066b8:	89fa      	ldrh	r2, [r7, #14]
 80066ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80066bc:	89fb      	ldrh	r3, [r7, #14]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <dec_lock+0x5a>
 80066c2:	4a09      	ldr	r2, [pc, #36]	@ (80066e8 <dec_lock+0x74>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	737b      	strb	r3, [r7, #13]
 80066d2:	e001      	b.n	80066d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80066d4:	2302      	movs	r3, #2
 80066d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80066d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200032c0 	.word	0x200032c0

080066ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	e010      	b.n	800671c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80066fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006730 <clear_lock+0x44>)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4413      	add	r3, r2
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d105      	bne.n	8006716 <clear_lock+0x2a>
 800670a:	4a09      	ldr	r2, [pc, #36]	@ (8006730 <clear_lock+0x44>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	4413      	add	r3, r2
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d9eb      	bls.n	80066fa <clear_lock+0xe>
	}
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	200032c0 	.word	0x200032c0

08006734 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	78db      	ldrb	r3, [r3, #3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d034      	beq.n	80067b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7858      	ldrb	r0, [r3, #1]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006758:	2301      	movs	r3, #1
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	f7ff fd40 	bl	80061e0 <disk_write>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006766:	2301      	movs	r3, #1
 8006768:	73fb      	strb	r3, [r7, #15]
 800676a:	e022      	b.n	80067b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	429a      	cmp	r2, r3
 8006780:	d217      	bcs.n	80067b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	789b      	ldrb	r3, [r3, #2]
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	e010      	b.n	80067ac <sync_window+0x78>
					wsect += fs->fsize;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	7858      	ldrb	r0, [r3, #1]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800679e:	2301      	movs	r3, #1
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	f7ff fd1d 	bl	80061e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d8eb      	bhi.n	800678a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d01b      	beq.n	800680c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ffad 	bl	8006734 <sync_window>
 80067da:	4603      	mov	r3, r0
 80067dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d113      	bne.n	800680c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7858      	ldrb	r0, [r3, #1]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067ee:	2301      	movs	r3, #1
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	f7ff fcd5 	bl	80061a0 <disk_read>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006802:	2301      	movs	r3, #1
 8006804:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ff87 	bl	8006734 <sync_window>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d159      	bne.n	80068e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d149      	bne.n	80068cc <sync_fs+0xb4>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d145      	bne.n	80068cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	899b      	ldrh	r3, [r3, #12]
 800684a:	461a      	mov	r2, r3
 800684c:	2100      	movs	r1, #0
 800684e:	f7ff fda8 	bl	80063a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3338      	adds	r3, #56	@ 0x38
 8006856:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800685a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fd37 	bl	80062d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3338      	adds	r3, #56	@ 0x38
 8006868:	4921      	ldr	r1, [pc, #132]	@ (80068f0 <sync_fs+0xd8>)
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fd4c 	bl	8006308 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3338      	adds	r3, #56	@ 0x38
 8006874:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006878:	491e      	ldr	r1, [pc, #120]	@ (80068f4 <sync_fs+0xdc>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fd44 	bl	8006308 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3338      	adds	r3, #56	@ 0x38
 8006884:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7ff fd3a 	bl	8006308 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3338      	adds	r3, #56	@ 0x38
 8006898:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7ff fd30 	bl	8006308 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7858      	ldrb	r0, [r3, #1]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068c0:	2301      	movs	r3, #1
 80068c2:	f7ff fc8d 	bl	80061e0 <disk_write>
			fs->fsi_flag = 0;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fca3 	bl	8006220 <disk_ioctl>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <sync_fs+0xcc>
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	41615252 	.word	0x41615252
 80068f4:	61417272 	.word	0x61417272

080068f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	3b02      	subs	r3, #2
 8006906:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	3b02      	subs	r3, #2
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d301      	bcc.n	8006918 <clust2sect+0x20>
 8006914:	2300      	movs	r3, #0
 8006916:	e008      	b.n	800692a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	895b      	ldrh	r3, [r3, #10]
 800691c:	461a      	mov	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	fb03 f202 	mul.w	r2, r3, r2
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	4413      	add	r3, r2
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d904      	bls.n	8006956 <get_fat+0x20>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d302      	bcc.n	800695c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006956:	2301      	movs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e0ba      	b.n	8006ad2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b03      	cmp	r3, #3
 8006968:	f000 8082 	beq.w	8006a70 <get_fat+0x13a>
 800696c:	2b03      	cmp	r3, #3
 800696e:	f300 80a6 	bgt.w	8006abe <get_fat+0x188>
 8006972:	2b01      	cmp	r3, #1
 8006974:	d002      	beq.n	800697c <get_fat+0x46>
 8006976:	2b02      	cmp	r3, #2
 8006978:	d055      	beq.n	8006a26 <get_fat+0xf0>
 800697a:	e0a0      	b.n	8006abe <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	899b      	ldrh	r3, [r3, #12]
 8006992:	4619      	mov	r1, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	fbb3 f3f1 	udiv	r3, r3, r1
 800699a:	4413      	add	r3, r2
 800699c:	4619      	mov	r1, r3
 800699e:	6938      	ldr	r0, [r7, #16]
 80069a0:	f7ff ff0c 	bl	80067bc <move_window>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 808c 	bne.w	8006ac4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	60fa      	str	r2, [r7, #12]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	8992      	ldrh	r2, [r2, #12]
 80069b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80069ba:	fb01 f202 	mul.w	r2, r1, r2
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4413      	add	r3, r2
 80069c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80069c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	899b      	ldrh	r3, [r3, #12]
 80069d2:	4619      	mov	r1, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069da:	4413      	add	r3, r2
 80069dc:	4619      	mov	r1, r3
 80069de:	6938      	ldr	r0, [r7, #16]
 80069e0:	f7ff feec 	bl	80067bc <move_window>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d16e      	bne.n	8006ac8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	899b      	ldrh	r3, [r3, #12]
 80069ee:	461a      	mov	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f6:	fb01 f202 	mul.w	r2, r1, r2
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <get_fat+0xe6>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	e002      	b.n	8006a22 <get_fat+0xec>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a22:	617b      	str	r3, [r7, #20]
			break;
 8006a24:	e055      	b.n	8006ad2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	899b      	ldrh	r3, [r3, #12]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	4619      	mov	r1, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a3a:	4413      	add	r3, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f7ff febc 	bl	80067bc <move_window>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d140      	bne.n	8006acc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	8992      	ldrh	r2, [r2, #12]
 8006a58:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a5c:	fb00 f202 	mul.w	r2, r0, r2
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	440b      	add	r3, r1
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fbf9 	bl	800625c <ld_word>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	617b      	str	r3, [r7, #20]
			break;
 8006a6e:	e030      	b.n	8006ad2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	899b      	ldrh	r3, [r3, #12]
 8006a78:	089b      	lsrs	r3, r3, #2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a84:	4413      	add	r3, r2
 8006a86:	4619      	mov	r1, r3
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f7ff fe97 	bl	80067bc <move_window>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11d      	bne.n	8006ad0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	8992      	ldrh	r2, [r2, #12]
 8006aa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006aa6:	fb00 f202 	mul.w	r2, r0, r2
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	440b      	add	r3, r1
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fbec 	bl	800628c <ld_dword>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006aba:	617b      	str	r3, [r7, #20]
			break;
 8006abc:	e009      	b.n	8006ad2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006abe:	2301      	movs	r3, #1
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e006      	b.n	8006ad2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ac4:	bf00      	nop
 8006ac6:	e004      	b.n	8006ad2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ad0:	bf00      	nop
		}
	}

	return val;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006adc:	b590      	push	{r4, r7, lr}
 8006ade:	b089      	sub	sp, #36	@ 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	f240 8109 	bls.w	8006d06 <put_fat+0x22a>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	f080 8103 	bcs.w	8006d06 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	f000 80b6 	beq.w	8006c76 <put_fat+0x19a>
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	f300 80fb 	bgt.w	8006d06 <put_fat+0x22a>
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d003      	beq.n	8006b1c <put_fat+0x40>
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	f000 8083 	beq.w	8006c20 <put_fat+0x144>
 8006b1a:	e0f4      	b.n	8006d06 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4413      	add	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	4619      	mov	r1, r3
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff fe3c 	bl	80067bc <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b48:	7ffb      	ldrb	r3, [r7, #31]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 80d4 	bne.w	8006cf8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	61ba      	str	r2, [r7, #24]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	8992      	ldrh	r2, [r2, #12]
 8006b60:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b64:	fb00 f202 	mul.w	r2, r0, r2
 8006b68:	1a9b      	subs	r3, r3, r2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <put_fat+0xb8>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	b25a      	sxtb	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	b25b      	sxtb	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	e001      	b.n	8006b98 <put_fat+0xbc>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	899b      	ldrh	r3, [r3, #12]
 8006baa:	4619      	mov	r1, r3
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff fe00 	bl	80067bc <move_window>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 809a 	bne.w	8006cfc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	899b      	ldrh	r3, [r3, #12]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bda:	fb00 f202 	mul.w	r2, r0, r2
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	440b      	add	r3, r1
 8006be2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <put_fat+0x11a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	e00e      	b.n	8006c14 <put_fat+0x138>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b25b      	sxtb	r3, r3
 8006bfc:	f023 030f 	bic.w	r3, r3, #15
 8006c00:	b25a      	sxtb	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	70da      	strb	r2, [r3, #3]
			break;
 8006c1e:	e072      	b.n	8006d06 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	899b      	ldrh	r3, [r3, #12]
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c34:	4413      	add	r3, r2
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fdbf 	bl	80067bc <move_window>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c42:	7ffb      	ldrb	r3, [r7, #31]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d15b      	bne.n	8006d00 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	8992      	ldrh	r2, [r2, #12]
 8006c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c5a:	fb00 f202 	mul.w	r2, r0, r2
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	440b      	add	r3, r1
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	b292      	uxth	r2, r2
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fb32 	bl	80062d2 <st_word>
			fs->wflag = 1;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	70da      	strb	r2, [r3, #3]
			break;
 8006c74:	e047      	b.n	8006d06 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	899b      	ldrh	r3, [r3, #12]
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fd94 	bl	80067bc <move_window>
 8006c94:	4603      	mov	r3, r0
 8006c96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c98:	7ffb      	ldrb	r3, [r7, #31]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d132      	bne.n	8006d04 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	8992      	ldrh	r2, [r2, #12]
 8006cb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cb6:	fb00 f202 	mul.w	r2, r0, r2
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fae4 	bl	800628c <ld_dword>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006cca:	4323      	orrs	r3, r4
 8006ccc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	8992      	ldrh	r2, [r2, #12]
 8006cdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ce0:	fb00 f202 	mul.w	r2, r0, r2
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	440b      	add	r3, r1
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fb0c 	bl	8006308 <st_dword>
			fs->wflag = 1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	70da      	strb	r2, [r3, #3]
			break;
 8006cf6:	e006      	b.n	8006d06 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006cf8:	bf00      	nop
 8006cfa:	e004      	b.n	8006d06 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006cfc:	bf00      	nop
 8006cfe:	e002      	b.n	8006d06 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006d04:	bf00      	nop
		}
	}
	return res;
 8006d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3724      	adds	r7, #36	@ 0x24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd90      	pop	{r4, r7, pc}

08006d10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d904      	bls.n	8006d36 <remove_chain+0x26>
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d301      	bcc.n	8006d3a <remove_chain+0x2a>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e04b      	b.n	8006dd2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	69b8      	ldr	r0, [r7, #24]
 8006d48:	f7ff fec8 	bl	8006adc <put_fat>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006d50:	7ffb      	ldrb	r3, [r7, #31]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <remove_chain+0x4a>
 8006d56:	7ffb      	ldrb	r3, [r7, #31]
 8006d58:	e03b      	b.n	8006dd2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fdea 	bl	8006936 <get_fat>
 8006d62:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d031      	beq.n	8006dce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <remove_chain+0x64>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e02e      	b.n	8006dd2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d101      	bne.n	8006d80 <remove_chain+0x70>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e028      	b.n	8006dd2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d80:	2200      	movs	r2, #0
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	69b8      	ldr	r0, [r7, #24]
 8006d86:	f7ff fea9 	bl	8006adc <put_fat>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <remove_chain+0x88>
 8006d94:	7ffb      	ldrb	r3, [r7, #31]
 8006d96:	e01c      	b.n	8006dd2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	3b02      	subs	r3, #2
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d20b      	bcs.n	8006dbe <remove_chain+0xae>
			fs->free_clst++;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	791b      	ldrb	r3, [r3, #4]
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d3c6      	bcc.n	8006d5a <remove_chain+0x4a>
 8006dcc:	e000      	b.n	8006dd0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006dce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b088      	sub	sp, #32
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <create_chain+0x2c>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d31b      	bcc.n	8006e3e <create_chain+0x64>
 8006e06:	2301      	movs	r3, #1
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e018      	b.n	8006e3e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fd91 	bl	8006936 <get_fat>
 8006e14:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d801      	bhi.n	8006e20 <create_chain+0x46>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e070      	b.n	8006f02 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d101      	bne.n	8006e2c <create_chain+0x52>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	e06a      	b.n	8006f02 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d201      	bcs.n	8006e3a <create_chain+0x60>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	e063      	b.n	8006f02 <create_chain+0x128>
		scl = clst;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d307      	bcc.n	8006e62 <create_chain+0x88>
				ncl = 2;
 8006e52:	2302      	movs	r3, #2
 8006e54:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d901      	bls.n	8006e62 <create_chain+0x88>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e04f      	b.n	8006f02 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006e62:	69f9      	ldr	r1, [r7, #28]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fd66 	bl	8006936 <get_fat>
 8006e6a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d003      	beq.n	8006e80 <create_chain+0xa6>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d101      	bne.n	8006e84 <create_chain+0xaa>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	e03e      	b.n	8006f02 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d1da      	bne.n	8006e42 <create_chain+0x68>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e038      	b.n	8006f02 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006e90:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	69f9      	ldr	r1, [r7, #28]
 8006e98:	6938      	ldr	r0, [r7, #16]
 8006e9a:	f7ff fe1f 	bl	8006adc <put_fat>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <create_chain+0xe2>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d006      	beq.n	8006ebc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6938      	ldr	r0, [r7, #16]
 8006eb4:	f7ff fe12 	bl	8006adc <put_fat>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d116      	bne.n	8006ef0 <create_chain+0x116>
		fs->last_clst = ncl;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	3b02      	subs	r3, #2
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d804      	bhi.n	8006ee0 <create_chain+0x106>
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	1e5a      	subs	r2, r3, #1
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	791b      	ldrb	r3, [r3, #4]
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	711a      	strb	r2, [r3, #4]
 8006eee:	e007      	b.n	8006f00 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <create_chain+0x122>
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8006efa:	e000      	b.n	8006efe <create_chain+0x124>
 8006efc:	2301      	movs	r3, #1
 8006efe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006f00:	69fb      	ldr	r3, [r7, #28]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b087      	sub	sp, #28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	3304      	adds	r3, #4
 8006f20:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	899b      	ldrh	r3, [r3, #12]
 8006f26:	461a      	mov	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	8952      	ldrh	r2, [r2, #10]
 8006f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	613a      	str	r2, [r7, #16]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <clmt_clust+0x42>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e010      	b.n	8006f6e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d307      	bcc.n	8006f64 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f62:	e7e9      	b.n	8006f38 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006f64:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4413      	add	r3, r2
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f90:	d204      	bcs.n	8006f9c <dir_sdi+0x22>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e071      	b.n	8007084 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <dir_sdi+0x46>
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d902      	bls.n	8006fc0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10c      	bne.n	8006fe0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	8912      	ldrh	r2, [r2, #8]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d301      	bcc.n	8006fd6 <dir_sdi+0x5c>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e056      	b.n	8007084 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	61da      	str	r2, [r3, #28]
 8006fde:	e02d      	b.n	800703c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	895b      	ldrh	r3, [r3, #10]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	899b      	ldrh	r3, [r3, #12]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ff0:	e019      	b.n	8007026 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6979      	ldr	r1, [r7, #20]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fc9d 	bl	8006936 <get_fat>
 8006ffc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d101      	bne.n	800700a <dir_sdi+0x90>
 8007006:	2301      	movs	r3, #1
 8007008:	e03c      	b.n	8007084 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d904      	bls.n	800701a <dir_sdi+0xa0>
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	429a      	cmp	r2, r3
 8007018:	d301      	bcc.n	800701e <dir_sdi+0xa4>
 800701a:	2302      	movs	r3, #2
 800701c:	e032      	b.n	8007084 <dir_sdi+0x10a>
			ofs -= csz;
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	429a      	cmp	r2, r3
 800702c:	d2e1      	bcs.n	8006ff2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800702e:	6979      	ldr	r1, [r7, #20]
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f7ff fc61 	bl	80068f8 <clust2sect>
 8007036:	4602      	mov	r2, r0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <dir_sdi+0xd4>
 800704a:	2302      	movs	r3, #2
 800704c:	e01a      	b.n	8007084 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69da      	ldr	r2, [r3, #28]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	899b      	ldrh	r3, [r3, #12]
 8007056:	4619      	mov	r1, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	fbb3 f3f1 	udiv	r3, r3, r1
 800705e:	441a      	add	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	899b      	ldrh	r3, [r3, #12]
 800706e:	461a      	mov	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	fbb3 f0f2 	udiv	r0, r3, r2
 8007076:	fb00 f202 	mul.w	r2, r0, r2
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	18ca      	adds	r2, r1, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	3320      	adds	r3, #32
 80070a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <dir_next+0x28>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b2:	d301      	bcc.n	80070b8 <dir_next+0x2c>
 80070b4:	2304      	movs	r3, #4
 80070b6:	e0bb      	b.n	8007230 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	899b      	ldrh	r3, [r3, #12]
 80070bc:	461a      	mov	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80070c4:	fb01 f202 	mul.w	r2, r1, r2
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 809d 	bne.w	800720a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	8912      	ldrh	r2, [r2, #8]
 80070ea:	4293      	cmp	r3, r2
 80070ec:	f0c0 808d 	bcc.w	800720a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	61da      	str	r2, [r3, #28]
 80070f6:	2304      	movs	r3, #4
 80070f8:	e09a      	b.n	8007230 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	899b      	ldrh	r3, [r3, #12]
 80070fe:	461a      	mov	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	fbb3 f3f2 	udiv	r3, r3, r2
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	8952      	ldrh	r2, [r2, #10]
 800710a:	3a01      	subs	r2, #1
 800710c:	4013      	ands	r3, r2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d17b      	bne.n	800720a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4619      	mov	r1, r3
 800711a:	4610      	mov	r0, r2
 800711c:	f7ff fc0b 	bl	8006936 <get_fat>
 8007120:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d801      	bhi.n	800712c <dir_next+0xa0>
 8007128:	2302      	movs	r3, #2
 800712a:	e081      	b.n	8007230 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d101      	bne.n	8007138 <dir_next+0xac>
 8007134:	2301      	movs	r3, #1
 8007136:	e07b      	b.n	8007230 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	429a      	cmp	r2, r3
 8007140:	d359      	bcc.n	80071f6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	61da      	str	r2, [r3, #28]
 800714e:	2304      	movs	r3, #4
 8007150:	e06e      	b.n	8007230 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7ff fe3d 	bl	8006dda <create_chain>
 8007160:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <dir_next+0xe0>
 8007168:	2307      	movs	r3, #7
 800716a:	e061      	b.n	8007230 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <dir_next+0xea>
 8007172:	2302      	movs	r3, #2
 8007174:	e05c      	b.n	8007230 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d101      	bne.n	8007182 <dir_next+0xf6>
 800717e:	2301      	movs	r3, #1
 8007180:	e056      	b.n	8007230 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff fad6 	bl	8006734 <sync_window>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <dir_next+0x106>
 800718e:	2301      	movs	r3, #1
 8007190:	e04e      	b.n	8007230 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	899b      	ldrh	r3, [r3, #12]
 800719c:	461a      	mov	r2, r3
 800719e:	2100      	movs	r1, #0
 80071a0:	f7ff f8ff 	bl	80063a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80071a4:	2300      	movs	r3, #0
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	6979      	ldr	r1, [r7, #20]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff fba4 	bl	80068f8 <clust2sect>
 80071b0:	4602      	mov	r2, r0
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80071b6:	e012      	b.n	80071de <dir_next+0x152>
						fs->wflag = 1;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7ff fab8 	bl	8006734 <sync_window>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <dir_next+0x142>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e030      	b.n	8007230 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3301      	adds	r3, #1
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	895b      	ldrh	r3, [r3, #10]
 80071e2:	461a      	mov	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d3e6      	bcc.n	80071b8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad2      	subs	r2, r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7ff fb7a 	bl	80068f8 <clust2sect>
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	899b      	ldrh	r3, [r3, #12]
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007222:	fb00 f202 	mul.w	r2, r0, r2
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	18ca      	adds	r2, r1, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007248:	2100      	movs	r1, #0
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fe95 	bl	8006f7a <dir_sdi>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d12b      	bne.n	80072b2 <dir_alloc+0x7a>
		n = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	4619      	mov	r1, r3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff faa9 	bl	80067bc <move_window>
 800726a:	4603      	mov	r3, r0
 800726c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11d      	bne.n	80072b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2be5      	cmp	r3, #229	@ 0xe5
 800727c:	d004      	beq.n	8007288 <dir_alloc+0x50>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d107      	bne.n	8007298 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	3301      	adds	r3, #1
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d102      	bne.n	800729c <dir_alloc+0x64>
 8007296:	e00c      	b.n	80072b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800729c:	2101      	movs	r1, #1
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fef4 	bl	800708c <dir_next>
 80072a4:	4603      	mov	r3, r0
 80072a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0d7      	beq.n	800725e <dir_alloc+0x26>
 80072ae:	e000      	b.n	80072b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80072b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d101      	bne.n	80072bc <dir_alloc+0x84>
 80072b8:	2307      	movs	r3, #7
 80072ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	331a      	adds	r3, #26
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe ffc1 	bl	800625c <ld_word>
 80072da:	4603      	mov	r3, r0
 80072dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d109      	bne.n	80072fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3314      	adds	r3, #20
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe ffb6 	bl	800625c <ld_word>
 80072f0:	4603      	mov	r3, r0
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	331a      	adds	r3, #26
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	b292      	uxth	r2, r2
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe ffd9 	bl	80062d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b03      	cmp	r3, #3
 8007326:	d109      	bne.n	800733c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f103 0214 	add.w	r2, r3, #20
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	b29b      	uxth	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f7fe ffcb 	bl	80062d2 <st_word>
	}
}
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007344:	b590      	push	{r4, r7, lr}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	331a      	adds	r3, #26
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe ff82 	bl	800625c <ld_word>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <cmp_lfn+0x1e>
 800735e:	2300      	movs	r3, #0
 8007360:	e059      	b.n	8007416 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800736a:	1e5a      	subs	r2, r3, #1
 800736c:	4613      	mov	r3, r2
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007378:	2301      	movs	r3, #1
 800737a:	81fb      	strh	r3, [r7, #14]
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e033      	b.n	80073ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007382:	4a27      	ldr	r2, [pc, #156]	@ (8007420 <cmp_lfn+0xdc>)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4413      	add	r3, r2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	4413      	add	r3, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe ff63 	bl	800625c <ld_word>
 8007396:	4603      	mov	r3, r0
 8007398:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800739a:	89fb      	ldrh	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80073a4:	d812      	bhi.n	80073cc <cmp_lfn+0x88>
 80073a6:	89bb      	ldrh	r3, [r7, #12]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 ff95 	bl	80092d8 <ff_wtoupper>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461c      	mov	r4, r3
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	617a      	str	r2, [r7, #20]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 ff89 	bl	80092d8 <ff_wtoupper>
 80073c6:	4603      	mov	r3, r0
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d001      	beq.n	80073d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80073cc:	2300      	movs	r3, #0
 80073ce:	e022      	b.n	8007416 <cmp_lfn+0xd2>
			}
			wc = uc;
 80073d0:	89bb      	ldrh	r3, [r7, #12]
 80073d2:	81fb      	strh	r3, [r7, #14]
 80073d4:	e006      	b.n	80073e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80073d6:	89bb      	ldrh	r3, [r7, #12]
 80073d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073dc:	4293      	cmp	r3, r2
 80073de:	d001      	beq.n	80073e4 <cmp_lfn+0xa0>
 80073e0:	2300      	movs	r3, #0
 80073e2:	e018      	b.n	8007416 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	3301      	adds	r3, #1
 80073e8:	613b      	str	r3, [r7, #16]
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	d9c8      	bls.n	8007382 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <cmp_lfn+0xd0>
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <cmp_lfn+0xd0>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <cmp_lfn+0xd0>
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007414:	2301      	movs	r3, #1
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd90      	pop	{r4, r7, pc}
 800741e:	bf00      	nop
 8007420:	0800a598 	.word	0x0800a598

08007424 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4611      	mov	r1, r2
 8007430:	461a      	mov	r2, r3
 8007432:	460b      	mov	r3, r1
 8007434:	71fb      	strb	r3, [r7, #7]
 8007436:	4613      	mov	r3, r2
 8007438:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	330d      	adds	r3, #13
 800743e:	79ba      	ldrb	r2, [r7, #6]
 8007440:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	330b      	adds	r3, #11
 8007446:	220f      	movs	r2, #15
 8007448:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	330c      	adds	r3, #12
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	331a      	adds	r3, #26
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe ff3a 	bl	80062d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	1e5a      	subs	r2, r3, #1
 8007462:	4613      	mov	r3, r2
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	82fb      	strh	r3, [r7, #22]
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007476:	8afb      	ldrh	r3, [r7, #22]
 8007478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <put_lfn+0x6c>
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	61fa      	str	r2, [r7, #28]
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007490:	4a17      	ldr	r2, [pc, #92]	@ (80074f0 <put_lfn+0xcc>)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	4413      	add	r3, r2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	8afa      	ldrh	r2, [r7, #22]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe ff15 	bl	80062d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80074a8:	8afb      	ldrh	r3, [r7, #22]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <put_lfn+0x90>
 80074ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b0c      	cmp	r3, #12
 80074be:	d9da      	bls.n	8007476 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80074c0:	8afb      	ldrh	r3, [r7, #22]
 80074c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d006      	beq.n	80074d8 <put_lfn+0xb4>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <put_lfn+0xbc>
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	79fa      	ldrb	r2, [r7, #7]
 80074e4:	701a      	strb	r2, [r3, #0]
}
 80074e6:	bf00      	nop
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	0800a598 	.word	0x0800a598

080074f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	@ 0x30
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007502:	220b      	movs	r2, #11
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7fe ff2a 	bl	8006360 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b05      	cmp	r3, #5
 8007510:	d929      	bls.n	8007566 <gen_numname+0x72>
		sr = seq;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007516:	e020      	b.n	800755a <gen_numname+0x66>
			wc = *lfn++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	1c9a      	adds	r2, r3, #2
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007522:	2300      	movs	r3, #0
 8007524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007526:	e015      	b.n	8007554 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	005a      	lsls	r2, r3, #1
 800752c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <gen_numname+0x5a>
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	4b30      	ldr	r3, [pc, #192]	@ (800760c <gen_numname+0x118>)
 800754a:	4053      	eors	r3, r2
 800754c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800754e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007550:	3301      	adds	r3, #1
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b0f      	cmp	r3, #15
 8007558:	d9e6      	bls.n	8007528 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1da      	bne.n	8007518 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007566:	2307      	movs	r3, #7
 8007568:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	b2db      	uxtb	r3, r3
 8007574:	3330      	adds	r3, #48	@ 0x30
 8007576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800757a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800757e:	2b39      	cmp	r3, #57	@ 0x39
 8007580:	d904      	bls.n	800758c <gen_numname+0x98>
 8007582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007586:	3307      	adds	r3, #7
 8007588:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	1e5a      	subs	r2, r3, #1
 8007590:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007592:	3330      	adds	r3, #48	@ 0x30
 8007594:	443b      	add	r3, r7
 8007596:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800759a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	091b      	lsrs	r3, r3, #4
 80075a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1df      	bne.n	800756a <gen_numname+0x76>
	ns[i] = '~';
 80075aa:	f107 0214 	add.w	r2, r7, #20
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	4413      	add	r3, r2
 80075b2:	227e      	movs	r2, #126	@ 0x7e
 80075b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80075b6:	2300      	movs	r3, #0
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ba:	e002      	b.n	80075c2 <gen_numname+0xce>
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	3301      	adds	r3, #1
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d205      	bcs.n	80075d6 <gen_numname+0xe2>
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	4413      	add	r3, r2
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d1f2      	bne.n	80075bc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	2b07      	cmp	r3, #7
 80075da:	d807      	bhi.n	80075ec <gen_numname+0xf8>
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80075e2:	3330      	adds	r3, #48	@ 0x30
 80075e4:	443b      	add	r3, r7
 80075e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80075ea:	e000      	b.n	80075ee <gen_numname+0xfa>
 80075ec:	2120      	movs	r1, #32
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	460a      	mov	r2, r1
 80075fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	2b07      	cmp	r3, #7
 8007600:	d9e9      	bls.n	80075d6 <gen_numname+0xe2>
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	3730      	adds	r7, #48	@ 0x30
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	00011021 	.word	0x00011021

08007610 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800761c:	230b      	movs	r3, #11
 800761e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	b2da      	uxtb	r2, r3
 8007624:	0852      	lsrs	r2, r2, #1
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	4313      	orrs	r3, r2
 800762a:	b2da      	uxtb	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1c59      	adds	r1, r3, #1
 8007630:	6079      	str	r1, [r7, #4]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	4413      	add	r3, r2
 8007636:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ed      	bne.n	8007620 <sum_sfn+0x10>
	return sum;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007660:	2100      	movs	r1, #0
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff fc89 	bl	8006f7a <dir_sdi>
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <dir_find+0x24>
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	e0a9      	b.n	80077ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007676:	23ff      	movs	r3, #255	@ 0xff
 8007678:	753b      	strb	r3, [r7, #20]
 800767a:	7d3b      	ldrb	r3, [r7, #20]
 800767c:	757b      	strb	r3, [r7, #21]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4619      	mov	r1, r3
 800768c:	6938      	ldr	r0, [r7, #16]
 800768e:	f7ff f895 	bl	80067bc <move_window>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f040 8090 	bne.w	80077be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80076a6:	7dbb      	ldrb	r3, [r7, #22]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <dir_find+0x60>
 80076ac:	2304      	movs	r3, #4
 80076ae:	75fb      	strb	r3, [r7, #23]
 80076b0:	e08a      	b.n	80077c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	330b      	adds	r3, #11
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076be:	73fb      	strb	r3, [r7, #15]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7bfa      	ldrb	r2, [r7, #15]
 80076c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80076c6:	7dbb      	ldrb	r3, [r7, #22]
 80076c8:	2be5      	cmp	r3, #229	@ 0xe5
 80076ca:	d007      	beq.n	80076dc <dir_find+0x8a>
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <dir_find+0x98>
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b0f      	cmp	r3, #15
 80076da:	d006      	beq.n	80076ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80076dc:	23ff      	movs	r3, #255	@ 0xff
 80076de:	757b      	strb	r3, [r7, #21]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80076e8:	e05e      	b.n	80077a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b0f      	cmp	r3, #15
 80076ee:	d136      	bne.n	800775e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80076f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d154      	bne.n	80077a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80076fe:	7dbb      	ldrb	r3, [r7, #22]
 8007700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00d      	beq.n	8007724 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	7b5b      	ldrb	r3, [r3, #13]
 800770e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007710:	7dbb      	ldrb	r3, [r7, #22]
 8007712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007716:	75bb      	strb	r3, [r7, #22]
 8007718:	7dbb      	ldrb	r3, [r7, #22]
 800771a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	695a      	ldr	r2, [r3, #20]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007724:	7dba      	ldrb	r2, [r7, #22]
 8007726:	7d7b      	ldrb	r3, [r7, #21]
 8007728:	429a      	cmp	r2, r3
 800772a:	d115      	bne.n	8007758 <dir_find+0x106>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	330d      	adds	r3, #13
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	7d3a      	ldrb	r2, [r7, #20]
 8007736:	429a      	cmp	r2, r3
 8007738:	d10e      	bne.n	8007758 <dir_find+0x106>
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f7ff fdfd 	bl	8007344 <cmp_lfn>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <dir_find+0x106>
 8007750:	7d7b      	ldrb	r3, [r7, #21]
 8007752:	3b01      	subs	r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	e000      	b.n	800775a <dir_find+0x108>
 8007758:	23ff      	movs	r3, #255	@ 0xff
 800775a:	757b      	strb	r3, [r7, #21]
 800775c:	e024      	b.n	80077a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800775e:	7d7b      	ldrb	r3, [r7, #21]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <dir_find+0x126>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ff51 	bl	8007610 <sum_sfn>
 800776e:	4603      	mov	r3, r0
 8007770:	461a      	mov	r2, r3
 8007772:	7d3b      	ldrb	r3, [r7, #20]
 8007774:	4293      	cmp	r3, r2
 8007776:	d024      	beq.n	80077c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <dir_find+0x14a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a18      	ldr	r0, [r3, #32]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3324      	adds	r3, #36	@ 0x24
 800778e:	220b      	movs	r2, #11
 8007790:	4619      	mov	r1, r3
 8007792:	f7fe fe21 	bl	80063d8 <mem_cmp>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d014      	beq.n	80077c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800779c:	23ff      	movs	r3, #255	@ 0xff
 800779e:	757b      	strb	r3, [r7, #21]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f04f 32ff 	mov.w	r2, #4294967295
 80077a6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fc6e 	bl	800708c <dir_next>
 80077b0:	4603      	mov	r3, r0
 80077b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f43f af65 	beq.w	8007686 <dir_find+0x34>
 80077bc:	e004      	b.n	80077c8 <dir_find+0x176>
		if (res != FR_OK) break;
 80077be:	bf00      	nop
 80077c0:	e002      	b.n	80077c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80077c6:	bf00      	nop

	return res;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	@ 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80077e8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <dir_register+0x20>
 80077f0:	2306      	movs	r3, #6
 80077f2:	e0e0      	b.n	80079b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80077f4:	2300      	movs	r3, #0
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f8:	e002      	b.n	8007800 <dir_register+0x2c>
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	3301      	adds	r3, #1
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f4      	bne.n	80077fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007816:	f107 030c 	add.w	r3, r7, #12
 800781a:	220c      	movs	r2, #12
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fd9f 	bl	8006360 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d032      	beq.n	8007892 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2240      	movs	r2, #64	@ 0x40
 8007830:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007834:	2301      	movs	r3, #1
 8007836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007838:	e016      	b.n	8007868 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	f107 010c 	add.w	r1, r7, #12
 8007848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784a:	f7ff fe53 	bl	80074f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff feff 	bl	8007652 <dir_find>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800785a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	3301      	adds	r3, #1
 8007866:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	2b63      	cmp	r3, #99	@ 0x63
 800786c:	d9e5      	bls.n	800783a <dir_register+0x66>
 800786e:	e000      	b.n	8007872 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007870:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	2b64      	cmp	r3, #100	@ 0x64
 8007876:	d101      	bne.n	800787c <dir_register+0xa8>
 8007878:	2307      	movs	r3, #7
 800787a:	e09c      	b.n	80079b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800787c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007880:	2b04      	cmp	r3, #4
 8007882:	d002      	beq.n	800788a <dir_register+0xb6>
 8007884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007888:	e095      	b.n	80079b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800788a:	7dfa      	ldrb	r2, [r7, #23]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <dir_register+0xd8>
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	330c      	adds	r3, #12
 80078a0:	4a47      	ldr	r2, [pc, #284]	@ (80079c0 <dir_register+0x1ec>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	089b      	lsrs	r3, r3, #2
 80078a8:	3301      	adds	r3, #1
 80078aa:	e000      	b.n	80078ae <dir_register+0xda>
 80078ac:	2301      	movs	r3, #1
 80078ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80078b0:	6a39      	ldr	r1, [r7, #32]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff fcc0 	bl	8007238 <dir_alloc>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80078be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d148      	bne.n	8007958 <dir_register+0x184>
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	623b      	str	r3, [r7, #32]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d042      	beq.n	8007958 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695a      	ldr	r2, [r3, #20]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	015b      	lsls	r3, r3, #5
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fb4b 	bl	8006f7a <dir_sdi>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80078ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d132      	bne.n	8007958 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	@ 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fe8a 	bl	8007610 <sum_sfn>
 80078fc:	4603      	mov	r3, r0
 80078fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	4619      	mov	r1, r3
 8007906:	69f8      	ldr	r0, [r7, #28]
 8007908:	f7fe ff58 	bl	80067bc <move_window>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007916:	2b00      	cmp	r3, #0
 8007918:	d11d      	bne.n	8007956 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	6918      	ldr	r0, [r3, #16]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a19      	ldr	r1, [r3, #32]
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	b2da      	uxtb	r2, r3
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	f7ff fd7c 	bl	8007424 <put_lfn>
				fs->wflag = 1;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	2201      	movs	r2, #1
 8007930:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007932:	2100      	movs	r1, #0
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff fba9 	bl	800708c <dir_next>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007944:	2b00      	cmp	r3, #0
 8007946:	d107      	bne.n	8007958 <dir_register+0x184>
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	3b01      	subs	r3, #1
 800794c:	623b      	str	r3, [r7, #32]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1d5      	bne.n	8007900 <dir_register+0x12c>
 8007954:	e000      	b.n	8007958 <dir_register+0x184>
				if (res != FR_OK) break;
 8007956:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800795c:	2b00      	cmp	r3, #0
 800795e:	d128      	bne.n	80079b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	4619      	mov	r1, r3
 8007966:	69f8      	ldr	r0, [r7, #28]
 8007968:	f7fe ff28 	bl	80067bc <move_window>
 800796c:	4603      	mov	r3, r0
 800796e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007976:	2b00      	cmp	r3, #0
 8007978:	d11b      	bne.n	80079b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	2220      	movs	r2, #32
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fd0d 	bl	80063a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a18      	ldr	r0, [r3, #32]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3324      	adds	r3, #36	@ 0x24
 8007990:	220b      	movs	r2, #11
 8007992:	4619      	mov	r1, r3
 8007994:	f7fe fce4 	bl	8006360 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	330c      	adds	r3, #12
 80079a4:	f002 0218 	and.w	r2, r2, #24
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2201      	movs	r2, #1
 80079b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80079b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3730      	adds	r7, #48	@ 0x30
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	4ec4ec4f 	.word	0x4ec4ec4f

080079c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	@ 0x28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	61ba      	str	r2, [r7, #24]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4413      	add	r3, r2
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80079f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079f4:	2b1f      	cmp	r3, #31
 80079f6:	d940      	bls.n	8007a7a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80079f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80079fc:	d006      	beq.n	8007a0c <create_name+0x48>
 80079fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a00:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a02:	d110      	bne.n	8007a26 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a04:	e002      	b.n	8007a0c <create_name+0x48>
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	61bb      	str	r3, [r7, #24]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4413      	add	r3, r2
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a16:	d0f6      	beq.n	8007a06 <create_name+0x42>
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a22:	d0f0      	beq.n	8007a06 <create_name+0x42>
			break;
 8007a24:	e02a      	b.n	8007a7c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a2a:	d901      	bls.n	8007a30 <create_name+0x6c>
 8007a2c:	2306      	movs	r3, #6
 8007a2e:	e17d      	b.n	8007d2c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007a30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a38:	2101      	movs	r1, #1
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 fc10 	bl	8009260 <ff_convert>
 8007a40:	4603      	mov	r3, r0
 8007a42:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007a44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <create_name+0x8a>
 8007a4a:	2306      	movs	r3, #6
 8007a4c:	e16e      	b.n	8007d2c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a52:	d809      	bhi.n	8007a68 <create_name+0xa4>
 8007a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a56:	4619      	mov	r1, r3
 8007a58:	488d      	ldr	r0, [pc, #564]	@ (8007c90 <create_name+0x2cc>)
 8007a5a:	f7fe fce4 	bl	8006426 <chk_chr>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <create_name+0xa4>
 8007a64:	2306      	movs	r3, #6
 8007a66:	e161      	b.n	8007d2c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	617a      	str	r2, [r7, #20]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a76:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007a78:	e7b4      	b.n	80079e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007a7a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	441a      	add	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a88:	2b1f      	cmp	r3, #31
 8007a8a:	d801      	bhi.n	8007a90 <create_name+0xcc>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	e000      	b.n	8007a92 <create_name+0xce>
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a96:	e011      	b.n	8007abc <create_name+0xf8>
		w = lfn[di - 1];
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007a9e:	4413      	add	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d002      	beq.n	8007ab6 <create_name+0xf2>
 8007ab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ab4:	d106      	bne.n	8007ac4 <create_name+0x100>
		di--;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1ea      	bne.n	8007a98 <create_name+0xd4>
 8007ac2:	e000      	b.n	8007ac6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007ac4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <create_name+0x118>
 8007ad8:	2306      	movs	r3, #6
 8007ada:	e127      	b.n	8007d2c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3324      	adds	r3, #36	@ 0x24
 8007ae0:	220b      	movs	r2, #11
 8007ae2:	2120      	movs	r1, #32
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fc5c 	bl	80063a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007aea:	2300      	movs	r3, #0
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	e002      	b.n	8007af6 <create_name+0x132>
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	3301      	adds	r3, #1
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	d0f5      	beq.n	8007af0 <create_name+0x12c>
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b10:	d0ee      	beq.n	8007af0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <create_name+0x168>
 8007b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b1c:	f043 0303 	orr.w	r3, r3, #3
 8007b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007b24:	e002      	b.n	8007b2c <create_name+0x168>
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <create_name+0x182>
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007b38:	4413      	add	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b44:	d1ef      	bne.n	8007b26 <create_name+0x162>

	i = b = 0; ni = 8;
 8007b46:	2300      	movs	r3, #0
 8007b48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	623b      	str	r3, [r7, #32]
 8007b50:	2308      	movs	r3, #8
 8007b52:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	61ba      	str	r2, [r7, #24]
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8090 	beq.w	8007c8c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d006      	beq.n	8007b80 <create_name+0x1bc>
 8007b72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b74:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b76:	d10a      	bne.n	8007b8e <create_name+0x1ca>
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d006      	beq.n	8007b8e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b84:	f043 0303 	orr.w	r3, r3, #3
 8007b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b8c:	e07d      	b.n	8007c8a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d203      	bcs.n	8007b9e <create_name+0x1da>
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d123      	bne.n	8007be6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	2b0b      	cmp	r3, #11
 8007ba2:	d106      	bne.n	8007bb2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba8:	f043 0303 	orr.w	r3, r3, #3
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007bb0:	e075      	b.n	8007c9e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d005      	beq.n	8007bc6 <create_name+0x202>
 8007bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbe:	f043 0303 	orr.w	r3, r3, #3
 8007bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d866      	bhi.n	8007c9c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	623b      	str	r3, [r7, #32]
 8007bd6:	230b      	movs	r3, #11
 8007bd8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007bda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007be4:	e051      	b.n	8007c8a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bea:	d914      	bls.n	8007c16 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007bec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 fb35 	bl	8009260 <ff_convert>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d004      	beq.n	8007c0a <create_name+0x246>
 8007c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c02:	3b80      	subs	r3, #128	@ 0x80
 8007c04:	4a23      	ldr	r2, [pc, #140]	@ (8007c94 <create_name+0x2d0>)
 8007c06:	5cd3      	ldrb	r3, [r2, r3]
 8007c08:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c0e:	f043 0302 	orr.w	r3, r3, #2
 8007c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <create_name+0x268>
 8007c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c1e:	4619      	mov	r1, r3
 8007c20:	481d      	ldr	r0, [pc, #116]	@ (8007c98 <create_name+0x2d4>)
 8007c22:	f7fe fc00 	bl	8006426 <chk_chr>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007c2c:	235f      	movs	r3, #95	@ 0x5f
 8007c2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c34:	f043 0303 	orr.w	r3, r3, #3
 8007c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c3c:	e01b      	b.n	8007c76 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d909      	bls.n	8007c58 <create_name+0x294>
 8007c44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c46:	2b5a      	cmp	r3, #90	@ 0x5a
 8007c48:	d806      	bhi.n	8007c58 <create_name+0x294>
					b |= 2;
 8007c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c4e:	f043 0302 	orr.w	r3, r3, #2
 8007c52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c56:	e00e      	b.n	8007c76 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007c58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c5a:	2b60      	cmp	r3, #96	@ 0x60
 8007c5c:	d90b      	bls.n	8007c76 <create_name+0x2b2>
 8007c5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c60:	2b7a      	cmp	r3, #122	@ 0x7a
 8007c62:	d808      	bhi.n	8007c76 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007c64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c72:	3b20      	subs	r3, #32
 8007c74:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	623a      	str	r2, [r7, #32]
 8007c7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c7e:	b2d1      	uxtb	r1, r2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4413      	add	r3, r2
 8007c84:	460a      	mov	r2, r1
 8007c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007c8a:	e763      	b.n	8007b54 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007c8c:	bf00      	nop
 8007c8e:	e006      	b.n	8007c9e <create_name+0x2da>
 8007c90:	0800a4b8 	.word	0x0800a4b8
 8007c94:	0800a518 	.word	0x0800a518
 8007c98:	0800a4c4 	.word	0x0800a4c4
			if (si > di) break;			/* No extension */
 8007c9c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ca4:	2be5      	cmp	r3, #229	@ 0xe5
 8007ca6:	d103      	bne.n	8007cb0 <create_name+0x2ec>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2205      	movs	r2, #5
 8007cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d104      	bne.n	8007cc0 <create_name+0x2fc>
 8007cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cc4:	f003 030c 	and.w	r3, r3, #12
 8007cc8:	2b0c      	cmp	r3, #12
 8007cca:	d005      	beq.n	8007cd8 <create_name+0x314>
 8007ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d105      	bne.n	8007ce4 <create_name+0x320>
 8007cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cdc:	f043 0302 	orr.w	r3, r3, #2
 8007ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d117      	bne.n	8007d20 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d105      	bne.n	8007d08 <create_name+0x344>
 8007cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d00:	f043 0310 	orr.w	r3, r3, #16
 8007d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007d08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d0c:	f003 030c 	and.w	r3, r3, #12
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d105      	bne.n	8007d20 <create_name+0x35c>
 8007d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d18:	f043 0308 	orr.w	r3, r3, #8
 8007d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007d26:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007d2a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3728      	adds	r7, #40	@ 0x28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d48:	e002      	b.n	8007d50 <follow_path+0x1c>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d56:	d0f8      	beq.n	8007d4a <follow_path+0x16>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d5e:	d0f4      	beq.n	8007d4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2200      	movs	r2, #0
 8007d64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b1f      	cmp	r3, #31
 8007d6c:	d80a      	bhi.n	8007d84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2280      	movs	r2, #128	@ 0x80
 8007d72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff f8fe 	bl	8006f7a <dir_sdi>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]
 8007d82:	e048      	b.n	8007e16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d84:	463b      	mov	r3, r7
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fe1b 	bl	80079c4 <create_name>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d139      	bne.n	8007e0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fc5a 	bl	8007652 <dir_find>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007da8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d12c      	bne.n	8007e10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d127      	bne.n	8007e10 <follow_path+0xdc>
 8007dc0:	2305      	movs	r3, #5
 8007dc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007dc4:	e024      	b.n	8007e10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d121      	bne.n	8007e14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	799b      	ldrb	r3, [r3, #6]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ddc:	2305      	movs	r3, #5
 8007dde:	75fb      	strb	r3, [r7, #23]
 8007de0:	e019      	b.n	8007e16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	8992      	ldrh	r2, [r2, #12]
 8007df0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007df4:	fb00 f202 	mul.w	r2, r0, r2
 8007df8:	1a9b      	subs	r3, r3, r2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7ff fa61 	bl	80072c6 <ld_clust>
 8007e04:	4602      	mov	r2, r0
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e0a:	e7bb      	b.n	8007d84 <follow_path+0x50>
			if (res != FR_OK) break;
 8007e0c:	bf00      	nop
 8007e0e:	e002      	b.n	8007e16 <follow_path+0xe2>
				break;
 8007e10:	bf00      	nop
 8007e12:	e000      	b.n	8007e16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e14:	bf00      	nop
			}
		}
	}

	return res;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e28:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d031      	beq.n	8007e9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	e002      	b.n	8007e44 <get_ldnumber+0x24>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	3301      	adds	r3, #1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b1f      	cmp	r3, #31
 8007e4a:	d903      	bls.n	8007e54 <get_ldnumber+0x34>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e52:	d1f4      	bne.n	8007e3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e5a:	d11c      	bne.n	8007e96 <get_ldnumber+0x76>
			tp = *path;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	60fa      	str	r2, [r7, #12]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	3b30      	subs	r3, #48	@ 0x30
 8007e6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b09      	cmp	r3, #9
 8007e72:	d80e      	bhi.n	8007e92 <get_ldnumber+0x72>
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d10a      	bne.n	8007e92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d107      	bne.n	8007e92 <get_ldnumber+0x72>
					vol = (int)i;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	e002      	b.n	8007e9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e96:	2300      	movs	r3, #0
 8007e98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e9a:	693b      	ldr	r3, [r7, #16]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	70da      	strb	r2, [r3, #3]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebe:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fe fc7a 	bl	80067bc <move_window>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <check_fs+0x2a>
 8007ece:	2304      	movs	r3, #4
 8007ed0:	e038      	b.n	8007f44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3338      	adds	r3, #56	@ 0x38
 8007ed6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe f9be 	bl	800625c <ld_word>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d001      	beq.n	8007ef0 <check_fs+0x48>
 8007eec:	2303      	movs	r3, #3
 8007eee:	e029      	b.n	8007f44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ef6:	2be9      	cmp	r3, #233	@ 0xe9
 8007ef8:	d009      	beq.n	8007f0e <check_fs+0x66>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f00:	2beb      	cmp	r3, #235	@ 0xeb
 8007f02:	d11e      	bne.n	8007f42 <check_fs+0x9a>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007f0a:	2b90      	cmp	r3, #144	@ 0x90
 8007f0c:	d119      	bne.n	8007f42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3338      	adds	r3, #56	@ 0x38
 8007f12:	3336      	adds	r3, #54	@ 0x36
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe f9b9 	bl	800628c <ld_dword>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f20:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <check_fs+0xa4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d101      	bne.n	8007f2a <check_fs+0x82>
 8007f26:	2300      	movs	r3, #0
 8007f28:	e00c      	b.n	8007f44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3338      	adds	r3, #56	@ 0x38
 8007f2e:	3352      	adds	r3, #82	@ 0x52
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe f9ab 	bl	800628c <ld_dword>
 8007f36:	4603      	mov	r3, r0
 8007f38:	4a05      	ldr	r2, [pc, #20]	@ (8007f50 <check_fs+0xa8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d101      	bne.n	8007f42 <check_fs+0x9a>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f42:	2302      	movs	r3, #2
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	00544146 	.word	0x00544146
 8007f50:	33544146 	.word	0x33544146

08007f54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b096      	sub	sp, #88	@ 0x58
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff ff59 	bl	8007e20 <get_ldnumber>
 8007f6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da01      	bge.n	8007f7a <find_volume+0x26>
 8007f76:	230b      	movs	r3, #11
 8007f78:	e265      	b.n	8008446 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f7a:	4a9f      	ldr	r2, [pc, #636]	@ (80081f8 <find_volume+0x2a4>)
 8007f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <find_volume+0x3a>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	e25b      	b.n	8008446 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	f023 0301 	bic.w	r3, r3, #1
 8007f9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01a      	beq.n	8007fda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe f8b9 	bl	8006120 <disk_status>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10c      	bne.n	8007fda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <find_volume+0x82>
 8007fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007fd2:	230a      	movs	r3, #10
 8007fd4:	e237      	b.n	8008446 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e235      	b.n	8008446 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe f8b1 	bl	8006154 <disk_initialize>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008004:	2303      	movs	r3, #3
 8008006:	e21e      	b.n	8008446 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <find_volume+0xca>
 800800e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800801a:	230a      	movs	r3, #10
 800801c:	e213      	b.n	8008446 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	7858      	ldrb	r0, [r3, #1]
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	330c      	adds	r3, #12
 8008026:	461a      	mov	r2, r3
 8008028:	2102      	movs	r1, #2
 800802a:	f7fe f8f9 	bl	8006220 <disk_ioctl>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <find_volume+0xe4>
 8008034:	2301      	movs	r3, #1
 8008036:	e206      	b.n	8008446 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803a:	899b      	ldrh	r3, [r3, #12]
 800803c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008040:	d80d      	bhi.n	800805e <find_volume+0x10a>
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	899b      	ldrh	r3, [r3, #12]
 8008046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804a:	d308      	bcc.n	800805e <find_volume+0x10a>
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	899b      	ldrh	r3, [r3, #12]
 8008050:	461a      	mov	r2, r3
 8008052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008054:	899b      	ldrh	r3, [r3, #12]
 8008056:	3b01      	subs	r3, #1
 8008058:	4013      	ands	r3, r2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <find_volume+0x10e>
 800805e:	2301      	movs	r3, #1
 8008060:	e1f1      	b.n	8008446 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008068:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800806a:	f7ff ff1d 	bl	8007ea8 <check_fs>
 800806e:	4603      	mov	r3, r0
 8008070:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008074:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008078:	2b02      	cmp	r3, #2
 800807a:	d149      	bne.n	8008110 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800807c:	2300      	movs	r3, #0
 800807e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008080:	e01e      	b.n	80080c0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008084:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008090:	4413      	add	r3, r2
 8008092:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	3304      	adds	r3, #4
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <find_volume+0x158>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	3308      	adds	r3, #8
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe f8f2 	bl	800628c <ld_dword>
 80080a8:	4602      	mov	r2, r0
 80080aa:	e000      	b.n	80080ae <find_volume+0x15a>
 80080ac:	2200      	movs	r2, #0
 80080ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	3358      	adds	r3, #88	@ 0x58
 80080b4:	443b      	add	r3, r7
 80080b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080bc:	3301      	adds	r3, #1
 80080be:	643b      	str	r3, [r7, #64]	@ 0x40
 80080c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d9dd      	bls.n	8008082 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80080c6:	2300      	movs	r3, #0
 80080c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80080ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <find_volume+0x182>
 80080d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d2:	3b01      	subs	r3, #1
 80080d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80080d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	3358      	adds	r3, #88	@ 0x58
 80080dc:	443b      	add	r3, r7
 80080de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80080e2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80080e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <find_volume+0x1a2>
 80080ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080ee:	f7ff fedb 	bl	8007ea8 <check_fs>
 80080f2:	4603      	mov	r3, r0
 80080f4:	e000      	b.n	80080f8 <find_volume+0x1a4>
 80080f6:	2303      	movs	r3, #3
 80080f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008100:	2b01      	cmp	r3, #1
 8008102:	d905      	bls.n	8008110 <find_volume+0x1bc>
 8008104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008106:	3301      	adds	r3, #1
 8008108:	643b      	str	r3, [r7, #64]	@ 0x40
 800810a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800810c:	2b03      	cmp	r3, #3
 800810e:	d9e2      	bls.n	80080d6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008114:	2b04      	cmp	r3, #4
 8008116:	d101      	bne.n	800811c <find_volume+0x1c8>
 8008118:	2301      	movs	r3, #1
 800811a:	e194      	b.n	8008446 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800811c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008120:	2b01      	cmp	r3, #1
 8008122:	d901      	bls.n	8008128 <find_volume+0x1d4>
 8008124:	230d      	movs	r3, #13
 8008126:	e18e      	b.n	8008446 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	3338      	adds	r3, #56	@ 0x38
 800812c:	330b      	adds	r3, #11
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe f894 	bl	800625c <ld_word>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	899b      	ldrh	r3, [r3, #12]
 800813c:	429a      	cmp	r2, r3
 800813e:	d001      	beq.n	8008144 <find_volume+0x1f0>
 8008140:	230d      	movs	r3, #13
 8008142:	e180      	b.n	8008446 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	3338      	adds	r3, #56	@ 0x38
 8008148:	3316      	adds	r3, #22
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe f886 	bl	800625c <ld_word>
 8008150:	4603      	mov	r3, r0
 8008152:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d106      	bne.n	8008168 <find_volume+0x214>
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	3338      	adds	r3, #56	@ 0x38
 800815e:	3324      	adds	r3, #36	@ 0x24
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe f893 	bl	800628c <ld_dword>
 8008166:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800816c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	789b      	ldrb	r3, [r3, #2]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d005      	beq.n	800818c <find_volume+0x238>
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d001      	beq.n	800818c <find_volume+0x238>
 8008188:	230d      	movs	r3, #13
 800818a:	e15c      	b.n	8008446 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	789b      	ldrb	r3, [r3, #2]
 8008190:	461a      	mov	r2, r3
 8008192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008194:	fb02 f303 	mul.w	r3, r2, r3
 8008198:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a0:	461a      	mov	r2, r3
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	895b      	ldrh	r3, [r3, #10]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <find_volume+0x26c>
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	895b      	ldrh	r3, [r3, #10]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	895b      	ldrh	r3, [r3, #10]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <find_volume+0x270>
 80081c0:	230d      	movs	r3, #13
 80081c2:	e140      	b.n	8008446 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	3338      	adds	r3, #56	@ 0x38
 80081c8:	3311      	adds	r3, #17
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe f846 	bl	800625c <ld_word>
 80081d0:	4603      	mov	r3, r0
 80081d2:	461a      	mov	r2, r3
 80081d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80081d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081da:	891b      	ldrh	r3, [r3, #8]
 80081dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081de:	8992      	ldrh	r2, [r2, #12]
 80081e0:	0952      	lsrs	r2, r2, #5
 80081e2:	b292      	uxth	r2, r2
 80081e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80081e8:	fb01 f202 	mul.w	r2, r1, r2
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <find_volume+0x2a8>
 80081f4:	230d      	movs	r3, #13
 80081f6:	e126      	b.n	8008446 <find_volume+0x4f2>
 80081f8:	200032b8 	.word	0x200032b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	3338      	adds	r3, #56	@ 0x38
 8008200:	3313      	adds	r3, #19
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe f82a 	bl	800625c <ld_word>
 8008208:	4603      	mov	r3, r0
 800820a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800820c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <find_volume+0x2cc>
 8008212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008214:	3338      	adds	r3, #56	@ 0x38
 8008216:	3320      	adds	r3, #32
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe f837 	bl	800628c <ld_dword>
 800821e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	3338      	adds	r3, #56	@ 0x38
 8008224:	330e      	adds	r3, #14
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe f818 	bl	800625c <ld_word>
 800822c:	4603      	mov	r3, r0
 800822e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008230:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <find_volume+0x2e6>
 8008236:	230d      	movs	r3, #13
 8008238:	e105      	b.n	8008446 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800823a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800823c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800823e:	4413      	add	r3, r2
 8008240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008242:	8911      	ldrh	r1, [r2, #8]
 8008244:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008246:	8992      	ldrh	r2, [r2, #12]
 8008248:	0952      	lsrs	r2, r2, #5
 800824a:	b292      	uxth	r2, r2
 800824c:	fbb1 f2f2 	udiv	r2, r1, r2
 8008250:	b292      	uxth	r2, r2
 8008252:	4413      	add	r3, r2
 8008254:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	429a      	cmp	r2, r3
 800825c:	d201      	bcs.n	8008262 <find_volume+0x30e>
 800825e:	230d      	movs	r3, #13
 8008260:	e0f1      	b.n	8008446 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800826a:	8952      	ldrh	r2, [r2, #10]
 800826c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008270:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <find_volume+0x328>
 8008278:	230d      	movs	r3, #13
 800827a:	e0e4      	b.n	8008446 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800827c:	2303      	movs	r3, #3
 800827e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008288:	4293      	cmp	r3, r2
 800828a:	d802      	bhi.n	8008292 <find_volume+0x33e>
 800828c:	2302      	movs	r3, #2
 800828e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008298:	4293      	cmp	r3, r2
 800829a:	d802      	bhi.n	80082a2 <find_volume+0x34e>
 800829c:	2301      	movs	r3, #1
 800829e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082ae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80082b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b4:	441a      	add	r2, r3
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80082ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082be:	441a      	add	r2, r3
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80082c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d11e      	bne.n	800830a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80082cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ce:	3338      	adds	r3, #56	@ 0x38
 80082d0:	332a      	adds	r3, #42	@ 0x2a
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fd ffc2 	bl	800625c <ld_word>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <find_volume+0x38e>
 80082de:	230d      	movs	r3, #13
 80082e0:	e0b1      	b.n	8008446 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	891b      	ldrh	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <find_volume+0x39a>
 80082ea:	230d      	movs	r3, #13
 80082ec:	e0ab      	b.n	8008446 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	3338      	adds	r3, #56	@ 0x38
 80082f2:	332c      	adds	r3, #44	@ 0x2c
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd ffc9 	bl	800628c <ld_dword>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	647b      	str	r3, [r7, #68]	@ 0x44
 8008308:	e01f      	b.n	800834a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	891b      	ldrh	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <find_volume+0x3c2>
 8008312:	230d      	movs	r3, #13
 8008314:	e097      	b.n	8008446 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800831a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800831c:	441a      	add	r2, r3
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008322:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008326:	2b02      	cmp	r3, #2
 8008328:	d103      	bne.n	8008332 <find_volume+0x3de>
 800832a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	e00a      	b.n	8008348 <find_volume+0x3f4>
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	4613      	mov	r3, r2
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	4413      	add	r3, r2
 800833c:	085a      	lsrs	r2, r3, #1
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008348:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834c:	6a1a      	ldr	r2, [r3, #32]
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	899b      	ldrh	r3, [r3, #12]
 8008352:	4619      	mov	r1, r3
 8008354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008356:	440b      	add	r3, r1
 8008358:	3b01      	subs	r3, #1
 800835a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800835c:	8989      	ldrh	r1, [r1, #12]
 800835e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008362:	429a      	cmp	r2, r3
 8008364:	d201      	bcs.n	800836a <find_volume+0x416>
 8008366:	230d      	movs	r3, #13
 8008368:	e06d      	b.n	8008446 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	f04f 32ff 	mov.w	r2, #4294967295
 8008370:	619a      	str	r2, [r3, #24]
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837c:	2280      	movs	r2, #128	@ 0x80
 800837e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008380:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008384:	2b03      	cmp	r3, #3
 8008386:	d149      	bne.n	800841c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838a:	3338      	adds	r3, #56	@ 0x38
 800838c:	3330      	adds	r3, #48	@ 0x30
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd ff64 	bl	800625c <ld_word>
 8008394:	4603      	mov	r3, r0
 8008396:	2b01      	cmp	r3, #1
 8008398:	d140      	bne.n	800841c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800839a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800839c:	3301      	adds	r3, #1
 800839e:	4619      	mov	r1, r3
 80083a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083a2:	f7fe fa0b 	bl	80067bc <move_window>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d137      	bne.n	800841c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	2200      	movs	r2, #0
 80083b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	3338      	adds	r3, #56	@ 0x38
 80083b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fd ff4e 	bl	800625c <ld_word>
 80083c0:	4603      	mov	r3, r0
 80083c2:	461a      	mov	r2, r3
 80083c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d127      	bne.n	800841c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	3338      	adds	r3, #56	@ 0x38
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd ff5b 	bl	800628c <ld_dword>
 80083d6:	4603      	mov	r3, r0
 80083d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008450 <find_volume+0x4fc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d11e      	bne.n	800841c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80083de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e0:	3338      	adds	r3, #56	@ 0x38
 80083e2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fd ff50 	bl	800628c <ld_dword>
 80083ec:	4603      	mov	r3, r0
 80083ee:	4a19      	ldr	r2, [pc, #100]	@ (8008454 <find_volume+0x500>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d113      	bne.n	800841c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80083f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f6:	3338      	adds	r3, #56	@ 0x38
 80083f8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fd ff45 	bl	800628c <ld_dword>
 8008402:	4602      	mov	r2, r0
 8008404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008406:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	3338      	adds	r3, #56	@ 0x38
 800840c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008410:	4618      	mov	r0, r3
 8008412:	f7fd ff3b 	bl	800628c <ld_dword>
 8008416:	4602      	mov	r2, r0
 8008418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008422:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008424:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <find_volume+0x504>)
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <find_volume+0x504>)
 800842e:	801a      	strh	r2, [r3, #0]
 8008430:	4b09      	ldr	r3, [pc, #36]	@ (8008458 <find_volume+0x504>)
 8008432:	881a      	ldrh	r2, [r3, #0]
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	4a08      	ldr	r2, [pc, #32]	@ (800845c <find_volume+0x508>)
 800843c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800843e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008440:	f7fe f954 	bl	80066ec <clear_lock>
#endif
	return FR_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3758      	adds	r7, #88	@ 0x58
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	41615252 	.word	0x41615252
 8008454:	61417272 	.word	0x61417272
 8008458:	200032bc 	.word	0x200032bc
 800845c:	200032e0 	.word	0x200032e0

08008460 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800846a:	2309      	movs	r3, #9
 800846c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01c      	beq.n	80084ae <validate+0x4e>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d018      	beq.n	80084ae <validate+0x4e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d013      	beq.n	80084ae <validate+0x4e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	889a      	ldrh	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	88db      	ldrh	r3, [r3, #6]
 8008490:	429a      	cmp	r2, r3
 8008492:	d10c      	bne.n	80084ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	4618      	mov	r0, r3
 800849c:	f7fd fe40 	bl	8006120 <disk_status>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <validate+0x4e>
			res = FR_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <validate+0x5a>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	e000      	b.n	80084bc <validate+0x5c>
 80084ba:	2300      	movs	r3, #0
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	6013      	str	r3, [r2, #0]
	return res;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80084de:	f107 0310 	add.w	r3, r7, #16
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fc9c 	bl	8007e20 <get_ldnumber>
 80084e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	da01      	bge.n	80084f4 <f_mount+0x28>
 80084f0:	230b      	movs	r3, #11
 80084f2:	e02b      	b.n	800854c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80084f4:	4a17      	ldr	r2, [pc, #92]	@ (8008554 <f_mount+0x88>)
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008504:	69b8      	ldr	r0, [r7, #24]
 8008506:	f7fe f8f1 	bl	80066ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	490d      	ldr	r1, [pc, #52]	@ (8008554 <f_mount+0x88>)
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <f_mount+0x66>
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d001      	beq.n	8008536 <f_mount+0x6a>
 8008532:	2300      	movs	r3, #0
 8008534:	e00a      	b.n	800854c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008536:	f107 010c 	add.w	r1, r7, #12
 800853a:	f107 0308 	add.w	r3, r7, #8
 800853e:	2200      	movs	r2, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fd07 	bl	8007f54 <find_volume>
 8008546:	4603      	mov	r3, r0
 8008548:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	200032b8 	.word	0x200032b8

08008558 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b09a      	sub	sp, #104	@ 0x68
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <f_open+0x18>
 800856c:	2309      	movs	r3, #9
 800856e:	e1b7      	b.n	80088e0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008576:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008578:	79fa      	ldrb	r2, [r7, #7]
 800857a:	f107 0114 	add.w	r1, r7, #20
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fce6 	bl	8007f54 <find_volume>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800858e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 819b 	bne.w	80088ce <f_open+0x376>
		dj.obj.fs = fs;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	f107 0318 	add.w	r3, r7, #24
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fbc5 	bl	8007d34 <follow_path>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d118      	bne.n	80085ea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085bc:	b25b      	sxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da03      	bge.n	80085ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80085c2:	2306      	movs	r3, #6
 80085c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80085c8:	e00f      	b.n	80085ea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	bf8c      	ite	hi
 80085d0:	2301      	movhi	r3, #1
 80085d2:	2300      	movls	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	f107 0318 	add.w	r3, r7, #24
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fd ff3c 	bl	800645c <chk_lock>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	f003 031c 	and.w	r3, r3, #28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d07f      	beq.n	80086f4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80085f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d017      	beq.n	800862c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80085fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008600:	2b04      	cmp	r3, #4
 8008602:	d10e      	bne.n	8008622 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008604:	f7fd ff86 	bl	8006514 <enq_lock>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <f_open+0xc4>
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f8de 	bl	80077d4 <dir_register>
 8008618:	4603      	mov	r3, r0
 800861a:	e000      	b.n	800861e <f_open+0xc6>
 800861c:	2312      	movs	r3, #18
 800861e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f043 0308 	orr.w	r3, r3, #8
 8008628:	71fb      	strb	r3, [r7, #7]
 800862a:	e010      	b.n	800864e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800862c:	7fbb      	ldrb	r3, [r7, #30]
 800862e:	f003 0311 	and.w	r3, r3, #17
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <f_open+0xe6>
					res = FR_DENIED;
 8008636:	2307      	movs	r3, #7
 8008638:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800863c:	e007      	b.n	800864e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <f_open+0xf6>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800864e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008652:	2b00      	cmp	r3, #0
 8008654:	d168      	bne.n	8008728 <f_open+0x1d0>
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d063      	beq.n	8008728 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008660:	f7fd fcfc 	bl	800605c <get_fattime>
 8008664:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008668:	330e      	adds	r3, #14
 800866a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd fe4b 	bl	8006308 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	3316      	adds	r3, #22
 8008676:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008678:	4618      	mov	r0, r3
 800867a:	f7fd fe45 	bl	8006308 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	330b      	adds	r3, #11
 8008682:	2220      	movs	r2, #32
 8008684:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fe1a 	bl	80072c6 <ld_clust>
 8008692:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008698:	2200      	movs	r2, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fe32 	bl	8007304 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	331c      	adds	r3, #28
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fd fe2e 	bl	8006308 <st_dword>
					fs->wflag = 1;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2201      	movs	r2, #1
 80086b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80086b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d037      	beq.n	8008728 <f_open+0x1d0>
						dw = fs->winsect;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086bc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80086be:	f107 0318 	add.w	r3, r7, #24
 80086c2:	2200      	movs	r2, #0
 80086c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fb22 	bl	8006d10 <remove_chain>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80086d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d126      	bne.n	8008728 <f_open+0x1d0>
							res = move_window(fs, dw);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe f86c 	bl	80067bc <move_window>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086ee:	3a01      	subs	r2, #1
 80086f0:	615a      	str	r2, [r3, #20]
 80086f2:	e019      	b.n	8008728 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80086f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d115      	bne.n	8008728 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80086fc:	7fbb      	ldrb	r3, [r7, #30]
 80086fe:	f003 0310 	and.w	r3, r3, #16
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <f_open+0x1b6>
					res = FR_NO_FILE;
 8008706:	2304      	movs	r3, #4
 8008708:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800870c:	e00c      	b.n	8008728 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <f_open+0x1d0>
 8008718:	7fbb      	ldrb	r3, [r7, #30]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <f_open+0x1d0>
						res = FR_DENIED;
 8008722:	2307      	movs	r3, #7
 8008724:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008728:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800872c:	2b00      	cmp	r3, #0
 800872e:	d126      	bne.n	800877e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008740:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800874a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008750:	79fb      	ldrb	r3, [r7, #7]
 8008752:	2b01      	cmp	r3, #1
 8008754:	bf8c      	ite	hi
 8008756:	2301      	movhi	r3, #1
 8008758:	2300      	movls	r3, #0
 800875a:	b2db      	uxtb	r3, r3
 800875c:	461a      	mov	r2, r3
 800875e:	f107 0318 	add.w	r3, r7, #24
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd fef7 	bl	8006558 <inc_lock>
 800876a:	4602      	mov	r2, r0
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <f_open+0x226>
 8008778:	2302      	movs	r3, #2
 800877a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800877e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008782:	2b00      	cmp	r3, #0
 8008784:	f040 80a3 	bne.w	80088ce <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fd99 	bl	80072c6 <ld_clust>
 8008794:	4602      	mov	r2, r0
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	331c      	adds	r3, #28
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fd74 	bl	800628c <ld_dword>
 80087a4:	4602      	mov	r2, r0
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	88da      	ldrh	r2, [r3, #6]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	79fa      	ldrb	r2, [r7, #7]
 80087c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3330      	adds	r3, #48	@ 0x30
 80087da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fdde 	bl	80063a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d06e      	beq.n	80088ce <f_open+0x376>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d06a      	beq.n	80088ce <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	895b      	ldrh	r3, [r3, #10]
 8008804:	461a      	mov	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	899b      	ldrh	r3, [r3, #12]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800881c:	e016      	b.n	800884c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe f887 	bl	8006936 <get_fat>
 8008828:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800882a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800882c:	2b01      	cmp	r3, #1
 800882e:	d802      	bhi.n	8008836 <f_open+0x2de>
 8008830:	2302      	movs	r3, #2
 8008832:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d102      	bne.n	8008844 <f_open+0x2ec>
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008844:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800884c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <f_open+0x304>
 8008854:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008858:	429a      	cmp	r2, r3
 800885a:	d8e0      	bhi.n	800881e <f_open+0x2c6>
				}
				fp->clust = clst;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008860:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008862:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008866:	2b00      	cmp	r3, #0
 8008868:	d131      	bne.n	80088ce <f_open+0x376>
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	899b      	ldrh	r3, [r3, #12]
 800886e:	461a      	mov	r2, r3
 8008870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008872:	fbb3 f1f2 	udiv	r1, r3, r2
 8008876:	fb01 f202 	mul.w	r2, r1, r2
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d026      	beq.n	80088ce <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe f837 	bl	80068f8 <clust2sect>
 800888a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800888c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <f_open+0x342>
						res = FR_INT_ERR;
 8008892:	2302      	movs	r3, #2
 8008894:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008898:	e019      	b.n	80088ce <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	899b      	ldrh	r3, [r3, #12]
 800889e:	461a      	mov	r2, r3
 80088a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80088a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a8:	441a      	add	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	7858      	ldrb	r0, [r3, #1]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a1a      	ldr	r2, [r3, #32]
 80088bc:	2301      	movs	r3, #1
 80088be:	f7fd fc6f 	bl	80061a0 <disk_read>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <f_open+0x376>
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80088ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <f_open+0x384>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3768      	adds	r7, #104	@ 0x68
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08c      	sub	sp, #48	@ 0x30
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f107 0210 	add.w	r2, r7, #16
 8008906:	4611      	mov	r1, r2
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff fda9 	bl	8008460 <validate>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008914:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008918:	2b00      	cmp	r3, #0
 800891a:	d107      	bne.n	800892c <f_write+0x44>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7d5b      	ldrb	r3, [r3, #21]
 8008920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008924:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <f_write+0x4a>
 800892c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008930:	e16a      	b.n	8008c08 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	7d1b      	ldrb	r3, [r3, #20]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <f_write+0x5a>
 800893e:	2307      	movs	r3, #7
 8008940:	e162      	b.n	8008c08 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	441a      	add	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	f080 814c 	bcs.w	8008bec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	43db      	mvns	r3, r3
 800895a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800895c:	e146      	b.n	8008bec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	8992      	ldrh	r2, [r2, #12]
 8008966:	fbb3 f1f2 	udiv	r1, r3, r2
 800896a:	fb01 f202 	mul.w	r2, r1, r2
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 80f1 	bne.w	8008b58 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	8992      	ldrh	r2, [r2, #12]
 800897e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	8952      	ldrh	r2, [r2, #10]
 8008986:	3a01      	subs	r2, #1
 8008988:	4013      	ands	r3, r2
 800898a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d143      	bne.n	8008a1a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10c      	bne.n	80089b4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d11a      	bne.n	80089dc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2100      	movs	r1, #0
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fa15 	bl	8006dda <create_chain>
 80089b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80089b2:	e013      	b.n	80089dc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d007      	beq.n	80089cc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	4619      	mov	r1, r3
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7fe faa1 	bl	8006f0a <clmt_clust>
 80089c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80089ca:	e007      	b.n	80089dc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fe fa00 	bl	8006dda <create_chain>
 80089da:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 8109 	beq.w	8008bf6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d104      	bne.n	80089f4 <f_write+0x10c>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2202      	movs	r2, #2
 80089ee:	755a      	strb	r2, [r3, #21]
 80089f0:	2302      	movs	r3, #2
 80089f2:	e109      	b.n	8008c08 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fa:	d104      	bne.n	8008a06 <f_write+0x11e>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	755a      	strb	r2, [r3, #21]
 8008a02:	2301      	movs	r3, #1
 8008a04:	e100      	b.n	8008c08 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a0a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <f_write+0x132>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7d1b      	ldrb	r3, [r3, #20]
 8008a1e:	b25b      	sxtb	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da18      	bge.n	8008a56 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	7858      	ldrb	r0, [r3, #1]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a1a      	ldr	r2, [r3, #32]
 8008a32:	2301      	movs	r3, #1
 8008a34:	f7fd fbd4 	bl	80061e0 <disk_write>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d004      	beq.n	8008a48 <f_write+0x160>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	755a      	strb	r2, [r3, #21]
 8008a44:	2301      	movs	r3, #1
 8008a46:	e0df      	b.n	8008c08 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	7d1b      	ldrb	r3, [r3, #20]
 8008a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7fd ff4a 	bl	80068f8 <clust2sect>
 8008a64:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d104      	bne.n	8008a76 <f_write+0x18e>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	755a      	strb	r2, [r3, #21]
 8008a72:	2302      	movs	r3, #2
 8008a74:	e0c8      	b.n	8008c08 <f_write+0x320>
			sect += csect;
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	899b      	ldrh	r3, [r3, #12]
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a8a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d043      	beq.n	8008b1a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	4413      	add	r3, r2
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	8952      	ldrh	r2, [r2, #10]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d905      	bls.n	8008aac <f_write+0x1c4>
					cc = fs->csize - csect;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	895b      	ldrh	r3, [r3, #10]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	7858      	ldrb	r0, [r3, #1]
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	69f9      	ldr	r1, [r7, #28]
 8008ab6:	f7fd fb93 	bl	80061e0 <disk_write>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <f_write+0x1e2>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	755a      	strb	r2, [r3, #21]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e09e      	b.n	8008c08 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	6a3a      	ldr	r2, [r7, #32]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d918      	bls.n	8008b0a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a1a      	ldr	r2, [r3, #32]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	8992      	ldrh	r2, [r2, #12]
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	69fa      	ldr	r2, [r7, #28]
 8008af0:	18d1      	adds	r1, r2, r3
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	899b      	ldrh	r3, [r3, #12]
 8008af6:	461a      	mov	r2, r3
 8008af8:	f7fd fc32 	bl	8006360 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	7d1b      	ldrb	r3, [r3, #20]
 8008b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	899b      	ldrh	r3, [r3, #12]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008b18:	e04b      	b.n	8008bb2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d016      	beq.n	8008b52 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d210      	bcs.n	8008b52 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	7858      	ldrb	r0, [r3, #1]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	f7fd fb2f 	bl	80061a0 <disk_read>
 8008b42:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	755a      	strb	r2, [r3, #21]
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e05a      	b.n	8008c08 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	899b      	ldrh	r3, [r3, #12]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	8992      	ldrh	r2, [r2, #12]
 8008b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b6a:	fb01 f202 	mul.w	r2, r1, r2
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	1ac3      	subs	r3, r0, r3
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d901      	bls.n	8008b80 <f_write+0x298>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	8992      	ldrh	r2, [r2, #12]
 8008b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b92:	fb00 f202 	mul.w	r2, r0, r2
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	440b      	add	r3, r1
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b9c:	69f9      	ldr	r1, [r7, #28]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fd fbde 	bl	8006360 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	7d1b      	ldrb	r3, [r3, #20]
 8008ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	4413      	add	r3, r2
 8008bb8:	61fb      	str	r3, [r7, #28]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	441a      	add	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	619a      	str	r2, [r3, #24]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	bf38      	it	cc
 8008bd2:	461a      	movcc	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	60da      	str	r2, [r3, #12]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	441a      	add	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f47f aeb5 	bne.w	800895e <f_write+0x76>
 8008bf4:	e000      	b.n	8008bf8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bf6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	7d1b      	ldrb	r3, [r3, #20]
 8008bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3730      	adds	r7, #48	@ 0x30
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f107 0208 	add.w	r2, r7, #8
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff fc1d 	bl	8008460 <validate>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d168      	bne.n	8008d02 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7d1b      	ldrb	r3, [r3, #20]
 8008c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d062      	beq.n	8008d02 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7d1b      	ldrb	r3, [r3, #20]
 8008c40:	b25b      	sxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	da15      	bge.n	8008c72 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	7858      	ldrb	r0, [r3, #1]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1a      	ldr	r2, [r3, #32]
 8008c54:	2301      	movs	r3, #1
 8008c56:	f7fd fac3 	bl	80061e0 <disk_write>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <f_sync+0x54>
 8008c60:	2301      	movs	r3, #1
 8008c62:	e04f      	b.n	8008d04 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7d1b      	ldrb	r3, [r3, #20]
 8008c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c72:	f7fd f9f3 	bl	800605c <get_fattime>
 8008c76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f7fd fd9b 	bl	80067bc <move_window>
 8008c86:	4603      	mov	r3, r0
 8008c88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d138      	bne.n	8008d02 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	330b      	adds	r3, #11
 8008c9a:	781a      	ldrb	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	330b      	adds	r3, #11
 8008ca0:	f042 0220 	orr.w	r2, r2, #32
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	f7fe fb26 	bl	8007304 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f103 021c 	add.w	r2, r3, #28
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7fd fb1f 	bl	8006308 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3316      	adds	r3, #22
 8008cce:	6939      	ldr	r1, [r7, #16]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fd fb19 	bl	8006308 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3312      	adds	r3, #18
 8008cda:	2100      	movs	r1, #0
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fd faf8 	bl	80062d2 <st_word>
					fs->wflag = 1;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fd fd94 	bl	8006818 <sync_fs>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
 8008cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff ff7b 	bl	8008c10 <f_sync>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d118      	bne.n	8008d56 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f107 0208 	add.w	r2, r7, #8
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fb97 	bl	8008460 <validate>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10c      	bne.n	8008d56 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fd fc97 	bl	8006674 <dec_lock>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b090      	sub	sp, #64	@ 0x40
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f107 0208 	add.w	r2, r7, #8
 8008d70:	4611      	mov	r1, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fb74 	bl	8008460 <validate>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <f_lseek+0x2e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	7d5b      	ldrb	r3, [r3, #21]
 8008d8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <f_lseek+0x3c>
 8008d96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d9a:	e201      	b.n	80091a0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80d9 	beq.w	8008f58 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dac:	d15a      	bne.n	8008e64 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d03a      	beq.n	8008e44 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd8:	3302      	adds	r3, #2
 8008dda:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	3301      	adds	r3, #1
 8008de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fd fda3 	bl	8006936 <get_fat>
 8008df0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d804      	bhi.n	8008e02 <f_lseek+0xa2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	755a      	strb	r2, [r3, #21]
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e1ce      	b.n	80091a0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e08:	d104      	bne.n	8008e14 <f_lseek+0xb4>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	755a      	strb	r2, [r3, #21]
 8008e10:	2301      	movs	r3, #1
 8008e12:	e1c5      	b.n	80091a0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d0de      	beq.n	8008ddc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d809      	bhi.n	8008e3a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	1d1a      	adds	r2, r3, #4
 8008e2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	1d1a      	adds	r2, r3, #4
 8008e34:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d3c4      	bcc.n	8008dce <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d803      	bhi.n	8008e5c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e19f      	b.n	800919c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008e5c:	2311      	movs	r3, #17
 8008e5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008e62:	e19b      	b.n	800919c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d902      	bls.n	8008e74 <f_lseek+0x114>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 818d 	beq.w	800919c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7fe f83e 	bl	8006f0a <clmt_clust>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f7fd fd2b 	bl	80068f8 <clust2sect>
 8008ea2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <f_lseek+0x154>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2202      	movs	r2, #2
 8008eae:	755a      	strb	r2, [r3, #21]
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e175      	b.n	80091a0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	8992      	ldrh	r2, [r2, #12]
 8008ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	8952      	ldrh	r2, [r2, #10]
 8008ec4:	3a01      	subs	r2, #1
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	4413      	add	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	8992      	ldrh	r2, [r2, #12]
 8008ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eda:	fb01 f202 	mul.w	r2, r1, r2
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 815b 	beq.w	800919c <f_lseek+0x43c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	f000 8155 	beq.w	800919c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7d1b      	ldrb	r3, [r3, #20]
 8008ef6:	b25b      	sxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da18      	bge.n	8008f2e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	7858      	ldrb	r0, [r3, #1]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1a      	ldr	r2, [r3, #32]
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f7fd f968 	bl	80061e0 <disk_write>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <f_lseek+0x1c0>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	755a      	strb	r2, [r3, #21]
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e13f      	b.n	80091a0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7d1b      	ldrb	r3, [r3, #20]
 8008f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	7858      	ldrb	r0, [r3, #1]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f38:	2301      	movs	r3, #1
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	f7fd f930 	bl	80061a0 <disk_read>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <f_lseek+0x1f0>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	755a      	strb	r2, [r3, #21]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e127      	b.n	80091a0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	621a      	str	r2, [r3, #32]
 8008f56:	e121      	b.n	800919c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d908      	bls.n	8008f74 <f_lseek+0x214>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	7d1b      	ldrb	r3, [r3, #20]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f82:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 80b5 	beq.w	80090f6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	895b      	ldrh	r3, [r3, #10]
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	899b      	ldrh	r3, [r3, #12]
 8008f96:	fb02 f303 	mul.w	r3, r2, r3
 8008f9a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01b      	beq.n	8008fda <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	1e5a      	subs	r2, r3, #1
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	1e59      	subs	r1, r3, #1
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d30f      	bcc.n	8008fda <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	1e5a      	subs	r2, r3, #1
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	425b      	negs	r3, r3
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fd8:	e022      	b.n	8009020 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d119      	bne.n	800901a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fd fef5 	bl	8006dda <create_chain>
 8008ff0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d104      	bne.n	8009002 <f_lseek+0x2a2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	755a      	strb	r2, [r3, #21]
 8008ffe:	2302      	movs	r3, #2
 8009000:	e0ce      	b.n	80091a0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d104      	bne.n	8009014 <f_lseek+0x2b4>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	755a      	strb	r2, [r3, #21]
 8009010:	2301      	movs	r3, #1
 8009012:	e0c5      	b.n	80091a0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009018:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800901e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	2b00      	cmp	r3, #0
 8009024:	d067      	beq.n	80090f6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009026:	e03a      	b.n	800909e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	441a      	add	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	7d1b      	ldrb	r3, [r3, #20]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fec4 	bl	8006dda <create_chain>
 8009052:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	2b00      	cmp	r3, #0
 8009058:	d108      	bne.n	800906c <f_lseek+0x30c>
							ofs = 0; break;
 800905a:	2300      	movs	r3, #0
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	e022      	b.n	80090a6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009064:	4618      	mov	r0, r3
 8009066:	f7fd fc66 	bl	8006936 <get_fat>
 800906a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800906c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009072:	d104      	bne.n	800907e <f_lseek+0x31e>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	755a      	strb	r2, [r3, #21]
 800907a:	2301      	movs	r3, #1
 800907c:	e090      	b.n	80091a0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800907e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009080:	2b01      	cmp	r3, #1
 8009082:	d904      	bls.n	800908e <f_lseek+0x32e>
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800908a:	429a      	cmp	r2, r3
 800908c:	d304      	bcc.n	8009098 <f_lseek+0x338>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	755a      	strb	r2, [r3, #21]
 8009094:	2302      	movs	r3, #2
 8009096:	e083      	b.n	80091a0 <f_lseek+0x440>
					fp->clust = clst;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800909c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8c0      	bhi.n	8009028 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	441a      	add	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	899b      	ldrh	r3, [r3, #12]
 80090b6:	461a      	mov	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80090be:	fb01 f202 	mul.w	r2, r1, r2
 80090c2:	1a9b      	subs	r3, r3, r2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d016      	beq.n	80090f6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fd fc13 	bl	80068f8 <clust2sect>
 80090d2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80090d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <f_lseek+0x384>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	755a      	strb	r2, [r3, #21]
 80090e0:	2302      	movs	r3, #2
 80090e2:	e05d      	b.n	80091a0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	899b      	ldrh	r3, [r3, #12]
 80090e8:	461a      	mov	r2, r3
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80090f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090f2:	4413      	add	r3, r2
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d90a      	bls.n	8009118 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7d1b      	ldrb	r3, [r3, #20]
 800910e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009112:	b2da      	uxtb	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	8992      	ldrh	r2, [r2, #12]
 8009120:	fbb3 f1f2 	udiv	r1, r3, r2
 8009124:	fb01 f202 	mul.w	r2, r1, r2
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d036      	beq.n	800919c <f_lseek+0x43c>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009134:	429a      	cmp	r2, r3
 8009136:	d031      	beq.n	800919c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	7d1b      	ldrb	r3, [r3, #20]
 800913c:	b25b      	sxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	da18      	bge.n	8009174 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	7858      	ldrb	r0, [r3, #1]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1a      	ldr	r2, [r3, #32]
 8009150:	2301      	movs	r3, #1
 8009152:	f7fd f845 	bl	80061e0 <disk_write>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <f_lseek+0x406>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	755a      	strb	r2, [r3, #21]
 8009162:	2301      	movs	r3, #1
 8009164:	e01c      	b.n	80091a0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	7d1b      	ldrb	r3, [r3, #20]
 800916a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800916e:	b2da      	uxtb	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	7858      	ldrb	r0, [r3, #1]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800917e:	2301      	movs	r3, #1
 8009180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009182:	f7fd f80d 	bl	80061a0 <disk_read>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <f_lseek+0x436>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	755a      	strb	r2, [r3, #21]
 8009192:	2301      	movs	r3, #1
 8009194:	e004      	b.n	80091a0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800919a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800919c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3740      	adds	r7, #64	@ 0x40
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091be:	4b1f      	ldr	r3, [pc, #124]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091c0:	7a5b      	ldrb	r3, [r3, #9]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d131      	bne.n	800922c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091c8:	4b1c      	ldr	r3, [pc, #112]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091ca:	7a5b      	ldrb	r3, [r3, #9]
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091d2:	2100      	movs	r1, #0
 80091d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80091d6:	4b19      	ldr	r3, [pc, #100]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091d8:	7a5b      	ldrb	r3, [r3, #9]
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	4a17      	ldr	r2, [pc, #92]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80091e6:	4b15      	ldr	r3, [pc, #84]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091e8:	7a5b      	ldrb	r3, [r3, #9]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	4b13      	ldr	r3, [pc, #76]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091f0:	4413      	add	r3, r2
 80091f2:	79fa      	ldrb	r2, [r7, #7]
 80091f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80091f6:	4b11      	ldr	r3, [pc, #68]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 80091f8:	7a5b      	ldrb	r3, [r3, #9]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	b2d1      	uxtb	r1, r2
 8009200:	4a0e      	ldr	r2, [pc, #56]	@ (800923c <FATFS_LinkDriverEx+0x94>)
 8009202:	7251      	strb	r1, [r2, #9]
 8009204:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009206:	7dbb      	ldrb	r3, [r7, #22]
 8009208:	3330      	adds	r3, #48	@ 0x30
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	3301      	adds	r3, #1
 8009214:	223a      	movs	r2, #58	@ 0x3a
 8009216:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	3302      	adds	r3, #2
 800921c:	222f      	movs	r2, #47	@ 0x2f
 800921e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3303      	adds	r3, #3
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
}
 800922e:	4618      	mov	r0, r3
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	200034e0 	.word	0x200034e0

08009240 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800924a:	2200      	movs	r2, #0
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff ffaa 	bl	80091a8 <FATFS_LinkDriverEx>
 8009254:	4603      	mov	r3, r0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009270:	d802      	bhi.n	8009278 <ff_convert+0x18>
		c = chr;
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	81fb      	strh	r3, [r7, #14]
 8009276:	e025      	b.n	80092c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800927e:	88fb      	ldrh	r3, [r7, #6]
 8009280:	2bff      	cmp	r3, #255	@ 0xff
 8009282:	d805      	bhi.n	8009290 <ff_convert+0x30>
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	3b80      	subs	r3, #128	@ 0x80
 8009288:	4a12      	ldr	r2, [pc, #72]	@ (80092d4 <ff_convert+0x74>)
 800928a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928e:	e000      	b.n	8009292 <ff_convert+0x32>
 8009290:	2300      	movs	r3, #0
 8009292:	81fb      	strh	r3, [r7, #14]
 8009294:	e016      	b.n	80092c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009296:	2300      	movs	r3, #0
 8009298:	81fb      	strh	r3, [r7, #14]
 800929a:	e009      	b.n	80092b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800929c:	89fb      	ldrh	r3, [r7, #14]
 800929e:	4a0d      	ldr	r2, [pc, #52]	@ (80092d4 <ff_convert+0x74>)
 80092a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092a4:	88fa      	ldrh	r2, [r7, #6]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d006      	beq.n	80092b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80092aa:	89fb      	ldrh	r3, [r7, #14]
 80092ac:	3301      	adds	r3, #1
 80092ae:	81fb      	strh	r3, [r7, #14]
 80092b0:	89fb      	ldrh	r3, [r7, #14]
 80092b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80092b4:	d9f2      	bls.n	800929c <ff_convert+0x3c>
 80092b6:	e000      	b.n	80092ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80092b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	3380      	adds	r3, #128	@ 0x80
 80092be:	b29b      	uxth	r3, r3
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80092c4:	89fb      	ldrh	r3, [r7, #14]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	0800a5a8 	.word	0x0800a5a8

080092d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e8:	d201      	bcs.n	80092ee <ff_wtoupper+0x16>
 80092ea:	4b3e      	ldr	r3, [pc, #248]	@ (80093e4 <ff_wtoupper+0x10c>)
 80092ec:	e000      	b.n	80092f0 <ff_wtoupper+0x18>
 80092ee:	4b3e      	ldr	r3, [pc, #248]	@ (80093e8 <ff_wtoupper+0x110>)
 80092f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	1c9a      	adds	r2, r3, #2
 80092f6:	617a      	str	r2, [r7, #20]
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80092fc:	8a7b      	ldrh	r3, [r7, #18]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d068      	beq.n	80093d4 <ff_wtoupper+0xfc>
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	8a7b      	ldrh	r3, [r7, #18]
 8009306:	429a      	cmp	r2, r3
 8009308:	d364      	bcc.n	80093d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	1c9a      	adds	r2, r3, #2
 800930e:	617a      	str	r2, [r7, #20]
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	823b      	strh	r3, [r7, #16]
 8009314:	8a3b      	ldrh	r3, [r7, #16]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	81fb      	strh	r3, [r7, #14]
 800931a:	8a3b      	ldrh	r3, [r7, #16]
 800931c:	b2db      	uxtb	r3, r3
 800931e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009320:	88fa      	ldrh	r2, [r7, #6]
 8009322:	8a79      	ldrh	r1, [r7, #18]
 8009324:	8a3b      	ldrh	r3, [r7, #16]
 8009326:	440b      	add	r3, r1
 8009328:	429a      	cmp	r2, r3
 800932a:	da49      	bge.n	80093c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800932c:	89fb      	ldrh	r3, [r7, #14]
 800932e:	2b08      	cmp	r3, #8
 8009330:	d84f      	bhi.n	80093d2 <ff_wtoupper+0xfa>
 8009332:	a201      	add	r2, pc, #4	@ (adr r2, 8009338 <ff_wtoupper+0x60>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	0800935d 	.word	0x0800935d
 800933c:	0800936f 	.word	0x0800936f
 8009340:	08009385 	.word	0x08009385
 8009344:	0800938d 	.word	0x0800938d
 8009348:	08009395 	.word	0x08009395
 800934c:	0800939d 	.word	0x0800939d
 8009350:	080093a5 	.word	0x080093a5
 8009354:	080093ad 	.word	0x080093ad
 8009358:	080093b5 	.word	0x080093b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800935c:	88fa      	ldrh	r2, [r7, #6]
 800935e:	8a7b      	ldrh	r3, [r7, #18]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4413      	add	r3, r2
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	80fb      	strh	r3, [r7, #6]
 800936c:	e027      	b.n	80093be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800936e:	88fa      	ldrh	r2, [r7, #6]
 8009370:	8a7b      	ldrh	r3, [r7, #18]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	b29b      	uxth	r3, r3
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	b29b      	uxth	r3, r3
 800937c:	88fa      	ldrh	r2, [r7, #6]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	80fb      	strh	r3, [r7, #6]
 8009382:	e01c      	b.n	80093be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	3b10      	subs	r3, #16
 8009388:	80fb      	strh	r3, [r7, #6]
 800938a:	e018      	b.n	80093be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800938c:	88fb      	ldrh	r3, [r7, #6]
 800938e:	3b20      	subs	r3, #32
 8009390:	80fb      	strh	r3, [r7, #6]
 8009392:	e014      	b.n	80093be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	3b30      	subs	r3, #48	@ 0x30
 8009398:	80fb      	strh	r3, [r7, #6]
 800939a:	e010      	b.n	80093be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800939c:	88fb      	ldrh	r3, [r7, #6]
 800939e:	3b1a      	subs	r3, #26
 80093a0:	80fb      	strh	r3, [r7, #6]
 80093a2:	e00c      	b.n	80093be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	3308      	adds	r3, #8
 80093a8:	80fb      	strh	r3, [r7, #6]
 80093aa:	e008      	b.n	80093be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80093ac:	88fb      	ldrh	r3, [r7, #6]
 80093ae:	3b50      	subs	r3, #80	@ 0x50
 80093b0:	80fb      	strh	r3, [r7, #6]
 80093b2:	e004      	b.n	80093be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80093ba:	80fb      	strh	r3, [r7, #6]
 80093bc:	bf00      	nop
			}
			break;
 80093be:	e008      	b.n	80093d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d195      	bne.n	80092f2 <ff_wtoupper+0x1a>
 80093c6:	8a3b      	ldrh	r3, [r7, #16]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4413      	add	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80093d0:	e78f      	b.n	80092f2 <ff_wtoupper+0x1a>
			break;
 80093d2:	bf00      	nop
	}

	return chr;
 80093d4:	88fb      	ldrh	r3, [r7, #6]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	0800a6a8 	.word	0x0800a6a8
 80093e8:	0800a89c 	.word	0x0800a89c

080093ec <std>:
 80093ec:	2300      	movs	r3, #0
 80093ee:	b510      	push	{r4, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	e9c0 3300 	strd	r3, r3, [r0]
 80093f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093fa:	6083      	str	r3, [r0, #8]
 80093fc:	8181      	strh	r1, [r0, #12]
 80093fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009400:	81c2      	strh	r2, [r0, #14]
 8009402:	6183      	str	r3, [r0, #24]
 8009404:	4619      	mov	r1, r3
 8009406:	2208      	movs	r2, #8
 8009408:	305c      	adds	r0, #92	@ 0x5c
 800940a:	f000 f9f9 	bl	8009800 <memset>
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <std+0x58>)
 8009410:	6263      	str	r3, [r4, #36]	@ 0x24
 8009412:	4b0d      	ldr	r3, [pc, #52]	@ (8009448 <std+0x5c>)
 8009414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009416:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <std+0x60>)
 8009418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <std+0x64>)
 800941c:	6323      	str	r3, [r4, #48]	@ 0x30
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x68>)
 8009420:	6224      	str	r4, [r4, #32]
 8009422:	429c      	cmp	r4, r3
 8009424:	d006      	beq.n	8009434 <std+0x48>
 8009426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800942a:	4294      	cmp	r4, r2
 800942c:	d002      	beq.n	8009434 <std+0x48>
 800942e:	33d0      	adds	r3, #208	@ 0xd0
 8009430:	429c      	cmp	r4, r3
 8009432:	d105      	bne.n	8009440 <std+0x54>
 8009434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943c:	f000 ba58 	b.w	80098f0 <__retarget_lock_init_recursive>
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	08009651 	.word	0x08009651
 8009448:	08009673 	.word	0x08009673
 800944c:	080096ab 	.word	0x080096ab
 8009450:	080096cf 	.word	0x080096cf
 8009454:	200034ec 	.word	0x200034ec

08009458 <stdio_exit_handler>:
 8009458:	4a02      	ldr	r2, [pc, #8]	@ (8009464 <stdio_exit_handler+0xc>)
 800945a:	4903      	ldr	r1, [pc, #12]	@ (8009468 <stdio_exit_handler+0x10>)
 800945c:	4803      	ldr	r0, [pc, #12]	@ (800946c <stdio_exit_handler+0x14>)
 800945e:	f000 b869 	b.w	8009534 <_fwalk_sglue>
 8009462:	bf00      	nop
 8009464:	20000060 	.word	0x20000060
 8009468:	0800a191 	.word	0x0800a191
 800946c:	20000070 	.word	0x20000070

08009470 <cleanup_stdio>:
 8009470:	6841      	ldr	r1, [r0, #4]
 8009472:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <cleanup_stdio+0x34>)
 8009474:	4299      	cmp	r1, r3
 8009476:	b510      	push	{r4, lr}
 8009478:	4604      	mov	r4, r0
 800947a:	d001      	beq.n	8009480 <cleanup_stdio+0x10>
 800947c:	f000 fe88 	bl	800a190 <_fflush_r>
 8009480:	68a1      	ldr	r1, [r4, #8]
 8009482:	4b09      	ldr	r3, [pc, #36]	@ (80094a8 <cleanup_stdio+0x38>)
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <cleanup_stdio+0x1e>
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fe81 	bl	800a190 <_fflush_r>
 800948e:	68e1      	ldr	r1, [r4, #12]
 8009490:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <cleanup_stdio+0x3c>)
 8009492:	4299      	cmp	r1, r3
 8009494:	d004      	beq.n	80094a0 <cleanup_stdio+0x30>
 8009496:	4620      	mov	r0, r4
 8009498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949c:	f000 be78 	b.w	800a190 <_fflush_r>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	bf00      	nop
 80094a4:	200034ec 	.word	0x200034ec
 80094a8:	20003554 	.word	0x20003554
 80094ac:	200035bc 	.word	0x200035bc

080094b0 <global_stdio_init.part.0>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <global_stdio_init.part.0+0x30>)
 80094b4:	4c0b      	ldr	r4, [pc, #44]	@ (80094e4 <global_stdio_init.part.0+0x34>)
 80094b6:	4a0c      	ldr	r2, [pc, #48]	@ (80094e8 <global_stdio_init.part.0+0x38>)
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	4620      	mov	r0, r4
 80094bc:	2200      	movs	r2, #0
 80094be:	2104      	movs	r1, #4
 80094c0:	f7ff ff94 	bl	80093ec <std>
 80094c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094c8:	2201      	movs	r2, #1
 80094ca:	2109      	movs	r1, #9
 80094cc:	f7ff ff8e 	bl	80093ec <std>
 80094d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094d4:	2202      	movs	r2, #2
 80094d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094da:	2112      	movs	r1, #18
 80094dc:	f7ff bf86 	b.w	80093ec <std>
 80094e0:	20003624 	.word	0x20003624
 80094e4:	200034ec 	.word	0x200034ec
 80094e8:	08009459 	.word	0x08009459

080094ec <__sfp_lock_acquire>:
 80094ec:	4801      	ldr	r0, [pc, #4]	@ (80094f4 <__sfp_lock_acquire+0x8>)
 80094ee:	f000 ba00 	b.w	80098f2 <__retarget_lock_acquire_recursive>
 80094f2:	bf00      	nop
 80094f4:	2000362d 	.word	0x2000362d

080094f8 <__sfp_lock_release>:
 80094f8:	4801      	ldr	r0, [pc, #4]	@ (8009500 <__sfp_lock_release+0x8>)
 80094fa:	f000 b9fb 	b.w	80098f4 <__retarget_lock_release_recursive>
 80094fe:	bf00      	nop
 8009500:	2000362d 	.word	0x2000362d

08009504 <__sinit>:
 8009504:	b510      	push	{r4, lr}
 8009506:	4604      	mov	r4, r0
 8009508:	f7ff fff0 	bl	80094ec <__sfp_lock_acquire>
 800950c:	6a23      	ldr	r3, [r4, #32]
 800950e:	b11b      	cbz	r3, 8009518 <__sinit+0x14>
 8009510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009514:	f7ff bff0 	b.w	80094f8 <__sfp_lock_release>
 8009518:	4b04      	ldr	r3, [pc, #16]	@ (800952c <__sinit+0x28>)
 800951a:	6223      	str	r3, [r4, #32]
 800951c:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <__sinit+0x2c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1f5      	bne.n	8009510 <__sinit+0xc>
 8009524:	f7ff ffc4 	bl	80094b0 <global_stdio_init.part.0>
 8009528:	e7f2      	b.n	8009510 <__sinit+0xc>
 800952a:	bf00      	nop
 800952c:	08009471 	.word	0x08009471
 8009530:	20003624 	.word	0x20003624

08009534 <_fwalk_sglue>:
 8009534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4607      	mov	r7, r0
 800953a:	4688      	mov	r8, r1
 800953c:	4614      	mov	r4, r2
 800953e:	2600      	movs	r6, #0
 8009540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009544:	f1b9 0901 	subs.w	r9, r9, #1
 8009548:	d505      	bpl.n	8009556 <_fwalk_sglue+0x22>
 800954a:	6824      	ldr	r4, [r4, #0]
 800954c:	2c00      	cmp	r4, #0
 800954e:	d1f7      	bne.n	8009540 <_fwalk_sglue+0xc>
 8009550:	4630      	mov	r0, r6
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d907      	bls.n	800956c <_fwalk_sglue+0x38>
 800955c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009560:	3301      	adds	r3, #1
 8009562:	d003      	beq.n	800956c <_fwalk_sglue+0x38>
 8009564:	4629      	mov	r1, r5
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	4306      	orrs	r6, r0
 800956c:	3568      	adds	r5, #104	@ 0x68
 800956e:	e7e9      	b.n	8009544 <_fwalk_sglue+0x10>

08009570 <iprintf>:
 8009570:	b40f      	push	{r0, r1, r2, r3}
 8009572:	b507      	push	{r0, r1, r2, lr}
 8009574:	4906      	ldr	r1, [pc, #24]	@ (8009590 <iprintf+0x20>)
 8009576:	ab04      	add	r3, sp, #16
 8009578:	6808      	ldr	r0, [r1, #0]
 800957a:	f853 2b04 	ldr.w	r2, [r3], #4
 800957e:	6881      	ldr	r1, [r0, #8]
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	f000 fadb 	bl	8009b3c <_vfiprintf_r>
 8009586:	b003      	add	sp, #12
 8009588:	f85d eb04 	ldr.w	lr, [sp], #4
 800958c:	b004      	add	sp, #16
 800958e:	4770      	bx	lr
 8009590:	2000006c 	.word	0x2000006c

08009594 <_puts_r>:
 8009594:	6a03      	ldr	r3, [r0, #32]
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	6884      	ldr	r4, [r0, #8]
 800959a:	4605      	mov	r5, r0
 800959c:	460e      	mov	r6, r1
 800959e:	b90b      	cbnz	r3, 80095a4 <_puts_r+0x10>
 80095a0:	f7ff ffb0 	bl	8009504 <__sinit>
 80095a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095a6:	07db      	lsls	r3, r3, #31
 80095a8:	d405      	bmi.n	80095b6 <_puts_r+0x22>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	0598      	lsls	r0, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_puts_r+0x22>
 80095b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095b2:	f000 f99e 	bl	80098f2 <__retarget_lock_acquire_recursive>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	0719      	lsls	r1, r3, #28
 80095ba:	d502      	bpl.n	80095c2 <_puts_r+0x2e>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d135      	bne.n	800962e <_puts_r+0x9a>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 f8c5 	bl	8009754 <__swsetup_r>
 80095ca:	b380      	cbz	r0, 800962e <_puts_r+0x9a>
 80095cc:	f04f 35ff 	mov.w	r5, #4294967295
 80095d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095d2:	07da      	lsls	r2, r3, #31
 80095d4:	d405      	bmi.n	80095e2 <_puts_r+0x4e>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	059b      	lsls	r3, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_puts_r+0x4e>
 80095dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095de:	f000 f989 	bl	80098f4 <__retarget_lock_release_recursive>
 80095e2:	4628      	mov	r0, r5
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	da04      	bge.n	80095f4 <_puts_r+0x60>
 80095ea:	69a2      	ldr	r2, [r4, #24]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	dc17      	bgt.n	8009620 <_puts_r+0x8c>
 80095f0:	290a      	cmp	r1, #10
 80095f2:	d015      	beq.n	8009620 <_puts_r+0x8c>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	6022      	str	r2, [r4, #0]
 80095fa:	7019      	strb	r1, [r3, #0]
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009602:	3b01      	subs	r3, #1
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	2900      	cmp	r1, #0
 8009608:	d1ed      	bne.n	80095e6 <_puts_r+0x52>
 800960a:	2b00      	cmp	r3, #0
 800960c:	da11      	bge.n	8009632 <_puts_r+0x9e>
 800960e:	4622      	mov	r2, r4
 8009610:	210a      	movs	r1, #10
 8009612:	4628      	mov	r0, r5
 8009614:	f000 f85f 	bl	80096d6 <__swbuf_r>
 8009618:	3001      	adds	r0, #1
 800961a:	d0d7      	beq.n	80095cc <_puts_r+0x38>
 800961c:	250a      	movs	r5, #10
 800961e:	e7d7      	b.n	80095d0 <_puts_r+0x3c>
 8009620:	4622      	mov	r2, r4
 8009622:	4628      	mov	r0, r5
 8009624:	f000 f857 	bl	80096d6 <__swbuf_r>
 8009628:	3001      	adds	r0, #1
 800962a:	d1e7      	bne.n	80095fc <_puts_r+0x68>
 800962c:	e7ce      	b.n	80095cc <_puts_r+0x38>
 800962e:	3e01      	subs	r6, #1
 8009630:	e7e4      	b.n	80095fc <_puts_r+0x68>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	220a      	movs	r2, #10
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	e7ee      	b.n	800961c <_puts_r+0x88>
	...

08009640 <puts>:
 8009640:	4b02      	ldr	r3, [pc, #8]	@ (800964c <puts+0xc>)
 8009642:	4601      	mov	r1, r0
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	f7ff bfa5 	b.w	8009594 <_puts_r>
 800964a:	bf00      	nop
 800964c:	2000006c 	.word	0x2000006c

08009650 <__sread>:
 8009650:	b510      	push	{r4, lr}
 8009652:	460c      	mov	r4, r1
 8009654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009658:	f000 f8fc 	bl	8009854 <_read_r>
 800965c:	2800      	cmp	r0, #0
 800965e:	bfab      	itete	ge
 8009660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009662:	89a3      	ldrhlt	r3, [r4, #12]
 8009664:	181b      	addge	r3, r3, r0
 8009666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800966a:	bfac      	ite	ge
 800966c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800966e:	81a3      	strhlt	r3, [r4, #12]
 8009670:	bd10      	pop	{r4, pc}

08009672 <__swrite>:
 8009672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	461f      	mov	r7, r3
 8009678:	898b      	ldrh	r3, [r1, #12]
 800967a:	05db      	lsls	r3, r3, #23
 800967c:	4605      	mov	r5, r0
 800967e:	460c      	mov	r4, r1
 8009680:	4616      	mov	r6, r2
 8009682:	d505      	bpl.n	8009690 <__swrite+0x1e>
 8009684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009688:	2302      	movs	r3, #2
 800968a:	2200      	movs	r2, #0
 800968c:	f000 f8d0 	bl	8009830 <_lseek_r>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	4632      	mov	r2, r6
 800969e:	463b      	mov	r3, r7
 80096a0:	4628      	mov	r0, r5
 80096a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	f000 b8e7 	b.w	8009878 <_write_r>

080096aa <__sseek>:
 80096aa:	b510      	push	{r4, lr}
 80096ac:	460c      	mov	r4, r1
 80096ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b2:	f000 f8bd 	bl	8009830 <_lseek_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	bf15      	itete	ne
 80096bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096c6:	81a3      	strheq	r3, [r4, #12]
 80096c8:	bf18      	it	ne
 80096ca:	81a3      	strhne	r3, [r4, #12]
 80096cc:	bd10      	pop	{r4, pc}

080096ce <__sclose>:
 80096ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d2:	f000 b89d 	b.w	8009810 <_close_r>

080096d6 <__swbuf_r>:
 80096d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d8:	460e      	mov	r6, r1
 80096da:	4614      	mov	r4, r2
 80096dc:	4605      	mov	r5, r0
 80096de:	b118      	cbz	r0, 80096e8 <__swbuf_r+0x12>
 80096e0:	6a03      	ldr	r3, [r0, #32]
 80096e2:	b90b      	cbnz	r3, 80096e8 <__swbuf_r+0x12>
 80096e4:	f7ff ff0e 	bl	8009504 <__sinit>
 80096e8:	69a3      	ldr	r3, [r4, #24]
 80096ea:	60a3      	str	r3, [r4, #8]
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	071a      	lsls	r2, r3, #28
 80096f0:	d501      	bpl.n	80096f6 <__swbuf_r+0x20>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	b943      	cbnz	r3, 8009708 <__swbuf_r+0x32>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f82b 	bl	8009754 <__swsetup_r>
 80096fe:	b118      	cbz	r0, 8009708 <__swbuf_r+0x32>
 8009700:	f04f 37ff 	mov.w	r7, #4294967295
 8009704:	4638      	mov	r0, r7
 8009706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	6922      	ldr	r2, [r4, #16]
 800970c:	1a98      	subs	r0, r3, r2
 800970e:	6963      	ldr	r3, [r4, #20]
 8009710:	b2f6      	uxtb	r6, r6
 8009712:	4283      	cmp	r3, r0
 8009714:	4637      	mov	r7, r6
 8009716:	dc05      	bgt.n	8009724 <__swbuf_r+0x4e>
 8009718:	4621      	mov	r1, r4
 800971a:	4628      	mov	r0, r5
 800971c:	f000 fd38 	bl	800a190 <_fflush_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	d1ed      	bne.n	8009700 <__swbuf_r+0x2a>
 8009724:	68a3      	ldr	r3, [r4, #8]
 8009726:	3b01      	subs	r3, #1
 8009728:	60a3      	str	r3, [r4, #8]
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	6022      	str	r2, [r4, #0]
 8009730:	701e      	strb	r6, [r3, #0]
 8009732:	6962      	ldr	r2, [r4, #20]
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	429a      	cmp	r2, r3
 8009738:	d004      	beq.n	8009744 <__swbuf_r+0x6e>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	07db      	lsls	r3, r3, #31
 800973e:	d5e1      	bpl.n	8009704 <__swbuf_r+0x2e>
 8009740:	2e0a      	cmp	r6, #10
 8009742:	d1df      	bne.n	8009704 <__swbuf_r+0x2e>
 8009744:	4621      	mov	r1, r4
 8009746:	4628      	mov	r0, r5
 8009748:	f000 fd22 	bl	800a190 <_fflush_r>
 800974c:	2800      	cmp	r0, #0
 800974e:	d0d9      	beq.n	8009704 <__swbuf_r+0x2e>
 8009750:	e7d6      	b.n	8009700 <__swbuf_r+0x2a>
	...

08009754 <__swsetup_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4b29      	ldr	r3, [pc, #164]	@ (80097fc <__swsetup_r+0xa8>)
 8009758:	4605      	mov	r5, r0
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	460c      	mov	r4, r1
 800975e:	b118      	cbz	r0, 8009768 <__swsetup_r+0x14>
 8009760:	6a03      	ldr	r3, [r0, #32]
 8009762:	b90b      	cbnz	r3, 8009768 <__swsetup_r+0x14>
 8009764:	f7ff fece 	bl	8009504 <__sinit>
 8009768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976c:	0719      	lsls	r1, r3, #28
 800976e:	d422      	bmi.n	80097b6 <__swsetup_r+0x62>
 8009770:	06da      	lsls	r2, r3, #27
 8009772:	d407      	bmi.n	8009784 <__swsetup_r+0x30>
 8009774:	2209      	movs	r2, #9
 8009776:	602a      	str	r2, [r5, #0]
 8009778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	f04f 30ff 	mov.w	r0, #4294967295
 8009782:	e033      	b.n	80097ec <__swsetup_r+0x98>
 8009784:	0758      	lsls	r0, r3, #29
 8009786:	d512      	bpl.n	80097ae <__swsetup_r+0x5a>
 8009788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800978a:	b141      	cbz	r1, 800979e <__swsetup_r+0x4a>
 800978c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009790:	4299      	cmp	r1, r3
 8009792:	d002      	beq.n	800979a <__swsetup_r+0x46>
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f8af 	bl	80098f8 <_free_r>
 800979a:	2300      	movs	r3, #0
 800979c:	6363      	str	r3, [r4, #52]	@ 0x34
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	2300      	movs	r3, #0
 80097a8:	6063      	str	r3, [r4, #4]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f043 0308 	orr.w	r3, r3, #8
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	b94b      	cbnz	r3, 80097ce <__swsetup_r+0x7a>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097c4:	d003      	beq.n	80097ce <__swsetup_r+0x7a>
 80097c6:	4621      	mov	r1, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 fd2f 	bl	800a22c <__smakebuf_r>
 80097ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d2:	f013 0201 	ands.w	r2, r3, #1
 80097d6:	d00a      	beq.n	80097ee <__swsetup_r+0x9a>
 80097d8:	2200      	movs	r2, #0
 80097da:	60a2      	str	r2, [r4, #8]
 80097dc:	6962      	ldr	r2, [r4, #20]
 80097de:	4252      	negs	r2, r2
 80097e0:	61a2      	str	r2, [r4, #24]
 80097e2:	6922      	ldr	r2, [r4, #16]
 80097e4:	b942      	cbnz	r2, 80097f8 <__swsetup_r+0xa4>
 80097e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097ea:	d1c5      	bne.n	8009778 <__swsetup_r+0x24>
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	0799      	lsls	r1, r3, #30
 80097f0:	bf58      	it	pl
 80097f2:	6962      	ldrpl	r2, [r4, #20]
 80097f4:	60a2      	str	r2, [r4, #8]
 80097f6:	e7f4      	b.n	80097e2 <__swsetup_r+0x8e>
 80097f8:	2000      	movs	r0, #0
 80097fa:	e7f7      	b.n	80097ec <__swsetup_r+0x98>
 80097fc:	2000006c 	.word	0x2000006c

08009800 <memset>:
 8009800:	4402      	add	r2, r0
 8009802:	4603      	mov	r3, r0
 8009804:	4293      	cmp	r3, r2
 8009806:	d100      	bne.n	800980a <memset+0xa>
 8009808:	4770      	bx	lr
 800980a:	f803 1b01 	strb.w	r1, [r3], #1
 800980e:	e7f9      	b.n	8009804 <memset+0x4>

08009810 <_close_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	@ (800982c <_close_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f8 fa19 	bl	8001c52 <_close>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_close_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_close_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20003628 	.word	0x20003628

08009830 <_lseek_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	@ (8009850 <_lseek_r+0x20>)
 8009834:	4604      	mov	r4, r0
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	2200      	movs	r2, #0
 800983c:	602a      	str	r2, [r5, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f7f8 fa2e 	bl	8001ca0 <_lseek>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_lseek_r+0x1e>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_lseek_r+0x1e>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20003628 	.word	0x20003628

08009854 <_read_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	@ (8009874 <_read_r+0x20>)
 8009858:	4604      	mov	r4, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f8 f9d8 	bl	8001c18 <_read>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_read_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_read_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20003628 	.word	0x20003628

08009878 <_write_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d07      	ldr	r5, [pc, #28]	@ (8009898 <_write_r+0x20>)
 800987c:	4604      	mov	r4, r0
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	2200      	movs	r2, #0
 8009884:	602a      	str	r2, [r5, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f7f7 ff84 	bl	8001794 <_write>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_write_r+0x1e>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_write_r+0x1e>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20003628 	.word	0x20003628

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	@ (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	2000006c 	.word	0x2000006c

080098a8 <__libc_init_array>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4d0d      	ldr	r5, [pc, #52]	@ (80098e0 <__libc_init_array+0x38>)
 80098ac:	4c0d      	ldr	r4, [pc, #52]	@ (80098e4 <__libc_init_array+0x3c>)
 80098ae:	1b64      	subs	r4, r4, r5
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	2600      	movs	r6, #0
 80098b4:	42a6      	cmp	r6, r4
 80098b6:	d109      	bne.n	80098cc <__libc_init_array+0x24>
 80098b8:	4d0b      	ldr	r5, [pc, #44]	@ (80098e8 <__libc_init_array+0x40>)
 80098ba:	4c0c      	ldr	r4, [pc, #48]	@ (80098ec <__libc_init_array+0x44>)
 80098bc:	f000 fd24 	bl	800a308 <_init>
 80098c0:	1b64      	subs	r4, r4, r5
 80098c2:	10a4      	asrs	r4, r4, #2
 80098c4:	2600      	movs	r6, #0
 80098c6:	42a6      	cmp	r6, r4
 80098c8:	d105      	bne.n	80098d6 <__libc_init_array+0x2e>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d0:	4798      	blx	r3
 80098d2:	3601      	adds	r6, #1
 80098d4:	e7ee      	b.n	80098b4 <__libc_init_array+0xc>
 80098d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098da:	4798      	blx	r3
 80098dc:	3601      	adds	r6, #1
 80098de:	e7f2      	b.n	80098c6 <__libc_init_array+0x1e>
 80098e0:	0800a994 	.word	0x0800a994
 80098e4:	0800a994 	.word	0x0800a994
 80098e8:	0800a994 	.word	0x0800a994
 80098ec:	0800a998 	.word	0x0800a998

080098f0 <__retarget_lock_init_recursive>:
 80098f0:	4770      	bx	lr

080098f2 <__retarget_lock_acquire_recursive>:
 80098f2:	4770      	bx	lr

080098f4 <__retarget_lock_release_recursive>:
 80098f4:	4770      	bx	lr
	...

080098f8 <_free_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d041      	beq.n	8009984 <_free_r+0x8c>
 8009900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009904:	1f0c      	subs	r4, r1, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	18e4      	addlt	r4, r4, r3
 800990c:	f000 f8e0 	bl	8009ad0 <__malloc_lock>
 8009910:	4a1d      	ldr	r2, [pc, #116]	@ (8009988 <_free_r+0x90>)
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x2c>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	4628      	mov	r0, r5
 800991c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009920:	f000 b8dc 	b.w	8009adc <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x42>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	1821      	adds	r1, r4, r0
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1809      	addeq	r1, r1, r0
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x1e>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x4c>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x42>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1850      	adds	r0, r2, r1
 8009948:	42a0      	cmp	r0, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x6c>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	4401      	add	r1, r0
 8009950:	1850      	adds	r0, r2, r1
 8009952:	4283      	cmp	r3, r0
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x22>
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	4408      	add	r0, r1
 8009960:	6010      	str	r0, [r2, #0]
 8009962:	e7da      	b.n	800991a <_free_r+0x22>
 8009964:	d902      	bls.n	800996c <_free_r+0x74>
 8009966:	230c      	movs	r3, #12
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x22>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428b      	cmp	r3, r1
 8009972:	bf04      	itt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1809      	addeq	r1, r1, r0
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	6054      	str	r4, [r2, #4]
 8009982:	e7ca      	b.n	800991a <_free_r+0x22>
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	20003634 	.word	0x20003634

0800998c <sbrk_aligned>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	4e0f      	ldr	r6, [pc, #60]	@ (80099cc <sbrk_aligned+0x40>)
 8009990:	460c      	mov	r4, r1
 8009992:	6831      	ldr	r1, [r6, #0]
 8009994:	4605      	mov	r5, r0
 8009996:	b911      	cbnz	r1, 800999e <sbrk_aligned+0x12>
 8009998:	f000 fca6 	bl	800a2e8 <_sbrk_r>
 800999c:	6030      	str	r0, [r6, #0]
 800999e:	4621      	mov	r1, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	f000 fca1 	bl	800a2e8 <_sbrk_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d103      	bne.n	80099b2 <sbrk_aligned+0x26>
 80099aa:	f04f 34ff 	mov.w	r4, #4294967295
 80099ae:	4620      	mov	r0, r4
 80099b0:	bd70      	pop	{r4, r5, r6, pc}
 80099b2:	1cc4      	adds	r4, r0, #3
 80099b4:	f024 0403 	bic.w	r4, r4, #3
 80099b8:	42a0      	cmp	r0, r4
 80099ba:	d0f8      	beq.n	80099ae <sbrk_aligned+0x22>
 80099bc:	1a21      	subs	r1, r4, r0
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 fc92 	bl	800a2e8 <_sbrk_r>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d1f2      	bne.n	80099ae <sbrk_aligned+0x22>
 80099c8:	e7ef      	b.n	80099aa <sbrk_aligned+0x1e>
 80099ca:	bf00      	nop
 80099cc:	20003630 	.word	0x20003630

080099d0 <_malloc_r>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	1ccd      	adds	r5, r1, #3
 80099d6:	f025 0503 	bic.w	r5, r5, #3
 80099da:	3508      	adds	r5, #8
 80099dc:	2d0c      	cmp	r5, #12
 80099de:	bf38      	it	cc
 80099e0:	250c      	movcc	r5, #12
 80099e2:	2d00      	cmp	r5, #0
 80099e4:	4606      	mov	r6, r0
 80099e6:	db01      	blt.n	80099ec <_malloc_r+0x1c>
 80099e8:	42a9      	cmp	r1, r5
 80099ea:	d904      	bls.n	80099f6 <_malloc_r+0x26>
 80099ec:	230c      	movs	r3, #12
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	2000      	movs	r0, #0
 80099f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009acc <_malloc_r+0xfc>
 80099fa:	f000 f869 	bl	8009ad0 <__malloc_lock>
 80099fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009a02:	461c      	mov	r4, r3
 8009a04:	bb44      	cbnz	r4, 8009a58 <_malloc_r+0x88>
 8009a06:	4629      	mov	r1, r5
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff ffbf 	bl	800998c <sbrk_aligned>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	4604      	mov	r4, r0
 8009a12:	d158      	bne.n	8009ac6 <_malloc_r+0xf6>
 8009a14:	f8d8 4000 	ldr.w	r4, [r8]
 8009a18:	4627      	mov	r7, r4
 8009a1a:	2f00      	cmp	r7, #0
 8009a1c:	d143      	bne.n	8009aa6 <_malloc_r+0xd6>
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	d04b      	beq.n	8009aba <_malloc_r+0xea>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	4639      	mov	r1, r7
 8009a26:	4630      	mov	r0, r6
 8009a28:	eb04 0903 	add.w	r9, r4, r3
 8009a2c:	f000 fc5c 	bl	800a2e8 <_sbrk_r>
 8009a30:	4581      	cmp	r9, r0
 8009a32:	d142      	bne.n	8009aba <_malloc_r+0xea>
 8009a34:	6821      	ldr	r1, [r4, #0]
 8009a36:	1a6d      	subs	r5, r5, r1
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ffa6 	bl	800998c <sbrk_aligned>
 8009a40:	3001      	adds	r0, #1
 8009a42:	d03a      	beq.n	8009aba <_malloc_r+0xea>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	442b      	add	r3, r5
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	bb62      	cbnz	r2, 8009aac <_malloc_r+0xdc>
 8009a52:	f8c8 7000 	str.w	r7, [r8]
 8009a56:	e00f      	b.n	8009a78 <_malloc_r+0xa8>
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	1b52      	subs	r2, r2, r5
 8009a5c:	d420      	bmi.n	8009aa0 <_malloc_r+0xd0>
 8009a5e:	2a0b      	cmp	r2, #11
 8009a60:	d917      	bls.n	8009a92 <_malloc_r+0xc2>
 8009a62:	1961      	adds	r1, r4, r5
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	6025      	str	r5, [r4, #0]
 8009a68:	bf18      	it	ne
 8009a6a:	6059      	strne	r1, [r3, #4]
 8009a6c:	6863      	ldr	r3, [r4, #4]
 8009a6e:	bf08      	it	eq
 8009a70:	f8c8 1000 	streq.w	r1, [r8]
 8009a74:	5162      	str	r2, [r4, r5]
 8009a76:	604b      	str	r3, [r1, #4]
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 f82f 	bl	8009adc <__malloc_unlock>
 8009a7e:	f104 000b 	add.w	r0, r4, #11
 8009a82:	1d23      	adds	r3, r4, #4
 8009a84:	f020 0007 	bic.w	r0, r0, #7
 8009a88:	1ac2      	subs	r2, r0, r3
 8009a8a:	bf1c      	itt	ne
 8009a8c:	1a1b      	subne	r3, r3, r0
 8009a8e:	50a3      	strne	r3, [r4, r2]
 8009a90:	e7af      	b.n	80099f2 <_malloc_r+0x22>
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	bf0c      	ite	eq
 8009a98:	f8c8 2000 	streq.w	r2, [r8]
 8009a9c:	605a      	strne	r2, [r3, #4]
 8009a9e:	e7eb      	b.n	8009a78 <_malloc_r+0xa8>
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	6864      	ldr	r4, [r4, #4]
 8009aa4:	e7ae      	b.n	8009a04 <_malloc_r+0x34>
 8009aa6:	463c      	mov	r4, r7
 8009aa8:	687f      	ldr	r7, [r7, #4]
 8009aaa:	e7b6      	b.n	8009a1a <_malloc_r+0x4a>
 8009aac:	461a      	mov	r2, r3
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	d1fb      	bne.n	8009aac <_malloc_r+0xdc>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6053      	str	r3, [r2, #4]
 8009ab8:	e7de      	b.n	8009a78 <_malloc_r+0xa8>
 8009aba:	230c      	movs	r3, #12
 8009abc:	6033      	str	r3, [r6, #0]
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f000 f80c 	bl	8009adc <__malloc_unlock>
 8009ac4:	e794      	b.n	80099f0 <_malloc_r+0x20>
 8009ac6:	6005      	str	r5, [r0, #0]
 8009ac8:	e7d6      	b.n	8009a78 <_malloc_r+0xa8>
 8009aca:	bf00      	nop
 8009acc:	20003634 	.word	0x20003634

08009ad0 <__malloc_lock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	@ (8009ad8 <__malloc_lock+0x8>)
 8009ad2:	f7ff bf0e 	b.w	80098f2 <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	2000362c 	.word	0x2000362c

08009adc <__malloc_unlock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	@ (8009ae4 <__malloc_unlock+0x8>)
 8009ade:	f7ff bf09 	b.w	80098f4 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	2000362c 	.word	0x2000362c

08009ae8 <__sfputc_r>:
 8009ae8:	6893      	ldr	r3, [r2, #8]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	b410      	push	{r4}
 8009af0:	6093      	str	r3, [r2, #8]
 8009af2:	da08      	bge.n	8009b06 <__sfputc_r+0x1e>
 8009af4:	6994      	ldr	r4, [r2, #24]
 8009af6:	42a3      	cmp	r3, r4
 8009af8:	db01      	blt.n	8009afe <__sfputc_r+0x16>
 8009afa:	290a      	cmp	r1, #10
 8009afc:	d103      	bne.n	8009b06 <__sfputc_r+0x1e>
 8009afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b02:	f7ff bde8 	b.w	80096d6 <__swbuf_r>
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	1c58      	adds	r0, r3, #1
 8009b0a:	6010      	str	r0, [r2, #0]
 8009b0c:	7019      	strb	r1, [r3, #0]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <__sfputs_r>:
 8009b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	18d5      	adds	r5, r2, r3
 8009b20:	42ac      	cmp	r4, r5
 8009b22:	d101      	bne.n	8009b28 <__sfputs_r+0x12>
 8009b24:	2000      	movs	r0, #0
 8009b26:	e007      	b.n	8009b38 <__sfputs_r+0x22>
 8009b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2c:	463a      	mov	r2, r7
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ffda 	bl	8009ae8 <__sfputc_r>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d1f3      	bne.n	8009b20 <__sfputs_r+0xa>
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b3c <_vfiprintf_r>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	460d      	mov	r5, r1
 8009b42:	b09d      	sub	sp, #116	@ 0x74
 8009b44:	4614      	mov	r4, r2
 8009b46:	4698      	mov	r8, r3
 8009b48:	4606      	mov	r6, r0
 8009b4a:	b118      	cbz	r0, 8009b54 <_vfiprintf_r+0x18>
 8009b4c:	6a03      	ldr	r3, [r0, #32]
 8009b4e:	b90b      	cbnz	r3, 8009b54 <_vfiprintf_r+0x18>
 8009b50:	f7ff fcd8 	bl	8009504 <__sinit>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b62:	f7ff fec6 	bl	80098f2 <__retarget_lock_acquire_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	071b      	lsls	r3, r3, #28
 8009b6a:	d501      	bpl.n	8009b70 <_vfiprintf_r+0x34>
 8009b6c:	692b      	ldr	r3, [r5, #16]
 8009b6e:	b99b      	cbnz	r3, 8009b98 <_vfiprintf_r+0x5c>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff fdee 	bl	8009754 <__swsetup_r>
 8009b78:	b170      	cbz	r0, 8009b98 <_vfiprintf_r+0x5c>
 8009b7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b7c:	07dc      	lsls	r4, r3, #31
 8009b7e:	d504      	bpl.n	8009b8a <_vfiprintf_r+0x4e>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	b01d      	add	sp, #116	@ 0x74
 8009b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	0598      	lsls	r0, r3, #22
 8009b8e:	d4f7      	bmi.n	8009b80 <_vfiprintf_r+0x44>
 8009b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b92:	f7ff feaf 	bl	80098f4 <__retarget_lock_release_recursive>
 8009b96:	e7f3      	b.n	8009b80 <_vfiprintf_r+0x44>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba6:	2330      	movs	r3, #48	@ 0x30
 8009ba8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d58 <_vfiprintf_r+0x21c>
 8009bac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bb0:	f04f 0901 	mov.w	r9, #1
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	469a      	mov	sl, r3
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_vfiprintf_r+0x86>
 8009bbe:	2a25      	cmp	r2, #37	@ 0x25
 8009bc0:	d1f9      	bne.n	8009bb6 <_vfiprintf_r+0x7a>
 8009bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc6:	d00b      	beq.n	8009be0 <_vfiprintf_r+0xa4>
 8009bc8:	465b      	mov	r3, fp
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ffa1 	bl	8009b16 <__sfputs_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f000 80a7 	beq.w	8009d28 <_vfiprintf_r+0x1ec>
 8009bda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bdc:	445a      	add	r2, fp
 8009bde:	9209      	str	r2, [sp, #36]	@ 0x24
 8009be0:	f89a 3000 	ldrb.w	r3, [sl]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 809f 	beq.w	8009d28 <_vfiprintf_r+0x1ec>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf4:	f10a 0a01 	add.w	sl, sl, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c00:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c02:	4654      	mov	r4, sl
 8009c04:	2205      	movs	r2, #5
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4853      	ldr	r0, [pc, #332]	@ (8009d58 <_vfiprintf_r+0x21c>)
 8009c0c:	f7f6 fb18 	bl	8000240 <memchr>
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	b9d8      	cbnz	r0, 8009c4c <_vfiprintf_r+0x110>
 8009c14:	06d1      	lsls	r1, r2, #27
 8009c16:	bf44      	itt	mi
 8009c18:	2320      	movmi	r3, #32
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c1e:	0713      	lsls	r3, r2, #28
 8009c20:	bf44      	itt	mi
 8009c22:	232b      	movmi	r3, #43	@ 0x2b
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c28:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2e:	d015      	beq.n	8009c5c <_vfiprintf_r+0x120>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4654      	mov	r4, sl
 8009c34:	2000      	movs	r0, #0
 8009c36:	f04f 0c0a 	mov.w	ip, #10
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	@ 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94b      	bls.n	8009cde <_vfiprintf_r+0x1a2>
 8009c46:	b1b0      	cbz	r0, 8009c76 <_vfiprintf_r+0x13a>
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	e014      	b.n	8009c76 <_vfiprintf_r+0x13a>
 8009c4c:	eba0 0308 	sub.w	r3, r0, r8
 8009c50:	fa09 f303 	lsl.w	r3, r9, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	e7d2      	b.n	8009c02 <_vfiprintf_r+0xc6>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbb      	ittet	lt
 8009c68:	425b      	neglt	r3, r3
 8009c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6e:	9307      	strge	r3, [sp, #28]
 8009c70:	9307      	strlt	r3, [sp, #28]
 8009c72:	bfb8      	it	lt
 8009c74:	9204      	strlt	r2, [sp, #16]
 8009c76:	7823      	ldrb	r3, [r4, #0]
 8009c78:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c7a:	d10a      	bne.n	8009c92 <_vfiprintf_r+0x156>
 8009c7c:	7863      	ldrb	r3, [r4, #1]
 8009c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c80:	d132      	bne.n	8009ce8 <_vfiprintf_r+0x1ac>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9203      	str	r2, [sp, #12]
 8009c8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c8e:	3402      	adds	r4, #2
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d68 <_vfiprintf_r+0x22c>
 8009c96:	7821      	ldrb	r1, [r4, #0]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7f6 fad0 	bl	8000240 <memchr>
 8009ca0:	b138      	cbz	r0, 8009cb2 <_vfiprintf_r+0x176>
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	eba0 000a 	sub.w	r0, r0, sl
 8009ca8:	2240      	movs	r2, #64	@ 0x40
 8009caa:	4082      	lsls	r2, r0
 8009cac:	4313      	orrs	r3, r2
 8009cae:	3401      	adds	r4, #1
 8009cb0:	9304      	str	r3, [sp, #16]
 8009cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb6:	4829      	ldr	r0, [pc, #164]	@ (8009d5c <_vfiprintf_r+0x220>)
 8009cb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cbc:	2206      	movs	r2, #6
 8009cbe:	f7f6 fabf 	bl	8000240 <memchr>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d03f      	beq.n	8009d46 <_vfiprintf_r+0x20a>
 8009cc6:	4b26      	ldr	r3, [pc, #152]	@ (8009d60 <_vfiprintf_r+0x224>)
 8009cc8:	bb1b      	cbnz	r3, 8009d12 <_vfiprintf_r+0x1d6>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	3307      	adds	r3, #7
 8009cce:	f023 0307 	bic.w	r3, r3, #7
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	9303      	str	r3, [sp, #12]
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	443b      	add	r3, r7
 8009cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cdc:	e76a      	b.n	8009bb4 <_vfiprintf_r+0x78>
 8009cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	e7a8      	b.n	8009c3a <_vfiprintf_r+0xfe>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	3401      	adds	r4, #1
 8009cec:	9305      	str	r3, [sp, #20]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f04f 0c0a 	mov.w	ip, #10
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfa:	3a30      	subs	r2, #48	@ 0x30
 8009cfc:	2a09      	cmp	r2, #9
 8009cfe:	d903      	bls.n	8009d08 <_vfiprintf_r+0x1cc>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d0c6      	beq.n	8009c92 <_vfiprintf_r+0x156>
 8009d04:	9105      	str	r1, [sp, #20]
 8009d06:	e7c4      	b.n	8009c92 <_vfiprintf_r+0x156>
 8009d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e7f0      	b.n	8009cf4 <_vfiprintf_r+0x1b8>
 8009d12:	ab03      	add	r3, sp, #12
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	462a      	mov	r2, r5
 8009d18:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <_vfiprintf_r+0x228>)
 8009d1a:	a904      	add	r1, sp, #16
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f3af 8000 	nop.w
 8009d22:	4607      	mov	r7, r0
 8009d24:	1c78      	adds	r0, r7, #1
 8009d26:	d1d6      	bne.n	8009cd6 <_vfiprintf_r+0x19a>
 8009d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d2a:	07d9      	lsls	r1, r3, #31
 8009d2c:	d405      	bmi.n	8009d3a <_vfiprintf_r+0x1fe>
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	059a      	lsls	r2, r3, #22
 8009d32:	d402      	bmi.n	8009d3a <_vfiprintf_r+0x1fe>
 8009d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d36:	f7ff fddd 	bl	80098f4 <__retarget_lock_release_recursive>
 8009d3a:	89ab      	ldrh	r3, [r5, #12]
 8009d3c:	065b      	lsls	r3, r3, #25
 8009d3e:	f53f af1f 	bmi.w	8009b80 <_vfiprintf_r+0x44>
 8009d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d44:	e71e      	b.n	8009b84 <_vfiprintf_r+0x48>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <_vfiprintf_r+0x228>)
 8009d4e:	a904      	add	r1, sp, #16
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 f879 	bl	8009e48 <_printf_i>
 8009d56:	e7e4      	b.n	8009d22 <_vfiprintf_r+0x1e6>
 8009d58:	0800a958 	.word	0x0800a958
 8009d5c:	0800a962 	.word	0x0800a962
 8009d60:	00000000 	.word	0x00000000
 8009d64:	08009b17 	.word	0x08009b17
 8009d68:	0800a95e 	.word	0x0800a95e

08009d6c <_printf_common>:
 8009d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d70:	4616      	mov	r6, r2
 8009d72:	4698      	mov	r8, r3
 8009d74:	688a      	ldr	r2, [r1, #8]
 8009d76:	690b      	ldr	r3, [r1, #16]
 8009d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	bfb8      	it	lt
 8009d80:	4613      	movlt	r3, r2
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d88:	4607      	mov	r7, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b10a      	cbz	r2, 8009d92 <_printf_common+0x26>
 8009d8e:	3301      	adds	r3, #1
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	0699      	lsls	r1, r3, #26
 8009d96:	bf42      	ittt	mi
 8009d98:	6833      	ldrmi	r3, [r6, #0]
 8009d9a:	3302      	addmi	r3, #2
 8009d9c:	6033      	strmi	r3, [r6, #0]
 8009d9e:	6825      	ldr	r5, [r4, #0]
 8009da0:	f015 0506 	ands.w	r5, r5, #6
 8009da4:	d106      	bne.n	8009db4 <_printf_common+0x48>
 8009da6:	f104 0a19 	add.w	sl, r4, #25
 8009daa:	68e3      	ldr	r3, [r4, #12]
 8009dac:	6832      	ldr	r2, [r6, #0]
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	dc26      	bgt.n	8009e02 <_printf_common+0x96>
 8009db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	3b00      	subs	r3, #0
 8009dbc:	bf18      	it	ne
 8009dbe:	2301      	movne	r3, #1
 8009dc0:	0692      	lsls	r2, r2, #26
 8009dc2:	d42b      	bmi.n	8009e1c <_printf_common+0xb0>
 8009dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dc8:	4641      	mov	r1, r8
 8009dca:	4638      	mov	r0, r7
 8009dcc:	47c8      	blx	r9
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d01e      	beq.n	8009e10 <_printf_common+0xa4>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	f003 0306 	and.w	r3, r3, #6
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	bf02      	ittt	eq
 8009dde:	68e5      	ldreq	r5, [r4, #12]
 8009de0:	6833      	ldreq	r3, [r6, #0]
 8009de2:	1aed      	subeq	r5, r5, r3
 8009de4:	68a3      	ldr	r3, [r4, #8]
 8009de6:	bf0c      	ite	eq
 8009de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dec:	2500      	movne	r5, #0
 8009dee:	4293      	cmp	r3, r2
 8009df0:	bfc4      	itt	gt
 8009df2:	1a9b      	subgt	r3, r3, r2
 8009df4:	18ed      	addgt	r5, r5, r3
 8009df6:	2600      	movs	r6, #0
 8009df8:	341a      	adds	r4, #26
 8009dfa:	42b5      	cmp	r5, r6
 8009dfc:	d11a      	bne.n	8009e34 <_printf_common+0xc8>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e008      	b.n	8009e14 <_printf_common+0xa8>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4652      	mov	r2, sl
 8009e06:	4641      	mov	r1, r8
 8009e08:	4638      	mov	r0, r7
 8009e0a:	47c8      	blx	r9
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d103      	bne.n	8009e18 <_printf_common+0xac>
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e18:	3501      	adds	r5, #1
 8009e1a:	e7c6      	b.n	8009daa <_printf_common+0x3e>
 8009e1c:	18e1      	adds	r1, r4, r3
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	2030      	movs	r0, #48	@ 0x30
 8009e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e26:	4422      	add	r2, r4
 8009e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e30:	3302      	adds	r3, #2
 8009e32:	e7c7      	b.n	8009dc4 <_printf_common+0x58>
 8009e34:	2301      	movs	r3, #1
 8009e36:	4622      	mov	r2, r4
 8009e38:	4641      	mov	r1, r8
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	47c8      	blx	r9
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d0e6      	beq.n	8009e10 <_printf_common+0xa4>
 8009e42:	3601      	adds	r6, #1
 8009e44:	e7d9      	b.n	8009dfa <_printf_common+0x8e>
	...

08009e48 <_printf_i>:
 8009e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	7e0f      	ldrb	r7, [r1, #24]
 8009e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e50:	2f78      	cmp	r7, #120	@ 0x78
 8009e52:	4691      	mov	r9, r2
 8009e54:	4680      	mov	r8, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	469a      	mov	sl, r3
 8009e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e5e:	d807      	bhi.n	8009e70 <_printf_i+0x28>
 8009e60:	2f62      	cmp	r7, #98	@ 0x62
 8009e62:	d80a      	bhi.n	8009e7a <_printf_i+0x32>
 8009e64:	2f00      	cmp	r7, #0
 8009e66:	f000 80d2 	beq.w	800a00e <_printf_i+0x1c6>
 8009e6a:	2f58      	cmp	r7, #88	@ 0x58
 8009e6c:	f000 80b9 	beq.w	8009fe2 <_printf_i+0x19a>
 8009e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e78:	e03a      	b.n	8009ef0 <_printf_i+0xa8>
 8009e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e7e:	2b15      	cmp	r3, #21
 8009e80:	d8f6      	bhi.n	8009e70 <_printf_i+0x28>
 8009e82:	a101      	add	r1, pc, #4	@ (adr r1, 8009e88 <_printf_i+0x40>)
 8009e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e88:	08009ee1 	.word	0x08009ee1
 8009e8c:	08009ef5 	.word	0x08009ef5
 8009e90:	08009e71 	.word	0x08009e71
 8009e94:	08009e71 	.word	0x08009e71
 8009e98:	08009e71 	.word	0x08009e71
 8009e9c:	08009e71 	.word	0x08009e71
 8009ea0:	08009ef5 	.word	0x08009ef5
 8009ea4:	08009e71 	.word	0x08009e71
 8009ea8:	08009e71 	.word	0x08009e71
 8009eac:	08009e71 	.word	0x08009e71
 8009eb0:	08009e71 	.word	0x08009e71
 8009eb4:	08009ff5 	.word	0x08009ff5
 8009eb8:	08009f1f 	.word	0x08009f1f
 8009ebc:	08009faf 	.word	0x08009faf
 8009ec0:	08009e71 	.word	0x08009e71
 8009ec4:	08009e71 	.word	0x08009e71
 8009ec8:	0800a017 	.word	0x0800a017
 8009ecc:	08009e71 	.word	0x08009e71
 8009ed0:	08009f1f 	.word	0x08009f1f
 8009ed4:	08009e71 	.word	0x08009e71
 8009ed8:	08009e71 	.word	0x08009e71
 8009edc:	08009fb7 	.word	0x08009fb7
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6032      	str	r2, [r6, #0]
 8009ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e09d      	b.n	800a030 <_printf_i+0x1e8>
 8009ef4:	6833      	ldr	r3, [r6, #0]
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	1d19      	adds	r1, r3, #4
 8009efa:	6031      	str	r1, [r6, #0]
 8009efc:	0606      	lsls	r6, r0, #24
 8009efe:	d501      	bpl.n	8009f04 <_printf_i+0xbc>
 8009f00:	681d      	ldr	r5, [r3, #0]
 8009f02:	e003      	b.n	8009f0c <_printf_i+0xc4>
 8009f04:	0645      	lsls	r5, r0, #25
 8009f06:	d5fb      	bpl.n	8009f00 <_printf_i+0xb8>
 8009f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	da03      	bge.n	8009f18 <_printf_i+0xd0>
 8009f10:	232d      	movs	r3, #45	@ 0x2d
 8009f12:	426d      	negs	r5, r5
 8009f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f18:	4859      	ldr	r0, [pc, #356]	@ (800a080 <_printf_i+0x238>)
 8009f1a:	230a      	movs	r3, #10
 8009f1c:	e011      	b.n	8009f42 <_printf_i+0xfa>
 8009f1e:	6821      	ldr	r1, [r4, #0]
 8009f20:	6833      	ldr	r3, [r6, #0]
 8009f22:	0608      	lsls	r0, r1, #24
 8009f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f28:	d402      	bmi.n	8009f30 <_printf_i+0xe8>
 8009f2a:	0649      	lsls	r1, r1, #25
 8009f2c:	bf48      	it	mi
 8009f2e:	b2ad      	uxthmi	r5, r5
 8009f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f32:	4853      	ldr	r0, [pc, #332]	@ (800a080 <_printf_i+0x238>)
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	bf14      	ite	ne
 8009f38:	230a      	movne	r3, #10
 8009f3a:	2308      	moveq	r3, #8
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f42:	6866      	ldr	r6, [r4, #4]
 8009f44:	60a6      	str	r6, [r4, #8]
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	bfa2      	ittt	ge
 8009f4a:	6821      	ldrge	r1, [r4, #0]
 8009f4c:	f021 0104 	bicge.w	r1, r1, #4
 8009f50:	6021      	strge	r1, [r4, #0]
 8009f52:	b90d      	cbnz	r5, 8009f58 <_printf_i+0x110>
 8009f54:	2e00      	cmp	r6, #0
 8009f56:	d04b      	beq.n	8009ff0 <_printf_i+0x1a8>
 8009f58:	4616      	mov	r6, r2
 8009f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009f62:	5dc7      	ldrb	r7, [r0, r7]
 8009f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f68:	462f      	mov	r7, r5
 8009f6a:	42bb      	cmp	r3, r7
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	d9f4      	bls.n	8009f5a <_printf_i+0x112>
 8009f70:	2b08      	cmp	r3, #8
 8009f72:	d10b      	bne.n	8009f8c <_printf_i+0x144>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	07df      	lsls	r7, r3, #31
 8009f78:	d508      	bpl.n	8009f8c <_printf_i+0x144>
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	bfde      	ittt	le
 8009f82:	2330      	movle	r3, #48	@ 0x30
 8009f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f8c:	1b92      	subs	r2, r2, r6
 8009f8e:	6122      	str	r2, [r4, #16]
 8009f90:	f8cd a000 	str.w	sl, [sp]
 8009f94:	464b      	mov	r3, r9
 8009f96:	aa03      	add	r2, sp, #12
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7ff fee6 	bl	8009d6c <_printf_common>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d14a      	bne.n	800a03a <_printf_i+0x1f2>
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	b004      	add	sp, #16
 8009faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f043 0320 	orr.w	r3, r3, #32
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	4833      	ldr	r0, [pc, #204]	@ (800a084 <_printf_i+0x23c>)
 8009fb8:	2778      	movs	r7, #120	@ 0x78
 8009fba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	6831      	ldr	r1, [r6, #0]
 8009fc2:	061f      	lsls	r7, r3, #24
 8009fc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fc8:	d402      	bmi.n	8009fd0 <_printf_i+0x188>
 8009fca:	065f      	lsls	r7, r3, #25
 8009fcc:	bf48      	it	mi
 8009fce:	b2ad      	uxthmi	r5, r5
 8009fd0:	6031      	str	r1, [r6, #0]
 8009fd2:	07d9      	lsls	r1, r3, #31
 8009fd4:	bf44      	itt	mi
 8009fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fda:	6023      	strmi	r3, [r4, #0]
 8009fdc:	b11d      	cbz	r5, 8009fe6 <_printf_i+0x19e>
 8009fde:	2310      	movs	r3, #16
 8009fe0:	e7ac      	b.n	8009f3c <_printf_i+0xf4>
 8009fe2:	4827      	ldr	r0, [pc, #156]	@ (800a080 <_printf_i+0x238>)
 8009fe4:	e7e9      	b.n	8009fba <_printf_i+0x172>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	f023 0320 	bic.w	r3, r3, #32
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	e7f6      	b.n	8009fde <_printf_i+0x196>
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	e7bd      	b.n	8009f70 <_printf_i+0x128>
 8009ff4:	6833      	ldr	r3, [r6, #0]
 8009ff6:	6825      	ldr	r5, [r4, #0]
 8009ff8:	6961      	ldr	r1, [r4, #20]
 8009ffa:	1d18      	adds	r0, r3, #4
 8009ffc:	6030      	str	r0, [r6, #0]
 8009ffe:	062e      	lsls	r6, r5, #24
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	d501      	bpl.n	800a008 <_printf_i+0x1c0>
 800a004:	6019      	str	r1, [r3, #0]
 800a006:	e002      	b.n	800a00e <_printf_i+0x1c6>
 800a008:	0668      	lsls	r0, r5, #25
 800a00a:	d5fb      	bpl.n	800a004 <_printf_i+0x1bc>
 800a00c:	8019      	strh	r1, [r3, #0]
 800a00e:	2300      	movs	r3, #0
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	4616      	mov	r6, r2
 800a014:	e7bc      	b.n	8009f90 <_printf_i+0x148>
 800a016:	6833      	ldr	r3, [r6, #0]
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	6032      	str	r2, [r6, #0]
 800a01c:	681e      	ldr	r6, [r3, #0]
 800a01e:	6862      	ldr	r2, [r4, #4]
 800a020:	2100      	movs	r1, #0
 800a022:	4630      	mov	r0, r6
 800a024:	f7f6 f90c 	bl	8000240 <memchr>
 800a028:	b108      	cbz	r0, 800a02e <_printf_i+0x1e6>
 800a02a:	1b80      	subs	r0, r0, r6
 800a02c:	6060      	str	r0, [r4, #4]
 800a02e:	6863      	ldr	r3, [r4, #4]
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	2300      	movs	r3, #0
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a038:	e7aa      	b.n	8009f90 <_printf_i+0x148>
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	4632      	mov	r2, r6
 800a03e:	4649      	mov	r1, r9
 800a040:	4640      	mov	r0, r8
 800a042:	47d0      	blx	sl
 800a044:	3001      	adds	r0, #1
 800a046:	d0ad      	beq.n	8009fa4 <_printf_i+0x15c>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	079b      	lsls	r3, r3, #30
 800a04c:	d413      	bmi.n	800a076 <_printf_i+0x22e>
 800a04e:	68e0      	ldr	r0, [r4, #12]
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	4298      	cmp	r0, r3
 800a054:	bfb8      	it	lt
 800a056:	4618      	movlt	r0, r3
 800a058:	e7a6      	b.n	8009fa8 <_printf_i+0x160>
 800a05a:	2301      	movs	r3, #1
 800a05c:	4632      	mov	r2, r6
 800a05e:	4649      	mov	r1, r9
 800a060:	4640      	mov	r0, r8
 800a062:	47d0      	blx	sl
 800a064:	3001      	adds	r0, #1
 800a066:	d09d      	beq.n	8009fa4 <_printf_i+0x15c>
 800a068:	3501      	adds	r5, #1
 800a06a:	68e3      	ldr	r3, [r4, #12]
 800a06c:	9903      	ldr	r1, [sp, #12]
 800a06e:	1a5b      	subs	r3, r3, r1
 800a070:	42ab      	cmp	r3, r5
 800a072:	dcf2      	bgt.n	800a05a <_printf_i+0x212>
 800a074:	e7eb      	b.n	800a04e <_printf_i+0x206>
 800a076:	2500      	movs	r5, #0
 800a078:	f104 0619 	add.w	r6, r4, #25
 800a07c:	e7f5      	b.n	800a06a <_printf_i+0x222>
 800a07e:	bf00      	nop
 800a080:	0800a969 	.word	0x0800a969
 800a084:	0800a97a 	.word	0x0800a97a

0800a088 <__sflush_r>:
 800a088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	0716      	lsls	r6, r2, #28
 800a092:	4605      	mov	r5, r0
 800a094:	460c      	mov	r4, r1
 800a096:	d454      	bmi.n	800a142 <__sflush_r+0xba>
 800a098:	684b      	ldr	r3, [r1, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dc02      	bgt.n	800a0a4 <__sflush_r+0x1c>
 800a09e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dd48      	ble.n	800a136 <__sflush_r+0xae>
 800a0a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	d045      	beq.n	800a136 <__sflush_r+0xae>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0b0:	682f      	ldr	r7, [r5, #0]
 800a0b2:	6a21      	ldr	r1, [r4, #32]
 800a0b4:	602b      	str	r3, [r5, #0]
 800a0b6:	d030      	beq.n	800a11a <__sflush_r+0x92>
 800a0b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	0759      	lsls	r1, r3, #29
 800a0be:	d505      	bpl.n	800a0cc <__sflush_r+0x44>
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	1ad2      	subs	r2, r2, r3
 800a0c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0c6:	b10b      	cbz	r3, 800a0cc <__sflush_r+0x44>
 800a0c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0d0:	6a21      	ldr	r1, [r4, #32]
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b0      	blx	r6
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	d106      	bne.n	800a0ea <__sflush_r+0x62>
 800a0dc:	6829      	ldr	r1, [r5, #0]
 800a0de:	291d      	cmp	r1, #29
 800a0e0:	d82b      	bhi.n	800a13a <__sflush_r+0xb2>
 800a0e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a18c <__sflush_r+0x104>)
 800a0e4:	410a      	asrs	r2, r1
 800a0e6:	07d6      	lsls	r6, r2, #31
 800a0e8:	d427      	bmi.n	800a13a <__sflush_r+0xb2>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	6062      	str	r2, [r4, #4]
 800a0ee:	04d9      	lsls	r1, r3, #19
 800a0f0:	6922      	ldr	r2, [r4, #16]
 800a0f2:	6022      	str	r2, [r4, #0]
 800a0f4:	d504      	bpl.n	800a100 <__sflush_r+0x78>
 800a0f6:	1c42      	adds	r2, r0, #1
 800a0f8:	d101      	bne.n	800a0fe <__sflush_r+0x76>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	b903      	cbnz	r3, 800a100 <__sflush_r+0x78>
 800a0fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a102:	602f      	str	r7, [r5, #0]
 800a104:	b1b9      	cbz	r1, 800a136 <__sflush_r+0xae>
 800a106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a10a:	4299      	cmp	r1, r3
 800a10c:	d002      	beq.n	800a114 <__sflush_r+0x8c>
 800a10e:	4628      	mov	r0, r5
 800a110:	f7ff fbf2 	bl	80098f8 <_free_r>
 800a114:	2300      	movs	r3, #0
 800a116:	6363      	str	r3, [r4, #52]	@ 0x34
 800a118:	e00d      	b.n	800a136 <__sflush_r+0xae>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b0      	blx	r6
 800a120:	4602      	mov	r2, r0
 800a122:	1c50      	adds	r0, r2, #1
 800a124:	d1c9      	bne.n	800a0ba <__sflush_r+0x32>
 800a126:	682b      	ldr	r3, [r5, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0c6      	beq.n	800a0ba <__sflush_r+0x32>
 800a12c:	2b1d      	cmp	r3, #29
 800a12e:	d001      	beq.n	800a134 <__sflush_r+0xac>
 800a130:	2b16      	cmp	r3, #22
 800a132:	d11e      	bne.n	800a172 <__sflush_r+0xea>
 800a134:	602f      	str	r7, [r5, #0]
 800a136:	2000      	movs	r0, #0
 800a138:	e022      	b.n	800a180 <__sflush_r+0xf8>
 800a13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a13e:	b21b      	sxth	r3, r3
 800a140:	e01b      	b.n	800a17a <__sflush_r+0xf2>
 800a142:	690f      	ldr	r7, [r1, #16]
 800a144:	2f00      	cmp	r7, #0
 800a146:	d0f6      	beq.n	800a136 <__sflush_r+0xae>
 800a148:	0793      	lsls	r3, r2, #30
 800a14a:	680e      	ldr	r6, [r1, #0]
 800a14c:	bf08      	it	eq
 800a14e:	694b      	ldreq	r3, [r1, #20]
 800a150:	600f      	str	r7, [r1, #0]
 800a152:	bf18      	it	ne
 800a154:	2300      	movne	r3, #0
 800a156:	eba6 0807 	sub.w	r8, r6, r7
 800a15a:	608b      	str	r3, [r1, #8]
 800a15c:	f1b8 0f00 	cmp.w	r8, #0
 800a160:	dde9      	ble.n	800a136 <__sflush_r+0xae>
 800a162:	6a21      	ldr	r1, [r4, #32]
 800a164:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a166:	4643      	mov	r3, r8
 800a168:	463a      	mov	r2, r7
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b0      	blx	r6
 800a16e:	2800      	cmp	r0, #0
 800a170:	dc08      	bgt.n	800a184 <__sflush_r+0xfc>
 800a172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a184:	4407      	add	r7, r0
 800a186:	eba8 0800 	sub.w	r8, r8, r0
 800a18a:	e7e7      	b.n	800a15c <__sflush_r+0xd4>
 800a18c:	dfbffffe 	.word	0xdfbffffe

0800a190 <_fflush_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	690b      	ldr	r3, [r1, #16]
 800a194:	4605      	mov	r5, r0
 800a196:	460c      	mov	r4, r1
 800a198:	b913      	cbnz	r3, 800a1a0 <_fflush_r+0x10>
 800a19a:	2500      	movs	r5, #0
 800a19c:	4628      	mov	r0, r5
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	b118      	cbz	r0, 800a1aa <_fflush_r+0x1a>
 800a1a2:	6a03      	ldr	r3, [r0, #32]
 800a1a4:	b90b      	cbnz	r3, 800a1aa <_fflush_r+0x1a>
 800a1a6:	f7ff f9ad 	bl	8009504 <__sinit>
 800a1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f3      	beq.n	800a19a <_fflush_r+0xa>
 800a1b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1b4:	07d0      	lsls	r0, r2, #31
 800a1b6:	d404      	bmi.n	800a1c2 <_fflush_r+0x32>
 800a1b8:	0599      	lsls	r1, r3, #22
 800a1ba:	d402      	bmi.n	800a1c2 <_fflush_r+0x32>
 800a1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1be:	f7ff fb98 	bl	80098f2 <__retarget_lock_acquire_recursive>
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	f7ff ff5f 	bl	800a088 <__sflush_r>
 800a1ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1cc:	07da      	lsls	r2, r3, #31
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	d4e4      	bmi.n	800a19c <_fflush_r+0xc>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	059b      	lsls	r3, r3, #22
 800a1d6:	d4e1      	bmi.n	800a19c <_fflush_r+0xc>
 800a1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1da:	f7ff fb8b 	bl	80098f4 <__retarget_lock_release_recursive>
 800a1de:	e7dd      	b.n	800a19c <_fflush_r+0xc>

0800a1e0 <__swhatbuf_r>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	b096      	sub	sp, #88	@ 0x58
 800a1ec:	4615      	mov	r5, r2
 800a1ee:	461e      	mov	r6, r3
 800a1f0:	da0d      	bge.n	800a20e <__swhatbuf_r+0x2e>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1f8:	f04f 0100 	mov.w	r1, #0
 800a1fc:	bf14      	ite	ne
 800a1fe:	2340      	movne	r3, #64	@ 0x40
 800a200:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a204:	2000      	movs	r0, #0
 800a206:	6031      	str	r1, [r6, #0]
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	b016      	add	sp, #88	@ 0x58
 800a20c:	bd70      	pop	{r4, r5, r6, pc}
 800a20e:	466a      	mov	r2, sp
 800a210:	f000 f848 	bl	800a2a4 <_fstat_r>
 800a214:	2800      	cmp	r0, #0
 800a216:	dbec      	blt.n	800a1f2 <__swhatbuf_r+0x12>
 800a218:	9901      	ldr	r1, [sp, #4]
 800a21a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a21e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a222:	4259      	negs	r1, r3
 800a224:	4159      	adcs	r1, r3
 800a226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a22a:	e7eb      	b.n	800a204 <__swhatbuf_r+0x24>

0800a22c <__smakebuf_r>:
 800a22c:	898b      	ldrh	r3, [r1, #12]
 800a22e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a230:	079d      	lsls	r5, r3, #30
 800a232:	4606      	mov	r6, r0
 800a234:	460c      	mov	r4, r1
 800a236:	d507      	bpl.n	800a248 <__smakebuf_r+0x1c>
 800a238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	6123      	str	r3, [r4, #16]
 800a240:	2301      	movs	r3, #1
 800a242:	6163      	str	r3, [r4, #20]
 800a244:	b003      	add	sp, #12
 800a246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a248:	ab01      	add	r3, sp, #4
 800a24a:	466a      	mov	r2, sp
 800a24c:	f7ff ffc8 	bl	800a1e0 <__swhatbuf_r>
 800a250:	9f00      	ldr	r7, [sp, #0]
 800a252:	4605      	mov	r5, r0
 800a254:	4639      	mov	r1, r7
 800a256:	4630      	mov	r0, r6
 800a258:	f7ff fbba 	bl	80099d0 <_malloc_r>
 800a25c:	b948      	cbnz	r0, 800a272 <__smakebuf_r+0x46>
 800a25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a262:	059a      	lsls	r2, r3, #22
 800a264:	d4ee      	bmi.n	800a244 <__smakebuf_r+0x18>
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0302 	orr.w	r3, r3, #2
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	e7e2      	b.n	800a238 <__smakebuf_r+0xc>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	6020      	str	r0, [r4, #0]
 800a276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a282:	b15b      	cbz	r3, 800a29c <__smakebuf_r+0x70>
 800a284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a288:	4630      	mov	r0, r6
 800a28a:	f000 f81d 	bl	800a2c8 <_isatty_r>
 800a28e:	b128      	cbz	r0, 800a29c <__smakebuf_r+0x70>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f023 0303 	bic.w	r3, r3, #3
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	431d      	orrs	r5, r3
 800a2a0:	81a5      	strh	r5, [r4, #12]
 800a2a2:	e7cf      	b.n	800a244 <__smakebuf_r+0x18>

0800a2a4 <_fstat_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d07      	ldr	r5, [pc, #28]	@ (800a2c4 <_fstat_r+0x20>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	f7f7 fcda 	bl	8001c6a <_fstat>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d102      	bne.n	800a2c0 <_fstat_r+0x1c>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	b103      	cbz	r3, 800a2c0 <_fstat_r+0x1c>
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20003628 	.word	0x20003628

0800a2c8 <_isatty_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d06      	ldr	r5, [pc, #24]	@ (800a2e4 <_isatty_r+0x1c>)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	602b      	str	r3, [r5, #0]
 800a2d4:	f7f7 fcd9 	bl	8001c8a <_isatty>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_isatty_r+0x1a>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_isatty_r+0x1a>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	20003628 	.word	0x20003628

0800a2e8 <_sbrk_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d06      	ldr	r5, [pc, #24]	@ (800a304 <_sbrk_r+0x1c>)
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	4608      	mov	r0, r1
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	f7f7 fce2 	bl	8001cbc <_sbrk>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_sbrk_r+0x1a>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_sbrk_r+0x1a>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	20003628 	.word	0x20003628

0800a308 <_init>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	bf00      	nop
 800a30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30e:	bc08      	pop	{r3}
 800a310:	469e      	mov	lr, r3
 800a312:	4770      	bx	lr

0800a314 <_fini>:
 800a314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a316:	bf00      	nop
 800a318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31a:	bc08      	pop	{r3}
 800a31c:	469e      	mov	lr, r3
 800a31e:	4770      	bx	lr
