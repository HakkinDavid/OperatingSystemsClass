
MAAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009814  08009814  0000b0bc  2**0
                  CONTENTS
  4 .ARM          00000008  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800981c  0800981c  0000b0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800981c  0800981c  0000a81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08009824  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000352c  200000bc  080098e0  0000b0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200035e8  080098e0  0000b5e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1dc  00000000  00000000  0000b0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  000192c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  0001cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e16  00000000  00000000  0001d599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e07  00000000  00000000  000473af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f31ee  00000000  00000000  0005b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  0014e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015201c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000bc 	.word	0x200000bc
 800021c:	00000000 	.word	0x00000000
 8000220:	080091a8 	.word	0x080091a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c0 	.word	0x200000c0
 800023c:	080091a8 	.word	0x080091a8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sd_card_init>:
		0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x80, 0x7d, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x80, 0xa9, 0x03, 0x00};
static uint32_t wav_file_size;
static uint8_t first_time = 0;

void sd_card_init() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	uint8_t file_name[] = "test.txt";
	uint8_t temp_number;
	uint8_t test_text[] = "Hola, esto es un texto de prueba.";
	*/
	// montando una tarjeta SD
	sd_result = f_mount(&sdCard,"",0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <sd_card_init+0x38>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <sd_card_init+0x3c>)
 80005da:	f006 fec7 	bl	800736c <f_mount>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <sd_card_init+0x40>)
 80005e4:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <sd_card_init+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <sd_card_init+0x2e>
		printf("Error montando la tarjeta SD: %d \n", sd_result);
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <sd_card_init+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <sd_card_init+0x44>)
 80005f6:	f007 ff0b 	bl	8008410 <iprintf>
		while(1);
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <sd_card_init+0x2a>
	}
	else {
		printf("Tarjeta SD montada \n");
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <sd_card_init+0x48>)
 8000600:	f007 ff6e 	bl	80084e0 <puts>
	else {
		printf("Contenido del archivo escrito: %d \n", temp_number);
	}
	f_close(&testFile);
	*/
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	080091c0 	.word	0x080091c0
 800060c:	200000dc 	.word	0x200000dc
 8000610:	200000d8 	.word	0x200000d8
 8000614:	080091c4 	.word	0x080091c4
 8000618:	080091e8 	.word	0x080091e8

0800061c <start_recording>:

void start_recording (uint32_t frequency) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	static char file_name[] = "MAAS_000.wav";
	static uint8_t file_counter = 1;
	int file_number_digits = file_counter;
 8000624:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <start_recording+0x134>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t) frequency;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b47      	ldr	r3, [pc, #284]	@ (8000754 <start_recording+0x138>)
 8000636:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b45      	ldr	r3, [pc, #276]	@ (8000754 <start_recording+0x138>)
 8000640:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b42      	ldr	r3, [pc, #264]	@ (8000754 <start_recording+0x138>)
 800064a:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0e1b      	lsrs	r3, r3, #24
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b40      	ldr	r3, [pc, #256]	@ (8000754 <start_recording+0x138>)
 8000654:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t) byte_rate;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <start_recording+0x138>)
 800065c:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b3b      	ldr	r3, [pc, #236]	@ (8000754 <start_recording+0x138>)
 8000666:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <start_recording+0x138>)
 8000670:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	0e1b      	lsrs	r3, r3, #24
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b36      	ldr	r3, [pc, #216]	@ (8000754 <start_recording+0x138>)
 800067a:	77da      	strb	r2, [r3, #31]

	// definiendo el nombre del archivo
	file_name[7] = file_number_digits % 10 + 48;
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <start_recording+0x13c>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	1099      	asrs	r1, r3, #2
 8000686:	17d3      	asrs	r3, r2, #31
 8000688:	1ac9      	subs	r1, r1, r3
 800068a:	460b      	mov	r3, r1
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	1ad1      	subs	r1, r2, r3
 8000694:	b2cb      	uxtb	r3, r1
 8000696:	3330      	adds	r3, #48	@ 0x30
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b30      	ldr	r3, [pc, #192]	@ (800075c <start_recording+0x140>)
 800069c:	71da      	strb	r2, [r3, #7]
	file_number_digits /= 10;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000758 <start_recording+0x13c>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	1092      	asrs	r2, r2, #2
 80006a8:	17db      	asrs	r3, r3, #31
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	60fb      	str	r3, [r7, #12]
	file_name[6] = file_number_digits % 10 + 48;
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <start_recording+0x13c>)
 80006b2:	fb83 1302 	smull	r1, r3, r3, r2
 80006b6:	1099      	asrs	r1, r3, #2
 80006b8:	17d3      	asrs	r3, r2, #31
 80006ba:	1ac9      	subs	r1, r1, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ad1      	subs	r1, r2, r3
 80006c6:	b2cb      	uxtb	r3, r1
 80006c8:	3330      	adds	r3, #48	@ 0x30
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <start_recording+0x140>)
 80006ce:	719a      	strb	r2, [r3, #6]
	file_number_digits /= 10;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <start_recording+0x13c>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	60fb      	str	r3, [r7, #12]
	file_name[5] = file_number_digits % 10 + 48;
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <start_recording+0x13c>)
 80006e4:	fb83 1302 	smull	r1, r3, r3, r2
 80006e8:	1099      	asrs	r1, r3, #2
 80006ea:	17d3      	asrs	r3, r2, #31
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ad1      	subs	r1, r2, r3
 80006f8:	b2cb      	uxtb	r3, r1
 80006fa:	3330      	adds	r3, #48	@ 0x30
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <start_recording+0x140>)
 8000700:	715a      	strb	r2, [r3, #5]
	file_counter++;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <start_recording+0x134>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <start_recording+0x134>)
 800070c:	701a      	strb	r2, [r3, #0]

	// creando el archivo
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 800070e:	220a      	movs	r2, #10
 8000710:	4912      	ldr	r1, [pc, #72]	@ (800075c <start_recording+0x140>)
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <start_recording+0x144>)
 8000714:	f006 fe70 	bl	80073f8 <f_open>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <start_recording+0x148>)
 800071e:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <start_recording+0x148>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <start_recording+0x11c>
		printf("Error creando un archivo: %d \n", sd_result);
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <start_recording+0x148>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <start_recording+0x14c>)
 8000730:	f007 fe6e 	bl	8008410 <iprintf>
		while(1);
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <start_recording+0x118>
	}
	else {
		printf("Archivo de audio %s creado \n", file_name);
 8000738:	4908      	ldr	r1, [pc, #32]	@ (800075c <start_recording+0x140>)
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <start_recording+0x150>)
 800073c:	f007 fe68 	bl	8008410 <iprintf>
	}
	wav_file_size = 0;
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <start_recording+0x154>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	20000000 	.word	0x20000000
 8000758:	66666667 	.word	0x66666667
 800075c:	20000030 	.word	0x20000030
 8000760:	20001114 	.word	0x20001114
 8000764:	200000d8 	.word	0x200000d8
 8000768:	080091fc 	.word	0x080091fc
 800076c:	0800921c 	.word	0x0800921c
 8000770:	20002144 	.word	0x20002144

08000774 <write2wave_file>:

void write2wave_file (uint8_t *data, uint16_t data_size) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	if(first_time == 0)
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <write2wave_file+0x84>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d116      	bne.n	80007b6 <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00a      	b.n	80007a4 <write2wave_file+0x30>
		{
			*(data + i) = wav_file_header[i];
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	4919      	ldr	r1, [pc, #100]	@ (80007fc <write2wave_file+0x88>)
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	440a      	add	r2, r1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80007a8:	ddf1      	ble.n	800078e <write2wave_file+0x1a>
		}
		first_time = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <write2wave_file+0x84>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
		printf("El encabezado ha sido escrito. \n");
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <write2wave_file+0x8c>)
 80007b2:	f007 fe95 	bl	80084e0 <puts>
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <write2wave_file+0x90>)
 80007c0:	f006 ffe2 	bl	8007788 <f_write>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <write2wave_file+0x94>)
 80007ca:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0) {
 80007cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <write2wave_file+0x94>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d007      	beq.n	80007e4 <write2wave_file+0x70>
		printf("Error escribiendo al archivo: %d \n", sd_result);
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <write2wave_file+0x94>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <write2wave_file+0x98>)
 80007dc:	f007 fe18 	bl	8008410 <iprintf>
		while(1);
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 80007e4:	887a      	ldrh	r2, [r7, #2]
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <write2wave_file+0x9c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <write2wave_file+0x9c>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20002148 	.word	0x20002148
 80007fc:	20000000 	.word	0x20000000
 8000800:	0800923c 	.word	0x0800923c
 8000804:	20001114 	.word	0x20001114
 8000808:	200000d8 	.word	0x200000d8
 800080c:	0800925c 	.word	0x0800925c
 8000810:	20002144 	.word	0x20002144

08000814 <stop_recording>:

void stop_recording () {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// actualizando el tamaño de archivo
	wav_file_size -= 8;
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <stop_recording+0xc4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3b08      	subs	r3, #8
 8000820:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <stop_recording+0xc4>)
 8000822:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <stop_recording+0xc4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <stop_recording+0xc8>)
 800082c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <stop_recording+0xc4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <stop_recording+0xc8>)
 8000838:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <stop_recording+0xc4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <stop_recording+0xc8>)
 8000844:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <stop_recording+0xc4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <stop_recording+0xc8>)
 8000850:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <stop_recording+0xc4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b24      	subs	r3, #36	@ 0x24
 8000858:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <stop_recording+0xc4>)
 800085a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <stop_recording+0xc4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <stop_recording+0xc8>)
 8000864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <stop_recording+0xc4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <stop_recording+0xc8>)
 8000872:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <stop_recording+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <stop_recording+0xc8>)
 8000880:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <stop_recording+0xc4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	0e1b      	lsrs	r3, r3, #24
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <stop_recording+0xc8>)
 800088e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// regresar al encabezado para actualizar el formato de archivo
	f_lseek(&wavFile, 0);
 8000892:	2100      	movs	r1, #0
 8000894:	4812      	ldr	r0, [pc, #72]	@ (80008e0 <stop_recording+0xcc>)
 8000896:	f007 f9b3 	bl	8007c00 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	222c      	movs	r2, #44	@ 0x2c
 800089e:	490f      	ldr	r1, [pc, #60]	@ (80008dc <stop_recording+0xc8>)
 80008a0:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <stop_recording+0xcc>)
 80008a2:	f006 ff71 	bl	8007788 <f_write>
	if(sd_result != 0)
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <stop_recording+0xd0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <stop_recording+0xaa>
	{
		printf("Error al actualizar el primer sector: %d \n", sd_result);
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <stop_recording+0xd0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <stop_recording+0xd4>)
 80008b6:	f007 fdab 	bl	8008410 <iprintf>
		while(1);
 80008ba:	bf00      	nop
 80008bc:	e7fd      	b.n	80008ba <stop_recording+0xa6>
	}
	f_close(&wavFile);
 80008be:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <stop_recording+0xcc>)
 80008c0:	f007 f974 	bl	8007bac <f_close>
	first_time = 0;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <stop_recording+0xd8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	printf("Archivo de audio cerrado. \n");
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <stop_recording+0xdc>)
 80008cc:	f007 fe08 	bl	80084e0 <puts>

}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20002144 	.word	0x20002144
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20001114 	.word	0x20001114
 80008e4:	200000d8 	.word	0x200000d8
 80008e8:	08009280 	.word	0x08009280
 80008ec:	20002148 	.word	0x20002148
 80008f0:	080092ac 	.word	0x080092ac

080008f4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <SELECT+0x1c>)
 8000900:	f002 f924 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 f9df 	bl	8001cc8 <HAL_Delay>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <DESELECT+0x1c>)
 8000920:	f002 f914 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f001 f9cf 	bl	8001cc8 <HAL_Delay>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020400 	.word	0x40020400

08000934 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800093e:	bf00      	nop
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <SPI_TxByte+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1f8      	bne.n	8000940 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800094e:	1df9      	adds	r1, r7, #7
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	2201      	movs	r2, #1
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <SPI_TxByte+0x30>)
 8000956:	f003 fda0 	bl	800449a <HAL_SPI_Transmit>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200021f0 	.word	0x200021f0

08000968 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000974:	bf00      	nop
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <SPI_TxBuffer+0x30>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b02      	cmp	r3, #2
 8000982:	d1f8      	bne.n	8000976 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	2364      	movs	r3, #100	@ 0x64
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <SPI_TxBuffer+0x30>)
 800098c:	f003 fd85 	bl	800449a <HAL_SPI_Transmit>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200021f0 	.word	0x200021f0

0800099c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009a2:	23ff      	movs	r3, #255	@ 0xff
 80009a4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009a6:	bf00      	nop
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <SPI_RxByte+0x34>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d1f8      	bne.n	80009a8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009b6:	1dba      	adds	r2, r7, #6
 80009b8:	1df9      	adds	r1, r7, #7
 80009ba:	2364      	movs	r3, #100	@ 0x64
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <SPI_RxByte+0x34>)
 80009c2:	f003 fedf 	bl	8004784 <HAL_SPI_TransmitReceive>

	return data;
 80009c6:	79bb      	ldrb	r3, [r7, #6]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200021f0 	.word	0x200021f0

080009d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009dc:	f7ff ffde 	bl	800099c <SPI_RxByte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <SD_ReadyWait+0x30>)
 80009f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009fc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80009fe:	f7ff ffcd 	bl	800099c <SPI_RxByte>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2bff      	cmp	r3, #255	@ 0xff
 8000a0a:	d003      	beq.n	8000a14 <SD_ReadyWait+0x24>
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <SD_ReadyWait+0x30>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f4      	bne.n	80009fe <SD_ReadyWait+0xe>

	return res;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000214c 	.word	0x2000214c

08000a24 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a2a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000a2e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a30:	f7ff ff70 	bl	8000914 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	e005      	b.n	8000a46 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff ff7a 	bl	8000934 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	ddf6      	ble.n	8000a3a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a4c:	f7ff ff52 	bl	80008f4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a50:	2340      	movs	r3, #64	@ 0x40
 8000a52:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a64:	2395      	movs	r3, #149	@ 0x95
 8000a66:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2106      	movs	r1, #6
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff7b 	bl	8000968 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a72:	e002      	b.n	8000a7a <SD_PowerOn+0x56>
	{
		cnt--;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a7a:	f7ff ff8f 	bl	800099c <SPI_RxByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d002      	beq.n	8000a8a <SD_PowerOn+0x66>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f4      	bne.n	8000a74 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a8a:	f7ff ff43 	bl	8000914 <DESELECT>
	SPI_TxByte(0XFF);
 8000a8e:	20ff      	movs	r0, #255	@ 0xff
 8000a90:	f7ff ff50 	bl	8000934 <SPI_TxByte>

	PowerFlag = 1;
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <SD_PowerOn+0x80>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000214f 	.word	0x2000214f

08000aa8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <SD_PowerOff+0x14>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000214f 	.word	0x2000214f

08000ac0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <SD_CheckPower+0x14>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000214f 	.word	0x2000214f

08000ad8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <SD_RxDataBlock+0x58>)
 8000ae4:	22c8      	movs	r2, #200	@ 0xc8
 8000ae6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000ae8:	f7ff ff58 	bl	800099c <SPI_RxByte>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2bff      	cmp	r3, #255	@ 0xff
 8000af4:	d103      	bne.n	8000afe <SD_RxDataBlock+0x26>
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <SD_RxDataBlock+0x58>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f4      	bne.n	8000ae8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b02:	d001      	beq.n	8000b08 <SD_RxDataBlock+0x30>
 8000b04:	2300      	movs	r3, #0
 8000b06:	e00f      	b.n	8000b28 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff60 	bl	80009d4 <SPI_RxBytePtr>
	} while(len--);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f4      	bne.n	8000b08 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b1e:	f7ff ff3d 	bl	800099c <SPI_RxByte>
	SPI_RxByte();
 8000b22:	f7ff ff3b 	bl	800099c <SPI_RxByte>

	return TRUE;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000214a 	.word	0x2000214a

08000b34 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b44:	f7ff ff54 	bl	80009f0 <SD_ReadyWait>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d001      	beq.n	8000b52 <SD_TxDataBlock+0x1e>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e02f      	b.n	8000bb2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff feed 	bl	8000934 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000b5e:	d020      	beq.n	8000ba2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff feff 	bl	8000968 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b6a:	f7ff ff17 	bl	800099c <SPI_RxByte>
		SPI_RxByte();
 8000b6e:	f7ff ff15 	bl	800099c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b72:	e00b      	b.n	8000b8c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b74:	f7ff ff12 	bl	800099c <SPI_RxByte>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	f003 031f 	and.w	r3, r3, #31
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d006      	beq.n	8000b94 <SD_TxDataBlock+0x60>
			i++;
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	2b40      	cmp	r3, #64	@ 0x40
 8000b90:	d9f0      	bls.n	8000b74 <SD_TxDataBlock+0x40>
 8000b92:	e000      	b.n	8000b96 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b94:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b96:	bf00      	nop
 8000b98:	f7ff ff00 	bl	800099c <SPI_RxByte>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0fa      	beq.n	8000b98 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	d101      	bne.n	8000bb0 <SD_TxDataBlock+0x7c>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	6039      	str	r1, [r7, #0]
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bc6:	f7ff ff13 	bl	80009f0 <SD_ReadyWait>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2bff      	cmp	r3, #255	@ 0xff
 8000bce:	d001      	beq.n	8000bd4 <SD_SendCmd+0x1a>
 8000bd0:	23ff      	movs	r3, #255	@ 0xff
 8000bd2:	e042      	b.n	8000c5a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff feac 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	0e1b      	lsrs	r3, r3, #24
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fea6 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	0c1b      	lsrs	r3, r3, #16
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fea0 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe9a 	bl	8000934 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe95 	bl	8000934 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b40      	cmp	r3, #64	@ 0x40
 8000c0e:	d102      	bne.n	8000c16 <SD_SendCmd+0x5c>
 8000c10:	2395      	movs	r3, #149	@ 0x95
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e007      	b.n	8000c26 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b48      	cmp	r3, #72	@ 0x48
 8000c1a:	d102      	bne.n	8000c22 <SD_SendCmd+0x68>
 8000c1c:	2387      	movs	r3, #135	@ 0x87
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e001      	b.n	8000c26 <SD_SendCmd+0x6c>
	else crc = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe83 	bl	8000934 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b4c      	cmp	r3, #76	@ 0x4c
 8000c32:	d101      	bne.n	8000c38 <SD_SendCmd+0x7e>
 8000c34:	f7ff feb2 	bl	800099c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c3c:	f7ff feae 	bl	800099c <SPI_RxByte>
 8000c40:	4603      	mov	r3, r0
 8000c42:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da05      	bge.n	8000c58 <SD_SendCmd+0x9e>
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	73bb      	strb	r3, [r7, #14]
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f1      	bne.n	8000c3c <SD_SendCmd+0x82>

	return res;
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SD_disk_initialize+0x14>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0d1      	b.n	8000e1c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c78:	4b6a      	ldr	r3, [pc, #424]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <SD_disk_initialize+0x2a>
 8000c86:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	e0c6      	b.n	8000e1c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000c8e:	f7ff fec9 	bl	8000a24 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c92:	f7ff fe2f 	bl	80008f4 <SELECT>

	/* check disk type */
	type = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2040      	movs	r0, #64	@ 0x40
 8000c9e:	f7ff ff8c 	bl	8000bba <SD_SendCmd>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	f040 80a1 	bne.w	8000dec <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000caa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cb2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000cb6:	2048      	movs	r0, #72	@ 0x48
 8000cb8:	f7ff ff7f 	bl	8000bba <SD_SendCmd>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d155      	bne.n	8000d6e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e00c      	b.n	8000ce2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cc8:	7bfc      	ldrb	r4, [r7, #15]
 8000cca:	f7ff fe67 	bl	800099c <SPI_RxByte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f104 0310 	add.w	r3, r4, #16
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d9ef      	bls.n	8000cc8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ce8:	7abb      	ldrb	r3, [r7, #10]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d17e      	bne.n	8000dec <SD_disk_initialize+0x188>
 8000cee:	7afb      	ldrb	r3, [r7, #11]
 8000cf0:	2baa      	cmp	r3, #170	@ 0xaa
 8000cf2:	d17b      	bne.n	8000dec <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2077      	movs	r0, #119	@ 0x77
 8000cf8:	f7ff ff5f 	bl	8000bba <SD_SendCmd>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d807      	bhi.n	8000d12 <SD_disk_initialize+0xae>
 8000d02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d06:	2069      	movs	r0, #105	@ 0x69
 8000d08:	f7ff ff57 	bl	8000bba <SD_SendCmd>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1ec      	bne.n	8000cf4 <SD_disk_initialize+0x90>
 8000d1a:	e000      	b.n	8000d1e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d1c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d1e:	4b42      	ldr	r3, [pc, #264]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d062      	beq.n	8000dec <SD_disk_initialize+0x188>
 8000d26:	2100      	movs	r1, #0
 8000d28:	207a      	movs	r0, #122	@ 0x7a
 8000d2a:	f7ff ff46 	bl	8000bba <SD_SendCmd>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d15b      	bne.n	8000dec <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e00c      	b.n	8000d54 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d3a:	7bfc      	ldrb	r4, [r7, #15]
 8000d3c:	f7ff fe2e 	bl	800099c <SPI_RxByte>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	f104 0310 	add.w	r3, r4, #16
 8000d48:	443b      	add	r3, r7
 8000d4a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	3301      	adds	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d9ef      	bls.n	8000d3a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SD_disk_initialize+0x104>
 8000d64:	230c      	movs	r3, #12
 8000d66:	e000      	b.n	8000d6a <SD_disk_initialize+0x106>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	73bb      	strb	r3, [r7, #14]
 8000d6c:	e03e      	b.n	8000dec <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2077      	movs	r0, #119	@ 0x77
 8000d72:	f7ff ff22 	bl	8000bba <SD_SendCmd>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d808      	bhi.n	8000d8e <SD_disk_initialize+0x12a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2069      	movs	r0, #105	@ 0x69
 8000d80:	f7ff ff1b 	bl	8000bba <SD_SendCmd>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d801      	bhi.n	8000d8e <SD_disk_initialize+0x12a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e000      	b.n	8000d90 <SD_disk_initialize+0x12c>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d10e      	bne.n	8000db6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2077      	movs	r0, #119	@ 0x77
 8000d9c:	f7ff ff0d 	bl	8000bba <SD_SendCmd>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d80e      	bhi.n	8000dc4 <SD_disk_initialize+0x160>
 8000da6:	2100      	movs	r1, #0
 8000da8:	2069      	movs	r0, #105	@ 0x69
 8000daa:	f7ff ff06 	bl	8000bba <SD_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d107      	bne.n	8000dc4 <SD_disk_initialize+0x160>
 8000db4:	e00c      	b.n	8000dd0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000db6:	2100      	movs	r1, #0
 8000db8:	2041      	movs	r0, #65	@ 0x41
 8000dba:	f7ff fefe 	bl	8000bba <SD_SendCmd>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e2      	bne.n	8000d92 <SD_disk_initialize+0x12e>
 8000dcc:	e000      	b.n	8000dd0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dce:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <SD_disk_initialize+0x1c4>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <SD_disk_initialize+0x184>
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	2050      	movs	r0, #80	@ 0x50
 8000dde:	f7ff feec 	bl	8000bba <SD_SendCmd>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_initialize+0x188>
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <SD_disk_initialize+0x1c8>)
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000df2:	f7ff fd8f 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8000df6:	f7ff fdd1 	bl	800099c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d008      	beq.n	8000e12 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e001      	b.n	8000e16 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e12:	f7ff fe49 	bl	8000aa8 <SD_PowerOff>
	}

	return Stat;
 8000e16:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <SD_disk_initialize+0x1c0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	2000003d 	.word	0x2000003d
 8000e28:	2000214a 	.word	0x2000214a
 8000e2c:	2000214e 	.word	0x2000214e

08000e30 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SD_disk_status+0x14>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e002      	b.n	8000e4a <SD_disk_status+0x1a>
	return Stat;
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SD_disk_status+0x28>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2000003d 	.word	0x2000003d

08000e5c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <SD_disk_read+0x1c>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SD_disk_read+0x20>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e051      	b.n	8000f20 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <SD_disk_read+0xcc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SD_disk_read+0x32>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e048      	b.n	8000f20 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <SD_disk_read+0xd0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <SD_disk_read+0x44>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ea0:	f7ff fd28 	bl	80008f4 <SELECT>

	if (count == 1)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d111      	bne.n	8000ece <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	2051      	movs	r0, #81	@ 0x51
 8000eae:	f7ff fe84 	bl	8000bba <SD_SendCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d129      	bne.n	8000f0c <SD_disk_read+0xb0>
 8000eb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ebc:	68b8      	ldr	r0, [r7, #8]
 8000ebe:	f7ff fe0b 	bl	8000ad8 <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d021      	beq.n	8000f0c <SD_disk_read+0xb0>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	e01e      	b.n	8000f0c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2052      	movs	r0, #82	@ 0x52
 8000ed2:	f7ff fe72 	bl	8000bba <SD_SendCmd>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d117      	bne.n	8000f0c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f7ff fdf9 	bl	8000ad8 <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00a      	beq.n	8000f02 <SD_disk_read+0xa6>
				buff += 512;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ef2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ed      	bne.n	8000edc <SD_disk_read+0x80>
 8000f00:	e000      	b.n	8000f04 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f02:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f04:	2100      	movs	r1, #0
 8000f06:	204c      	movs	r0, #76	@ 0x4c
 8000f08:	f7ff fe57 	bl	8000bba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f0c:	f7ff fd02 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8000f10:	f7ff fd44 	bl	800099c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000003d 	.word	0x2000003d
 8000f2c:	2000214e 	.word	0x2000214e

08000f30 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <SD_disk_write+0x1c>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <SD_disk_write+0x20>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e06b      	b.n	8001028 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f50:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <SD_disk_write+0x100>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SD_disk_write+0x32>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e062      	b.n	8001028 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <SD_disk_write+0x100>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SD_disk_write+0x44>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e059      	b.n	8001028 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <SD_disk_write+0x104>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <SD_disk_write+0x56>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f86:	f7ff fcb5 	bl	80008f4 <SELECT>

	if (count == 1)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d110      	bne.n	8000fb2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	2058      	movs	r0, #88	@ 0x58
 8000f94:	f7ff fe11 	bl	8000bba <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d13a      	bne.n	8001014 <SD_disk_write+0xe4>
 8000f9e:	21fe      	movs	r1, #254	@ 0xfe
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f7ff fdc7 	bl	8000b34 <SD_TxDataBlock>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d033      	beq.n	8001014 <SD_disk_write+0xe4>
			count = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	e030      	b.n	8001014 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <SD_disk_write+0x104>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2077      	movs	r0, #119	@ 0x77
 8000fc2:	f7ff fdfa 	bl	8000bba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	2057      	movs	r0, #87	@ 0x57
 8000fca:	f7ff fdf6 	bl	8000bba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2059      	movs	r0, #89	@ 0x59
 8000fd2:	f7ff fdf2 	bl	8000bba <SD_SendCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d11b      	bne.n	8001014 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fdc:	21fc      	movs	r1, #252	@ 0xfc
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f7ff fda8 	bl	8000b34 <SD_TxDataBlock>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <SD_disk_write+0xd0>
				buff += 512;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ff0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1ee      	bne.n	8000fdc <SD_disk_write+0xac>
 8000ffe:	e000      	b.n	8001002 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001000:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001002:	21fd      	movs	r1, #253	@ 0xfd
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fd95 	bl	8000b34 <SD_TxDataBlock>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <SD_disk_write+0xe4>
			{
				count = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001014:	f7ff fc7e 	bl	8000914 <DESELECT>
	SPI_RxByte();
 8001018:	f7ff fcc0 	bl	800099c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000003d 	.word	0x2000003d
 8001034:	2000214e 	.word	0x2000214e

08001038 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08b      	sub	sp, #44	@ 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	603a      	str	r2, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	460b      	mov	r3, r1
 8001046:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SD_disk_ioctl+0x1e>
 8001052:	2304      	movs	r3, #4
 8001054:	e113      	b.n	800127e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d124      	bne.n	80010ac <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d012      	beq.n	8001090 <SD_disk_ioctl+0x58>
 800106a:	2b02      	cmp	r3, #2
 800106c:	dc1a      	bgt.n	80010a4 <SD_disk_ioctl+0x6c>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <SD_disk_ioctl+0x40>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d006      	beq.n	8001084 <SD_disk_ioctl+0x4c>
 8001076:	e015      	b.n	80010a4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001078:	f7ff fd16 	bl	8000aa8 <SD_PowerOff>
			res = RES_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001082:	e0fa      	b.n	800127a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001084:	f7ff fcce 	bl	8000a24 <SD_PowerOn>
			res = RES_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800108e:	e0f4      	b.n	800127a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	1c5c      	adds	r4, r3, #1
 8001094:	f7ff fd14 	bl	8000ac0 <SD_CheckPower>
 8001098:	4603      	mov	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010a2:	e0ea      	b.n	800127a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010aa:	e0e6      	b.n	800127a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010ac:	4b76      	ldr	r3, [pc, #472]	@ (8001288 <SD_disk_ioctl+0x250>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SD_disk_ioctl+0x86>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e0df      	b.n	800127e <SD_disk_ioctl+0x246>

		SELECT();
 80010be:	f7ff fc19 	bl	80008f4 <SELECT>

		switch (ctrl)
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b0d      	cmp	r3, #13
 80010c6:	f200 80c9 	bhi.w	800125c <SD_disk_ioctl+0x224>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <SD_disk_ioctl+0x98>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080011c7 	.word	0x080011c7
 80010d4:	08001109 	.word	0x08001109
 80010d8:	080011b7 	.word	0x080011b7
 80010dc:	0800125d 	.word	0x0800125d
 80010e0:	0800125d 	.word	0x0800125d
 80010e4:	0800125d 	.word	0x0800125d
 80010e8:	0800125d 	.word	0x0800125d
 80010ec:	0800125d 	.word	0x0800125d
 80010f0:	0800125d 	.word	0x0800125d
 80010f4:	0800125d 	.word	0x0800125d
 80010f8:	0800125d 	.word	0x0800125d
 80010fc:	080011d9 	.word	0x080011d9
 8001100:	080011fd 	.word	0x080011fd
 8001104:	08001221 	.word	0x08001221
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001108:	2100      	movs	r1, #0
 800110a:	2049      	movs	r0, #73	@ 0x49
 800110c:	f7ff fd55 	bl	8000bba <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 80a6 	bne.w	8001264 <SD_disk_ioctl+0x22c>
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2110      	movs	r1, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fcda 	bl	8000ad8 <SD_RxDataBlock>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 809c 	beq.w	8001264 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	099b      	lsrs	r3, r3, #6
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10d      	bne.n	8001152 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	461a      	mov	r2, r3
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001148:	8bfb      	ldrh	r3, [r7, #30]
 800114a:	029a      	lsls	r2, r3, #10
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e02d      	b.n	80011ae <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001152:	7c7b      	ldrb	r3, [r7, #17]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	09db      	lsrs	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	7d7b      	ldrb	r3, [r7, #21]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0306 	and.w	r3, r3, #6
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3302      	adds	r3, #2
 8001176:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800117a:	7d3b      	ldrb	r3, [r7, #20]
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	b29b      	uxth	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	7cbb      	ldrb	r3, [r7, #18]
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	b29b      	uxth	r3, r3
 8001192:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011a0:	8bfa      	ldrh	r2, [r7, #30]
 80011a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011a6:	3b09      	subs	r3, #9
 80011a8:	409a      	lsls	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80011b4:	e056      	b.n	8001264 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011bc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011c4:	e055      	b.n	8001272 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011c6:	f7ff fc13 	bl	80009f0 <SD_ReadyWait>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2bff      	cmp	r3, #255	@ 0xff
 80011ce:	d14b      	bne.n	8001268 <SD_disk_ioctl+0x230>
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011d6:	e047      	b.n	8001268 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011d8:	2100      	movs	r1, #0
 80011da:	2049      	movs	r0, #73	@ 0x49
 80011dc:	f7ff fced 	bl	8000bba <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d142      	bne.n	800126c <SD_disk_ioctl+0x234>
 80011e6:	2110      	movs	r1, #16
 80011e8:	6a38      	ldr	r0, [r7, #32]
 80011ea:	f7ff fc75 	bl	8000ad8 <SD_RxDataBlock>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03b      	beq.n	800126c <SD_disk_ioctl+0x234>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011fa:	e037      	b.n	800126c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011fc:	2100      	movs	r1, #0
 80011fe:	204a      	movs	r0, #74	@ 0x4a
 8001200:	f7ff fcdb 	bl	8000bba <SD_SendCmd>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d132      	bne.n	8001270 <SD_disk_ioctl+0x238>
 800120a:	2110      	movs	r1, #16
 800120c:	6a38      	ldr	r0, [r7, #32]
 800120e:	f7ff fc63 	bl	8000ad8 <SD_RxDataBlock>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d02b      	beq.n	8001270 <SD_disk_ioctl+0x238>
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800121e:	e027      	b.n	8001270 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001220:	2100      	movs	r1, #0
 8001222:	207a      	movs	r0, #122	@ 0x7a
 8001224:	f7ff fcc9 	bl	8000bba <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001234:	e00b      	b.n	800124e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001236:	6a3c      	ldr	r4, [r7, #32]
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	f7ff fbae 	bl	800099c <SPI_RxByte>
 8001240:	4603      	mov	r3, r0
 8001242:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001248:	3301      	adds	r3, #1
 800124a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800124e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001252:	2b03      	cmp	r3, #3
 8001254:	d9ef      	bls.n	8001236 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800125c:	2304      	movs	r3, #4
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001262:	e006      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001264:	bf00      	nop
 8001266:	e004      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001268:	bf00      	nop
 800126a:	e002      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <SD_disk_ioctl+0x23a>
			break;
 8001270:	bf00      	nop
		}

		DESELECT();
 8001272:	f7ff fb4f 	bl	8000914 <DESELECT>
		SPI_RxByte();
 8001276:	f7ff fb91 	bl	800099c <SPI_RxByte>
	}

	return res;
 800127a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800127e:	4618      	mov	r0, r3
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	2000003d 	.word	0x2000003d

0800128c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001294:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001298:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012b4:	e000      	b.n	80012b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f9      	beq.n	80012b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80012e0:	f000 fa1e 	bl	8001720 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fc93 	bl	8001c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f872 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 f960 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f000 f940 	bl	8001574 <MX_DMA_Init>
  MX_I2S2_Init();
 80012f4:	f000 f8d6 	bl	80014a4 <MX_I2S2_Init>
  MX_SPI1_Init();
 80012f8:	f000 f8fe 	bl	80014f8 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012fc:	f003 fdec 	bl	8004ed8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001300:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001304:	f000 fce0 	bl	8001cc8 <HAL_Delay>
  sd_card_init();
 8001308:	f7ff f962 	bl	80005d0 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_flag) {
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <main+0xd0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d023      	beq.n	800135e <main+0x82>
		  if (start_stop_recording) {
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <main+0xd4>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <main+0x5c>
			  HAL_I2S_DMAStop(&hi2s2);
 8001320:	4824      	ldr	r0, [pc, #144]	@ (80013b4 <main+0xd8>)
 8001322:	f001 fde7 	bl	8002ef4 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <main+0xd4>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 800132c:	f7ff fa72 	bl	8000814 <stop_recording>
			  printf("Grabación terminada.\n");
 8001330:	4821      	ldr	r0, [pc, #132]	@ (80013b8 <main+0xdc>)
 8001332:	f007 f8d5 	bl	80084e0 <puts>
 8001336:	e00f      	b.n	8001358 <main+0x7c>
		  }
		  else {
			  start_stop_recording = 1;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <main+0xd4>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 800133e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8001342:	f7ff f96b 	bl	800061c <start_recording>
			  printf("Grabando...\n");
 8001346:	481d      	ldr	r0, [pc, #116]	@ (80013bc <main+0xe0>)
 8001348:	f007 f8ca 	bl	80084e0 <puts>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *) data_i2s, sizeof(data_i2s)/2);
 800134c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001350:	491b      	ldr	r1, [pc, #108]	@ (80013c0 <main+0xe4>)
 8001352:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <main+0xd8>)
 8001354:	f001 fd12 	bl	8002d7c <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <main+0xd0>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_stop_recording == 1 && half_i2s == 1)
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <main+0xd4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10c      	bne.n	8001382 <main+0xa6>
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <main+0xe8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <main+0xa6>
	  {
		  write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 8001372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001376:	4812      	ldr	r0, [pc, #72]	@ (80013c0 <main+0xe4>)
 8001378:	f7ff f9fc 	bl	8000774 <write2wave_file>
		  half_i2s = 0;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <main+0xe8>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	  }
	  if (start_stop_recording == 1 && full_i2s == 1)
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <main+0xd4>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1bf      	bne.n	800130c <main+0x30>
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <main+0xec>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d1ba      	bne.n	800130c <main+0x30>
	  {
		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <main+0xf0>)
 8001398:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f9e9 	bl	8000774 <write2wave_file>
		  full_i2s = 0;
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <main+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	  if (button_flag) {
 80013a8:	e7b0      	b.n	800130c <main+0x30>
 80013aa:	bf00      	nop
 80013ac:	20003254 	.word	0x20003254
 80013b0:	20003255 	.word	0x20003255
 80013b4:	20002150 	.word	0x20002150
 80013b8:	080092c8 	.word	0x080092c8
 80013bc:	080092e0 	.word	0x080092e0
 80013c0:	20002254 	.word	0x20002254
 80013c4:	20003256 	.word	0x20003256
 80013c8:	20003257 	.word	0x20003257
 80013cc:	20002a54 	.word	0x20002a54

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	@ 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	2234      	movs	r2, #52	@ 0x34
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f007 f95e 	bl	80086a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	4b29      	ldr	r3, [pc, #164]	@ (800149c <SystemClock_Config+0xcc>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a28      	ldr	r2, [pc, #160]	@ (800149c <SystemClock_Config+0xcc>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <SystemClock_Config+0xcc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <SystemClock_Config+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001414:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <SystemClock_Config+0xd0>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <SystemClock_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001440:	23a0      	movs	r3, #160	@ 0xa0
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001448:	2307      	movs	r3, #7
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4618      	mov	r0, r3
 8001456:	f001 feed 	bl	8003234 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001460:	f000 f98a 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001468:	2302      	movs	r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001470:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001474:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2105      	movs	r1, #5
 8001482:	4618      	mov	r0, r3
 8001484:	f002 f984 	bl	8003790 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800148e:	f000 f973 	bl	8001778 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	@ 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <MX_I2S2_Init+0x50>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014ca:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014ce:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014d8:	2202      	movs	r2, #2
 80014da:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_I2S2_Init+0x4c>)
 80014de:	f001 fb67 	bl	8002bb0 <HAL_I2S_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 80014e8:	f000 f946 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20002150 	.word	0x20002150
 80014f4:	40003800 	.word	0x40003800

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_SPI1_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <MX_SPI1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_SPI1_Init+0x74>)
 8001504:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SPI1_Init+0x74>)
 8001512:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_SPI1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SPI1_Init+0x74>)
 8001526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800152a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_SPI1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SPI1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SPI1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_SPI1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SPI1_Init+0x74>)
 8001546:	2207      	movs	r2, #7
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_SPI1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SPI1_Init+0x74>)
 8001552:	2208      	movs	r2, #8
 8001554:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_SPI1_Init+0x74>)
 8001558:	f002 fef4 	bl	8004344 <HAL_SPI_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f909 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200021f0 	.word	0x200021f0
 8001570:	40013000 	.word	0x40013000

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_DMA_Init+0x38>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <MX_DMA_Init+0x38>)
 8001580:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_DMA_Init+0x38>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	200c      	movs	r0, #12
 8001598:	f000 fc95 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800159c:	200c      	movs	r0, #12
 800159e:	f000 fcae 	bl	8001efe <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4b29      	ldr	r3, [pc, #164]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a28      	ldr	r2, [pc, #160]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a22      	ldr	r2, [pc, #136]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_GPIO_Init+0xbc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <MX_GPIO_Init+0xc0>)
 8001616:	f001 fa99 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueButton_Pin */
  GPIO_InitStruct.Pin = BlueButton_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800161e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001620:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BlueButton_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	4810      	ldr	r0, [pc, #64]	@ (8001674 <MX_GPIO_Init+0xc4>)
 8001632:	f001 f8df 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800163a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_GPIO_Init+0xc0>)
 8001650:	f001 f8d0 	bl	80027f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2028      	movs	r0, #40	@ 0x28
 800165a:	f000 fc34 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800165e:	2028      	movs	r0, #40	@ 0x28
 8001660:	f000 fc4d 	bl	8001efe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800

08001678 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e009      	b.n	800169e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	60ba      	str	r2, [r7, #8]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fdfa 	bl	800128c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dbf1      	blt.n	800168a <_write+0x12>
  }
  return len;
 80016a6:	687b      	ldr	r3, [r7, #4]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	printf("Se ha recibido un bloque entero de audio.");
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <HAL_I2S_RxCpltCallback+0x1c>)
 80016ba:	f006 fea9 	bl	8008410 <iprintf>

	full_i2s = 1;
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <HAL_I2S_RxCpltCallback+0x20>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	080092ec 	.word	0x080092ec
 80016d0:	20003257 	.word	0x20003257

080016d4 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	printf("Se ha recibido medio bloque de audio.");
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80016de:	f006 fe97 	bl	8008410 <iprintf>
	//sample_i2s = data_i2s[0];
	half_i2s = 1;
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	08009318 	.word	0x08009318
 80016f4:	20003256 	.word	0x20003256

080016f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BlueButton_Pin) {
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001708:	d102      	bne.n	8001710 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 800170a:	4b04      	ldr	r3, [pc, #16]	@ (800171c <HAL_GPIO_EXTI_Callback+0x24>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
	}
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20003254 	.word	0x20003254

08001720 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001732:	f000 fbff 	bl	8001f34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001736:	2301      	movs	r3, #1
 8001738:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800173a:	2300      	movs	r3, #0
 800173c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001742:	231f      	movs	r3, #31
 8001744:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001746:	2387      	movs	r3, #135	@ 0x87
 8001748:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800174a:	2300      	movs	r3, #0
 800174c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800174e:	2300      	movs	r3, #0
 8001750:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fc1d 	bl	8001fa4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800176a:	2004      	movs	r0, #4
 800176c:	f000 fbfa 	bl	8001f64 <HAL_MPU_Enable>

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x44>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	@ 0x40
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x44>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x44>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ae      	sub	sp, #184	@ 0xb8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2290      	movs	r2, #144	@ 0x90
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 ff57 	bl	80086a0 <memset>
  if(hi2s->Instance==SPI2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001934 <HAL_I2S_MspInit+0x168>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f040 8097 	bne.w	800192c <HAL_I2S_MspInit+0x160>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 160;
 80017fe:	23a0      	movs	r3, #160	@ 0xa0
 8001800:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001802:	2302      	movs	r3, #2
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8001812:	2300      	movs	r3, #0
 8001814:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4618      	mov	r0, r3
 800181c:	f002 f96a 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 8001826:	f7ff ffa7 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800182a:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a42      	ldr	r2, [pc, #264]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
 8001836:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a3c      	ldr	r2, [pc, #240]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a36      	ldr	r2, [pc, #216]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <HAL_I2S_MspInit+0x16c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001872:	2308      	movs	r3, #8
 8001874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800188a:	2305      	movs	r3, #5
 800188c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001894:	4619      	mov	r1, r3
 8001896:	4829      	ldr	r0, [pc, #164]	@ (800193c <HAL_I2S_MspInit+0x170>)
 8001898:	f000 ffac 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800189c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b6:	2305      	movs	r3, #5
 80018b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018c0:	4619      	mov	r1, r3
 80018c2:	481f      	ldr	r0, [pc, #124]	@ (8001940 <HAL_I2S_MspInit+0x174>)
 80018c4:	f000 ff96 	bl	80027f4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_I2S_MspInit+0x17c>)
 80018cc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018d0:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 80018d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e2:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018f0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 80018fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001900:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 8001904:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001908:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 800190c:	2200      	movs	r2, #0
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 8001912:	f000 fb87 	bl	8002024 <HAL_DMA_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2S_MspInit+0x154>
    {
      Error_Handler();
 800191c:	f7ff ff2c 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
 8001926:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <HAL_I2S_MspInit+0x178>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800192c:	bf00      	nop
 800192e:	37b8      	adds	r7, #184	@ 0xb8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40003800 	.word	0x40003800
 8001938:	40023800 	.word	0x40023800
 800193c:	40020800 	.word	0x40020800
 8001940:	40020400 	.word	0x40020400
 8001944:	20002190 	.word	0x20002190
 8001948:	40026028 	.word	0x40026028

0800194c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <HAL_SPI_MspInit+0x7c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d127      	bne.n	80019be <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_SPI_MspInit+0x80>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <HAL_SPI_MspInit+0x80>)
 8001974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001978:	6453      	str	r3, [r2, #68]	@ 0x44
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_SPI_MspInit+0x80>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_SPI_MspInit+0x80>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <HAL_SPI_MspInit+0x80>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_SPI_MspInit+0x80>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800199e:	23e0      	movs	r3, #224	@ 0xe0
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ae:	2305      	movs	r3, #5
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <HAL_SPI_MspInit+0x84>)
 80019ba:	f000 ff1b 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	@ 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40013000 	.word	0x40013000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <NMI_Handler+0x4>

080019dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <SysTick_Handler+0x34>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <SysTick_Handler+0x18>
		Timer1--;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <SysTick_Handler+0x34>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <SysTick_Handler+0x34>)
 8001a3e:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <SysTick_Handler+0x38>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <SysTick_Handler+0x2c>
		Timer2--;
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <SysTick_Handler+0x38>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <SysTick_Handler+0x38>)
 8001a52:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f918 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000214a 	.word	0x2000214a
 8001a60:	2000214c 	.word	0x2000214c

08001a64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <DMA1_Stream1_IRQHandler+0x10>)
 8001a6a:	f000 fc59 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20002190 	.word	0x20002190

08001a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BlueButton_Pin);
 8001a7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a80:	f001 f87e 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9a:	f3af 8000 	nop.w
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf0      	blt.n	8001a9a <_read+0x12>
  }

  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f006 fdee 	bl	800873c <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20080000 	.word	0x20080000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20003258 	.word	0x20003258
 8001b94:	200035e8 	.word	0x200035e8

08001b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	@ (8001bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f006 fdad 	bl	8008748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bee:	f7ff fb75 	bl	80012dc <main>
  bx  lr    
 8001bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001c00:	08009824 	.word	0x08009824
  ldr r2, =_sbss
 8001c04:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001c08:	200035e8 	.word	0x200035e8

08001c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC_IRQHandler>

08001c0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f94c 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f000 f805 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1e:	f7ff fdb1 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f967 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f92f 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000040 	.word	0x20000040
 8001c80:	20000048 	.word	0x20000048
 8001c84:	20000044 	.word	0x20000044

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000048 	.word	0x20000048
 8001cac:	2000325c 	.word	0x2000325c

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000325c 	.word	0x2000325c

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000048 	.word	0x20000048

08001d10 <__NVIC_SetPriorityGrouping>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	05fa0000 	.word	0x05fa0000

08001d58 <__NVIC_GetPriorityGrouping>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	@ (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f38:	f3bf 8f5f 	dmb	sy
}
 8001f3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <HAL_MPU_Disable+0x28>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	4a06      	ldr	r2, [pc, #24]	@ (8001f5c <HAL_MPU_Disable+0x28>)
 8001f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f48:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_MPU_Disable+0x2c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00
 8001f60:	e000ed90 	.word	0xe000ed90

08001f64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f9c <HAL_MPU_Enable+0x38>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_MPU_Enable+0x3c>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <HAL_MPU_Enable+0x3c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f82:	f3bf 8f4f 	dsb	sy
}
 8001f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f88:	f3bf 8f6f 	isb	sy
}
 8001f8c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed90 	.word	0xe000ed90
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	785a      	ldrb	r2, [r3, #1]
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <HAL_MPU_ConfigRegion+0x7c>)
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <HAL_MPU_ConfigRegion+0x7c>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_MPU_ConfigRegion+0x7c>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <HAL_MPU_ConfigRegion+0x7c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7b1b      	ldrb	r3, [r3, #12]
 8001fcc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7adb      	ldrb	r3, [r3, #11]
 8001fd2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7a9b      	ldrb	r3, [r3, #10]
 8001fda:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7b5b      	ldrb	r3, [r3, #13]
 8001fe2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7b9b      	ldrb	r3, [r3, #14]
 8001fea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7bdb      	ldrb	r3, [r3, #15]
 8001ff2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7a5b      	ldrb	r3, [r3, #9]
 8001ffa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7a1b      	ldrb	r3, [r3, #8]
 8002002:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002004:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800200e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002010:	6113      	str	r3, [r2, #16]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed90 	.word	0xe000ed90

08002024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff fe3e 	bl	8001cb0 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e099      	b.n	8002174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002060:	e00f      	b.n	8002082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002062:	f7ff fe25 	bl	8001cb0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b05      	cmp	r3, #5
 800206e:	d908      	bls.n	8002082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e078      	b.n	8002174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e8      	bne.n	8002062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_DMA_Init+0x158>)
 800209c:	4013      	ands	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d107      	bne.n	80020ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	4313      	orrs	r3, r2
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0307 	bic.w	r3, r3, #7
 8002102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	2b04      	cmp	r3, #4
 8002114:	d117      	bne.n	8002146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00e      	beq.n	8002146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fae7 	bl	80026fc <DMA_CheckFifoParam>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2240      	movs	r2, #64	@ 0x40
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002142:	2301      	movs	r3, #1
 8002144:	e016      	b.n	8002174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fa9e 	bl	8002690 <DMA_CalcBaseAndBitshift>
 8002154:	4603      	mov	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	223f      	movs	r2, #63	@ 0x3f
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	e010803f 	.word	0xe010803f

08002180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Start_IT+0x26>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e048      	b.n	8002238 <HAL_DMA_Start_IT+0xb8>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d137      	bne.n	800222a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2202      	movs	r2, #2
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fa30 	bl	8002634 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	223f      	movs	r2, #63	@ 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0216 	orr.w	r2, r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0208 	orr.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e005      	b.n	8002236 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002232:	2302      	movs	r3, #2
 8002234:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002236:	7dfb      	ldrb	r3, [r7, #23]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800224e:	f7ff fd2f 	bl	8001cb0 <HAL_GetTick>
 8002252:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d008      	beq.n	8002272 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e052      	b.n	8002318 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0216 	bic.w	r2, r2, #22
 8002280:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002290:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_DMA_Abort+0x62>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0208 	bic.w	r2, r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c2:	e013      	b.n	80022ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c4:	f7ff fcf4 	bl	8001cb0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d90c      	bls.n	80022ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e015      	b.n	8002318 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e4      	bne.n	80022c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fe:	223f      	movs	r2, #63	@ 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800232c:	4b8e      	ldr	r3, [pc, #568]	@ (8002568 <HAL_DMA_IRQHandler+0x248>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a8e      	ldr	r2, [pc, #568]	@ (800256c <HAL_DMA_IRQHandler+0x24c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234a:	2208      	movs	r2, #8
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0204 	bic.w	r2, r2, #4
 8002372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	2208      	movs	r2, #8
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	2204      	movs	r2, #4
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	2204      	movs	r2, #4
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	2210      	movs	r2, #16
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d043      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03c      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	2210      	movs	r2, #16
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d024      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e01f      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e016      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0208 	bic.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	2220      	movs	r2, #32
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 808f 	beq.w	80025c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8087 	beq.w	80025c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b6:	2220      	movs	r2, #32
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d136      	bne.n	8002538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0216 	bic.w	r2, r2, #22
 80024d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_DMA_IRQHandler+0x1da>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250e:	223f      	movs	r2, #63	@ 0x3f
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252a:	2b00      	cmp	r3, #0
 800252c:	d07e      	beq.n	800262c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
        }
        return;
 8002536:	e079      	b.n	800262c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01d      	beq.n	8002582 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	2b00      	cmp	r3, #0
 800255a:	d031      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e02c      	b.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
 8002566:	bf00      	nop
 8002568:	20000040 	.word	0x20000040
 800256c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e01e      	b.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10f      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0210 	bic.w	r2, r2, #16
 800259e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d032      	beq.n	800262e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d022      	beq.n	800261a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2205      	movs	r2, #5
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d307      	bcc.n	8002608 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f2      	bne.n	80025ec <HAL_DMA_IRQHandler+0x2cc>
 8002606:	e000      	b.n	800260a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002608:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
 800262a:	e000      	b.n	800262e <HAL_DMA_IRQHandler+0x30e>
        return;
 800262c:	bf00      	nop
    }
  }
}
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002650:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d108      	bne.n	8002674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002672:	e007      	b.n	8002684 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b10      	subs	r3, #16
 80026a0:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <DMA_CalcBaseAndBitshift+0x60>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <DMA_CalcBaseAndBitshift+0x64>)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d908      	bls.n	80026d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <DMA_CalcBaseAndBitshift+0x68>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	1d1a      	adds	r2, r3, #4
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ce:	e006      	b.n	80026de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <DMA_CalcBaseAndBitshift+0x68>)
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	aaaaaaab 	.word	0xaaaaaaab
 80026f4:	08009398 	.word	0x08009398
 80026f8:	fffffc00 	.word	0xfffffc00

080026fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d856      	bhi.n	80027ca <DMA_CheckFifoParam+0xce>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <DMA_CheckFifoParam+0x28>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002735 	.word	0x08002735
 8002728:	08002747 	.word	0x08002747
 800272c:	08002735 	.word	0x08002735
 8002730:	080027cb 	.word	0x080027cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d046      	beq.n	80027ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002744:	e043      	b.n	80027ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800274e:	d140      	bne.n	80027d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002754:	e03d      	b.n	80027d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275e:	d121      	bne.n	80027a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d837      	bhi.n	80027d6 <DMA_CheckFifoParam+0xda>
 8002766:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <DMA_CheckFifoParam+0x70>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	0800277d 	.word	0x0800277d
 8002770:	08002783 	.word	0x08002783
 8002774:	0800277d 	.word	0x0800277d
 8002778:	08002795 	.word	0x08002795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e030      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d025      	beq.n	80027da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002792:	e022      	b.n	80027da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800279c:	d11f      	bne.n	80027de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027a2:	e01c      	b.n	80027de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d903      	bls.n	80027b2 <DMA_CheckFifoParam+0xb6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d003      	beq.n	80027b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027b0:	e018      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      break;
 80027b6:	e015      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e00b      	b.n	80027e2 <DMA_CheckFifoParam+0xe6>
      break;
 80027ca:	bf00      	nop
 80027cc:	e00a      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e008      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e006      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e004      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
    }
  } 
  
  return status; 
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e175      	b.n	8002b00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002814:	2201      	movs	r2, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	429a      	cmp	r2, r3
 800282e:	f040 8164 	bne.w	8002afa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d005      	beq.n	800284a <HAL_GPIO_Init+0x56>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d130      	bne.n	80028ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 0201 	and.w	r2, r3, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d017      	beq.n	80028e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d123      	bne.n	800293c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	08da      	lsrs	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	08da      	lsrs	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3208      	adds	r2, #8
 8002936:	69b9      	ldr	r1, [r7, #24]
 8002938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0203 	and.w	r2, r3, #3
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80be 	beq.w	8002afa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	4b66      	ldr	r3, [pc, #408]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a65      	ldr	r2, [pc, #404]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b63      	ldr	r3, [pc, #396]	@ (8002b18 <HAL_GPIO_Init+0x324>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002996:	4a61      	ldr	r2, [pc, #388]	@ (8002b1c <HAL_GPIO_Init+0x328>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a58      	ldr	r2, [pc, #352]	@ (8002b20 <HAL_GPIO_Init+0x32c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d037      	beq.n	8002a32 <HAL_GPIO_Init+0x23e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <HAL_GPIO_Init+0x330>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_GPIO_Init+0x23a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a56      	ldr	r2, [pc, #344]	@ (8002b28 <HAL_GPIO_Init+0x334>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <HAL_GPIO_Init+0x236>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a55      	ldr	r2, [pc, #340]	@ (8002b2c <HAL_GPIO_Init+0x338>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d025      	beq.n	8002a26 <HAL_GPIO_Init+0x232>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a54      	ldr	r2, [pc, #336]	@ (8002b30 <HAL_GPIO_Init+0x33c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <HAL_GPIO_Init+0x22e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a53      	ldr	r2, [pc, #332]	@ (8002b34 <HAL_GPIO_Init+0x340>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x22a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a52      	ldr	r2, [pc, #328]	@ (8002b38 <HAL_GPIO_Init+0x344>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x226>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a51      	ldr	r2, [pc, #324]	@ (8002b3c <HAL_GPIO_Init+0x348>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x222>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a50      	ldr	r2, [pc, #320]	@ (8002b40 <HAL_GPIO_Init+0x34c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x21e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4f      	ldr	r2, [pc, #316]	@ (8002b44 <HAL_GPIO_Init+0x350>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x21a>
 8002a0a:	2309      	movs	r3, #9
 8002a0c:	e012      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a0e:	230a      	movs	r3, #10
 8002a10:	e010      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a12:	2308      	movs	r3, #8
 8002a14:	e00e      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x240>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a44:	4935      	ldr	r1, [pc, #212]	@ (8002b1c <HAL_GPIO_Init+0x328>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b3d      	ldr	r3, [pc, #244]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a34      	ldr	r2, [pc, #208]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b32      	ldr	r3, [pc, #200]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a29      	ldr	r2, [pc, #164]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aa6:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aca:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af4:	4a14      	ldr	r2, [pc, #80]	@ (8002b48 <HAL_GPIO_Init+0x354>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f ae86 	bls.w	8002814 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40021400 	.word	0x40021400
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40021c00 	.word	0x40021c00
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40022400 	.word	0x40022400
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b8a:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b96:	4a05      	ldr	r2, [pc, #20]	@ (8002bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fdaa 	bl	80016f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0d2      	b.n	8002d68 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fdf8 	bl	80017cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69d9      	ldr	r1, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b60      	ldr	r3, [pc, #384]	@ (8002d70 <HAL_I2S_Init+0x1c0>)
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d067      	beq.n	8002cd4 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e001      	b.n	8002c16 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d802      	bhi.n	8002c24 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002c2c:	4b51      	ldr	r3, [pc, #324]	@ (8002d74 <HAL_I2S_Init+0x1c4>)
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e003      	b.n	8002c3a <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa24 	bl	8003080 <I2S_GetClockFreq>
 8002c38:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c42:	d125      	bne.n	8002c90 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	3305      	adds	r3, #5
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e01f      	b.n	8002cae <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	3305      	adds	r3, #5
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	e00e      	b.n	8002cae <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	3305      	adds	r3, #5
 8002cac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4a31      	ldr	r2, [pc, #196]	@ (8002d78 <HAL_I2S_Init+0x1c8>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	08db      	lsrs	r3, r3, #3
 8002cb8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e003      	b.n	8002cdc <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d902      	bls.n	8002ce8 <HAL_I2S_Init+0x138>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2bff      	cmp	r3, #255	@ 0xff
 8002ce6:	d907      	bls.n	8002cf8 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e037      	b.n	8002d68 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	ea42 0103 	orr.w	r1, r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_I2S_Init+0x1c0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6851      	ldr	r1, [r2, #4]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68d2      	ldr	r2, [r2, #12]
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6992      	ldr	r2, [r2, #24]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d36:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b30      	cmp	r3, #48	@ 0x30
 8002d3e:	d003      	beq.n	8002d48 <HAL_I2S_Init+0x198>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d46:	d107      	bne.n	8002d58 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	fffff040 	.word	0xfffff040
 8002d74:	00bb8000 	.word	0x00bb8000
 8002d78:	cccccccd 	.word	0xcccccccd

08002d7c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_I2S_Receive_DMA+0x1a>
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0a1      	b.n	8002ede <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2S_Receive_DMA+0x2e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e099      	b.n	8002ede <HAL_I2S_Receive_DMA+0x162>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d005      	beq.n	8002dca <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e089      	b.n	8002ede <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d002      	beq.n	8002df6 <HAL_I2S_Receive_DMA+0x7a>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d10a      	bne.n	8002e0c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8002e0a:	e005      	b.n	8002e18 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1c:	4a32      	ldr	r2, [pc, #200]	@ (8002ee8 <HAL_I2S_Receive_DMA+0x16c>)
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e24:	4a31      	ldr	r2, [pc, #196]	@ (8002eec <HAL_I2S_Receive_DMA+0x170>)
 8002e26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ef0 <HAL_I2S_Receive_DMA+0x174>)
 8002e2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e3e:	d10a      	bne.n	8002e56 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	4619      	mov	r1, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002e6e:	f7ff f987 	bl	8002180 <HAL_DMA_Start_IT>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00f      	beq.n	8002e98 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7c:	f043 0208 	orr.w	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e022      	b.n	8002ede <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002eb4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	0800315b 	.word	0x0800315b
 8002eec:	08003119 	.word	0x08003119
 8002ef0:	08003177 	.word	0x08003177

08002ef4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f08:	d003      	beq.n	8002f12 <HAL_I2S_DMAStop+0x1e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d155      	bne.n	8002fbe <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00f      	beq.n	8002f3a <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f98e 	bl	8002240 <HAL_DMA_Abort>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	f043 0208 	orr.w	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002f3a:	2364      	movs	r3, #100	@ 0x64
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2102      	movs	r1, #2
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f93e 	bl	80031c2 <I2S_WaitFlagStateUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002f64:	2364      	movs	r3, #100	@ 0x64
 8002f66:	2200      	movs	r2, #0
 8002f68:	2180      	movs	r1, #128	@ 0x80
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f929 	bl	80031c2 <I2S_WaitFlagStateUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode   = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0202 	bic.w	r2, r2, #2
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	e04d      	b.n	800305a <HAL_I2S_DMAStop+0x166>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc6:	d004      	beq.n	8002fd2 <HAL_I2S_DMAStop+0xde>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd0:	d143      	bne.n	800305a <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00f      	beq.n	8002ffa <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f92e 	bl	8002240 <HAL_DMA_Abort>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	f043 0208 	orr.w	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
        errorcode = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003008:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003038:	d10c      	bne.n	8003054 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      errorcode = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
 8003052:	e002      	b.n	800305a <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return errorcode;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d02d      	beq.n	80030ec <I2S_GetClockFreq+0x6c>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d12e      	bne.n	80030f2 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003094:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <I2S_GetClockFreq+0x88>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <I2S_GetClockFreq+0x88>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a8:	4a18      	ldr	r2, [pc, #96]	@ (800310c <I2S_GetClockFreq+0x8c>)
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e007      	b.n	80030c2 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <I2S_GetClockFreq+0x88>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ba:	4a15      	ldr	r2, [pc, #84]	@ (8003110 <I2S_GetClockFreq+0x90>)
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <I2S_GetClockFreq+0x88>)
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c8:	0f1b      	lsrs	r3, r3, #28
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80030d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <I2S_GetClockFreq+0x88>)
 80030d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	fb03 f202 	mul.w	r2, r3, r2
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	613b      	str	r3, [r7, #16]

      break;
 80030ea:	e005      	b.n	80030f8 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <I2S_GetClockFreq+0x94>)
 80030ee:	613b      	str	r3, [r7, #16]
      break;
 80030f0:	e002      	b.n	80030f8 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
      break;
 80030f6:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80030f8:	693b      	ldr	r3, [r7, #16]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400
 8003110:	017d7840 	.word	0x017d7840
 8003114:	00bb8000 	.word	0x00bb8000

08003118 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7fe faaf 	bl	80016b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003166:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7fe fab3 	bl	80016d4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0203 	bic.w	r2, r2, #3
 8003192:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	f043 0208 	orr.w	r2, r3, #8
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff ff59 	bl	800306c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d2:	f7fe fd6d 	bl	8001cb0 <HAL_GetTick>
 80031d6:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80031d8:	e018      	b.n	800320c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d014      	beq.n	800320c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80031e2:	f7fe fd65 	bl	8001cb0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d902      	bls.n	80031f8 <I2S_WaitFlagStateUntilTimeout+0x36>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e00f      	b.n	800322c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d1d7      	bne.n	80031da <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e29b      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8087 	beq.w	8003366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003258:	4b96      	ldr	r3, [pc, #600]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b04      	cmp	r3, #4
 8003262:	d00c      	beq.n	800327e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003264:	4b93      	ldr	r3, [pc, #588]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d112      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
 8003270:	4b90      	ldr	r3, [pc, #576]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327c:	d10b      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327e:	4b8d      	ldr	r3, [pc, #564]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06c      	beq.n	8003364 <HAL_RCC_OscConfig+0x130>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d168      	bne.n	8003364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e275      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x7a>
 80032a0:	4b84      	ldr	r3, [pc, #528]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a83      	ldr	r2, [pc, #524]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e02e      	b.n	800330c <HAL_RCC_OscConfig+0xd8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x9c>
 80032b6:	4b7f      	ldr	r3, [pc, #508]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7e      	ldr	r2, [pc, #504]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b7c      	ldr	r3, [pc, #496]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7b      	ldr	r2, [pc, #492]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xd8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 80032da:	4b76      	ldr	r3, [pc, #472]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a75      	ldr	r2, [pc, #468]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b73      	ldr	r3, [pc, #460]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a72      	ldr	r2, [pc, #456]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xd8>
 80032f4:	4b6f      	ldr	r3, [pc, #444]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6e      	ldr	r2, [pc, #440]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b6c      	ldr	r3, [pc, #432]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6b      	ldr	r2, [pc, #428]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fccc 	bl	8001cb0 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe fcc8 	bl	8001cb0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e229      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b61      	ldr	r3, [pc, #388]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fcb8 	bl	8001cb0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fcb4 	bl	8001cb0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e215      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b57      	ldr	r3, [pc, #348]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x110>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d069      	beq.n	8003446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003372:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b4d      	ldr	r3, [pc, #308]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x190>
 800338a:	4b4a      	ldr	r3, [pc, #296]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x17a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1e9      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b41      	ldr	r3, [pc, #260]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	493d      	ldr	r1, [pc, #244]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e040      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d023      	beq.n	8003414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b39      	ldr	r3, [pc, #228]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a38      	ldr	r2, [pc, #224]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fc6a 	bl	8001cb0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fe fc66 	bl	8001cb0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1c7      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b30      	ldr	r3, [pc, #192]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b2d      	ldr	r3, [pc, #180]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4929      	ldr	r1, [pc, #164]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003414:	4b27      	ldr	r3, [pc, #156]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a26      	ldr	r2, [pc, #152]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fc46 	bl	8001cb0 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe fc42 	bl	8001cb0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e1a3      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d038      	beq.n	80034c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d019      	beq.n	800348e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345e:	4a15      	ldr	r2, [pc, #84]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe fc23 	bl	8001cb0 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7fe fc1f 	bl	8001cb0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e180      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003480:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x23a>
 800348c:	e01a      	b.n	80034c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003492:	4a08      	ldr	r2, [pc, #32]	@ (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fc09 	bl	8001cb0 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fc05 	bl	8001cb0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d903      	bls.n	80034b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e166      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
 80034b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	4b92      	ldr	r3, [pc, #584]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a4 	beq.w	800361a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d2:	4b8c      	ldr	r3, [pc, #560]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034de:	4b89      	ldr	r3, [pc, #548]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	4a88      	ldr	r2, [pc, #544]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ea:	4b86      	ldr	r3, [pc, #536]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fa:	4b83      	ldr	r3, [pc, #524]	@ (8003708 <HAL_RCC_OscConfig+0x4d4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003506:	4b80      	ldr	r3, [pc, #512]	@ (8003708 <HAL_RCC_OscConfig+0x4d4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a7f      	ldr	r2, [pc, #508]	@ (8003708 <HAL_RCC_OscConfig+0x4d4>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003512:	f7fe fbcd 	bl	8001cb0 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7fe fbc9 	bl	8001cb0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	@ 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e12a      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352c:	4b76      	ldr	r3, [pc, #472]	@ (8003708 <HAL_RCC_OscConfig+0x4d4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x31a>
 8003540:	4b70      	ldr	r3, [pc, #448]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003544:	4a6f      	ldr	r2, [pc, #444]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	@ 0x70
 800354c:	e02d      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x33c>
 8003556:	4b6b      	ldr	r3, [pc, #428]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	4a6a      	ldr	r2, [pc, #424]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	@ 0x70
 8003562:	4b68      	ldr	r3, [pc, #416]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	4a67      	ldr	r2, [pc, #412]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	6713      	str	r3, [r2, #112]	@ 0x70
 800356e:	e01c      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d10c      	bne.n	8003592 <HAL_RCC_OscConfig+0x35e>
 8003578:	4b62      	ldr	r3, [pc, #392]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	4a61      	ldr	r2, [pc, #388]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	6713      	str	r3, [r2, #112]	@ 0x70
 8003584:	4b5f      	ldr	r3, [pc, #380]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4a5e      	ldr	r2, [pc, #376]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003590:	e00b      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
 8003592:	4b5c      	ldr	r3, [pc, #368]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	4a5b      	ldr	r2, [pc, #364]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	@ 0x70
 800359e:	4b59      	ldr	r3, [pc, #356]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	4a58      	ldr	r2, [pc, #352]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d015      	beq.n	80035de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe fb7d 	bl	8001cb0 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe fb79 	bl	8001cb0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0d8      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ee      	beq.n	80035ba <HAL_RCC_OscConfig+0x386>
 80035dc:	e014      	b.n	8003608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe fb67 	bl	8001cb0 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fe fb63 	bl	8001cb0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0c2      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fc:	4b41      	ldr	r3, [pc, #260]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ee      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d105      	bne.n	800361a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360e:	4b3d      	ldr	r3, [pc, #244]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	4a3c      	ldr	r2, [pc, #240]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80ae 	beq.w	8003780 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003624:	4b37      	ldr	r3, [pc, #220]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d06d      	beq.n	800370c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d14b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b32      	ldr	r3, [pc, #200]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fb34 	bl	8001cb0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fb30 	bl	8001cb0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e091      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	071b      	lsls	r3, r3, #28
 8003696:	491b      	ldr	r1, [pc, #108]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369c:	4b19      	ldr	r3, [pc, #100]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a18      	ldr	r2, [pc, #96]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fb02 	bl	8001cb0 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fafe 	bl	8001cb0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e05f      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x47c>
 80036ce:	e057      	b.n	8003780 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fae8 	bl	8001cb0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fae4 	bl	8001cb0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e045      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4b0>
 8003702:	e03d      	b.n	8003780 <HAL_RCC_OscConfig+0x54c>
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800370c:	4b1f      	ldr	r3, [pc, #124]	@ (800378c <HAL_RCC_OscConfig+0x558>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d030      	beq.n	800377c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d129      	bne.n	800377c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d122      	bne.n	800377c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003742:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003744:	4293      	cmp	r3, r2
 8003746:	d119      	bne.n	800377c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	3b01      	subs	r3, #1
 8003756:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d10f      	bne.n	800377c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0d0      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d910      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b67      	ldr	r3, [pc, #412]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 020f 	bic.w	r2, r3, #15
 80037be:	4965      	ldr	r1, [pc, #404]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a58      	ldr	r2, [pc, #352]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 80037f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d040      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d115      	bne.n	8003872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b41      	ldr	r3, [pc, #260]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e073      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06b      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b39      	ldr	r3, [pc, #228]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4936      	ldr	r1, [pc, #216]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7fe fa14 	bl	8001cb0 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fa10 	bl	8001cb0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e053      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d210      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 020f 	bic.w	r2, r3, #15
 80038ca:	4922      	ldr	r1, [pc, #136]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x1cc>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1d0>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1d4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe f970 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00
 8003958:	40023800 	.word	0x40023800
 800395c:	08009388 	.word	0x08009388
 8003960:	20000040 	.word	0x20000040
 8003964:	20000044 	.word	0x20000044

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b090      	sub	sp, #64	@ 0x40
 800396e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	637b      	str	r3, [r7, #52]	@ 0x34
 8003974:	2300      	movs	r3, #0
 8003976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003978:	2300      	movs	r3, #0
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003980:	4b59      	ldr	r3, [pc, #356]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d00d      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 800398c:	2b08      	cmp	r3, #8
 800398e:	f200 80a1 	bhi.w	8003ad4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800399a:	e09b      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b53      	ldr	r3, [pc, #332]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x184>)
 800399e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039a0:	e09b      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039a6:	e098      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039b2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d028      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039be:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	2200      	movs	r2, #0
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039d0:	2100      	movs	r1, #0
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d4:	fb03 f201 	mul.w	r2, r3, r1
 80039d8:	2300      	movs	r3, #0
 80039da:	fb00 f303 	mul.w	r3, r0, r3
 80039de:	4413      	add	r3, r2
 80039e0:	4a43      	ldr	r2, [pc, #268]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e2:	fba0 1202 	umull	r1, r2, r0, r2
 80039e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e8:	460a      	mov	r2, r1
 80039ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ee:	4413      	add	r3, r2
 80039f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f4:	2200      	movs	r2, #0
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	61fa      	str	r2, [r7, #28]
 80039fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a02:	f7fc fc6d 	bl	80002e0 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a0e:	e053      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a10:	4b35      	ldr	r3, [pc, #212]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	2200      	movs	r2, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	617a      	str	r2, [r7, #20]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a22:	f04f 0b00 	mov.w	fp, #0
 8003a26:	4652      	mov	r2, sl
 8003a28:	465b      	mov	r3, fp
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a38:	0150      	lsls	r0, r2, #5
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a42:	eb63 090b 	sbc.w	r9, r3, fp
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	00eb      	lsls	r3, r5, #3
 8003a6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a70:	00e2      	lsls	r2, r4, #3
 8003a72:	4614      	mov	r4, r2
 8003a74:	461d      	mov	r5, r3
 8003a76:	eb14 030a 	adds.w	r3, r4, sl
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	eb45 030b 	adc.w	r3, r5, fp
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	028b      	lsls	r3, r1, #10
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a98:	4621      	mov	r1, r4
 8003a9a:	028a      	lsls	r2, r1, #10
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	60fa      	str	r2, [r7, #12]
 8003aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aac:	f7fc fc18 	bl	80002e0 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x184>)
 8003ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3740      	adds	r7, #64	@ 0x40
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	017d7840 	.word	0x017d7840

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b1c:	4b69      	ldr	r3, [pc, #420]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a68      	ldr	r2, [pc, #416]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b30:	4964      	ldr	r1, [pc, #400]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d017      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	4959      	ldr	r1, [pc, #356]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	494a      	ldr	r1, [pc, #296]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba8:	d101      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 808b 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	4a39      	ldr	r2, [pc, #228]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be4:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf0:	4b35      	ldr	r3, [pc, #212]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a34      	ldr	r2, [pc, #208]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fe f858 	bl	8001cb0 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fe f854 	bl	8001cb0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	@ 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e38f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c16:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c22:	4b28      	ldr	r3, [pc, #160]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d035      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d02e      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c40:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c56:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c68:	4b16      	ldr	r3, [pc, #88]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d114      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f81c 	bl	8001cb0 <HAL_GetTick>
 8003c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fe f818 	bl	8001cb0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e351      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003caa:	d111      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cac:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	4901      	ldr	r1, [pc, #4]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	0ffffcff 	.word	0x0ffffcff
 8003cd0:	4bac      	ldr	r3, [pc, #688]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4aab      	ldr	r2, [pc, #684]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	4ba9      	ldr	r3, [pc, #676]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	49a6      	ldr	r1, [pc, #664]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfa:	4ba2      	ldr	r3, [pc, #648]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d00:	4aa0      	ldr	r2, [pc, #640]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	499b      	ldr	r1, [pc, #620]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d28:	4b96      	ldr	r3, [pc, #600]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d36:	4993      	ldr	r1, [pc, #588]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d58:	498a      	ldr	r1, [pc, #552]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d6c:	4b85      	ldr	r3, [pc, #532]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7a:	4982      	ldr	r1, [pc, #520]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4979      	ldr	r1, [pc, #484]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db0:	4b74      	ldr	r3, [pc, #464]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	4971      	ldr	r1, [pc, #452]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd8:	f023 020c 	bic.w	r2, r3, #12
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de0:	4968      	ldr	r1, [pc, #416]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df4:	4b63      	ldr	r3, [pc, #396]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e02:	4960      	ldr	r1, [pc, #384]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e16:	4b5b      	ldr	r3, [pc, #364]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	4957      	ldr	r1, [pc, #348]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e38:	4b52      	ldr	r3, [pc, #328]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	494f      	ldr	r1, [pc, #316]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	4946      	ldr	r1, [pc, #280]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e7c:	4b41      	ldr	r3, [pc, #260]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8a:	493e      	ldr	r1, [pc, #248]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e9e:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eac:	4935      	ldr	r1, [pc, #212]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec0:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ece:	492d      	ldr	r1, [pc, #180]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d011      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ee2:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef0:	4924      	ldr	r1, [pc, #144]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f00:	d101      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f22:	4b18      	ldr	r3, [pc, #96]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f30:	4914      	ldr	r1, [pc, #80]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f44:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f54:	490b      	ldr	r1, [pc, #44]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00f      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f78:	4902      	ldr	r1, [pc, #8]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f80:	e002      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f94:	4b8a      	ldr	r3, [pc, #552]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	4986      	ldr	r1, [pc, #536]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fb8:	4b81      	ldr	r3, [pc, #516]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc8:	497d      	ldr	r1, [pc, #500]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d006      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80d6 	beq.w	8004190 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fe4:	4b76      	ldr	r3, [pc, #472]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a75      	ldr	r2, [pc, #468]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fd fe5e 	bl	8001cb0 <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ff8:	f7fd fe5a 	bl	8001cb0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	@ 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e195      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400a:	4b6d      	ldr	r3, [pc, #436]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d021      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11d      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800402a:	4b65      	ldr	r3, [pc, #404]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004038:	4b61      	ldr	r3, [pc, #388]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403e:	0e1b      	lsrs	r3, r3, #24
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	019a      	lsls	r2, r3, #6
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	071b      	lsls	r3, r3, #28
 800405e:	4958      	ldr	r1, [pc, #352]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004090:	d129      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004092:	4b4b      	ldr	r3, [pc, #300]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040a0:	4b47      	ldr	r3, [pc, #284]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a6:	0f1b      	lsrs	r3, r3, #28
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	019a      	lsls	r2, r3, #6
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	071b      	lsls	r3, r3, #28
 80040c6:	493e      	ldr	r1, [pc, #248]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040ce:	4b3c      	ldr	r3, [pc, #240]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d4:	f023 021f 	bic.w	r2, r3, #31
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	3b01      	subs	r3, #1
 80040de:	4938      	ldr	r1, [pc, #224]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01d      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040f2:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f8:	0e1b      	lsrs	r3, r3, #24
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004100:	4b2f      	ldr	r3, [pc, #188]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004106:	0f1b      	lsrs	r3, r3, #28
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	4926      	ldr	r1, [pc, #152]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	019a      	lsls	r2, r3, #6
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	071b      	lsls	r3, r3, #28
 8004156:	491a      	ldr	r1, [pc, #104]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800415e:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416a:	f7fd fda1 	bl	8001cb0 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004172:	f7fd fd9d 	bl	8001cb0 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	@ 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0d8      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004184:	4b0e      	ldr	r3, [pc, #56]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b01      	cmp	r3, #1
 8004194:	f040 80ce 	bne.w	8004334 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a08      	ldr	r2, [pc, #32]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fd fd84 	bl	8001cb0 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041ac:	f7fd fd80 	bl	8001cb0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	@ 0x64
 80041b8:	d904      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0bb      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d0:	d0ec      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02e      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d12a      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041fa:	4b51      	ldr	r3, [pc, #324]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004208:	4b4d      	ldr	r3, [pc, #308]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	0f1b      	lsrs	r3, r3, #28
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	4944      	ldr	r1, [pc, #272]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004236:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800423c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	493d      	ldr	r1, [pc, #244]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d022      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004264:	d11d      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004266:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	0e1b      	lsrs	r3, r3, #24
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004274:	4b32      	ldr	r3, [pc, #200]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	0f1b      	lsrs	r3, r3, #28
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	431a      	orrs	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	4929      	ldr	r1, [pc, #164]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ae:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042bc:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	019a      	lsls	r2, r3, #6
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	431a      	orrs	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	071b      	lsls	r3, r3, #28
 80042e2:	4917      	ldr	r1, [pc, #92]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	4911      	ldr	r1, [pc, #68]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004300:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0e      	ldr	r2, [pc, #56]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fd fcd0 	bl	8001cb0 <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004314:	f7fd fccc 	bl	8001cb0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e007      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800432e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004332:	d1ef      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800

08004344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e09d      	b.n	8004492 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004366:	d009      	beq.n	800437c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
 800436e:	e005      	b.n	800437c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd fad8 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043bc:	d902      	bls.n	80043c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e002      	b.n	80043ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80043d2:	d007      	beq.n	80043e4 <HAL_SPI_Init+0xa0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043dc:	d002      	beq.n	80043e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004426:	ea42 0103 	orr.w	r1, r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	f003 0204 	and.w	r2, r3, #4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004460:	ea42 0103 	orr.w	r1, r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b088      	sub	sp, #32
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	603b      	str	r3, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_SPI_Transmit+0x22>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e15f      	b.n	800477c <HAL_SPI_Transmit+0x2e2>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c4:	f7fd fbf4 	bl	8001cb0 <HAL_GetTick>
 80044c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044de:	e148      	b.n	8004772 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Transmit+0x52>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044f0:	e13f      	b.n	8004772 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2203      	movs	r2, #3
 80044f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453c:	d10f      	bne.n	800455e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800455c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b40      	cmp	r3, #64	@ 0x40
 800456a:	d007      	beq.n	800457c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800457a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004584:	d94f      	bls.n	8004626 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_SPI_Transmit+0xfa>
 800458e:	8afb      	ldrh	r3, [r7, #22]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d142      	bne.n	800461a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	1c9a      	adds	r2, r3, #2
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045b8:	e02f      	b.n	800461a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d112      	bne.n	80045ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045ec:	e015      	b.n	800461a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ee:	f7fd fb5f 	bl	8001cb0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d803      	bhi.n	8004606 <HAL_SPI_Transmit+0x16c>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d102      	bne.n	800460c <HAL_SPI_Transmit+0x172>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004618:	e0ab      	b.n	8004772 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ca      	bne.n	80045ba <HAL_SPI_Transmit+0x120>
 8004624:	e080      	b.n	8004728 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0x19a>
 800462e:	8afb      	ldrh	r3, [r7, #22]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d174      	bne.n	800471e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d912      	bls.n	8004664 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464e:	1c9a      	adds	r2, r3, #2
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b02      	subs	r3, #2
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004662:	e05c      	b.n	800471e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800468a:	e048      	b.n	800471e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d12b      	bne.n	80046f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d912      	bls.n	80046ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	1c9a      	adds	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b02      	subs	r3, #2
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046c8:	e029      	b.n	800471e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046f0:	e015      	b.n	800471e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f2:	f7fd fadd 	bl	8001cb0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d803      	bhi.n	800470a <HAL_SPI_Transmit+0x270>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d102      	bne.n	8004710 <HAL_SPI_Transmit+0x276>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800471c:	e029      	b.n	8004772 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1b1      	bne.n	800468c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fb69 	bl	8004e04 <SPI_EndRxTxTransaction>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e003      	b.n	8004772 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800477a:	7ffb      	ldrb	r3, [r7, #31]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	@ 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004792:	2301      	movs	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x26>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e20a      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x43c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b2:	f7fd fa7d 	bl	8001cb0 <HAL_GetTick>
 80047b6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047ce:	7efb      	ldrb	r3, [r7, #27]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d00e      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x6e>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047da:	d106      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x66>
 80047e4:	7efb      	ldrb	r3, [r7, #27]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d003      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80047f0:	e1e0      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x80>
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800480a:	e1d3      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b04      	cmp	r3, #4
 8004816:	d003      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2205      	movs	r2, #5
 800481c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	887a      	ldrh	r2, [r7, #2]
 8004838:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004862:	d802      	bhi.n	800486a <HAL_SPI_TransmitReceive+0xe6>
 8004864:	8a3b      	ldrh	r3, [r7, #16]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d908      	bls.n	800487c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	e007      	b.n	800488c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	2b40      	cmp	r3, #64	@ 0x40
 8004898:	d007      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048b2:	f240 8081 	bls.w	80049b8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x140>
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d16d      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e8:	e05a      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d11b      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x1ac>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x1ac>
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	2b01      	cmp	r3, #1
 8004906:	d113      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d11c      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x1f4>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	b292      	uxth	r2, r2
 8004956:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	1c9a      	adds	r2, r3, #2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004974:	2301      	movs	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004978:	f7fd f99a 	bl	8001cb0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004984:	429a      	cmp	r2, r3
 8004986:	d80b      	bhi.n	80049a0 <HAL_SPI_TransmitReceive+0x21c>
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d007      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800499e:	e109      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d19f      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x166>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d199      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x166>
 80049b6:	e0e3      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x244>
 80049c0:	8a7b      	ldrh	r3, [r7, #18]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f040 80cf 	bne.w	8004b66 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d912      	bls.n	80049f8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b02      	subs	r3, #2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049f6:	e0b6      	b.n	8004b66 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1e:	e0a2      	b.n	8004b66 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d134      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x314>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02f      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x314>
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d12c      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d912      	bls.n	8004a6e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	881a      	ldrh	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	1c9a      	adds	r2, r3, #2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b02      	subs	r3, #2
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a6c:	e012      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d148      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x3b4>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d042      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d923      	bls.n	8004b06 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	b292      	uxth	r2, r2
 8004aca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b02      	subs	r3, #2
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d81f      	bhi.n	8004b34 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e016      	b.n	8004b34 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f103 020c 	add.w	r2, r3, #12
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b34:	2301      	movs	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b38:	f7fd f8ba 	bl	8001cb0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d803      	bhi.n	8004b50 <HAL_SPI_TransmitReceive+0x3cc>
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d102      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x3d2>
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d107      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004b64:	e026      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f47f af57 	bne.w	8004a20 <HAL_SPI_TransmitReceive+0x29c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f47f af50 	bne.w	8004a20 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f93d 	bl	8004e04 <SPI_EndRxTxTransaction>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e003      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	@ 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bd8:	f7fd f86a 	bl	8001cb0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004be8:	f7fd f862 	bl	8001cb0 <HAL_GetTick>
 8004bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bee:	4b39      	ldr	r3, [pc, #228]	@ (8004cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	015b      	lsls	r3, r3, #5
 8004bf4:	0d1b      	lsrs	r3, r3, #20
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfe:	e054      	b.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d050      	beq.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c08:	f7fd f852 	bl	8001cb0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d902      	bls.n	8004c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d13d      	bne.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c36:	d111      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c40:	d004      	beq.n	8004c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4a:	d107      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c64:	d10f      	bne.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e017      	b.n	8004cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d19b      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000040 	.word	0x20000040

08004cd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	@ 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cea:	f7fc ffe1 	bl	8001cb0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004cfa:	f7fc ffd9 	bl	8001cb0 <HAL_GetTick>
 8004cfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d08:	4b3d      	ldr	r3, [pc, #244]	@ (8004e00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	00da      	lsls	r2, r3, #3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	0d1b      	lsrs	r3, r3, #20
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d20:	e060      	b.n	8004de4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d28:	d107      	bne.n	8004d3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d050      	beq.n	8004de4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d42:	f7fc ffb5 	bl	8001cb0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d902      	bls.n	8004d58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d13d      	bne.n	8004dd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d70:	d111      	bne.n	8004d96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7a:	d004      	beq.n	8004d86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d84:	d107      	bne.n	8004d96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	d10f      	bne.n	8004dc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e010      	b.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d196      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3728      	adds	r7, #40	@ 0x28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000040 	.word	0x20000040

08004e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff ff5b 	bl	8004cd8 <SPI_WaitFifoStateUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e046      	b.n	8004ec6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e38:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <SPI_EndRxTxTransaction+0xcc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a25      	ldr	r2, [pc, #148]	@ (8004ed4 <SPI_EndRxTxTransaction+0xd0>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	0d5b      	lsrs	r3, r3, #21
 8004e44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e56:	d112      	bne.n	8004e7e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	@ 0x80
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff feb0 	bl	8004bc8 <SPI_WaitFlagStateUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e023      	b.n	8004ec6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	2b80      	cmp	r3, #128	@ 0x80
 8004e96:	d0f2      	beq.n	8004e7e <SPI_EndRxTxTransaction+0x7a>
 8004e98:	e000      	b.n	8004e9c <SPI_EndRxTxTransaction+0x98>
        break;
 8004e9a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff ff15 	bl	8004cd8 <SPI_WaitFifoStateUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e000      	b.n	8004ec6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000040 	.word	0x20000040
 8004ed4:	165e9f81 	.word	0x165e9f81

08004ed8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004edc:	4904      	ldr	r1, [pc, #16]	@ (8004ef0 <MX_FATFS_Init+0x18>)
 8004ede:	4805      	ldr	r0, [pc, #20]	@ (8004ef4 <MX_FATFS_Init+0x1c>)
 8004ee0:	f003 f8fe 	bl	80080e0 <FATFS_LinkDriver>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <MX_FATFS_Init+0x20>)
 8004eea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004eec:	bf00      	nop
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20003264 	.word	0x20003264
 8004ef4:	2000004c 	.word	0x2000004c
 8004ef8:	20003260 	.word	0x20003260

08004efc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fea3 	bl	8000c64 <SD_disk_initialize>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	4603      	mov	r3, r0
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb ff7a 	bl	8000e30 <SD_disk_status>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8004f58:	7bf8      	ldrb	r0, [r7, #15]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	f7fb ff7c 	bl	8000e5c <SD_disk_read>
 8004f64:	4603      	mov	r3, r0
 8004f66:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 8004f80:	7bf8      	ldrb	r0, [r7, #15]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	f7fb ffd2 	bl	8000f30 <SD_disk_write>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	603a      	str	r2, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	79b9      	ldrb	r1, [r7, #6]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc f842 	bl	8001038 <SD_disk_ioctl>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	4a08      	ldr	r2, [pc, #32]	@ (8004ff0 <disk_status+0x30>)
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	79fa      	ldrb	r2, [r7, #7]
 8004fd8:	4905      	ldr	r1, [pc, #20]	@ (8004ff0 <disk_status+0x30>)
 8004fda:	440a      	add	r2, r1
 8004fdc:	7a12      	ldrb	r2, [r2, #8]
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4798      	blx	r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20003490 	.word	0x20003490

08004ff4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	4a0d      	ldr	r2, [pc, #52]	@ (800503c <disk_initialize+0x48>)
 8005006:	5cd3      	ldrb	r3, [r2, r3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d111      	bne.n	8005030 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	4a0b      	ldr	r2, [pc, #44]	@ (800503c <disk_initialize+0x48>)
 8005010:	2101      	movs	r1, #1
 8005012:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	4a09      	ldr	r2, [pc, #36]	@ (800503c <disk_initialize+0x48>)
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	79fa      	ldrb	r2, [r7, #7]
 8005022:	4906      	ldr	r1, [pc, #24]	@ (800503c <disk_initialize+0x48>)
 8005024:	440a      	add	r2, r1
 8005026:	7a12      	ldrb	r2, [r2, #8]
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20003490 	.word	0x20003490

08005040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4603      	mov	r3, r0
 800504e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	4a0a      	ldr	r2, [pc, #40]	@ (800507c <disk_read+0x3c>)
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	689c      	ldr	r4, [r3, #8]
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	4a07      	ldr	r2, [pc, #28]	@ (800507c <disk_read+0x3c>)
 8005060:	4413      	add	r3, r2
 8005062:	7a18      	ldrb	r0, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	47a0      	blx	r4
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
}
 8005072:	4618      	mov	r0, r3
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd90      	pop	{r4, r7, pc}
 800507a:	bf00      	nop
 800507c:	20003490 	.word	0x20003490

08005080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	4a0a      	ldr	r2, [pc, #40]	@ (80050bc <disk_write+0x3c>)
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68dc      	ldr	r4, [r3, #12]
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	4a07      	ldr	r2, [pc, #28]	@ (80050bc <disk_write+0x3c>)
 80050a0:	4413      	add	r3, r2
 80050a2:	7a18      	ldrb	r0, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	47a0      	blx	r4
 80050ac:	4603      	mov	r3, r0
 80050ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20003490 	.word	0x20003490

080050c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	603a      	str	r2, [r7, #0]
 80050ca:	71fb      	strb	r3, [r7, #7]
 80050cc:	460b      	mov	r3, r1
 80050ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <disk_ioctl+0x38>)
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	79fa      	ldrb	r2, [r7, #7]
 80050de:	4906      	ldr	r1, [pc, #24]	@ (80050f8 <disk_ioctl+0x38>)
 80050e0:	440a      	add	r2, r1
 80050e2:	7a10      	ldrb	r0, [r2, #8]
 80050e4:	79b9      	ldrb	r1, [r7, #6]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4798      	blx	r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20003490 	.word	0x20003490

080050fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	b21a      	sxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b21b      	sxth	r3, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	b21b      	sxth	r3, r3
 800511c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800511e:	89fb      	ldrh	r3, [r7, #14]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3303      	adds	r3, #3
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	3202      	adds	r2, #2
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	3201      	adds	r2, #1
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
	return rv;
 8005164:	68fb      	ldr	r3, [r7, #12]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	1c53      	adds	r3, r2, #1
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	6179      	str	r1, [r7, #20]
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3b01      	subs	r3, #1
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f1      	bne.n	800521a <mem_cpy+0x1a>
	}
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005242:	b480      	push	{r7}
 8005244:	b087      	sub	sp, #28
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	617a      	str	r2, [r7, #20]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3b01      	subs	r3, #1
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f3      	bne.n	8005252 <mem_set+0x10>
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	@ 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	61fa      	str	r2, [r7, #28]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	61ba      	str	r2, [r7, #24]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	1acb      	subs	r3, r1, r3
 80052a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <mem_cmp+0x40>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0eb      	beq.n	8005290 <mem_cmp+0x18>

	return r;
 80052b8:	697b      	ldr	r3, [r7, #20]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3724      	adds	r7, #36	@ 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80052d0:	e002      	b.n	80052d8 <chk_chr+0x12>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3301      	adds	r3, #1
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <chk_chr+0x26>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d1f2      	bne.n	80052d2 <chk_chr+0xc>
	return *str;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	781b      	ldrb	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e029      	b.n	8005364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005310:	4a27      	ldr	r2, [pc, #156]	@ (80053b0 <chk_lock+0xb4>)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	4413      	add	r3, r2
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01d      	beq.n	800535a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800531e:	4a24      	ldr	r2, [pc, #144]	@ (80053b0 <chk_lock+0xb4>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	4413      	add	r3, r2
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d116      	bne.n	800535e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005330:	4a1f      	ldr	r2, [pc, #124]	@ (80053b0 <chk_lock+0xb4>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	4413      	add	r3, r2
 8005338:	3304      	adds	r3, #4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005340:	429a      	cmp	r2, r3
 8005342:	d10c      	bne.n	800535e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005344:	4a1a      	ldr	r2, [pc, #104]	@ (80053b0 <chk_lock+0xb4>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	4413      	add	r3, r2
 800534c:	3308      	adds	r3, #8
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005358:	e007      	b.n	800536a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d9d2      	bls.n	8005310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d109      	bne.n	8005384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <chk_lock+0x80>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d101      	bne.n	8005380 <chk_lock+0x84>
 800537c:	2300      	movs	r3, #0
 800537e:	e010      	b.n	80053a2 <chk_lock+0xa6>
 8005380:	2312      	movs	r3, #18
 8005382:	e00e      	b.n	80053a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <chk_lock+0xa0>
 800538a:	4a09      	ldr	r2, [pc, #36]	@ (80053b0 <chk_lock+0xb4>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	4413      	add	r3, r2
 8005392:	330c      	adds	r3, #12
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539a:	d101      	bne.n	80053a0 <chk_lock+0xa4>
 800539c:	2310      	movs	r3, #16
 800539e:	e000      	b.n	80053a2 <chk_lock+0xa6>
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20003270 	.word	0x20003270

080053b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e002      	b.n	80053c6 <enq_lock+0x12>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3301      	adds	r3, #1
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d806      	bhi.n	80053da <enq_lock+0x26>
 80053cc:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <enq_lock+0x40>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4413      	add	r3, r2
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f2      	bne.n	80053c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20003270 	.word	0x20003270

080053f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e01f      	b.n	8005448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005408:	4a41      	ldr	r2, [pc, #260]	@ (8005510 <inc_lock+0x118>)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d113      	bne.n	8005442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800541a:	4a3d      	ldr	r2, [pc, #244]	@ (8005510 <inc_lock+0x118>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	3304      	adds	r3, #4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800542a:	429a      	cmp	r2, r3
 800542c:	d109      	bne.n	8005442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800542e:	4a38      	ldr	r2, [pc, #224]	@ (8005510 <inc_lock+0x118>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	4413      	add	r3, r2
 8005436:	3308      	adds	r3, #8
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800543e:	429a      	cmp	r2, r3
 8005440:	d006      	beq.n	8005450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d9dc      	bls.n	8005408 <inc_lock+0x10>
 800544e:	e000      	b.n	8005452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d132      	bne.n	80054be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e002      	b.n	8005464 <inc_lock+0x6c>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d806      	bhi.n	8005478 <inc_lock+0x80>
 800546a:	4a29      	ldr	r2, [pc, #164]	@ (8005510 <inc_lock+0x118>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f2      	bne.n	800545e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d101      	bne.n	8005482 <inc_lock+0x8a>
 800547e:	2300      	movs	r3, #0
 8005480:	e040      	b.n	8005504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4922      	ldr	r1, [pc, #136]	@ (8005510 <inc_lock+0x118>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	440b      	add	r3, r1
 800548e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	491e      	ldr	r1, [pc, #120]	@ (8005510 <inc_lock+0x118>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	440b      	add	r3, r1
 800549c:	3304      	adds	r3, #4
 800549e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	491a      	ldr	r1, [pc, #104]	@ (8005510 <inc_lock+0x118>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	440b      	add	r3, r1
 80054ac:	3308      	adds	r3, #8
 80054ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054b0:	4a17      	ldr	r2, [pc, #92]	@ (8005510 <inc_lock+0x118>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4413      	add	r3, r2
 80054b8:	330c      	adds	r3, #12
 80054ba:	2200      	movs	r2, #0
 80054bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d009      	beq.n	80054d8 <inc_lock+0xe0>
 80054c4:	4a12      	ldr	r2, [pc, #72]	@ (8005510 <inc_lock+0x118>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4413      	add	r3, r2
 80054cc:	330c      	adds	r3, #12
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <inc_lock+0xe0>
 80054d4:	2300      	movs	r3, #0
 80054d6:	e015      	b.n	8005504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <inc_lock+0xf8>
 80054de:	4a0c      	ldr	r2, [pc, #48]	@ (8005510 <inc_lock+0x118>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	4413      	add	r3, r2
 80054e6:	330c      	adds	r3, #12
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	e001      	b.n	80054f4 <inc_lock+0xfc>
 80054f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054f4:	4906      	ldr	r1, [pc, #24]	@ (8005510 <inc_lock+0x118>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	440b      	add	r3, r1
 80054fc:	330c      	adds	r3, #12
 80054fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20003270 	.word	0x20003270

08005514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	607b      	str	r3, [r7, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d825      	bhi.n	8005574 <dec_lock+0x60>
		n = Files[i].ctr;
 8005528:	4a17      	ldr	r2, [pc, #92]	@ (8005588 <dec_lock+0x74>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4413      	add	r3, r2
 8005530:	330c      	adds	r3, #12
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005536:	89fb      	ldrh	r3, [r7, #14]
 8005538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800553c:	d101      	bne.n	8005542 <dec_lock+0x2e>
 800553e:	2300      	movs	r3, #0
 8005540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <dec_lock+0x3a>
 8005548:	89fb      	ldrh	r3, [r7, #14]
 800554a:	3b01      	subs	r3, #1
 800554c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800554e:	4a0e      	ldr	r2, [pc, #56]	@ (8005588 <dec_lock+0x74>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	4413      	add	r3, r2
 8005556:	330c      	adds	r3, #12
 8005558:	89fa      	ldrh	r2, [r7, #14]
 800555a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800555c:	89fb      	ldrh	r3, [r7, #14]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <dec_lock+0x5a>
 8005562:	4a09      	ldr	r2, [pc, #36]	@ (8005588 <dec_lock+0x74>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	4413      	add	r3, r2
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	737b      	strb	r3, [r7, #13]
 8005572:	e001      	b.n	8005578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005574:	2302      	movs	r3, #2
 8005576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005578:	7b7b      	ldrb	r3, [r7, #13]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20003270 	.word	0x20003270

0800558c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e010      	b.n	80055bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800559a:	4a0d      	ldr	r2, [pc, #52]	@ (80055d0 <clear_lock+0x44>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	4413      	add	r3, r2
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d105      	bne.n	80055b6 <clear_lock+0x2a>
 80055aa:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <clear_lock+0x44>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d9eb      	bls.n	800559a <clear_lock+0xe>
	}
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20003270 	.word	0x20003270

080055d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d034      	beq.n	8005652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7858      	ldrb	r0, [r3, #1]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055f8:	2301      	movs	r3, #1
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	f7ff fd40 	bl	8005080 <disk_write>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	e022      	b.n	8005652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	429a      	cmp	r2, r3
 8005620:	d217      	bcs.n	8005652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e010      	b.n	800564c <sync_window+0x78>
					wsect += fs->fsize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7858      	ldrb	r0, [r3, #1]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800563e:	2301      	movs	r3, #1
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	f7ff fd1d 	bl	8005080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3b01      	subs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d8eb      	bhi.n	800562a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d01b      	beq.n	80056ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ffad 	bl	80055d4 <sync_window>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d113      	bne.n	80056ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7858      	ldrb	r0, [r3, #1]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800568e:	2301      	movs	r3, #1
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	f7ff fcd5 	bl	8005040 <disk_read>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff87 	bl	80055d4 <sync_window>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d159      	bne.n	8005784 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d149      	bne.n	800576c <sync_fs+0xb4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d145      	bne.n	800576c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	899b      	ldrh	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	2100      	movs	r1, #0
 80056ee:	f7ff fda8 	bl	8005242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3338      	adds	r3, #56	@ 0x38
 80056f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80056fa:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fd37 	bl	8005172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3338      	adds	r3, #56	@ 0x38
 8005708:	4921      	ldr	r1, [pc, #132]	@ (8005790 <sync_fs+0xd8>)
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fd4c 	bl	80051a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3338      	adds	r3, #56	@ 0x38
 8005714:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005718:	491e      	ldr	r1, [pc, #120]	@ (8005794 <sync_fs+0xdc>)
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fd44 	bl	80051a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3338      	adds	r3, #56	@ 0x38
 8005724:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff fd3a 	bl	80051a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3338      	adds	r3, #56	@ 0x38
 8005738:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7ff fd30 	bl	80051a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7858      	ldrb	r0, [r3, #1]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005760:	2301      	movs	r3, #1
 8005762:	f7ff fc8d 	bl	8005080 <disk_write>
			fs->fsi_flag = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2200      	movs	r2, #0
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fca3 	bl	80050c0 <disk_ioctl>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <sync_fs+0xcc>
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	41615252 	.word	0x41615252
 8005794:	61417272 	.word	0x61417272

08005798 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	3b02      	subs	r3, #2
 80057a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	3b02      	subs	r3, #2
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d301      	bcc.n	80057b8 <clust2sect+0x20>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e008      	b.n	80057ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	895b      	ldrh	r3, [r3, #10]
 80057bc:	461a      	mov	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	fb03 f202 	mul.w	r2, r3, r2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	4413      	add	r3, r2
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d904      	bls.n	80057f6 <get_fat+0x20>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80057f6:	2301      	movs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e0ba      	b.n	8005972 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	f000 8082 	beq.w	8005910 <get_fat+0x13a>
 800580c:	2b03      	cmp	r3, #3
 800580e:	f300 80a6 	bgt.w	800595e <get_fat+0x188>
 8005812:	2b01      	cmp	r3, #1
 8005814:	d002      	beq.n	800581c <get_fat+0x46>
 8005816:	2b02      	cmp	r3, #2
 8005818:	d055      	beq.n	80058c6 <get_fat+0xf0>
 800581a:	e0a0      	b.n	800595e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	899b      	ldrh	r3, [r3, #12]
 8005832:	4619      	mov	r1, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	fbb3 f3f1 	udiv	r3, r3, r1
 800583a:	4413      	add	r3, r2
 800583c:	4619      	mov	r1, r3
 800583e:	6938      	ldr	r0, [r7, #16]
 8005840:	f7ff ff0c 	bl	800565c <move_window>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 808c 	bne.w	8005964 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	8992      	ldrh	r2, [r2, #12]
 8005856:	fbb3 f1f2 	udiv	r1, r3, r2
 800585a:	fb01 f202 	mul.w	r2, r1, r2
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	899b      	ldrh	r3, [r3, #12]
 8005872:	4619      	mov	r1, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	fbb3 f3f1 	udiv	r3, r3, r1
 800587a:	4413      	add	r3, r2
 800587c:	4619      	mov	r1, r3
 800587e:	6938      	ldr	r0, [r7, #16]
 8005880:	f7ff feec 	bl	800565c <move_window>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d16e      	bne.n	8005968 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	899b      	ldrh	r3, [r3, #12]
 800588e:	461a      	mov	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	fbb3 f1f2 	udiv	r1, r3, r2
 8005896:	fb01 f202 	mul.w	r2, r1, r2
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <get_fat+0xe6>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	e002      	b.n	80058c2 <get_fat+0xec>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c2:	617b      	str	r3, [r7, #20]
			break;
 80058c4:	e055      	b.n	8005972 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	899b      	ldrh	r3, [r3, #12]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058da:	4413      	add	r3, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f7ff febc 	bl	800565c <move_window>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d140      	bne.n	800596c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	8992      	ldrh	r2, [r2, #12]
 80058f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80058fc:	fb00 f202 	mul.w	r2, r0, r2
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	440b      	add	r3, r1
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fbf9 	bl	80050fc <ld_word>
 800590a:	4603      	mov	r3, r0
 800590c:	617b      	str	r3, [r7, #20]
			break;
 800590e:	e030      	b.n	8005972 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	899b      	ldrh	r3, [r3, #12]
 8005918:	089b      	lsrs	r3, r3, #2
 800591a:	b29b      	uxth	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	fbb3 f3f1 	udiv	r3, r3, r1
 8005924:	4413      	add	r3, r2
 8005926:	4619      	mov	r1, r3
 8005928:	6938      	ldr	r0, [r7, #16]
 800592a:	f7ff fe97 	bl	800565c <move_window>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d11d      	bne.n	8005970 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	8992      	ldrh	r2, [r2, #12]
 8005942:	fbb3 f0f2 	udiv	r0, r3, r2
 8005946:	fb00 f202 	mul.w	r2, r0, r2
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	440b      	add	r3, r1
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fbec 	bl	800512c <ld_dword>
 8005954:	4603      	mov	r3, r0
 8005956:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800595a:	617b      	str	r3, [r7, #20]
			break;
 800595c:	e009      	b.n	8005972 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800595e:	2301      	movs	r3, #1
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e006      	b.n	8005972 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005964:	bf00      	nop
 8005966:	e004      	b.n	8005972 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005968:	bf00      	nop
 800596a:	e002      	b.n	8005972 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005970:	bf00      	nop
		}
	}

	return val;
 8005972:	697b      	ldr	r3, [r7, #20]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b089      	sub	sp, #36	@ 0x24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005988:	2302      	movs	r3, #2
 800598a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b01      	cmp	r3, #1
 8005990:	f240 8109 	bls.w	8005ba6 <put_fat+0x22a>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	f080 8103 	bcs.w	8005ba6 <put_fat+0x22a>
		switch (fs->fs_type) {
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	f000 80b6 	beq.w	8005b16 <put_fat+0x19a>
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	f300 80fb 	bgt.w	8005ba6 <put_fat+0x22a>
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d003      	beq.n	80059bc <put_fat+0x40>
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f000 8083 	beq.w	8005ac0 <put_fat+0x144>
 80059ba:	e0f4      	b.n	8005ba6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4413      	add	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	899b      	ldrh	r3, [r3, #12]
 80059d2:	4619      	mov	r1, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059da:	4413      	add	r3, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff fe3c 	bl	800565c <move_window>
 80059e4:	4603      	mov	r3, r0
 80059e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059e8:	7ffb      	ldrb	r3, [r7, #31]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f040 80d4 	bne.w	8005b98 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	61ba      	str	r2, [r7, #24]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	8992      	ldrh	r2, [r2, #12]
 8005a00:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a04:	fb00 f202 	mul.w	r2, r0, r2
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <put_fat+0xb8>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	b25a      	sxtb	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e001      	b.n	8005a38 <put_fat+0xbc>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	899b      	ldrh	r3, [r3, #12]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a52:	4413      	add	r3, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff fe00 	bl	800565c <move_window>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 809a 	bne.w	8005b9c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	899b      	ldrh	r3, [r3, #12]
 8005a72:	461a      	mov	r2, r3
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a7a:	fb00 f202 	mul.w	r2, r0, r2
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	440b      	add	r3, r1
 8005a82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <put_fat+0x11a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e00e      	b.n	8005ab4 <put_fat+0x138>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	b25b      	sxtb	r3, r3
 8005a9c:	f023 030f 	bic.w	r3, r3, #15
 8005aa0:	b25a      	sxtb	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	b25b      	sxtb	r3, r3
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	70da      	strb	r2, [r3, #3]
			break;
 8005abe:	e072      	b.n	8005ba6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	899b      	ldrh	r3, [r3, #12]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fdbf 	bl	800565c <move_window>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d15b      	bne.n	8005ba0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	8992      	ldrh	r2, [r2, #12]
 8005af6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005afa:	fb00 f202 	mul.w	r2, r0, r2
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	440b      	add	r3, r1
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	b292      	uxth	r2, r2
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fb32 	bl	8005172 <st_word>
			fs->wflag = 1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	70da      	strb	r2, [r3, #3]
			break;
 8005b14:	e047      	b.n	8005ba6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	899b      	ldrh	r3, [r3, #12]
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4619      	mov	r1, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff fd94 	bl	800565c <move_window>
 8005b34:	4603      	mov	r3, r0
 8005b36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b38:	7ffb      	ldrb	r3, [r7, #31]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d132      	bne.n	8005ba4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	8992      	ldrh	r2, [r2, #12]
 8005b52:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b56:	fb00 f202 	mul.w	r2, r0, r2
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fae4 	bl	800512c <ld_dword>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005b6a:	4323      	orrs	r3, r4
 8005b6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	8992      	ldrh	r2, [r2, #12]
 8005b7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b80:	fb00 f202 	mul.w	r2, r0, r2
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	440b      	add	r3, r1
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fb0c 	bl	80051a8 <st_dword>
			fs->wflag = 1;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	70da      	strb	r2, [r3, #3]
			break;
 8005b96:	e006      	b.n	8005ba6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b98:	bf00      	nop
 8005b9a:	e004      	b.n	8005ba6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b9c:	bf00      	nop
 8005b9e:	e002      	b.n	8005ba6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005ba4:	bf00      	nop
		}
	}
	return res;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3724      	adds	r7, #36	@ 0x24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd90      	pop	{r4, r7, pc}

08005bb0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d904      	bls.n	8005bd6 <remove_chain+0x26>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d301      	bcc.n	8005bda <remove_chain+0x2a>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e04b      	b.n	8005c72 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00c      	beq.n	8005bfa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	69b8      	ldr	r0, [r7, #24]
 8005be8:	f7ff fec8 	bl	800597c <put_fat>
 8005bec:	4603      	mov	r3, r0
 8005bee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005bf0:	7ffb      	ldrb	r3, [r7, #31]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <remove_chain+0x4a>
 8005bf6:	7ffb      	ldrb	r3, [r7, #31]
 8005bf8:	e03b      	b.n	8005c72 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fdea 	bl	80057d6 <get_fat>
 8005c02:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d031      	beq.n	8005c6e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <remove_chain+0x64>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e02e      	b.n	8005c72 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d101      	bne.n	8005c20 <remove_chain+0x70>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e028      	b.n	8005c72 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c20:	2200      	movs	r2, #0
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	69b8      	ldr	r0, [r7, #24]
 8005c26:	f7ff fea9 	bl	800597c <put_fat>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <remove_chain+0x88>
 8005c34:	7ffb      	ldrb	r3, [r7, #31]
 8005c36:	e01c      	b.n	8005c72 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	3b02      	subs	r3, #2
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d20b      	bcs.n	8005c5e <remove_chain+0xae>
			fs->free_clst++;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	791b      	ldrb	r3, [r3, #4]
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3c6      	bcc.n	8005bfa <remove_chain+0x4a>
 8005c6c:	e000      	b.n	8005c70 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c6e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b088      	sub	sp, #32
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10d      	bne.n	8005cac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <create_chain+0x2c>
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d31b      	bcc.n	8005cde <create_chain+0x64>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e018      	b.n	8005cde <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fd91 	bl	80057d6 <get_fat>
 8005cb4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d801      	bhi.n	8005cc0 <create_chain+0x46>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e070      	b.n	8005da2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d101      	bne.n	8005ccc <create_chain+0x52>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	e06a      	b.n	8005da2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d201      	bcs.n	8005cda <create_chain+0x60>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	e063      	b.n	8005da2 <create_chain+0x128>
		scl = clst;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d307      	bcc.n	8005d02 <create_chain+0x88>
				ncl = 2;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d901      	bls.n	8005d02 <create_chain+0x88>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e04f      	b.n	8005da2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d02:	69f9      	ldr	r1, [r7, #28]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fd66 	bl	80057d6 <get_fat>
 8005d0a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00e      	beq.n	8005d30 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d003      	beq.n	8005d20 <create_chain+0xa6>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d101      	bne.n	8005d24 <create_chain+0xaa>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e03e      	b.n	8005da2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d1da      	bne.n	8005ce2 <create_chain+0x68>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e038      	b.n	8005da2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d30:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295
 8005d36:	69f9      	ldr	r1, [r7, #28]
 8005d38:	6938      	ldr	r0, [r7, #16]
 8005d3a:	f7ff fe1f 	bl	800597c <put_fat>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <create_chain+0xe2>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f7ff fe12 	bl	800597c <put_fat>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d116      	bne.n	8005d90 <create_chain+0x116>
		fs->last_clst = ncl;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	3b02      	subs	r3, #2
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d804      	bhi.n	8005d80 <create_chain+0x106>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	791b      	ldrb	r3, [r3, #4]
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	711a      	strb	r2, [r3, #4]
 8005d8e:	e007      	b.n	8005da0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d102      	bne.n	8005d9c <create_chain+0x122>
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	e000      	b.n	8005d9e <create_chain+0x124>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005da0:	69fb      	ldr	r3, [r7, #28]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	899b      	ldrh	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	8952      	ldrh	r2, [r2, #10]
 8005dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	613a      	str	r2, [r7, #16]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <clmt_clust+0x42>
 8005de8:	2300      	movs	r3, #0
 8005dea:	e010      	b.n	8005e0e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d307      	bcc.n	8005e04 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e02:	e7e9      	b.n	8005dd8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005e04:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e30:	d204      	bcs.n	8005e3c <dir_sdi+0x22>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e071      	b.n	8005f24 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <dir_sdi+0x46>
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10c      	bne.n	8005e80 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	8912      	ldrh	r2, [r2, #8]
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d301      	bcc.n	8005e76 <dir_sdi+0x5c>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e056      	b.n	8005f24 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	61da      	str	r2, [r3, #28]
 8005e7e:	e02d      	b.n	8005edc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	895b      	ldrh	r3, [r3, #10]
 8005e84:	461a      	mov	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	899b      	ldrh	r3, [r3, #12]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e90:	e019      	b.n	8005ec6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6979      	ldr	r1, [r7, #20]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fc9d 	bl	80057d6 <get_fat>
 8005e9c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d101      	bne.n	8005eaa <dir_sdi+0x90>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03c      	b.n	8005f24 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d904      	bls.n	8005eba <dir_sdi+0xa0>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d301      	bcc.n	8005ebe <dir_sdi+0xa4>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e032      	b.n	8005f24 <dir_sdi+0x10a>
			ofs -= csz;
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d2e1      	bcs.n	8005e92 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	6938      	ldr	r0, [r7, #16]
 8005ed2:	f7ff fc61 	bl	8005798 <clust2sect>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <dir_sdi+0xd4>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e01a      	b.n	8005f24 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	899b      	ldrh	r3, [r3, #12]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005efe:	441a      	add	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	899b      	ldrh	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f16:	fb00 f202 	mul.w	r2, r0, r2
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	18ca      	adds	r2, r1, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	3320      	adds	r3, #32
 8005f42:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <dir_next+0x28>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f52:	d301      	bcc.n	8005f58 <dir_next+0x2c>
 8005f54:	2304      	movs	r3, #4
 8005f56:	e0bb      	b.n	80060d0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	899b      	ldrh	r3, [r3, #12]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f64:	fb01 f202 	mul.w	r2, r1, r2
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f040 809d 	bne.w	80060aa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	8912      	ldrh	r2, [r2, #8]
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f0c0 808d 	bcc.w	80060aa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	61da      	str	r2, [r3, #28]
 8005f96:	2304      	movs	r3, #4
 8005f98:	e09a      	b.n	80060d0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	899b      	ldrh	r3, [r3, #12]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	8952      	ldrh	r2, [r2, #10]
 8005faa:	3a01      	subs	r2, #1
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d17b      	bne.n	80060aa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f7ff fc0b 	bl	80057d6 <get_fat>
 8005fc0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d801      	bhi.n	8005fcc <dir_next+0xa0>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e081      	b.n	80060d0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d101      	bne.n	8005fd8 <dir_next+0xac>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e07b      	b.n	80060d0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d359      	bcc.n	8006096 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	61da      	str	r2, [r3, #28]
 8005fee:	2304      	movs	r3, #4
 8005ff0:	e06e      	b.n	80060d0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f7ff fe3d 	bl	8005c7a <create_chain>
 8006000:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <dir_next+0xe0>
 8006008:	2307      	movs	r3, #7
 800600a:	e061      	b.n	80060d0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <dir_next+0xea>
 8006012:	2302      	movs	r3, #2
 8006014:	e05c      	b.n	80060d0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d101      	bne.n	8006022 <dir_next+0xf6>
 800601e:	2301      	movs	r3, #1
 8006020:	e056      	b.n	80060d0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fad6 	bl	80055d4 <sync_window>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <dir_next+0x106>
 800602e:	2301      	movs	r3, #1
 8006030:	e04e      	b.n	80060d0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	899b      	ldrh	r3, [r3, #12]
 800603c:	461a      	mov	r2, r3
 800603e:	2100      	movs	r1, #0
 8006040:	f7ff f8ff 	bl	8005242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006044:	2300      	movs	r3, #0
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fba4 	bl	8005798 <clust2sect>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	635a      	str	r2, [r3, #52]	@ 0x34
 8006056:	e012      	b.n	800607e <dir_next+0x152>
						fs->wflag = 1;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff fab8 	bl	80055d4 <sync_window>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <dir_next+0x142>
 800606a:	2301      	movs	r3, #1
 800606c:	e030      	b.n	80060d0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3301      	adds	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	635a      	str	r2, [r3, #52]	@ 0x34
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	895b      	ldrh	r3, [r3, #10]
 8006082:	461a      	mov	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4293      	cmp	r3, r2
 8006088:	d3e6      	bcc.n	8006058 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fb7a 	bl	8005798 <clust2sect>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	899b      	ldrh	r3, [r3, #12]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	fbb3 f0f2 	udiv	r0, r3, r2
 80060c2:	fb00 f202 	mul.w	r2, r0, r2
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	18ca      	adds	r2, r1, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80060e8:	2100      	movs	r1, #0
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff fe95 	bl	8005e1a <dir_sdi>
 80060f0:	4603      	mov	r3, r0
 80060f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d12b      	bne.n	8006152 <dir_alloc+0x7a>
		n = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	4619      	mov	r1, r3
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff faa9 	bl	800565c <move_window>
 800610a:	4603      	mov	r3, r0
 800610c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11d      	bne.n	8006150 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2be5      	cmp	r3, #229	@ 0xe5
 800611c:	d004      	beq.n	8006128 <dir_alloc+0x50>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3301      	adds	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d102      	bne.n	800613c <dir_alloc+0x64>
 8006136:	e00c      	b.n	8006152 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006138:	2300      	movs	r3, #0
 800613a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800613c:	2101      	movs	r1, #1
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fef4 	bl	8005f2c <dir_next>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0d7      	beq.n	80060fe <dir_alloc+0x26>
 800614e:	e000      	b.n	8006152 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006150:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d101      	bne.n	800615c <dir_alloc+0x84>
 8006158:	2307      	movs	r3, #7
 800615a:	75fb      	strb	r3, [r7, #23]
	return res;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	331a      	adds	r3, #26
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe ffc1 	bl	80050fc <ld_word>
 800617a:	4603      	mov	r3, r0
 800617c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d109      	bne.n	800619a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	3314      	adds	r3, #20
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe ffb6 	bl	80050fc <ld_word>
 8006190:	4603      	mov	r3, r0
 8006192:	041b      	lsls	r3, r3, #16
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800619a:	68fb      	ldr	r3, [r7, #12]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	331a      	adds	r3, #26
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	b292      	uxth	r2, r2
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe ffd9 	bl	8005172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d109      	bne.n	80061dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f103 0214 	add.w	r2, r3, #20
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe ffcb 	bl	8005172 <st_word>
	}
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	331a      	adds	r3, #26
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe ff82 	bl	80050fc <ld_word>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <cmp_lfn+0x1e>
 80061fe:	2300      	movs	r3, #0
 8006200:	e059      	b.n	80062b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006218:	2301      	movs	r3, #1
 800621a:	81fb      	strh	r3, [r7, #14]
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	e033      	b.n	800628a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006222:	4a27      	ldr	r2, [pc, #156]	@ (80062c0 <cmp_lfn+0xdc>)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	4413      	add	r3, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe ff63 	bl	80050fc <ld_word>
 8006236:	4603      	mov	r3, r0
 8006238:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800623a:	89fb      	ldrh	r3, [r7, #14]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01a      	beq.n	8006276 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2bfe      	cmp	r3, #254	@ 0xfe
 8006244:	d812      	bhi.n	800626c <cmp_lfn+0x88>
 8006246:	89bb      	ldrh	r3, [r7, #12]
 8006248:	4618      	mov	r0, r3
 800624a:	f001 ff95 	bl	8008178 <ff_wtoupper>
 800624e:	4603      	mov	r3, r0
 8006250:	461c      	mov	r4, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	617a      	str	r2, [r7, #20]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f001 ff89 	bl	8008178 <ff_wtoupper>
 8006266:	4603      	mov	r3, r0
 8006268:	429c      	cmp	r4, r3
 800626a:	d001      	beq.n	8006270 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800626c:	2300      	movs	r3, #0
 800626e:	e022      	b.n	80062b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006270:	89bb      	ldrh	r3, [r7, #12]
 8006272:	81fb      	strh	r3, [r7, #14]
 8006274:	e006      	b.n	8006284 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006276:	89bb      	ldrh	r3, [r7, #12]
 8006278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800627c:	4293      	cmp	r3, r2
 800627e:	d001      	beq.n	8006284 <cmp_lfn+0xa0>
 8006280:	2300      	movs	r3, #0
 8006282:	e018      	b.n	80062b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3301      	adds	r3, #1
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d9c8      	bls.n	8006222 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <cmp_lfn+0xd0>
 800629c:	89fb      	ldrh	r3, [r7, #14]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <cmp_lfn+0xd0>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <cmp_lfn+0xd0>
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80062b4:	2301      	movs	r3, #1
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}
 80062be:	bf00      	nop
 80062c0:	08009420 	.word	0x08009420

080062c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	460b      	mov	r3, r1
 80062d4:	71fb      	strb	r3, [r7, #7]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	330d      	adds	r3, #13
 80062de:	79ba      	ldrb	r2, [r7, #6]
 80062e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	330b      	adds	r3, #11
 80062e6:	220f      	movs	r2, #15
 80062e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	330c      	adds	r3, #12
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	331a      	adds	r3, #26
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe ff3a 	bl	8005172 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	1e5a      	subs	r2, r3, #1
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	82fb      	strh	r3, [r7, #22]
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006316:	8afb      	ldrh	r3, [r7, #22]
 8006318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <put_lfn+0x6c>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006330:	4a17      	ldr	r2, [pc, #92]	@ (8006390 <put_lfn+0xcc>)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	8afa      	ldrh	r2, [r7, #22]
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe ff15 	bl	8005172 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006348:	8afb      	ldrh	r3, [r7, #22]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <put_lfn+0x90>
 800634e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006352:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	3301      	adds	r3, #1
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d9da      	bls.n	8006316 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006360:	8afb      	ldrh	r3, [r7, #22]
 8006362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006366:	4293      	cmp	r3, r2
 8006368:	d006      	beq.n	8006378 <put_lfn+0xb4>
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <put_lfn+0xbc>
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	79fa      	ldrb	r2, [r7, #7]
 8006384:	701a      	strb	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	08009420 	.word	0x08009420

08006394 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08c      	sub	sp, #48	@ 0x30
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80063a2:	220b      	movs	r2, #11
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7fe ff2a 	bl	8005200 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d929      	bls.n	8006406 <gen_numname+0x72>
		sr = seq;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80063b6:	e020      	b.n	80063fa <gen_numname+0x66>
			wc = *lfn++;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80063c2:	2300      	movs	r3, #0
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c6:	e015      	b.n	80063f4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	005a      	lsls	r2, r3, #1
 80063cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	4413      	add	r3, r2
 80063d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80063d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <gen_numname+0x5a>
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	4b30      	ldr	r3, [pc, #192]	@ (80064ac <gen_numname+0x118>)
 80063ea:	4053      	eors	r3, r2
 80063ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	3301      	adds	r3, #1
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d9e6      	bls.n	80063c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1da      	bne.n	80063b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006406:	2307      	movs	r3, #7
 8006408:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	b2db      	uxtb	r3, r3
 8006414:	3330      	adds	r3, #48	@ 0x30
 8006416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800641a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800641e:	2b39      	cmp	r3, #57	@ 0x39
 8006420:	d904      	bls.n	800642c <gen_numname+0x98>
 8006422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006426:	3307      	adds	r3, #7
 8006428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006432:	3330      	adds	r3, #48	@ 0x30
 8006434:	443b      	add	r3, r7
 8006436:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800643a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1df      	bne.n	800640a <gen_numname+0x76>
	ns[i] = '~';
 800644a:	f107 0214 	add.w	r2, r7, #20
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	4413      	add	r3, r2
 8006452:	227e      	movs	r2, #126	@ 0x7e
 8006454:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006456:	2300      	movs	r3, #0
 8006458:	627b      	str	r3, [r7, #36]	@ 0x24
 800645a:	e002      	b.n	8006462 <gen_numname+0xce>
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	3301      	adds	r3, #1
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	429a      	cmp	r2, r3
 8006468:	d205      	bcs.n	8006476 <gen_numname+0xe2>
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	4413      	add	r3, r2
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b20      	cmp	r3, #32
 8006474:	d1f2      	bne.n	800645c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	2b07      	cmp	r3, #7
 800647a:	d807      	bhi.n	800648c <gen_numname+0xf8>
 800647c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006482:	3330      	adds	r3, #48	@ 0x30
 8006484:	443b      	add	r3, r7
 8006486:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800648a:	e000      	b.n	800648e <gen_numname+0xfa>
 800648c:	2120      	movs	r1, #32
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	627a      	str	r2, [r7, #36]	@ 0x24
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	460a      	mov	r2, r1
 800649a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	2b07      	cmp	r3, #7
 80064a0:	d9e9      	bls.n	8006476 <gen_numname+0xe2>
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	3730      	adds	r7, #48	@ 0x30
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	00011021 	.word	0x00011021

080064b0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80064bc:	230b      	movs	r3, #11
 80064be:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	0852      	lsrs	r2, r2, #1
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	4313      	orrs	r3, r2
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	6079      	str	r1, [r7, #4]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4413      	add	r3, r2
 80064d6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3b01      	subs	r3, #1
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1ed      	bne.n	80064c0 <sum_sfn+0x10>
	return sum;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fc89 	bl	8005e1a <dir_sdi>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <dir_find+0x24>
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	e0a9      	b.n	800666a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006516:	23ff      	movs	r3, #255	@ 0xff
 8006518:	753b      	strb	r3, [r7, #20]
 800651a:	7d3b      	ldrb	r3, [r7, #20]
 800651c:	757b      	strb	r3, [r7, #21]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	4619      	mov	r1, r3
 800652c:	6938      	ldr	r0, [r7, #16]
 800652e:	f7ff f895 	bl	800565c <move_window>
 8006532:	4603      	mov	r3, r0
 8006534:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f040 8090 	bne.w	800665e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006546:	7dbb      	ldrb	r3, [r7, #22]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <dir_find+0x60>
 800654c:	2304      	movs	r3, #4
 800654e:	75fb      	strb	r3, [r7, #23]
 8006550:	e08a      	b.n	8006668 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	330b      	adds	r3, #11
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800655e:	73fb      	strb	r3, [r7, #15]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	2be5      	cmp	r3, #229	@ 0xe5
 800656a:	d007      	beq.n	800657c <dir_find+0x8a>
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <dir_find+0x98>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d006      	beq.n	800658a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800657c:	23ff      	movs	r3, #255	@ 0xff
 800657e:	757b      	strb	r3, [r7, #21]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f04f 32ff 	mov.w	r2, #4294967295
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
 8006588:	e05e      	b.n	8006648 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b0f      	cmp	r3, #15
 800658e:	d136      	bne.n	80065fe <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d154      	bne.n	8006648 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00d      	beq.n	80065c4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	7b5b      	ldrb	r3, [r3, #13]
 80065ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80065b0:	7dbb      	ldrb	r3, [r7, #22]
 80065b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b6:	75bb      	strb	r3, [r7, #22]
 80065b8:	7dbb      	ldrb	r3, [r7, #22]
 80065ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695a      	ldr	r2, [r3, #20]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065c4:	7dba      	ldrb	r2, [r7, #22]
 80065c6:	7d7b      	ldrb	r3, [r7, #21]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d115      	bne.n	80065f8 <dir_find+0x106>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	330d      	adds	r3, #13
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	7d3a      	ldrb	r2, [r7, #20]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d10e      	bne.n	80065f8 <dir_find+0x106>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7ff fdfd 	bl	80061e4 <cmp_lfn>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <dir_find+0x106>
 80065f0:	7d7b      	ldrb	r3, [r7, #21]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	e000      	b.n	80065fa <dir_find+0x108>
 80065f8:	23ff      	movs	r3, #255	@ 0xff
 80065fa:	757b      	strb	r3, [r7, #21]
 80065fc:	e024      	b.n	8006648 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80065fe:	7d7b      	ldrb	r3, [r7, #21]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d109      	bne.n	8006618 <dir_find+0x126>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff ff51 	bl	80064b0 <sum_sfn>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	7d3b      	ldrb	r3, [r7, #20]
 8006614:	4293      	cmp	r3, r2
 8006616:	d024      	beq.n	8006662 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <dir_find+0x14a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a18      	ldr	r0, [r3, #32]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3324      	adds	r3, #36	@ 0x24
 800662e:	220b      	movs	r2, #11
 8006630:	4619      	mov	r1, r3
 8006632:	f7fe fe21 	bl	8005278 <mem_cmp>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d014      	beq.n	8006666 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800663c:	23ff      	movs	r3, #255	@ 0xff
 800663e:	757b      	strb	r3, [r7, #21]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006648:	2100      	movs	r1, #0
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fc6e 	bl	8005f2c <dir_next>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f43f af65 	beq.w	8006526 <dir_find+0x34>
 800665c:	e004      	b.n	8006668 <dir_find+0x176>
		if (res != FR_OK) break;
 800665e:	bf00      	nop
 8006660:	e002      	b.n	8006668 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006662:	bf00      	nop
 8006664:	e000      	b.n	8006668 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006666:	bf00      	nop

	return res;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	@ 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006688:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <dir_register+0x20>
 8006690:	2306      	movs	r3, #6
 8006692:	e0e0      	b.n	8006856 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006694:	2300      	movs	r3, #0
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
 8006698:	e002      	b.n	80066a0 <dir_register+0x2c>
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	3301      	adds	r3, #1
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f4      	bne.n	800669a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80066b6:	f107 030c 	add.w	r3, r7, #12
 80066ba:	220c      	movs	r2, #12
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe fd9f 	bl	8005200 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d032      	beq.n	8006732 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	@ 0x40
 80066d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80066d4:	2301      	movs	r3, #1
 80066d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066d8:	e016      	b.n	8006708 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	f107 010c 	add.w	r1, r7, #12
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	f7ff fe53 	bl	8006394 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff feff 	bl	80064f2 <dir_find>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80066fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	3301      	adds	r3, #1
 8006706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	2b63      	cmp	r3, #99	@ 0x63
 800670c:	d9e5      	bls.n	80066da <dir_register+0x66>
 800670e:	e000      	b.n	8006712 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006710:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	2b64      	cmp	r3, #100	@ 0x64
 8006716:	d101      	bne.n	800671c <dir_register+0xa8>
 8006718:	2307      	movs	r3, #7
 800671a:	e09c      	b.n	8006856 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800671c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006720:	2b04      	cmp	r3, #4
 8006722:	d002      	beq.n	800672a <dir_register+0xb6>
 8006724:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006728:	e095      	b.n	8006856 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800672a:	7dfa      	ldrb	r2, [r7, #23]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <dir_register+0xd8>
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	330c      	adds	r3, #12
 8006740:	4a47      	ldr	r2, [pc, #284]	@ (8006860 <dir_register+0x1ec>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	3301      	adds	r3, #1
 800674a:	e000      	b.n	800674e <dir_register+0xda>
 800674c:	2301      	movs	r3, #1
 800674e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006750:	6a39      	ldr	r1, [r7, #32]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fcc0 	bl	80060d8 <dir_alloc>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800675e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006762:	2b00      	cmp	r3, #0
 8006764:	d148      	bne.n	80067f8 <dir_register+0x184>
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	3b01      	subs	r3, #1
 800676a:	623b      	str	r3, [r7, #32]
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d042      	beq.n	80067f8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	015b      	lsls	r3, r3, #5
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fb4b 	bl	8005e1a <dir_sdi>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800678a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800678e:	2b00      	cmp	r3, #0
 8006790:	d132      	bne.n	80067f8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3324      	adds	r3, #36	@ 0x24
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fe8a 	bl	80064b0 <sum_sfn>
 800679c:	4603      	mov	r3, r0
 800679e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4619      	mov	r1, r3
 80067a6:	69f8      	ldr	r0, [r7, #28]
 80067a8:	f7fe ff58 	bl	800565c <move_window>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80067b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11d      	bne.n	80067f6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	6918      	ldr	r0, [r3, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a19      	ldr	r1, [r3, #32]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	7efb      	ldrb	r3, [r7, #27]
 80067c8:	f7ff fd7c 	bl	80062c4 <put_lfn>
				fs->wflag = 1;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2201      	movs	r2, #1
 80067d0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80067d2:	2100      	movs	r1, #0
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff fba9 	bl	8005f2c <dir_next>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80067e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d107      	bne.n	80067f8 <dir_register+0x184>
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1d5      	bne.n	80067a0 <dir_register+0x12c>
 80067f4:	e000      	b.n	80067f8 <dir_register+0x184>
				if (res != FR_OK) break;
 80067f6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80067f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d128      	bne.n	8006852 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	4619      	mov	r1, r3
 8006806:	69f8      	ldr	r0, [r7, #28]
 8006808:	f7fe ff28 	bl	800565c <move_window>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11b      	bne.n	8006852 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	2220      	movs	r2, #32
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fd0d 	bl	8005242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a18      	ldr	r0, [r3, #32]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3324      	adds	r3, #36	@ 0x24
 8006830:	220b      	movs	r2, #11
 8006832:	4619      	mov	r1, r3
 8006834:	f7fe fce4 	bl	8005200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	330c      	adds	r3, #12
 8006844:	f002 0218 	and.w	r2, r2, #24
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2201      	movs	r2, #1
 8006850:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	@ 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	4ec4ec4f 	.word	0x4ec4ec4f

08006864 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	@ 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	61ba      	str	r2, [r7, #24]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4413      	add	r3, r2
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006894:	2b1f      	cmp	r3, #31
 8006896:	d940      	bls.n	800691a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800689a:	2b2f      	cmp	r3, #47	@ 0x2f
 800689c:	d006      	beq.n	80068ac <create_name+0x48>
 800689e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80068a2:	d110      	bne.n	80068c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80068a4:	e002      	b.n	80068ac <create_name+0x48>
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	3301      	adds	r3, #1
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	4413      	add	r3, r2
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80068b6:	d0f6      	beq.n	80068a6 <create_name+0x42>
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	4413      	add	r3, r2
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80068c2:	d0f0      	beq.n	80068a6 <create_name+0x42>
			break;
 80068c4:	e02a      	b.n	800691c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80068ca:	d901      	bls.n	80068d0 <create_name+0x6c>
 80068cc:	2306      	movs	r3, #6
 80068ce:	e17d      	b.n	8006bcc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80068d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80068d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068d8:	2101      	movs	r1, #1
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fc10 	bl	8008100 <ff_convert>
 80068e0:	4603      	mov	r3, r0
 80068e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80068e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <create_name+0x8a>
 80068ea:	2306      	movs	r3, #6
 80068ec:	e16e      	b.n	8006bcc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80068ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80068f2:	d809      	bhi.n	8006908 <create_name+0xa4>
 80068f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068f6:	4619      	mov	r1, r3
 80068f8:	488d      	ldr	r0, [pc, #564]	@ (8006b30 <create_name+0x2cc>)
 80068fa:	f7fe fce4 	bl	80052c6 <chk_chr>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <create_name+0xa4>
 8006904:	2306      	movs	r3, #6
 8006906:	e161      	b.n	8006bcc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	617a      	str	r2, [r7, #20]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006916:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006918:	e7b4      	b.n	8006884 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800691a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	441a      	add	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006928:	2b1f      	cmp	r3, #31
 800692a:	d801      	bhi.n	8006930 <create_name+0xcc>
 800692c:	2304      	movs	r3, #4
 800692e:	e000      	b.n	8006932 <create_name+0xce>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006936:	e011      	b.n	800695c <create_name+0xf8>
		w = lfn[di - 1];
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800693e:	4413      	add	r3, r2
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800694a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800694c:	2b20      	cmp	r3, #32
 800694e:	d002      	beq.n	8006956 <create_name+0xf2>
 8006950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006952:	2b2e      	cmp	r3, #46	@ 0x2e
 8006954:	d106      	bne.n	8006964 <create_name+0x100>
		di--;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	3b01      	subs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1ea      	bne.n	8006938 <create_name+0xd4>
 8006962:	e000      	b.n	8006966 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006964:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	2200      	movs	r2, #0
 8006970:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <create_name+0x118>
 8006978:	2306      	movs	r3, #6
 800697a:	e127      	b.n	8006bcc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3324      	adds	r3, #36	@ 0x24
 8006980:	220b      	movs	r2, #11
 8006982:	2120      	movs	r1, #32
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fc5c 	bl	8005242 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e002      	b.n	8006996 <create_name+0x132>
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	3301      	adds	r3, #1
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d0f5      	beq.n	8006990 <create_name+0x12c>
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80069b0:	d0ee      	beq.n	8006990 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <create_name+0x168>
 80069b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069bc:	f043 0303 	orr.w	r3, r3, #3
 80069c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80069c4:	e002      	b.n	80069cc <create_name+0x168>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <create_name+0x182>
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80069d8:	4413      	add	r3, r2
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80069e4:	d1ef      	bne.n	80069c6 <create_name+0x162>

	i = b = 0; ni = 8;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80069ec:	2300      	movs	r3, #0
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	2308      	movs	r3, #8
 80069f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	61ba      	str	r2, [r7, #24]
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006a04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8090 	beq.w	8006b2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006a0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d006      	beq.n	8006a20 <create_name+0x1bc>
 8006a12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a16:	d10a      	bne.n	8006a2e <create_name+0x1ca>
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d006      	beq.n	8006a2e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a24:	f043 0303 	orr.w	r3, r3, #3
 8006a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a2c:	e07d      	b.n	8006b2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d203      	bcs.n	8006a3e <create_name+0x1da>
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d123      	bne.n	8006a86 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2b0b      	cmp	r3, #11
 8006a42:	d106      	bne.n	8006a52 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a48:	f043 0303 	orr.w	r3, r3, #3
 8006a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006a50:	e075      	b.n	8006b3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d005      	beq.n	8006a66 <create_name+0x202>
 8006a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a5e:	f043 0303 	orr.w	r3, r3, #3
 8006a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d866      	bhi.n	8006b3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	2308      	movs	r3, #8
 8006a74:	623b      	str	r3, [r7, #32]
 8006a76:	230b      	movs	r3, #11
 8006a78:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006a84:	e051      	b.n	8006b2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a8a:	d914      	bls.n	8006ab6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fb35 	bl	8008100 <ff_convert>
 8006a96:	4603      	mov	r3, r0
 8006a98:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <create_name+0x246>
 8006aa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aa2:	3b80      	subs	r3, #128	@ 0x80
 8006aa4:	4a23      	ldr	r2, [pc, #140]	@ (8006b34 <create_name+0x2d0>)
 8006aa6:	5cd3      	ldrb	r3, [r2, r3]
 8006aa8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006ab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <create_name+0x268>
 8006abc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006abe:	4619      	mov	r1, r3
 8006ac0:	481d      	ldr	r0, [pc, #116]	@ (8006b38 <create_name+0x2d4>)
 8006ac2:	f7fe fc00 	bl	80052c6 <chk_chr>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006acc:	235f      	movs	r3, #95	@ 0x5f
 8006ace:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ad4:	f043 0303 	orr.w	r3, r3, #3
 8006ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006adc:	e01b      	b.n	8006b16 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006ade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d909      	bls.n	8006af8 <create_name+0x294>
 8006ae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ae6:	2b5a      	cmp	r3, #90	@ 0x5a
 8006ae8:	d806      	bhi.n	8006af8 <create_name+0x294>
					b |= 2;
 8006aea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006af6:	e00e      	b.n	8006b16 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006af8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006afa:	2b60      	cmp	r3, #96	@ 0x60
 8006afc:	d90b      	bls.n	8006b16 <create_name+0x2b2>
 8006afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b00:	2b7a      	cmp	r3, #122	@ 0x7a
 8006b02:	d808      	bhi.n	8006b16 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006b04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b12:	3b20      	subs	r3, #32
 8006b14:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	623a      	str	r2, [r7, #32]
 8006b1c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b1e:	b2d1      	uxtb	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	460a      	mov	r2, r1
 8006b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006b2a:	e763      	b.n	80069f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006b2c:	bf00      	nop
 8006b2e:	e006      	b.n	8006b3e <create_name+0x2da>
 8006b30:	08009340 	.word	0x08009340
 8006b34:	080093a0 	.word	0x080093a0
 8006b38:	0800934c 	.word	0x0800934c
			if (si > di) break;			/* No extension */
 8006b3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b44:	2be5      	cmp	r3, #229	@ 0xe5
 8006b46:	d103      	bne.n	8006b50 <create_name+0x2ec>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2205      	movs	r2, #5
 8006b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d104      	bne.n	8006b60 <create_name+0x2fc>
 8006b56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006b60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b0c      	cmp	r3, #12
 8006b6a:	d005      	beq.n	8006b78 <create_name+0x314>
 8006b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d105      	bne.n	8006b84 <create_name+0x320>
 8006b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b7c:	f043 0302 	orr.w	r3, r3, #2
 8006b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d117      	bne.n	8006bc0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d105      	bne.n	8006ba8 <create_name+0x344>
 8006b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ba0:	f043 0310 	orr.w	r3, r3, #16
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d105      	bne.n	8006bc0 <create_name+0x35c>
 8006bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bb8:	f043 0308 	orr.w	r3, r3, #8
 8006bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006bc6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006bca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3728      	adds	r7, #40	@ 0x28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006be8:	e002      	b.n	8006bf0 <follow_path+0x1c>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3301      	adds	r3, #1
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006bf6:	d0f8      	beq.n	8006bea <follow_path+0x16>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bfe:	d0f4      	beq.n	8006bea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2200      	movs	r2, #0
 8006c04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b1f      	cmp	r3, #31
 8006c0c:	d80a      	bhi.n	8006c24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2280      	movs	r2, #128	@ 0x80
 8006c12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006c16:	2100      	movs	r1, #0
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff f8fe 	bl	8005e1a <dir_sdi>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
 8006c22:	e048      	b.n	8006cb6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c24:	463b      	mov	r3, r7
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fe1b 	bl	8006864 <create_name>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d139      	bne.n	8006cac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fc5a 	bl	80064f2 <dir_find>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006c48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d12c      	bne.n	8006cb0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d127      	bne.n	8006cb0 <follow_path+0xdc>
 8006c60:	2305      	movs	r3, #5
 8006c62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c64:	e024      	b.n	8006cb0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d121      	bne.n	8006cb4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	799b      	ldrb	r3, [r3, #6]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c7c:	2305      	movs	r3, #5
 8006c7e:	75fb      	strb	r3, [r7, #23]
 8006c80:	e019      	b.n	8006cb6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	8992      	ldrh	r2, [r2, #12]
 8006c90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c94:	fb00 f202 	mul.w	r2, r0, r2
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fa61 	bl	8006166 <ld_clust>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006caa:	e7bb      	b.n	8006c24 <follow_path+0x50>
			if (res != FR_OK) break;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <follow_path+0xe2>
				break;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cb4:	bf00      	nop
			}
		}
	}

	return res;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ccc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d031      	beq.n	8006d3a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e002      	b.n	8006ce4 <get_ldnumber+0x24>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b1f      	cmp	r3, #31
 8006cea:	d903      	bls.n	8006cf4 <get_ldnumber+0x34>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cf2:	d1f4      	bne.n	8006cde <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cfa:	d11c      	bne.n	8006d36 <get_ldnumber+0x76>
			tp = *path;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	60fa      	str	r2, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	3b30      	subs	r3, #48	@ 0x30
 8006d0c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b09      	cmp	r3, #9
 8006d12:	d80e      	bhi.n	8006d32 <get_ldnumber+0x72>
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d10a      	bne.n	8006d32 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d107      	bne.n	8006d32 <get_ldnumber+0x72>
					vol = (int)i;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	e002      	b.n	8006d3c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d3a:	693b      	ldr	r3, [r7, #16]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	70da      	strb	r2, [r3, #3]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fe fc7a 	bl	800565c <move_window>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <check_fs+0x2a>
 8006d6e:	2304      	movs	r3, #4
 8006d70:	e038      	b.n	8006de4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3338      	adds	r3, #56	@ 0x38
 8006d76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe f9be 	bl	80050fc <ld_word>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <check_fs+0x48>
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e029      	b.n	8006de4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d96:	2be9      	cmp	r3, #233	@ 0xe9
 8006d98:	d009      	beq.n	8006dae <check_fs+0x66>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006da0:	2beb      	cmp	r3, #235	@ 0xeb
 8006da2:	d11e      	bne.n	8006de2 <check_fs+0x9a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006daa:	2b90      	cmp	r3, #144	@ 0x90
 8006dac:	d119      	bne.n	8006de2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3338      	adds	r3, #56	@ 0x38
 8006db2:	3336      	adds	r3, #54	@ 0x36
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe f9b9 	bl	800512c <ld_dword>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dec <check_fs+0xa4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <check_fs+0x82>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e00c      	b.n	8006de4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3338      	adds	r3, #56	@ 0x38
 8006dce:	3352      	adds	r3, #82	@ 0x52
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe f9ab 	bl	800512c <ld_dword>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4a05      	ldr	r2, [pc, #20]	@ (8006df0 <check_fs+0xa8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d101      	bne.n	8006de2 <check_fs+0x9a>
 8006dde:	2300      	movs	r3, #0
 8006de0:	e000      	b.n	8006de4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006de2:	2302      	movs	r3, #2
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	00544146 	.word	0x00544146
 8006df0:	33544146 	.word	0x33544146

08006df4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b096      	sub	sp, #88	@ 0x58
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff ff59 	bl	8006cc0 <get_ldnumber>
 8006e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da01      	bge.n	8006e1a <find_volume+0x26>
 8006e16:	230b      	movs	r3, #11
 8006e18:	e265      	b.n	80072e6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e1a:	4a9f      	ldr	r2, [pc, #636]	@ (8007098 <find_volume+0x2a4>)
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e22:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <find_volume+0x3a>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	e25b      	b.n	80072e6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01a      	beq.n	8006e7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe f8b9 	bl	8004fc0 <disk_status>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <find_volume+0x82>
 8006e66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e72:	230a      	movs	r3, #10
 8006e74:	e237      	b.n	80072e6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006e76:	2300      	movs	r3, #0
 8006e78:	e235      	b.n	80072e6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe f8b1 	bl	8004ff4 <disk_initialize>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e21e      	b.n	80072e6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <find_volume+0xca>
 8006eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006eba:	230a      	movs	r3, #10
 8006ebc:	e213      	b.n	80072e6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec0:	7858      	ldrb	r0, [r3, #1]
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2102      	movs	r1, #2
 8006eca:	f7fe f8f9 	bl	80050c0 <disk_ioctl>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <find_volume+0xe4>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e206      	b.n	80072e6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	899b      	ldrh	r3, [r3, #12]
 8006edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee0:	d80d      	bhi.n	8006efe <find_volume+0x10a>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	899b      	ldrh	r3, [r3, #12]
 8006ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eea:	d308      	bcc.n	8006efe <find_volume+0x10a>
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	899b      	ldrh	r3, [r3, #12]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	899b      	ldrh	r3, [r3, #12]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <find_volume+0x10e>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e1f1      	b.n	80072e6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f0a:	f7ff ff1d 	bl	8006d48 <check_fs>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d149      	bne.n	8006fb0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f20:	e01e      	b.n	8006f60 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006f30:	4413      	add	r3, r2
 8006f32:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	3304      	adds	r3, #4
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <find_volume+0x158>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	3308      	adds	r3, #8
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe f8f2 	bl	800512c <ld_dword>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	e000      	b.n	8006f4e <find_volume+0x15a>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	3358      	adds	r3, #88	@ 0x58
 8006f54:	443b      	add	r3, r7
 8006f56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d9dd      	bls.n	8006f22 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006f66:	2300      	movs	r3, #0
 8006f68:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <find_volume+0x182>
 8006f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f72:	3b01      	subs	r3, #1
 8006f74:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	3358      	adds	r3, #88	@ 0x58
 8006f7c:	443b      	add	r3, r7
 8006f7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f82:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <find_volume+0x1a2>
 8006f8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f8e:	f7ff fedb 	bl	8006d48 <check_fs>
 8006f92:	4603      	mov	r3, r0
 8006f94:	e000      	b.n	8006f98 <find_volume+0x1a4>
 8006f96:	2303      	movs	r3, #3
 8006f98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d905      	bls.n	8006fb0 <find_volume+0x1bc>
 8006fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d9e2      	bls.n	8006f76 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d101      	bne.n	8006fbc <find_volume+0x1c8>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e194      	b.n	80072e6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d901      	bls.n	8006fc8 <find_volume+0x1d4>
 8006fc4:	230d      	movs	r3, #13
 8006fc6:	e18e      	b.n	80072e6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	3338      	adds	r3, #56	@ 0x38
 8006fcc:	330b      	adds	r3, #11
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe f894 	bl	80050fc <ld_word>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	899b      	ldrh	r3, [r3, #12]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <find_volume+0x1f0>
 8006fe0:	230d      	movs	r3, #13
 8006fe2:	e180      	b.n	80072e6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	3338      	adds	r3, #56	@ 0x38
 8006fe8:	3316      	adds	r3, #22
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe f886 	bl	80050fc <ld_word>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <find_volume+0x214>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	3338      	adds	r3, #56	@ 0x38
 8006ffe:	3324      	adds	r3, #36	@ 0x24
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe f893 	bl	800512c <ld_dword>
 8007006:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800700c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	789b      	ldrb	r3, [r3, #2]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d005      	beq.n	800702c <find_volume+0x238>
 8007020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007022:	789b      	ldrb	r3, [r3, #2]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d001      	beq.n	800702c <find_volume+0x238>
 8007028:	230d      	movs	r3, #13
 800702a:	e15c      	b.n	80072e6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	789b      	ldrb	r3, [r3, #2]
 8007030:	461a      	mov	r2, r3
 8007032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007040:	461a      	mov	r2, r3
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	895b      	ldrh	r3, [r3, #10]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <find_volume+0x26c>
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007050:	895b      	ldrh	r3, [r3, #10]
 8007052:	461a      	mov	r2, r3
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	895b      	ldrh	r3, [r3, #10]
 8007058:	3b01      	subs	r3, #1
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <find_volume+0x270>
 8007060:	230d      	movs	r3, #13
 8007062:	e140      	b.n	80072e6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007066:	3338      	adds	r3, #56	@ 0x38
 8007068:	3311      	adds	r3, #17
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe f846 	bl	80050fc <ld_word>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	891b      	ldrh	r3, [r3, #8]
 800707c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800707e:	8992      	ldrh	r2, [r2, #12]
 8007080:	0952      	lsrs	r2, r2, #5
 8007082:	b292      	uxth	r2, r2
 8007084:	fbb3 f1f2 	udiv	r1, r3, r2
 8007088:	fb01 f202 	mul.w	r2, r1, r2
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <find_volume+0x2a8>
 8007094:	230d      	movs	r3, #13
 8007096:	e126      	b.n	80072e6 <find_volume+0x4f2>
 8007098:	20003268 	.word	0x20003268

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	3338      	adds	r3, #56	@ 0x38
 80070a0:	3313      	adds	r3, #19
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe f82a 	bl	80050fc <ld_word>
 80070a8:	4603      	mov	r3, r0
 80070aa:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80070ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <find_volume+0x2cc>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b4:	3338      	adds	r3, #56	@ 0x38
 80070b6:	3320      	adds	r3, #32
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe f837 	bl	800512c <ld_dword>
 80070be:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80070c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c2:	3338      	adds	r3, #56	@ 0x38
 80070c4:	330e      	adds	r3, #14
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe f818 	bl	80050fc <ld_word>
 80070cc:	4603      	mov	r3, r0
 80070ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80070d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <find_volume+0x2e6>
 80070d6:	230d      	movs	r3, #13
 80070d8:	e105      	b.n	80072e6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80070da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80070dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070de:	4413      	add	r3, r2
 80070e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070e2:	8911      	ldrh	r1, [r2, #8]
 80070e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070e6:	8992      	ldrh	r2, [r2, #12]
 80070e8:	0952      	lsrs	r2, r2, #5
 80070ea:	b292      	uxth	r2, r2
 80070ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80070f0:	b292      	uxth	r2, r2
 80070f2:	4413      	add	r3, r2
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80070f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d201      	bcs.n	8007102 <find_volume+0x30e>
 80070fe:	230d      	movs	r3, #13
 8007100:	e0f1      	b.n	80072e6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800710a:	8952      	ldrh	r2, [r2, #10]
 800710c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <find_volume+0x328>
 8007118:	230d      	movs	r3, #13
 800711a:	e0e4      	b.n	80072e6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800711c:	2303      	movs	r3, #3
 800711e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007128:	4293      	cmp	r3, r2
 800712a:	d802      	bhi.n	8007132 <find_volume+0x33e>
 800712c:	2302      	movs	r3, #2
 800712e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007138:	4293      	cmp	r3, r2
 800713a:	d802      	bhi.n	8007142 <find_volume+0x34e>
 800713c:	2301      	movs	r3, #1
 800713e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	1c9a      	adds	r2, r3, #2
 8007146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007148:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800714e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007150:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007154:	441a      	add	r2, r3
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800715a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	441a      	add	r2, r3
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007168:	2b03      	cmp	r3, #3
 800716a:	d11e      	bne.n	80071aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	3338      	adds	r3, #56	@ 0x38
 8007170:	332a      	adds	r3, #42	@ 0x2a
 8007172:	4618      	mov	r0, r3
 8007174:	f7fd ffc2 	bl	80050fc <ld_word>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <find_volume+0x38e>
 800717e:	230d      	movs	r3, #13
 8007180:	e0b1      	b.n	80072e6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	891b      	ldrh	r3, [r3, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <find_volume+0x39a>
 800718a:	230d      	movs	r3, #13
 800718c:	e0ab      	b.n	80072e6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800718e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007190:	3338      	adds	r3, #56	@ 0x38
 8007192:	332c      	adds	r3, #44	@ 0x2c
 8007194:	4618      	mov	r0, r3
 8007196:	f7fd ffc9 	bl	800512c <ld_dword>
 800719a:	4602      	mov	r2, r0
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071a8:	e01f      	b.n	80071ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	891b      	ldrh	r3, [r3, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <find_volume+0x3c2>
 80071b2:	230d      	movs	r3, #13
 80071b4:	e097      	b.n	80072e6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071bc:	441a      	add	r2, r3
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80071c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d103      	bne.n	80071d2 <find_volume+0x3de>
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	e00a      	b.n	80071e8 <find_volume+0x3f4>
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	69da      	ldr	r2, [r3, #28]
 80071d6:	4613      	mov	r3, r2
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	4413      	add	r3, r2
 80071dc:	085a      	lsrs	r2, r3, #1
 80071de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80071e8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	899b      	ldrh	r3, [r3, #12]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f6:	440b      	add	r3, r1
 80071f8:	3b01      	subs	r3, #1
 80071fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071fc:	8989      	ldrh	r1, [r1, #12]
 80071fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007202:	429a      	cmp	r2, r3
 8007204:	d201      	bcs.n	800720a <find_volume+0x416>
 8007206:	230d      	movs	r3, #13
 8007208:	e06d      	b.n	80072e6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	619a      	str	r2, [r3, #24]
 8007212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007218:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721c:	2280      	movs	r2, #128	@ 0x80
 800721e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007220:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007224:	2b03      	cmp	r3, #3
 8007226:	d149      	bne.n	80072bc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722a:	3338      	adds	r3, #56	@ 0x38
 800722c:	3330      	adds	r3, #48	@ 0x30
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd ff64 	bl	80050fc <ld_word>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d140      	bne.n	80072bc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800723a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800723c:	3301      	adds	r3, #1
 800723e:	4619      	mov	r1, r3
 8007240:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007242:	f7fe fa0b 	bl	800565c <move_window>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d137      	bne.n	80072bc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	2200      	movs	r2, #0
 8007250:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	3338      	adds	r3, #56	@ 0x38
 8007256:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800725a:	4618      	mov	r0, r3
 800725c:	f7fd ff4e 	bl	80050fc <ld_word>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007268:	429a      	cmp	r2, r3
 800726a:	d127      	bne.n	80072bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	3338      	adds	r3, #56	@ 0x38
 8007270:	4618      	mov	r0, r3
 8007272:	f7fd ff5b 	bl	800512c <ld_dword>
 8007276:	4603      	mov	r3, r0
 8007278:	4a1d      	ldr	r2, [pc, #116]	@ (80072f0 <find_volume+0x4fc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d11e      	bne.n	80072bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	3338      	adds	r3, #56	@ 0x38
 8007282:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd ff50 	bl	800512c <ld_dword>
 800728c:	4603      	mov	r3, r0
 800728e:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <find_volume+0x500>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d113      	bne.n	80072bc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	3338      	adds	r3, #56	@ 0x38
 8007298:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800729c:	4618      	mov	r0, r3
 800729e:	f7fd ff45 	bl	800512c <ld_dword>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	3338      	adds	r3, #56	@ 0x38
 80072ac:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fd ff3b 	bl	800512c <ld_dword>
 80072b6:	4602      	mov	r2, r0
 80072b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ba:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80072c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80072c4:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <find_volume+0x504>)
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <find_volume+0x504>)
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <find_volume+0x504>)
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <find_volume+0x508>)
 80072dc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80072de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80072e0:	f7fe f954 	bl	800558c <clear_lock>
#endif
	return FR_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3758      	adds	r7, #88	@ 0x58
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	41615252 	.word	0x41615252
 80072f4:	61417272 	.word	0x61417272
 80072f8:	2000326c 	.word	0x2000326c
 80072fc:	20003290 	.word	0x20003290

08007300 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800730a:	2309      	movs	r3, #9
 800730c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01c      	beq.n	800734e <validate+0x4e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d018      	beq.n	800734e <validate+0x4e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d013      	beq.n	800734e <validate+0x4e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	889a      	ldrh	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	88db      	ldrh	r3, [r3, #6]
 8007330:	429a      	cmp	r2, r3
 8007332:	d10c      	bne.n	800734e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	4618      	mov	r0, r3
 800733c:	f7fd fe40 	bl	8004fc0 <disk_status>
 8007340:	4603      	mov	r3, r0
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <validate+0x4e>
			res = FR_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <validate+0x5a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	e000      	b.n	800735c <validate+0x5c>
 800735a:	2300      	movs	r3, #0
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	6013      	str	r3, [r2, #0]
	return res;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800737e:	f107 0310 	add.w	r3, r7, #16
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fc9c 	bl	8006cc0 <get_ldnumber>
 8007388:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	da01      	bge.n	8007394 <f_mount+0x28>
 8007390:	230b      	movs	r3, #11
 8007392:	e02b      	b.n	80073ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007394:	4a17      	ldr	r2, [pc, #92]	@ (80073f4 <f_mount+0x88>)
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f7fe f8f1 	bl	800558c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	490d      	ldr	r1, [pc, #52]	@ (80073f4 <f_mount+0x88>)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <f_mount+0x66>
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d001      	beq.n	80073d6 <f_mount+0x6a>
 80073d2:	2300      	movs	r3, #0
 80073d4:	e00a      	b.n	80073ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80073d6:	f107 010c 	add.w	r1, r7, #12
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	2200      	movs	r2, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fd07 	bl	8006df4 <find_volume>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20003268 	.word	0x20003268

080073f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b09a      	sub	sp, #104	@ 0x68
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <f_open+0x18>
 800740c:	2309      	movs	r3, #9
 800740e:	e1b7      	b.n	8007780 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007416:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007418:	79fa      	ldrb	r2, [r7, #7]
 800741a:	f107 0114 	add.w	r1, r7, #20
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fce6 	bl	8006df4 <find_volume>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800742e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 819b 	bne.w	800776e <f_open+0x376>
		dj.obj.fs = fs;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	f107 0318 	add.w	r3, r7, #24
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fbc5 	bl	8006bd4 <follow_path>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007450:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007454:	2b00      	cmp	r3, #0
 8007456:	d118      	bne.n	800748a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007458:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800745c:	b25b      	sxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	da03      	bge.n	800746a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007462:	2306      	movs	r3, #6
 8007464:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007468:	e00f      	b.n	800748a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	2b01      	cmp	r3, #1
 800746e:	bf8c      	ite	hi
 8007470:	2301      	movhi	r3, #1
 8007472:	2300      	movls	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	461a      	mov	r2, r3
 8007478:	f107 0318 	add.w	r3, r7, #24
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd ff3c 	bl	80052fc <chk_lock>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	f003 031c 	and.w	r3, r3, #28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d07f      	beq.n	8007594 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007494:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007498:	2b00      	cmp	r3, #0
 800749a:	d017      	beq.n	80074cc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800749c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d10e      	bne.n	80074c2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074a4:	f7fd ff86 	bl	80053b4 <enq_lock>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <f_open+0xc4>
 80074ae:	f107 0318 	add.w	r3, r7, #24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff f8de 	bl	8006674 <dir_register>
 80074b8:	4603      	mov	r3, r0
 80074ba:	e000      	b.n	80074be <f_open+0xc6>
 80074bc:	2312      	movs	r3, #18
 80074be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	f043 0308 	orr.w	r3, r3, #8
 80074c8:	71fb      	strb	r3, [r7, #7]
 80074ca:	e010      	b.n	80074ee <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80074cc:	7fbb      	ldrb	r3, [r7, #30]
 80074ce:	f003 0311 	and.w	r3, r3, #17
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <f_open+0xe6>
					res = FR_DENIED;
 80074d6:	2307      	movs	r3, #7
 80074d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80074dc:	e007      	b.n	80074ee <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <f_open+0xf6>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80074ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d168      	bne.n	80075c8 <f_open+0x1d0>
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d063      	beq.n	80075c8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007500:	f7fd fcfc 	bl	8004efc <get_fattime>
 8007504:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007508:	330e      	adds	r3, #14
 800750a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800750c:	4618      	mov	r0, r3
 800750e:	f7fd fe4b 	bl	80051a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	3316      	adds	r3, #22
 8007516:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007518:	4618      	mov	r0, r3
 800751a:	f7fd fe45 	bl	80051a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007520:	330b      	adds	r3, #11
 8007522:	2220      	movs	r2, #32
 8007524:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe fe1a 	bl	8006166 <ld_clust>
 8007532:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007538:	2200      	movs	r2, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fe32 	bl	80061a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007542:	331c      	adds	r3, #28
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f7fd fe2e 	bl	80051a8 <st_dword>
					fs->wflag = 1;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2201      	movs	r2, #1
 8007550:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007554:	2b00      	cmp	r3, #0
 8007556:	d037      	beq.n	80075c8 <f_open+0x1d0>
						dw = fs->winsect;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800755e:	f107 0318 	add.w	r3, r7, #24
 8007562:	2200      	movs	r2, #0
 8007564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fb22 	bl	8005bb0 <remove_chain>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007572:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007576:	2b00      	cmp	r3, #0
 8007578:	d126      	bne.n	80075c8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe f86c 	bl	800565c <move_window>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800758e:	3a01      	subs	r2, #1
 8007590:	615a      	str	r2, [r3, #20]
 8007592:	e019      	b.n	80075c8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007594:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007598:	2b00      	cmp	r3, #0
 800759a:	d115      	bne.n	80075c8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800759c:	7fbb      	ldrb	r3, [r7, #30]
 800759e:	f003 0310 	and.w	r3, r3, #16
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <f_open+0x1b6>
					res = FR_NO_FILE;
 80075a6:	2304      	movs	r3, #4
 80075a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80075ac:	e00c      	b.n	80075c8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d007      	beq.n	80075c8 <f_open+0x1d0>
 80075b8:	7fbb      	ldrb	r3, [r7, #30]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <f_open+0x1d0>
						res = FR_DENIED;
 80075c2:	2307      	movs	r3, #7
 80075c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80075c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d126      	bne.n	800761e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80075ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	bf8c      	ite	hi
 80075f6:	2301      	movhi	r3, #1
 80075f8:	2300      	movls	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	f107 0318 	add.w	r3, r7, #24
 8007602:	4611      	mov	r1, r2
 8007604:	4618      	mov	r0, r3
 8007606:	f7fd fef7 	bl	80053f8 <inc_lock>
 800760a:	4602      	mov	r2, r0
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <f_open+0x226>
 8007618:	2302      	movs	r3, #2
 800761a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800761e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007622:	2b00      	cmp	r3, #0
 8007624:	f040 80a3 	bne.w	800776e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800762c:	4611      	mov	r1, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fd99 	bl	8006166 <ld_clust>
 8007634:	4602      	mov	r2, r0
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	331c      	adds	r3, #28
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd fd74 	bl	800512c <ld_dword>
 8007644:	4602      	mov	r2, r0
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	88da      	ldrh	r2, [r3, #6]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	79fa      	ldrb	r2, [r7, #7]
 8007662:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3330      	adds	r3, #48	@ 0x30
 800767a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd fdde 	bl	8005242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d06e      	beq.n	800776e <f_open+0x376>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d06a      	beq.n	800776e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	895b      	ldrh	r3, [r3, #10]
 80076a4:	461a      	mov	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	899b      	ldrh	r3, [r3, #12]
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076bc:	e016      	b.n	80076ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe f887 	bl	80057d6 <get_fat>
 80076c8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80076ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d802      	bhi.n	80076d6 <f_open+0x2de>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80076d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d102      	bne.n	80076e4 <f_open+0x2ec>
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <f_open+0x304>
 80076f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d8e0      	bhi.n	80076be <f_open+0x2c6>
				}
				fp->clust = clst;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007700:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007702:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007706:	2b00      	cmp	r3, #0
 8007708:	d131      	bne.n	800776e <f_open+0x376>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	899b      	ldrh	r3, [r3, #12]
 800770e:	461a      	mov	r2, r3
 8007710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007712:	fbb3 f1f2 	udiv	r1, r3, r2
 8007716:	fb01 f202 	mul.w	r2, r1, r2
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d026      	beq.n	800776e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe f837 	bl	8005798 <clust2sect>
 800772a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800772c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d103      	bne.n	800773a <f_open+0x342>
						res = FR_INT_ERR;
 8007732:	2302      	movs	r3, #2
 8007734:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007738:	e019      	b.n	800776e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	899b      	ldrh	r3, [r3, #12]
 800773e:	461a      	mov	r2, r3
 8007740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007742:	fbb3 f2f2 	udiv	r2, r3, r2
 8007746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007748:	441a      	add	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	7858      	ldrb	r0, [r3, #1]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	2301      	movs	r3, #1
 800775e:	f7fd fc6f 	bl	8005040 <disk_read>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <f_open+0x376>
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800776e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <f_open+0x384>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800777c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007780:	4618      	mov	r0, r3
 8007782:	3768      	adds	r7, #104	@ 0x68
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	@ 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f107 0210 	add.w	r2, r7, #16
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fda9 	bl	8007300 <validate>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80077b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d107      	bne.n	80077cc <f_write+0x44>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	7d5b      	ldrb	r3, [r3, #21]
 80077c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80077c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <f_write+0x4a>
 80077cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077d0:	e16a      	b.n	8007aa8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	7d1b      	ldrb	r3, [r3, #20]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <f_write+0x5a>
 80077de:	2307      	movs	r3, #7
 80077e0:	e162      	b.n	8007aa8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	441a      	add	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	f080 814c 	bcs.w	8007a8c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	43db      	mvns	r3, r3
 80077fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80077fc:	e146      	b.n	8007a8c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	8992      	ldrh	r2, [r2, #12]
 8007806:	fbb3 f1f2 	udiv	r1, r3, r2
 800780a:	fb01 f202 	mul.w	r2, r1, r2
 800780e:	1a9b      	subs	r3, r3, r2
 8007810:	2b00      	cmp	r3, #0
 8007812:	f040 80f1 	bne.w	80079f8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	8992      	ldrh	r2, [r2, #12]
 800781e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	8952      	ldrh	r2, [r2, #10]
 8007826:	3a01      	subs	r2, #1
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d143      	bne.n	80078ba <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10c      	bne.n	8007854 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	d11a      	bne.n	800787c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2100      	movs	r1, #0
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fa15 	bl	8005c7a <create_chain>
 8007850:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007852:	e013      	b.n	800787c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4619      	mov	r1, r3
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7fe faa1 	bl	8005daa <clmt_clust>
 8007868:	62b8      	str	r0, [r7, #40]	@ 0x28
 800786a:	e007      	b.n	800787c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f7fe fa00 	bl	8005c7a <create_chain>
 800787a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8109 	beq.w	8007a96 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007886:	2b01      	cmp	r3, #1
 8007888:	d104      	bne.n	8007894 <f_write+0x10c>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2202      	movs	r2, #2
 800788e:	755a      	strb	r2, [r3, #21]
 8007890:	2302      	movs	r3, #2
 8007892:	e109      	b.n	8007aa8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d104      	bne.n	80078a6 <f_write+0x11e>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	755a      	strb	r2, [r3, #21]
 80078a2:	2301      	movs	r3, #1
 80078a4:	e100      	b.n	8007aa8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078aa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <f_write+0x132>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078b8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	7d1b      	ldrb	r3, [r3, #20]
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da18      	bge.n	80078f6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	7858      	ldrb	r0, [r3, #1]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	2301      	movs	r3, #1
 80078d4:	f7fd fbd4 	bl	8005080 <disk_write>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <f_write+0x160>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	755a      	strb	r2, [r3, #21]
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0df      	b.n	8007aa8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	7d1b      	ldrb	r3, [r3, #20]
 80078ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fd ff4a 	bl	8005798 <clust2sect>
 8007904:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <f_write+0x18e>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2202      	movs	r2, #2
 8007910:	755a      	strb	r2, [r3, #21]
 8007912:	2302      	movs	r3, #2
 8007914:	e0c8      	b.n	8007aa8 <f_write+0x320>
			sect += csect;
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	4413      	add	r3, r2
 800791c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	899b      	ldrh	r3, [r3, #12]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	fbb3 f3f2 	udiv	r3, r3, r2
 800792a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d043      	beq.n	80079ba <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	4413      	add	r3, r2
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	8952      	ldrh	r2, [r2, #10]
 800793c:	4293      	cmp	r3, r2
 800793e:	d905      	bls.n	800794c <f_write+0x1c4>
					cc = fs->csize - csect;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	895b      	ldrh	r3, [r3, #10]
 8007944:	461a      	mov	r2, r3
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	7858      	ldrb	r0, [r3, #1]
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	f7fd fb93 	bl	8005080 <disk_write>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <f_write+0x1e2>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	755a      	strb	r2, [r3, #21]
 8007966:	2301      	movs	r3, #1
 8007968:	e09e      	b.n	8007aa8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1a      	ldr	r2, [r3, #32]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	6a3a      	ldr	r2, [r7, #32]
 8007974:	429a      	cmp	r2, r3
 8007976:	d918      	bls.n	80079aa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	8992      	ldrh	r2, [r2, #12]
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	18d1      	adds	r1, r2, r3
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	899b      	ldrh	r3, [r3, #12]
 8007996:	461a      	mov	r2, r3
 8007998:	f7fd fc32 	bl	8005200 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	7d1b      	ldrb	r3, [r3, #20]
 80079a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	899b      	ldrh	r3, [r3, #12]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80079b8:	e04b      	b.n	8007a52 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d016      	beq.n	80079f2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	699a      	ldr	r2, [r3, #24]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d210      	bcs.n	80079f2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	7858      	ldrb	r0, [r3, #1]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079da:	2301      	movs	r3, #1
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	f7fd fb2f 	bl	8005040 <disk_read>
 80079e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	755a      	strb	r2, [r3, #21]
 80079ee:	2301      	movs	r3, #1
 80079f0:	e05a      	b.n	8007aa8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	899b      	ldrh	r3, [r3, #12]
 80079fc:	4618      	mov	r0, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	8992      	ldrh	r2, [r2, #12]
 8007a06:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a0a:	fb01 f202 	mul.w	r2, r1, r2
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	1ac3      	subs	r3, r0, r3
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d901      	bls.n	8007a20 <f_write+0x298>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	8992      	ldrh	r2, [r2, #12]
 8007a2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a32:	fb00 f202 	mul.w	r2, r0, r2
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	440b      	add	r3, r1
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a3c:	69f9      	ldr	r1, [r7, #28]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fbde 	bl	8005200 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	7d1b      	ldrb	r3, [r3, #20]
 8007a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	4413      	add	r3, r2
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	441a      	add	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	619a      	str	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	bf38      	it	cc
 8007a72:	461a      	movcc	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	60da      	str	r2, [r3, #12]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	441a      	add	r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f47f aeb5 	bne.w	80077fe <f_write+0x76>
 8007a94:	e000      	b.n	8007a98 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a96:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	7d1b      	ldrb	r3, [r3, #20]
 8007a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	@ 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f107 0208 	add.w	r2, r7, #8
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fc1d 	bl	8007300 <validate>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d168      	bne.n	8007ba2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7d1b      	ldrb	r3, [r3, #20]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d062      	beq.n	8007ba2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7d1b      	ldrb	r3, [r3, #20]
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da15      	bge.n	8007b12 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	7858      	ldrb	r0, [r3, #1]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	2301      	movs	r3, #1
 8007af6:	f7fd fac3 	bl	8005080 <disk_write>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <f_sync+0x54>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e04f      	b.n	8007ba4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7d1b      	ldrb	r3, [r3, #20]
 8007b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007b12:	f7fd f9f3 	bl	8004efc <get_fattime>
 8007b16:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7fd fd9b 	bl	800565c <move_window>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d138      	bne.n	8007ba2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b34:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	330b      	adds	r3, #11
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	330b      	adds	r3, #11
 8007b40:	f042 0220 	orr.w	r2, r2, #32
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	461a      	mov	r2, r3
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	f7fe fb26 	bl	80061a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f103 021c 	add.w	r2, r3, #28
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7fd fb1f 	bl	80051a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3316      	adds	r3, #22
 8007b6e:	6939      	ldr	r1, [r7, #16]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fd fb19 	bl	80051a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3312      	adds	r3, #18
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fd faf8 	bl	8005172 <st_word>
					fs->wflag = 1;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2201      	movs	r2, #1
 8007b86:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fd fd94 	bl	80056b8 <sync_fs>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7d1b      	ldrb	r3, [r3, #20]
 8007b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ff7b 	bl	8007ab0 <f_sync>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d118      	bne.n	8007bf6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f107 0208 	add.w	r2, r7, #8
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fb97 	bl	8007300 <validate>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10c      	bne.n	8007bf6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fd fc97 	bl	8005514 <dec_lock>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b090      	sub	sp, #64	@ 0x40
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f107 0208 	add.w	r2, r7, #8
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fb74 	bl	8007300 <validate>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007c1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <f_lseek+0x2e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7d5b      	ldrb	r3, [r3, #21]
 8007c2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <f_lseek+0x3c>
 8007c36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c3a:	e201      	b.n	8008040 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80d9 	beq.w	8007df8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d15a      	bne.n	8007d04 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c52:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	1d1a      	adds	r2, r3, #4
 8007c58:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	2302      	movs	r3, #2
 8007c60:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03a      	beq.n	8007ce4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	2300      	movs	r3, #0
 8007c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	3302      	adds	r3, #2
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c82:	3301      	adds	r3, #1
 8007c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd fda3 	bl	80057d6 <get_fat>
 8007c90:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d804      	bhi.n	8007ca2 <f_lseek+0xa2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	755a      	strb	r2, [r3, #21]
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e1ce      	b.n	8008040 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d104      	bne.n	8007cb4 <f_lseek+0xb4>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	755a      	strb	r2, [r3, #21]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e1c5      	b.n	8008040 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d0de      	beq.n	8007c7c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d809      	bhi.n	8007cda <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	1d1a      	adds	r2, r3, #4
 8007cca:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d3c4      	bcc.n	8007c6e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007cec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d803      	bhi.n	8007cfc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	e19f      	b.n	800803c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007cfc:	2311      	movs	r3, #17
 8007cfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007d02:	e19b      	b.n	800803c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d902      	bls.n	8007d14 <f_lseek+0x114>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 818d 	beq.w	800803c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7fe f83e 	bl	8005daa <clmt_clust>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f7fd fd2b 	bl	8005798 <clust2sect>
 8007d42:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <f_lseek+0x154>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	755a      	strb	r2, [r3, #21]
 8007d50:	2302      	movs	r3, #2
 8007d52:	e175      	b.n	8008040 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	8992      	ldrh	r2, [r2, #12]
 8007d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	8952      	ldrh	r2, [r2, #10]
 8007d64:	3a01      	subs	r2, #1
 8007d66:	4013      	ands	r3, r2
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	8992      	ldrh	r2, [r2, #12]
 8007d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d7a:	fb01 f202 	mul.w	r2, r1, r2
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 815b 	beq.w	800803c <f_lseek+0x43c>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	f000 8155 	beq.w	800803c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7d1b      	ldrb	r3, [r3, #20]
 8007d96:	b25b      	sxtb	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	da18      	bge.n	8007dce <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	7858      	ldrb	r0, [r3, #1]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	2301      	movs	r3, #1
 8007dac:	f7fd f968 	bl	8005080 <disk_write>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <f_lseek+0x1c0>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	755a      	strb	r2, [r3, #21]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e13f      	b.n	8008040 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7d1b      	ldrb	r3, [r3, #20]
 8007dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	7858      	ldrb	r0, [r3, #1]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007dd8:	2301      	movs	r3, #1
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	f7fd f930 	bl	8005040 <disk_read>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <f_lseek+0x1f0>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	755a      	strb	r2, [r3, #21]
 8007dec:	2301      	movs	r3, #1
 8007dee:	e127      	b.n	8008040 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	621a      	str	r2, [r3, #32]
 8007df6:	e121      	b.n	800803c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d908      	bls.n	8007e14 <f_lseek+0x214>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7d1b      	ldrb	r3, [r3, #20]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e22:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80b5 	beq.w	8007f96 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	895b      	ldrh	r3, [r3, #10]
 8007e30:	461a      	mov	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	899b      	ldrh	r3, [r3, #12]
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01b      	beq.n	8007e7a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	1e5a      	subs	r2, r3, #1
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	1e59      	subs	r1, r3, #1
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d30f      	bcc.n	8007e7a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	1e5a      	subs	r2, r3, #1
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	425b      	negs	r3, r3
 8007e62:	401a      	ands	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e78:	e022      	b.n	8007ec0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d119      	bne.n	8007eba <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fd fef5 	bl	8005c7a <create_chain>
 8007e90:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d104      	bne.n	8007ea2 <f_lseek+0x2a2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	755a      	strb	r2, [r3, #21]
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e0ce      	b.n	8008040 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d104      	bne.n	8007eb4 <f_lseek+0x2b4>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	755a      	strb	r2, [r3, #21]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0c5      	b.n	8008040 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eb8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ebe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d067      	beq.n	8007f96 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007ec6:	e03a      	b.n	8007f3e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	7d1b      	ldrb	r3, [r3, #20]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fd fec4 	bl	8005c7a <create_chain>
 8007ef2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d108      	bne.n	8007f0c <f_lseek+0x30c>
							ofs = 0; break;
 8007efa:	2300      	movs	r3, #0
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	e022      	b.n	8007f46 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fd fc66 	bl	80057d6 <get_fat>
 8007f0a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d104      	bne.n	8007f1e <f_lseek+0x31e>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	755a      	strb	r2, [r3, #21]
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e090      	b.n	8008040 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d904      	bls.n	8007f2e <f_lseek+0x32e>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d304      	bcc.n	8007f38 <f_lseek+0x338>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2202      	movs	r2, #2
 8007f32:	755a      	strb	r2, [r3, #21]
 8007f34:	2302      	movs	r3, #2
 8007f36:	e083      	b.n	8008040 <f_lseek+0x440>
					fp->clust = clst;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f3c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d8c0      	bhi.n	8007ec8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	899b      	ldrh	r3, [r3, #12]
 8007f56:	461a      	mov	r2, r3
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f5e:	fb01 f202 	mul.w	r2, r1, r2
 8007f62:	1a9b      	subs	r3, r3, r2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d016      	beq.n	8007f96 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fd fc13 	bl	8005798 <clust2sect>
 8007f72:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <f_lseek+0x384>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	755a      	strb	r2, [r3, #21]
 8007f80:	2302      	movs	r3, #2
 8007f82:	e05d      	b.n	8008040 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	899b      	ldrh	r3, [r3, #12]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f92:	4413      	add	r3, r2
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d90a      	bls.n	8007fb8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7d1b      	ldrb	r3, [r3, #20]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	8992      	ldrh	r2, [r2, #12]
 8007fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc4:	fb01 f202 	mul.w	r2, r1, r2
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d036      	beq.n	800803c <f_lseek+0x43c>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d031      	beq.n	800803c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7d1b      	ldrb	r3, [r3, #20]
 8007fdc:	b25b      	sxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	da18      	bge.n	8008014 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	7858      	ldrb	r0, [r3, #1]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f7fd f845 	bl	8005080 <disk_write>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <f_lseek+0x406>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	755a      	strb	r2, [r3, #21]
 8008002:	2301      	movs	r3, #1
 8008004:	e01c      	b.n	8008040 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7d1b      	ldrb	r3, [r3, #20]
 800800a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800800e:	b2da      	uxtb	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	7858      	ldrb	r0, [r3, #1]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800801e:	2301      	movs	r3, #1
 8008020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008022:	f7fd f80d 	bl	8005040 <disk_read>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d004      	beq.n	8008036 <f_lseek+0x436>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	755a      	strb	r2, [r3, #21]
 8008032:	2301      	movs	r3, #1
 8008034:	e004      	b.n	8008040 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800803a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800803c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008040:	4618      	mov	r0, r3
 8008042:	3740      	adds	r7, #64	@ 0x40
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800805e:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 8008060:	7a5b      	ldrb	r3, [r3, #9]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d131      	bne.n	80080cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008068:	4b1c      	ldr	r3, [pc, #112]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 800806a:	7a5b      	ldrb	r3, [r3, #9]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	4b1a      	ldr	r3, [pc, #104]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 8008072:	2100      	movs	r1, #0
 8008074:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008076:	4b19      	ldr	r3, [pc, #100]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 8008078:	7a5b      	ldrb	r3, [r3, #9]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008086:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 8008088:	7a5b      	ldrb	r3, [r3, #9]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	4b13      	ldr	r3, [pc, #76]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 8008090:	4413      	add	r3, r2
 8008092:	79fa      	ldrb	r2, [r7, #7]
 8008094:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008096:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 8008098:	7a5b      	ldrb	r3, [r3, #9]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	b2d1      	uxtb	r1, r2
 80080a0:	4a0e      	ldr	r2, [pc, #56]	@ (80080dc <FATFS_LinkDriverEx+0x94>)
 80080a2:	7251      	strb	r1, [r2, #9]
 80080a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80080a6:	7dbb      	ldrb	r3, [r7, #22]
 80080a8:	3330      	adds	r3, #48	@ 0x30
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3301      	adds	r3, #1
 80080b4:	223a      	movs	r2, #58	@ 0x3a
 80080b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3302      	adds	r3, #2
 80080bc:	222f      	movs	r2, #47	@ 0x2f
 80080be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3303      	adds	r3, #3
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20003490 	.word	0x20003490

080080e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80080ea:	2200      	movs	r2, #0
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff ffaa 	bl	8008048 <FATFS_LinkDriverEx>
 80080f4:	4603      	mov	r3, r0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008110:	d802      	bhi.n	8008118 <ff_convert+0x18>
		c = chr;
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	81fb      	strh	r3, [r7, #14]
 8008116:	e025      	b.n	8008164 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	2bff      	cmp	r3, #255	@ 0xff
 8008122:	d805      	bhi.n	8008130 <ff_convert+0x30>
 8008124:	88fb      	ldrh	r3, [r7, #6]
 8008126:	3b80      	subs	r3, #128	@ 0x80
 8008128:	4a12      	ldr	r2, [pc, #72]	@ (8008174 <ff_convert+0x74>)
 800812a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800812e:	e000      	b.n	8008132 <ff_convert+0x32>
 8008130:	2300      	movs	r3, #0
 8008132:	81fb      	strh	r3, [r7, #14]
 8008134:	e016      	b.n	8008164 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008136:	2300      	movs	r3, #0
 8008138:	81fb      	strh	r3, [r7, #14]
 800813a:	e009      	b.n	8008150 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800813c:	89fb      	ldrh	r3, [r7, #14]
 800813e:	4a0d      	ldr	r2, [pc, #52]	@ (8008174 <ff_convert+0x74>)
 8008140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008144:	88fa      	ldrh	r2, [r7, #6]
 8008146:	429a      	cmp	r2, r3
 8008148:	d006      	beq.n	8008158 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800814a:	89fb      	ldrh	r3, [r7, #14]
 800814c:	3301      	adds	r3, #1
 800814e:	81fb      	strh	r3, [r7, #14]
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	2b7f      	cmp	r3, #127	@ 0x7f
 8008154:	d9f2      	bls.n	800813c <ff_convert+0x3c>
 8008156:	e000      	b.n	800815a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008158:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	3380      	adds	r3, #128	@ 0x80
 800815e:	b29b      	uxth	r3, r3
 8008160:	b2db      	uxtb	r3, r3
 8008162:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008164:	89fb      	ldrh	r3, [r7, #14]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	08009430 	.word	0x08009430

08008178 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008188:	d201      	bcs.n	800818e <ff_wtoupper+0x16>
 800818a:	4b3e      	ldr	r3, [pc, #248]	@ (8008284 <ff_wtoupper+0x10c>)
 800818c:	e000      	b.n	8008190 <ff_wtoupper+0x18>
 800818e:	4b3e      	ldr	r3, [pc, #248]	@ (8008288 <ff_wtoupper+0x110>)
 8008190:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	1c9a      	adds	r2, r3, #2
 8008196:	617a      	str	r2, [r7, #20]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800819c:	8a7b      	ldrh	r3, [r7, #18]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d068      	beq.n	8008274 <ff_wtoupper+0xfc>
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	8a7b      	ldrh	r3, [r7, #18]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d364      	bcc.n	8008274 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	1c9a      	adds	r2, r3, #2
 80081ae:	617a      	str	r2, [r7, #20]
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	823b      	strh	r3, [r7, #16]
 80081b4:	8a3b      	ldrh	r3, [r7, #16]
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	81fb      	strh	r3, [r7, #14]
 80081ba:	8a3b      	ldrh	r3, [r7, #16]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80081c0:	88fa      	ldrh	r2, [r7, #6]
 80081c2:	8a79      	ldrh	r1, [r7, #18]
 80081c4:	8a3b      	ldrh	r3, [r7, #16]
 80081c6:	440b      	add	r3, r1
 80081c8:	429a      	cmp	r2, r3
 80081ca:	da49      	bge.n	8008260 <ff_wtoupper+0xe8>
			switch (cmd) {
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d84f      	bhi.n	8008272 <ff_wtoupper+0xfa>
 80081d2:	a201      	add	r2, pc, #4	@ (adr r2, 80081d8 <ff_wtoupper+0x60>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	0800820f 	.word	0x0800820f
 80081e0:	08008225 	.word	0x08008225
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	08008235 	.word	0x08008235
 80081ec:	0800823d 	.word	0x0800823d
 80081f0:	08008245 	.word	0x08008245
 80081f4:	0800824d 	.word	0x0800824d
 80081f8:	08008255 	.word	0x08008255
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	8a7b      	ldrh	r3, [r7, #18]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4413      	add	r3, r2
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	80fb      	strh	r3, [r7, #6]
 800820c:	e027      	b.n	800825e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800820e:	88fa      	ldrh	r2, [r7, #6]
 8008210:	8a7b      	ldrh	r3, [r7, #18]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	b29b      	uxth	r3, r3
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	b29b      	uxth	r3, r3
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	80fb      	strh	r3, [r7, #6]
 8008222:	e01c      	b.n	800825e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008224:	88fb      	ldrh	r3, [r7, #6]
 8008226:	3b10      	subs	r3, #16
 8008228:	80fb      	strh	r3, [r7, #6]
 800822a:	e018      	b.n	800825e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	3b20      	subs	r3, #32
 8008230:	80fb      	strh	r3, [r7, #6]
 8008232:	e014      	b.n	800825e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	3b30      	subs	r3, #48	@ 0x30
 8008238:	80fb      	strh	r3, [r7, #6]
 800823a:	e010      	b.n	800825e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	3b1a      	subs	r3, #26
 8008240:	80fb      	strh	r3, [r7, #6]
 8008242:	e00c      	b.n	800825e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	3308      	adds	r3, #8
 8008248:	80fb      	strh	r3, [r7, #6]
 800824a:	e008      	b.n	800825e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	3b50      	subs	r3, #80	@ 0x50
 8008250:	80fb      	strh	r3, [r7, #6]
 8008252:	e004      	b.n	800825e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800825a:	80fb      	strh	r3, [r7, #6]
 800825c:	bf00      	nop
			}
			break;
 800825e:	e008      	b.n	8008272 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008260:	89fb      	ldrh	r3, [r7, #14]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d195      	bne.n	8008192 <ff_wtoupper+0x1a>
 8008266:	8a3b      	ldrh	r3, [r7, #16]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008270:	e78f      	b.n	8008192 <ff_wtoupper+0x1a>
			break;
 8008272:	bf00      	nop
	}

	return chr;
 8008274:	88fb      	ldrh	r3, [r7, #6]
}
 8008276:	4618      	mov	r0, r3
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	08009530 	.word	0x08009530
 8008288:	08009724 	.word	0x08009724

0800828c <std>:
 800828c:	2300      	movs	r3, #0
 800828e:	b510      	push	{r4, lr}
 8008290:	4604      	mov	r4, r0
 8008292:	e9c0 3300 	strd	r3, r3, [r0]
 8008296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829a:	6083      	str	r3, [r0, #8]
 800829c:	8181      	strh	r1, [r0, #12]
 800829e:	6643      	str	r3, [r0, #100]	@ 0x64
 80082a0:	81c2      	strh	r2, [r0, #14]
 80082a2:	6183      	str	r3, [r0, #24]
 80082a4:	4619      	mov	r1, r3
 80082a6:	2208      	movs	r2, #8
 80082a8:	305c      	adds	r0, #92	@ 0x5c
 80082aa:	f000 f9f9 	bl	80086a0 <memset>
 80082ae:	4b0d      	ldr	r3, [pc, #52]	@ (80082e4 <std+0x58>)
 80082b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80082b2:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <std+0x5c>)
 80082b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <std+0x60>)
 80082b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082ba:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <std+0x64>)
 80082bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <std+0x68>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	429c      	cmp	r4, r3
 80082c4:	d006      	beq.n	80082d4 <std+0x48>
 80082c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082ca:	4294      	cmp	r4, r2
 80082cc:	d002      	beq.n	80082d4 <std+0x48>
 80082ce:	33d0      	adds	r3, #208	@ 0xd0
 80082d0:	429c      	cmp	r4, r3
 80082d2:	d105      	bne.n	80082e0 <std+0x54>
 80082d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082dc:	f000 ba58 	b.w	8008790 <__retarget_lock_init_recursive>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	080084f1 	.word	0x080084f1
 80082e8:	08008513 	.word	0x08008513
 80082ec:	0800854b 	.word	0x0800854b
 80082f0:	0800856f 	.word	0x0800856f
 80082f4:	2000349c 	.word	0x2000349c

080082f8 <stdio_exit_handler>:
 80082f8:	4a02      	ldr	r2, [pc, #8]	@ (8008304 <stdio_exit_handler+0xc>)
 80082fa:	4903      	ldr	r1, [pc, #12]	@ (8008308 <stdio_exit_handler+0x10>)
 80082fc:	4803      	ldr	r0, [pc, #12]	@ (800830c <stdio_exit_handler+0x14>)
 80082fe:	f000 b869 	b.w	80083d4 <_fwalk_sglue>
 8008302:	bf00      	nop
 8008304:	20000060 	.word	0x20000060
 8008308:	08009031 	.word	0x08009031
 800830c:	20000070 	.word	0x20000070

08008310 <cleanup_stdio>:
 8008310:	6841      	ldr	r1, [r0, #4]
 8008312:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <cleanup_stdio+0x34>)
 8008314:	4299      	cmp	r1, r3
 8008316:	b510      	push	{r4, lr}
 8008318:	4604      	mov	r4, r0
 800831a:	d001      	beq.n	8008320 <cleanup_stdio+0x10>
 800831c:	f000 fe88 	bl	8009030 <_fflush_r>
 8008320:	68a1      	ldr	r1, [r4, #8]
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <cleanup_stdio+0x38>)
 8008324:	4299      	cmp	r1, r3
 8008326:	d002      	beq.n	800832e <cleanup_stdio+0x1e>
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fe81 	bl	8009030 <_fflush_r>
 800832e:	68e1      	ldr	r1, [r4, #12]
 8008330:	4b06      	ldr	r3, [pc, #24]	@ (800834c <cleanup_stdio+0x3c>)
 8008332:	4299      	cmp	r1, r3
 8008334:	d004      	beq.n	8008340 <cleanup_stdio+0x30>
 8008336:	4620      	mov	r0, r4
 8008338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833c:	f000 be78 	b.w	8009030 <_fflush_r>
 8008340:	bd10      	pop	{r4, pc}
 8008342:	bf00      	nop
 8008344:	2000349c 	.word	0x2000349c
 8008348:	20003504 	.word	0x20003504
 800834c:	2000356c 	.word	0x2000356c

08008350 <global_stdio_init.part.0>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <global_stdio_init.part.0+0x30>)
 8008354:	4c0b      	ldr	r4, [pc, #44]	@ (8008384 <global_stdio_init.part.0+0x34>)
 8008356:	4a0c      	ldr	r2, [pc, #48]	@ (8008388 <global_stdio_init.part.0+0x38>)
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	4620      	mov	r0, r4
 800835c:	2200      	movs	r2, #0
 800835e:	2104      	movs	r1, #4
 8008360:	f7ff ff94 	bl	800828c <std>
 8008364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008368:	2201      	movs	r2, #1
 800836a:	2109      	movs	r1, #9
 800836c:	f7ff ff8e 	bl	800828c <std>
 8008370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008374:	2202      	movs	r2, #2
 8008376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837a:	2112      	movs	r1, #18
 800837c:	f7ff bf86 	b.w	800828c <std>
 8008380:	200035d4 	.word	0x200035d4
 8008384:	2000349c 	.word	0x2000349c
 8008388:	080082f9 	.word	0x080082f9

0800838c <__sfp_lock_acquire>:
 800838c:	4801      	ldr	r0, [pc, #4]	@ (8008394 <__sfp_lock_acquire+0x8>)
 800838e:	f000 ba00 	b.w	8008792 <__retarget_lock_acquire_recursive>
 8008392:	bf00      	nop
 8008394:	200035dd 	.word	0x200035dd

08008398 <__sfp_lock_release>:
 8008398:	4801      	ldr	r0, [pc, #4]	@ (80083a0 <__sfp_lock_release+0x8>)
 800839a:	f000 b9fb 	b.w	8008794 <__retarget_lock_release_recursive>
 800839e:	bf00      	nop
 80083a0:	200035dd 	.word	0x200035dd

080083a4 <__sinit>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	4604      	mov	r4, r0
 80083a8:	f7ff fff0 	bl	800838c <__sfp_lock_acquire>
 80083ac:	6a23      	ldr	r3, [r4, #32]
 80083ae:	b11b      	cbz	r3, 80083b8 <__sinit+0x14>
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b4:	f7ff bff0 	b.w	8008398 <__sfp_lock_release>
 80083b8:	4b04      	ldr	r3, [pc, #16]	@ (80083cc <__sinit+0x28>)
 80083ba:	6223      	str	r3, [r4, #32]
 80083bc:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <__sinit+0x2c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f5      	bne.n	80083b0 <__sinit+0xc>
 80083c4:	f7ff ffc4 	bl	8008350 <global_stdio_init.part.0>
 80083c8:	e7f2      	b.n	80083b0 <__sinit+0xc>
 80083ca:	bf00      	nop
 80083cc:	08008311 	.word	0x08008311
 80083d0:	200035d4 	.word	0x200035d4

080083d4 <_fwalk_sglue>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4607      	mov	r7, r0
 80083da:	4688      	mov	r8, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	2600      	movs	r6, #0
 80083e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083e4:	f1b9 0901 	subs.w	r9, r9, #1
 80083e8:	d505      	bpl.n	80083f6 <_fwalk_sglue+0x22>
 80083ea:	6824      	ldr	r4, [r4, #0]
 80083ec:	2c00      	cmp	r4, #0
 80083ee:	d1f7      	bne.n	80083e0 <_fwalk_sglue+0xc>
 80083f0:	4630      	mov	r0, r6
 80083f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d907      	bls.n	800840c <_fwalk_sglue+0x38>
 80083fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008400:	3301      	adds	r3, #1
 8008402:	d003      	beq.n	800840c <_fwalk_sglue+0x38>
 8008404:	4629      	mov	r1, r5
 8008406:	4638      	mov	r0, r7
 8008408:	47c0      	blx	r8
 800840a:	4306      	orrs	r6, r0
 800840c:	3568      	adds	r5, #104	@ 0x68
 800840e:	e7e9      	b.n	80083e4 <_fwalk_sglue+0x10>

08008410 <iprintf>:
 8008410:	b40f      	push	{r0, r1, r2, r3}
 8008412:	b507      	push	{r0, r1, r2, lr}
 8008414:	4906      	ldr	r1, [pc, #24]	@ (8008430 <iprintf+0x20>)
 8008416:	ab04      	add	r3, sp, #16
 8008418:	6808      	ldr	r0, [r1, #0]
 800841a:	f853 2b04 	ldr.w	r2, [r3], #4
 800841e:	6881      	ldr	r1, [r0, #8]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	f000 fadb 	bl	80089dc <_vfiprintf_r>
 8008426:	b003      	add	sp, #12
 8008428:	f85d eb04 	ldr.w	lr, [sp], #4
 800842c:	b004      	add	sp, #16
 800842e:	4770      	bx	lr
 8008430:	2000006c 	.word	0x2000006c

08008434 <_puts_r>:
 8008434:	6a03      	ldr	r3, [r0, #32]
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	6884      	ldr	r4, [r0, #8]
 800843a:	4605      	mov	r5, r0
 800843c:	460e      	mov	r6, r1
 800843e:	b90b      	cbnz	r3, 8008444 <_puts_r+0x10>
 8008440:	f7ff ffb0 	bl	80083a4 <__sinit>
 8008444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008446:	07db      	lsls	r3, r3, #31
 8008448:	d405      	bmi.n	8008456 <_puts_r+0x22>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	0598      	lsls	r0, r3, #22
 800844e:	d402      	bmi.n	8008456 <_puts_r+0x22>
 8008450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008452:	f000 f99e 	bl	8008792 <__retarget_lock_acquire_recursive>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	0719      	lsls	r1, r3, #28
 800845a:	d502      	bpl.n	8008462 <_puts_r+0x2e>
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d135      	bne.n	80084ce <_puts_r+0x9a>
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f000 f8c5 	bl	80085f4 <__swsetup_r>
 800846a:	b380      	cbz	r0, 80084ce <_puts_r+0x9a>
 800846c:	f04f 35ff 	mov.w	r5, #4294967295
 8008470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008472:	07da      	lsls	r2, r3, #31
 8008474:	d405      	bmi.n	8008482 <_puts_r+0x4e>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	059b      	lsls	r3, r3, #22
 800847a:	d402      	bmi.n	8008482 <_puts_r+0x4e>
 800847c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847e:	f000 f989 	bl	8008794 <__retarget_lock_release_recursive>
 8008482:	4628      	mov	r0, r5
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	2b00      	cmp	r3, #0
 8008488:	da04      	bge.n	8008494 <_puts_r+0x60>
 800848a:	69a2      	ldr	r2, [r4, #24]
 800848c:	429a      	cmp	r2, r3
 800848e:	dc17      	bgt.n	80084c0 <_puts_r+0x8c>
 8008490:	290a      	cmp	r1, #10
 8008492:	d015      	beq.n	80084c0 <_puts_r+0x8c>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	6022      	str	r2, [r4, #0]
 800849a:	7019      	strb	r1, [r3, #0]
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084a2:	3b01      	subs	r3, #1
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d1ed      	bne.n	8008486 <_puts_r+0x52>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da11      	bge.n	80084d2 <_puts_r+0x9e>
 80084ae:	4622      	mov	r2, r4
 80084b0:	210a      	movs	r1, #10
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 f85f 	bl	8008576 <__swbuf_r>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d0d7      	beq.n	800846c <_puts_r+0x38>
 80084bc:	250a      	movs	r5, #10
 80084be:	e7d7      	b.n	8008470 <_puts_r+0x3c>
 80084c0:	4622      	mov	r2, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 f857 	bl	8008576 <__swbuf_r>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d1e7      	bne.n	800849c <_puts_r+0x68>
 80084cc:	e7ce      	b.n	800846c <_puts_r+0x38>
 80084ce:	3e01      	subs	r6, #1
 80084d0:	e7e4      	b.n	800849c <_puts_r+0x68>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	220a      	movs	r2, #10
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	e7ee      	b.n	80084bc <_puts_r+0x88>
	...

080084e0 <puts>:
 80084e0:	4b02      	ldr	r3, [pc, #8]	@ (80084ec <puts+0xc>)
 80084e2:	4601      	mov	r1, r0
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f7ff bfa5 	b.w	8008434 <_puts_r>
 80084ea:	bf00      	nop
 80084ec:	2000006c 	.word	0x2000006c

080084f0 <__sread>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	460c      	mov	r4, r1
 80084f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f8:	f000 f8fc 	bl	80086f4 <_read_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	bfab      	itete	ge
 8008500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008502:	89a3      	ldrhlt	r3, [r4, #12]
 8008504:	181b      	addge	r3, r3, r0
 8008506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800850a:	bfac      	ite	ge
 800850c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800850e:	81a3      	strhlt	r3, [r4, #12]
 8008510:	bd10      	pop	{r4, pc}

08008512 <__swrite>:
 8008512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008516:	461f      	mov	r7, r3
 8008518:	898b      	ldrh	r3, [r1, #12]
 800851a:	05db      	lsls	r3, r3, #23
 800851c:	4605      	mov	r5, r0
 800851e:	460c      	mov	r4, r1
 8008520:	4616      	mov	r6, r2
 8008522:	d505      	bpl.n	8008530 <__swrite+0x1e>
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	2302      	movs	r3, #2
 800852a:	2200      	movs	r2, #0
 800852c:	f000 f8d0 	bl	80086d0 <_lseek_r>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	4632      	mov	r2, r6
 800853e:	463b      	mov	r3, r7
 8008540:	4628      	mov	r0, r5
 8008542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008546:	f000 b8e7 	b.w	8008718 <_write_r>

0800854a <__sseek>:
 800854a:	b510      	push	{r4, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008552:	f000 f8bd 	bl	80086d0 <_lseek_r>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	bf15      	itete	ne
 800855c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800855e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008566:	81a3      	strheq	r3, [r4, #12]
 8008568:	bf18      	it	ne
 800856a:	81a3      	strhne	r3, [r4, #12]
 800856c:	bd10      	pop	{r4, pc}

0800856e <__sclose>:
 800856e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008572:	f000 b89d 	b.w	80086b0 <_close_r>

08008576 <__swbuf_r>:
 8008576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008578:	460e      	mov	r6, r1
 800857a:	4614      	mov	r4, r2
 800857c:	4605      	mov	r5, r0
 800857e:	b118      	cbz	r0, 8008588 <__swbuf_r+0x12>
 8008580:	6a03      	ldr	r3, [r0, #32]
 8008582:	b90b      	cbnz	r3, 8008588 <__swbuf_r+0x12>
 8008584:	f7ff ff0e 	bl	80083a4 <__sinit>
 8008588:	69a3      	ldr	r3, [r4, #24]
 800858a:	60a3      	str	r3, [r4, #8]
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	071a      	lsls	r2, r3, #28
 8008590:	d501      	bpl.n	8008596 <__swbuf_r+0x20>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	b943      	cbnz	r3, 80085a8 <__swbuf_r+0x32>
 8008596:	4621      	mov	r1, r4
 8008598:	4628      	mov	r0, r5
 800859a:	f000 f82b 	bl	80085f4 <__swsetup_r>
 800859e:	b118      	cbz	r0, 80085a8 <__swbuf_r+0x32>
 80085a0:	f04f 37ff 	mov.w	r7, #4294967295
 80085a4:	4638      	mov	r0, r7
 80085a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	6922      	ldr	r2, [r4, #16]
 80085ac:	1a98      	subs	r0, r3, r2
 80085ae:	6963      	ldr	r3, [r4, #20]
 80085b0:	b2f6      	uxtb	r6, r6
 80085b2:	4283      	cmp	r3, r0
 80085b4:	4637      	mov	r7, r6
 80085b6:	dc05      	bgt.n	80085c4 <__swbuf_r+0x4e>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 fd38 	bl	8009030 <_fflush_r>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1ed      	bne.n	80085a0 <__swbuf_r+0x2a>
 80085c4:	68a3      	ldr	r3, [r4, #8]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	701e      	strb	r6, [r3, #0]
 80085d2:	6962      	ldr	r2, [r4, #20]
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d004      	beq.n	80085e4 <__swbuf_r+0x6e>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	07db      	lsls	r3, r3, #31
 80085de:	d5e1      	bpl.n	80085a4 <__swbuf_r+0x2e>
 80085e0:	2e0a      	cmp	r6, #10
 80085e2:	d1df      	bne.n	80085a4 <__swbuf_r+0x2e>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 fd22 	bl	8009030 <_fflush_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d0d9      	beq.n	80085a4 <__swbuf_r+0x2e>
 80085f0:	e7d6      	b.n	80085a0 <__swbuf_r+0x2a>
	...

080085f4 <__swsetup_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4b29      	ldr	r3, [pc, #164]	@ (800869c <__swsetup_r+0xa8>)
 80085f8:	4605      	mov	r5, r0
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	460c      	mov	r4, r1
 80085fe:	b118      	cbz	r0, 8008608 <__swsetup_r+0x14>
 8008600:	6a03      	ldr	r3, [r0, #32]
 8008602:	b90b      	cbnz	r3, 8008608 <__swsetup_r+0x14>
 8008604:	f7ff fece 	bl	80083a4 <__sinit>
 8008608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	d422      	bmi.n	8008656 <__swsetup_r+0x62>
 8008610:	06da      	lsls	r2, r3, #27
 8008612:	d407      	bmi.n	8008624 <__swsetup_r+0x30>
 8008614:	2209      	movs	r2, #9
 8008616:	602a      	str	r2, [r5, #0]
 8008618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	f04f 30ff 	mov.w	r0, #4294967295
 8008622:	e033      	b.n	800868c <__swsetup_r+0x98>
 8008624:	0758      	lsls	r0, r3, #29
 8008626:	d512      	bpl.n	800864e <__swsetup_r+0x5a>
 8008628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800862a:	b141      	cbz	r1, 800863e <__swsetup_r+0x4a>
 800862c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008630:	4299      	cmp	r1, r3
 8008632:	d002      	beq.n	800863a <__swsetup_r+0x46>
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f8af 	bl	8008798 <_free_r>
 800863a:	2300      	movs	r3, #0
 800863c:	6363      	str	r3, [r4, #52]	@ 0x34
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	2300      	movs	r3, #0
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f043 0308 	orr.w	r3, r3, #8
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	b94b      	cbnz	r3, 800866e <__swsetup_r+0x7a>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008664:	d003      	beq.n	800866e <__swsetup_r+0x7a>
 8008666:	4621      	mov	r1, r4
 8008668:	4628      	mov	r0, r5
 800866a:	f000 fd2f 	bl	80090cc <__smakebuf_r>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	f013 0201 	ands.w	r2, r3, #1
 8008676:	d00a      	beq.n	800868e <__swsetup_r+0x9a>
 8008678:	2200      	movs	r2, #0
 800867a:	60a2      	str	r2, [r4, #8]
 800867c:	6962      	ldr	r2, [r4, #20]
 800867e:	4252      	negs	r2, r2
 8008680:	61a2      	str	r2, [r4, #24]
 8008682:	6922      	ldr	r2, [r4, #16]
 8008684:	b942      	cbnz	r2, 8008698 <__swsetup_r+0xa4>
 8008686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800868a:	d1c5      	bne.n	8008618 <__swsetup_r+0x24>
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	0799      	lsls	r1, r3, #30
 8008690:	bf58      	it	pl
 8008692:	6962      	ldrpl	r2, [r4, #20]
 8008694:	60a2      	str	r2, [r4, #8]
 8008696:	e7f4      	b.n	8008682 <__swsetup_r+0x8e>
 8008698:	2000      	movs	r0, #0
 800869a:	e7f7      	b.n	800868c <__swsetup_r+0x98>
 800869c:	2000006c 	.word	0x2000006c

080086a0 <memset>:
 80086a0:	4402      	add	r2, r0
 80086a2:	4603      	mov	r3, r0
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d100      	bne.n	80086aa <memset+0xa>
 80086a8:	4770      	bx	lr
 80086aa:	f803 1b01 	strb.w	r1, [r3], #1
 80086ae:	e7f9      	b.n	80086a4 <memset+0x4>

080086b0 <_close_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d06      	ldr	r5, [pc, #24]	@ (80086cc <_close_r+0x1c>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7f9 fa01 	bl	8001ac2 <_close>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_close_r+0x1a>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_close_r+0x1a>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	200035d8 	.word	0x200035d8

080086d0 <_lseek_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_lseek_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7f9 fa16 	bl	8001b10 <_lseek>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_lseek_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_lseek_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	200035d8 	.word	0x200035d8

080086f4 <_read_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d07      	ldr	r5, [pc, #28]	@ (8008714 <_read_r+0x20>)
 80086f8:	4604      	mov	r4, r0
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	602a      	str	r2, [r5, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f7f9 f9c0 	bl	8001a88 <_read>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_read_r+0x1e>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_read_r+0x1e>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	200035d8 	.word	0x200035d8

08008718 <_write_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	@ (8008738 <_write_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7f8 ffa6 	bl	8001678 <_write>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_write_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_write_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	200035d8 	.word	0x200035d8

0800873c <__errno>:
 800873c:	4b01      	ldr	r3, [pc, #4]	@ (8008744 <__errno+0x8>)
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000006c 	.word	0x2000006c

08008748 <__libc_init_array>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4d0d      	ldr	r5, [pc, #52]	@ (8008780 <__libc_init_array+0x38>)
 800874c:	4c0d      	ldr	r4, [pc, #52]	@ (8008784 <__libc_init_array+0x3c>)
 800874e:	1b64      	subs	r4, r4, r5
 8008750:	10a4      	asrs	r4, r4, #2
 8008752:	2600      	movs	r6, #0
 8008754:	42a6      	cmp	r6, r4
 8008756:	d109      	bne.n	800876c <__libc_init_array+0x24>
 8008758:	4d0b      	ldr	r5, [pc, #44]	@ (8008788 <__libc_init_array+0x40>)
 800875a:	4c0c      	ldr	r4, [pc, #48]	@ (800878c <__libc_init_array+0x44>)
 800875c:	f000 fd24 	bl	80091a8 <_init>
 8008760:	1b64      	subs	r4, r4, r5
 8008762:	10a4      	asrs	r4, r4, #2
 8008764:	2600      	movs	r6, #0
 8008766:	42a6      	cmp	r6, r4
 8008768:	d105      	bne.n	8008776 <__libc_init_array+0x2e>
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008770:	4798      	blx	r3
 8008772:	3601      	adds	r6, #1
 8008774:	e7ee      	b.n	8008754 <__libc_init_array+0xc>
 8008776:	f855 3b04 	ldr.w	r3, [r5], #4
 800877a:	4798      	blx	r3
 800877c:	3601      	adds	r6, #1
 800877e:	e7f2      	b.n	8008766 <__libc_init_array+0x1e>
 8008780:	0800981c 	.word	0x0800981c
 8008784:	0800981c 	.word	0x0800981c
 8008788:	0800981c 	.word	0x0800981c
 800878c:	08009820 	.word	0x08009820

08008790 <__retarget_lock_init_recursive>:
 8008790:	4770      	bx	lr

08008792 <__retarget_lock_acquire_recursive>:
 8008792:	4770      	bx	lr

08008794 <__retarget_lock_release_recursive>:
 8008794:	4770      	bx	lr
	...

08008798 <_free_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4605      	mov	r5, r0
 800879c:	2900      	cmp	r1, #0
 800879e:	d041      	beq.n	8008824 <_free_r+0x8c>
 80087a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a4:	1f0c      	subs	r4, r1, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfb8      	it	lt
 80087aa:	18e4      	addlt	r4, r4, r3
 80087ac:	f000 f8e0 	bl	8008970 <__malloc_lock>
 80087b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008828 <_free_r+0x90>)
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	b933      	cbnz	r3, 80087c4 <_free_r+0x2c>
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	6014      	str	r4, [r2, #0]
 80087ba:	4628      	mov	r0, r5
 80087bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c0:	f000 b8dc 	b.w	800897c <__malloc_unlock>
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	d908      	bls.n	80087da <_free_r+0x42>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	1821      	adds	r1, r4, r0
 80087cc:	428b      	cmp	r3, r1
 80087ce:	bf01      	itttt	eq
 80087d0:	6819      	ldreq	r1, [r3, #0]
 80087d2:	685b      	ldreq	r3, [r3, #4]
 80087d4:	1809      	addeq	r1, r1, r0
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	e7ed      	b.n	80087b6 <_free_r+0x1e>
 80087da:	461a      	mov	r2, r3
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b10b      	cbz	r3, 80087e4 <_free_r+0x4c>
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d9fa      	bls.n	80087da <_free_r+0x42>
 80087e4:	6811      	ldr	r1, [r2, #0]
 80087e6:	1850      	adds	r0, r2, r1
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d10b      	bne.n	8008804 <_free_r+0x6c>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	4401      	add	r1, r0
 80087f0:	1850      	adds	r0, r2, r1
 80087f2:	4283      	cmp	r3, r0
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	d1e0      	bne.n	80087ba <_free_r+0x22>
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	6053      	str	r3, [r2, #4]
 80087fe:	4408      	add	r0, r1
 8008800:	6010      	str	r0, [r2, #0]
 8008802:	e7da      	b.n	80087ba <_free_r+0x22>
 8008804:	d902      	bls.n	800880c <_free_r+0x74>
 8008806:	230c      	movs	r3, #12
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	e7d6      	b.n	80087ba <_free_r+0x22>
 800880c:	6820      	ldr	r0, [r4, #0]
 800880e:	1821      	adds	r1, r4, r0
 8008810:	428b      	cmp	r3, r1
 8008812:	bf04      	itt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	bf04      	itt	eq
 800881c:	1809      	addeq	r1, r1, r0
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	6054      	str	r4, [r2, #4]
 8008822:	e7ca      	b.n	80087ba <_free_r+0x22>
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	bf00      	nop
 8008828:	200035e4 	.word	0x200035e4

0800882c <sbrk_aligned>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	4e0f      	ldr	r6, [pc, #60]	@ (800886c <sbrk_aligned+0x40>)
 8008830:	460c      	mov	r4, r1
 8008832:	6831      	ldr	r1, [r6, #0]
 8008834:	4605      	mov	r5, r0
 8008836:	b911      	cbnz	r1, 800883e <sbrk_aligned+0x12>
 8008838:	f000 fca6 	bl	8009188 <_sbrk_r>
 800883c:	6030      	str	r0, [r6, #0]
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f000 fca1 	bl	8009188 <_sbrk_r>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d103      	bne.n	8008852 <sbrk_aligned+0x26>
 800884a:	f04f 34ff 	mov.w	r4, #4294967295
 800884e:	4620      	mov	r0, r4
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	1cc4      	adds	r4, r0, #3
 8008854:	f024 0403 	bic.w	r4, r4, #3
 8008858:	42a0      	cmp	r0, r4
 800885a:	d0f8      	beq.n	800884e <sbrk_aligned+0x22>
 800885c:	1a21      	subs	r1, r4, r0
 800885e:	4628      	mov	r0, r5
 8008860:	f000 fc92 	bl	8009188 <_sbrk_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d1f2      	bne.n	800884e <sbrk_aligned+0x22>
 8008868:	e7ef      	b.n	800884a <sbrk_aligned+0x1e>
 800886a:	bf00      	nop
 800886c:	200035e0 	.word	0x200035e0

08008870 <_malloc_r>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	1ccd      	adds	r5, r1, #3
 8008876:	f025 0503 	bic.w	r5, r5, #3
 800887a:	3508      	adds	r5, #8
 800887c:	2d0c      	cmp	r5, #12
 800887e:	bf38      	it	cc
 8008880:	250c      	movcc	r5, #12
 8008882:	2d00      	cmp	r5, #0
 8008884:	4606      	mov	r6, r0
 8008886:	db01      	blt.n	800888c <_malloc_r+0x1c>
 8008888:	42a9      	cmp	r1, r5
 800888a:	d904      	bls.n	8008896 <_malloc_r+0x26>
 800888c:	230c      	movs	r3, #12
 800888e:	6033      	str	r3, [r6, #0]
 8008890:	2000      	movs	r0, #0
 8008892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800896c <_malloc_r+0xfc>
 800889a:	f000 f869 	bl	8008970 <__malloc_lock>
 800889e:	f8d8 3000 	ldr.w	r3, [r8]
 80088a2:	461c      	mov	r4, r3
 80088a4:	bb44      	cbnz	r4, 80088f8 <_malloc_r+0x88>
 80088a6:	4629      	mov	r1, r5
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff ffbf 	bl	800882c <sbrk_aligned>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	4604      	mov	r4, r0
 80088b2:	d158      	bne.n	8008966 <_malloc_r+0xf6>
 80088b4:	f8d8 4000 	ldr.w	r4, [r8]
 80088b8:	4627      	mov	r7, r4
 80088ba:	2f00      	cmp	r7, #0
 80088bc:	d143      	bne.n	8008946 <_malloc_r+0xd6>
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d04b      	beq.n	800895a <_malloc_r+0xea>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	4639      	mov	r1, r7
 80088c6:	4630      	mov	r0, r6
 80088c8:	eb04 0903 	add.w	r9, r4, r3
 80088cc:	f000 fc5c 	bl	8009188 <_sbrk_r>
 80088d0:	4581      	cmp	r9, r0
 80088d2:	d142      	bne.n	800895a <_malloc_r+0xea>
 80088d4:	6821      	ldr	r1, [r4, #0]
 80088d6:	1a6d      	subs	r5, r5, r1
 80088d8:	4629      	mov	r1, r5
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ffa6 	bl	800882c <sbrk_aligned>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d03a      	beq.n	800895a <_malloc_r+0xea>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	442b      	add	r3, r5
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	f8d8 3000 	ldr.w	r3, [r8]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	bb62      	cbnz	r2, 800894c <_malloc_r+0xdc>
 80088f2:	f8c8 7000 	str.w	r7, [r8]
 80088f6:	e00f      	b.n	8008918 <_malloc_r+0xa8>
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	1b52      	subs	r2, r2, r5
 80088fc:	d420      	bmi.n	8008940 <_malloc_r+0xd0>
 80088fe:	2a0b      	cmp	r2, #11
 8008900:	d917      	bls.n	8008932 <_malloc_r+0xc2>
 8008902:	1961      	adds	r1, r4, r5
 8008904:	42a3      	cmp	r3, r4
 8008906:	6025      	str	r5, [r4, #0]
 8008908:	bf18      	it	ne
 800890a:	6059      	strne	r1, [r3, #4]
 800890c:	6863      	ldr	r3, [r4, #4]
 800890e:	bf08      	it	eq
 8008910:	f8c8 1000 	streq.w	r1, [r8]
 8008914:	5162      	str	r2, [r4, r5]
 8008916:	604b      	str	r3, [r1, #4]
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f82f 	bl	800897c <__malloc_unlock>
 800891e:	f104 000b 	add.w	r0, r4, #11
 8008922:	1d23      	adds	r3, r4, #4
 8008924:	f020 0007 	bic.w	r0, r0, #7
 8008928:	1ac2      	subs	r2, r0, r3
 800892a:	bf1c      	itt	ne
 800892c:	1a1b      	subne	r3, r3, r0
 800892e:	50a3      	strne	r3, [r4, r2]
 8008930:	e7af      	b.n	8008892 <_malloc_r+0x22>
 8008932:	6862      	ldr	r2, [r4, #4]
 8008934:	42a3      	cmp	r3, r4
 8008936:	bf0c      	ite	eq
 8008938:	f8c8 2000 	streq.w	r2, [r8]
 800893c:	605a      	strne	r2, [r3, #4]
 800893e:	e7eb      	b.n	8008918 <_malloc_r+0xa8>
 8008940:	4623      	mov	r3, r4
 8008942:	6864      	ldr	r4, [r4, #4]
 8008944:	e7ae      	b.n	80088a4 <_malloc_r+0x34>
 8008946:	463c      	mov	r4, r7
 8008948:	687f      	ldr	r7, [r7, #4]
 800894a:	e7b6      	b.n	80088ba <_malloc_r+0x4a>
 800894c:	461a      	mov	r2, r3
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	42a3      	cmp	r3, r4
 8008952:	d1fb      	bne.n	800894c <_malloc_r+0xdc>
 8008954:	2300      	movs	r3, #0
 8008956:	6053      	str	r3, [r2, #4]
 8008958:	e7de      	b.n	8008918 <_malloc_r+0xa8>
 800895a:	230c      	movs	r3, #12
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	4630      	mov	r0, r6
 8008960:	f000 f80c 	bl	800897c <__malloc_unlock>
 8008964:	e794      	b.n	8008890 <_malloc_r+0x20>
 8008966:	6005      	str	r5, [r0, #0]
 8008968:	e7d6      	b.n	8008918 <_malloc_r+0xa8>
 800896a:	bf00      	nop
 800896c:	200035e4 	.word	0x200035e4

08008970 <__malloc_lock>:
 8008970:	4801      	ldr	r0, [pc, #4]	@ (8008978 <__malloc_lock+0x8>)
 8008972:	f7ff bf0e 	b.w	8008792 <__retarget_lock_acquire_recursive>
 8008976:	bf00      	nop
 8008978:	200035dc 	.word	0x200035dc

0800897c <__malloc_unlock>:
 800897c:	4801      	ldr	r0, [pc, #4]	@ (8008984 <__malloc_unlock+0x8>)
 800897e:	f7ff bf09 	b.w	8008794 <__retarget_lock_release_recursive>
 8008982:	bf00      	nop
 8008984:	200035dc 	.word	0x200035dc

08008988 <__sfputc_r>:
 8008988:	6893      	ldr	r3, [r2, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	b410      	push	{r4}
 8008990:	6093      	str	r3, [r2, #8]
 8008992:	da08      	bge.n	80089a6 <__sfputc_r+0x1e>
 8008994:	6994      	ldr	r4, [r2, #24]
 8008996:	42a3      	cmp	r3, r4
 8008998:	db01      	blt.n	800899e <__sfputc_r+0x16>
 800899a:	290a      	cmp	r1, #10
 800899c:	d103      	bne.n	80089a6 <__sfputc_r+0x1e>
 800899e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a2:	f7ff bde8 	b.w	8008576 <__swbuf_r>
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	1c58      	adds	r0, r3, #1
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	7019      	strb	r1, [r3, #0]
 80089ae:	4608      	mov	r0, r1
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <__sfputs_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	18d5      	adds	r5, r2, r3
 80089c0:	42ac      	cmp	r4, r5
 80089c2:	d101      	bne.n	80089c8 <__sfputs_r+0x12>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e007      	b.n	80089d8 <__sfputs_r+0x22>
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	463a      	mov	r2, r7
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ffda 	bl	8008988 <__sfputc_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d1f3      	bne.n	80089c0 <__sfputs_r+0xa>
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089dc <_vfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	b09d      	sub	sp, #116	@ 0x74
 80089e4:	4614      	mov	r4, r2
 80089e6:	4698      	mov	r8, r3
 80089e8:	4606      	mov	r6, r0
 80089ea:	b118      	cbz	r0, 80089f4 <_vfiprintf_r+0x18>
 80089ec:	6a03      	ldr	r3, [r0, #32]
 80089ee:	b90b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x18>
 80089f0:	f7ff fcd8 	bl	80083a4 <__sinit>
 80089f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f6:	07d9      	lsls	r1, r3, #31
 80089f8:	d405      	bmi.n	8008a06 <_vfiprintf_r+0x2a>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	059a      	lsls	r2, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_vfiprintf_r+0x2a>
 8008a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a02:	f7ff fec6 	bl	8008792 <__retarget_lock_acquire_recursive>
 8008a06:	89ab      	ldrh	r3, [r5, #12]
 8008a08:	071b      	lsls	r3, r3, #28
 8008a0a:	d501      	bpl.n	8008a10 <_vfiprintf_r+0x34>
 8008a0c:	692b      	ldr	r3, [r5, #16]
 8008a0e:	b99b      	cbnz	r3, 8008a38 <_vfiprintf_r+0x5c>
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff fdee 	bl	80085f4 <__swsetup_r>
 8008a18:	b170      	cbz	r0, 8008a38 <_vfiprintf_r+0x5c>
 8008a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a1c:	07dc      	lsls	r4, r3, #31
 8008a1e:	d504      	bpl.n	8008a2a <_vfiprintf_r+0x4e>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	b01d      	add	sp, #116	@ 0x74
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	0598      	lsls	r0, r3, #22
 8008a2e:	d4f7      	bmi.n	8008a20 <_vfiprintf_r+0x44>
 8008a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a32:	f7ff feaf 	bl	8008794 <__retarget_lock_release_recursive>
 8008a36:	e7f3      	b.n	8008a20 <_vfiprintf_r+0x44>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a46:	2330      	movs	r3, #48	@ 0x30
 8008a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bf8 <_vfiprintf_r+0x21c>
 8008a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	4623      	mov	r3, r4
 8008a56:	469a      	mov	sl, r3
 8008a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_vfiprintf_r+0x86>
 8008a5e:	2a25      	cmp	r2, #37	@ 0x25
 8008a60:	d1f9      	bne.n	8008a56 <_vfiprintf_r+0x7a>
 8008a62:	ebba 0b04 	subs.w	fp, sl, r4
 8008a66:	d00b      	beq.n	8008a80 <_vfiprintf_r+0xa4>
 8008a68:	465b      	mov	r3, fp
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff ffa1 	bl	80089b6 <__sfputs_r>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f000 80a7 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a7c:	445a      	add	r2, fp
 8008a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a80:	f89a 3000 	ldrb.w	r3, [sl]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 809f 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a94:	f10a 0a01 	add.w	sl, sl, #1
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	4853      	ldr	r0, [pc, #332]	@ (8008bf8 <_vfiprintf_r+0x21c>)
 8008aac:	f7f7 fbc8 	bl	8000240 <memchr>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	b9d8      	cbnz	r0, 8008aec <_vfiprintf_r+0x110>
 8008ab4:	06d1      	lsls	r1, r2, #27
 8008ab6:	bf44      	itt	mi
 8008ab8:	2320      	movmi	r3, #32
 8008aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008abe:	0713      	lsls	r3, r2, #28
 8008ac0:	bf44      	itt	mi
 8008ac2:	232b      	movmi	r3, #43	@ 0x2b
 8008ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8008acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ace:	d015      	beq.n	8008afc <_vfiprintf_r+0x120>
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	4654      	mov	r4, sl
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f04f 0c0a 	mov.w	ip, #10
 8008ada:	4621      	mov	r1, r4
 8008adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae0:	3b30      	subs	r3, #48	@ 0x30
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d94b      	bls.n	8008b7e <_vfiprintf_r+0x1a2>
 8008ae6:	b1b0      	cbz	r0, 8008b16 <_vfiprintf_r+0x13a>
 8008ae8:	9207      	str	r2, [sp, #28]
 8008aea:	e014      	b.n	8008b16 <_vfiprintf_r+0x13a>
 8008aec:	eba0 0308 	sub.w	r3, r0, r8
 8008af0:	fa09 f303 	lsl.w	r3, r9, r3
 8008af4:	4313      	orrs	r3, r2
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	46a2      	mov	sl, r4
 8008afa:	e7d2      	b.n	8008aa2 <_vfiprintf_r+0xc6>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9103      	str	r1, [sp, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfbb      	ittet	lt
 8008b08:	425b      	neglt	r3, r3
 8008b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0e:	9307      	strge	r3, [sp, #28]
 8008b10:	9307      	strlt	r3, [sp, #28]
 8008b12:	bfb8      	it	lt
 8008b14:	9204      	strlt	r2, [sp, #16]
 8008b16:	7823      	ldrb	r3, [r4, #0]
 8008b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b1a:	d10a      	bne.n	8008b32 <_vfiprintf_r+0x156>
 8008b1c:	7863      	ldrb	r3, [r4, #1]
 8008b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b20:	d132      	bne.n	8008b88 <_vfiprintf_r+0x1ac>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	1d1a      	adds	r2, r3, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	9203      	str	r2, [sp, #12]
 8008b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b2e:	3402      	adds	r4, #2
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c08 <_vfiprintf_r+0x22c>
 8008b36:	7821      	ldrb	r1, [r4, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	f7f7 fb80 	bl	8000240 <memchr>
 8008b40:	b138      	cbz	r0, 8008b52 <_vfiprintf_r+0x176>
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	eba0 000a 	sub.w	r0, r0, sl
 8008b48:	2240      	movs	r2, #64	@ 0x40
 8008b4a:	4082      	lsls	r2, r0
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	3401      	adds	r4, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4829      	ldr	r0, [pc, #164]	@ (8008bfc <_vfiprintf_r+0x220>)
 8008b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	f7f7 fb6f 	bl	8000240 <memchr>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d03f      	beq.n	8008be6 <_vfiprintf_r+0x20a>
 8008b66:	4b26      	ldr	r3, [pc, #152]	@ (8008c00 <_vfiprintf_r+0x224>)
 8008b68:	bb1b      	cbnz	r3, 8008bb2 <_vfiprintf_r+0x1d6>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	3308      	adds	r3, #8
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	443b      	add	r3, r7
 8008b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7c:	e76a      	b.n	8008a54 <_vfiprintf_r+0x78>
 8008b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b82:	460c      	mov	r4, r1
 8008b84:	2001      	movs	r0, #1
 8008b86:	e7a8      	b.n	8008ada <_vfiprintf_r+0xfe>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	3401      	adds	r4, #1
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f04f 0c0a 	mov.w	ip, #10
 8008b94:	4620      	mov	r0, r4
 8008b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b9a:	3a30      	subs	r2, #48	@ 0x30
 8008b9c:	2a09      	cmp	r2, #9
 8008b9e:	d903      	bls.n	8008ba8 <_vfiprintf_r+0x1cc>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0c6      	beq.n	8008b32 <_vfiprintf_r+0x156>
 8008ba4:	9105      	str	r1, [sp, #20]
 8008ba6:	e7c4      	b.n	8008b32 <_vfiprintf_r+0x156>
 8008ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bac:	4604      	mov	r4, r0
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e7f0      	b.n	8008b94 <_vfiprintf_r+0x1b8>
 8008bb2:	ab03      	add	r3, sp, #12
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <_vfiprintf_r+0x228>)
 8008bba:	a904      	add	r1, sp, #16
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f3af 8000 	nop.w
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	1c78      	adds	r0, r7, #1
 8008bc6:	d1d6      	bne.n	8008b76 <_vfiprintf_r+0x19a>
 8008bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bca:	07d9      	lsls	r1, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_vfiprintf_r+0x1fe>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	059a      	lsls	r2, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_vfiprintf_r+0x1fe>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd6:	f7ff fddd 	bl	8008794 <__retarget_lock_release_recursive>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	065b      	lsls	r3, r3, #25
 8008bde:	f53f af1f 	bmi.w	8008a20 <_vfiprintf_r+0x44>
 8008be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008be4:	e71e      	b.n	8008a24 <_vfiprintf_r+0x48>
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462a      	mov	r2, r5
 8008bec:	4b05      	ldr	r3, [pc, #20]	@ (8008c04 <_vfiprintf_r+0x228>)
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f000 f879 	bl	8008ce8 <_printf_i>
 8008bf6:	e7e4      	b.n	8008bc2 <_vfiprintf_r+0x1e6>
 8008bf8:	080097e0 	.word	0x080097e0
 8008bfc:	080097ea 	.word	0x080097ea
 8008c00:	00000000 	.word	0x00000000
 8008c04:	080089b7 	.word	0x080089b7
 8008c08:	080097e6 	.word	0x080097e6

08008c0c <_printf_common>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	4616      	mov	r6, r2
 8008c12:	4698      	mov	r8, r3
 8008c14:	688a      	ldr	r2, [r1, #8]
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bfb8      	it	lt
 8008c20:	4613      	movlt	r3, r2
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c28:	4607      	mov	r7, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b10a      	cbz	r2, 8008c32 <_printf_common+0x26>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	6833      	ldrmi	r3, [r6, #0]
 8008c3a:	3302      	addmi	r3, #2
 8008c3c:	6033      	strmi	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	f015 0506 	ands.w	r5, r5, #6
 8008c44:	d106      	bne.n	8008c54 <_printf_common+0x48>
 8008c46:	f104 0a19 	add.w	sl, r4, #25
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	6832      	ldr	r2, [r6, #0]
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc26      	bgt.n	8008ca2 <_printf_common+0x96>
 8008c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	3b00      	subs	r3, #0
 8008c5c:	bf18      	it	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	0692      	lsls	r2, r2, #26
 8008c62:	d42b      	bmi.n	8008cbc <_printf_common+0xb0>
 8008c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c68:	4641      	mov	r1, r8
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c8      	blx	r9
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d01e      	beq.n	8008cb0 <_printf_common+0xa4>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	6922      	ldr	r2, [r4, #16]
 8008c76:	f003 0306 	and.w	r3, r3, #6
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	bf02      	ittt	eq
 8008c7e:	68e5      	ldreq	r5, [r4, #12]
 8008c80:	6833      	ldreq	r3, [r6, #0]
 8008c82:	1aed      	subeq	r5, r5, r3
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	2600      	movs	r6, #0
 8008c98:	341a      	adds	r4, #26
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	d11a      	bne.n	8008cd4 <_printf_common+0xc8>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e008      	b.n	8008cb4 <_printf_common+0xa8>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4641      	mov	r1, r8
 8008ca8:	4638      	mov	r0, r7
 8008caa:	47c8      	blx	r9
 8008cac:	3001      	adds	r0, #1
 8008cae:	d103      	bne.n	8008cb8 <_printf_common+0xac>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7c6      	b.n	8008c4a <_printf_common+0x3e>
 8008cbc:	18e1      	adds	r1, r4, r3
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	2030      	movs	r0, #48	@ 0x30
 8008cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cc6:	4422      	add	r2, r4
 8008cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	e7c7      	b.n	8008c64 <_printf_common+0x58>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c8      	blx	r9
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d0e6      	beq.n	8008cb0 <_printf_common+0xa4>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7d9      	b.n	8008c9a <_printf_common+0x8e>
	...

08008ce8 <_printf_i>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	7e0f      	ldrb	r7, [r1, #24]
 8008cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cf0:	2f78      	cmp	r7, #120	@ 0x78
 8008cf2:	4691      	mov	r9, r2
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cfe:	d807      	bhi.n	8008d10 <_printf_i+0x28>
 8008d00:	2f62      	cmp	r7, #98	@ 0x62
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x32>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f000 80d2 	beq.w	8008eae <_printf_i+0x1c6>
 8008d0a:	2f58      	cmp	r7, #88	@ 0x58
 8008d0c:	f000 80b9 	beq.w	8008e82 <_printf_i+0x19a>
 8008d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d18:	e03a      	b.n	8008d90 <_printf_i+0xa8>
 8008d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	d8f6      	bhi.n	8008d10 <_printf_i+0x28>
 8008d22:	a101      	add	r1, pc, #4	@ (adr r1, 8008d28 <_printf_i+0x40>)
 8008d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d11 	.word	0x08008d11
 8008d34:	08008d11 	.word	0x08008d11
 8008d38:	08008d11 	.word	0x08008d11
 8008d3c:	08008d11 	.word	0x08008d11
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d11 	.word	0x08008d11
 8008d48:	08008d11 	.word	0x08008d11
 8008d4c:	08008d11 	.word	0x08008d11
 8008d50:	08008d11 	.word	0x08008d11
 8008d54:	08008e95 	.word	0x08008e95
 8008d58:	08008dbf 	.word	0x08008dbf
 8008d5c:	08008e4f 	.word	0x08008e4f
 8008d60:	08008d11 	.word	0x08008d11
 8008d64:	08008d11 	.word	0x08008d11
 8008d68:	08008eb7 	.word	0x08008eb7
 8008d6c:	08008d11 	.word	0x08008d11
 8008d70:	08008dbf 	.word	0x08008dbf
 8008d74:	08008d11 	.word	0x08008d11
 8008d78:	08008d11 	.word	0x08008d11
 8008d7c:	08008e57 	.word	0x08008e57
 8008d80:	6833      	ldr	r3, [r6, #0]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6032      	str	r2, [r6, #0]
 8008d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d90:	2301      	movs	r3, #1
 8008d92:	e09d      	b.n	8008ed0 <_printf_i+0x1e8>
 8008d94:	6833      	ldr	r3, [r6, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6031      	str	r1, [r6, #0]
 8008d9c:	0606      	lsls	r6, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xbc>
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	e003      	b.n	8008dac <_printf_i+0xc4>
 8008da4:	0645      	lsls	r5, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xb8>
 8008da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	da03      	bge.n	8008db8 <_printf_i+0xd0>
 8008db0:	232d      	movs	r3, #45	@ 0x2d
 8008db2:	426d      	negs	r5, r5
 8008db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008db8:	4859      	ldr	r0, [pc, #356]	@ (8008f20 <_printf_i+0x238>)
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e011      	b.n	8008de2 <_printf_i+0xfa>
 8008dbe:	6821      	ldr	r1, [r4, #0]
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	0608      	lsls	r0, r1, #24
 8008dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dc8:	d402      	bmi.n	8008dd0 <_printf_i+0xe8>
 8008dca:	0649      	lsls	r1, r1, #25
 8008dcc:	bf48      	it	mi
 8008dce:	b2ad      	uxthmi	r5, r5
 8008dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dd2:	4853      	ldr	r0, [pc, #332]	@ (8008f20 <_printf_i+0x238>)
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	bf14      	ite	ne
 8008dd8:	230a      	movne	r3, #10
 8008dda:	2308      	moveq	r3, #8
 8008ddc:	2100      	movs	r1, #0
 8008dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008de2:	6866      	ldr	r6, [r4, #4]
 8008de4:	60a6      	str	r6, [r4, #8]
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	bfa2      	ittt	ge
 8008dea:	6821      	ldrge	r1, [r4, #0]
 8008dec:	f021 0104 	bicge.w	r1, r1, #4
 8008df0:	6021      	strge	r1, [r4, #0]
 8008df2:	b90d      	cbnz	r5, 8008df8 <_printf_i+0x110>
 8008df4:	2e00      	cmp	r6, #0
 8008df6:	d04b      	beq.n	8008e90 <_printf_i+0x1a8>
 8008df8:	4616      	mov	r6, r2
 8008dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8008e02:	5dc7      	ldrb	r7, [r0, r7]
 8008e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e08:	462f      	mov	r7, r5
 8008e0a:	42bb      	cmp	r3, r7
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	d9f4      	bls.n	8008dfa <_printf_i+0x112>
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d10b      	bne.n	8008e2c <_printf_i+0x144>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	07df      	lsls	r7, r3, #31
 8008e18:	d508      	bpl.n	8008e2c <_printf_i+0x144>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6861      	ldr	r1, [r4, #4]
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	bfde      	ittt	le
 8008e22:	2330      	movle	r3, #48	@ 0x30
 8008e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e2c:	1b92      	subs	r2, r2, r6
 8008e2e:	6122      	str	r2, [r4, #16]
 8008e30:	f8cd a000 	str.w	sl, [sp]
 8008e34:	464b      	mov	r3, r9
 8008e36:	aa03      	add	r2, sp, #12
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	f7ff fee6 	bl	8008c0c <_printf_common>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d14a      	bne.n	8008eda <_printf_i+0x1f2>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	b004      	add	sp, #16
 8008e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	4833      	ldr	r0, [pc, #204]	@ (8008f24 <_printf_i+0x23c>)
 8008e58:	2778      	movs	r7, #120	@ 0x78
 8008e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	6831      	ldr	r1, [r6, #0]
 8008e62:	061f      	lsls	r7, r3, #24
 8008e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e68:	d402      	bmi.n	8008e70 <_printf_i+0x188>
 8008e6a:	065f      	lsls	r7, r3, #25
 8008e6c:	bf48      	it	mi
 8008e6e:	b2ad      	uxthmi	r5, r5
 8008e70:	6031      	str	r1, [r6, #0]
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	bf44      	itt	mi
 8008e76:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7a:	6023      	strmi	r3, [r4, #0]
 8008e7c:	b11d      	cbz	r5, 8008e86 <_printf_i+0x19e>
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e7ac      	b.n	8008ddc <_printf_i+0xf4>
 8008e82:	4827      	ldr	r0, [pc, #156]	@ (8008f20 <_printf_i+0x238>)
 8008e84:	e7e9      	b.n	8008e5a <_printf_i+0x172>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	f023 0320 	bic.w	r3, r3, #32
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	e7f6      	b.n	8008e7e <_printf_i+0x196>
 8008e90:	4616      	mov	r6, r2
 8008e92:	e7bd      	b.n	8008e10 <_printf_i+0x128>
 8008e94:	6833      	ldr	r3, [r6, #0]
 8008e96:	6825      	ldr	r5, [r4, #0]
 8008e98:	6961      	ldr	r1, [r4, #20]
 8008e9a:	1d18      	adds	r0, r3, #4
 8008e9c:	6030      	str	r0, [r6, #0]
 8008e9e:	062e      	lsls	r6, r5, #24
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	d501      	bpl.n	8008ea8 <_printf_i+0x1c0>
 8008ea4:	6019      	str	r1, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <_printf_i+0x1c6>
 8008ea8:	0668      	lsls	r0, r5, #25
 8008eaa:	d5fb      	bpl.n	8008ea4 <_printf_i+0x1bc>
 8008eac:	8019      	strh	r1, [r3, #0]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	4616      	mov	r6, r2
 8008eb4:	e7bc      	b.n	8008e30 <_printf_i+0x148>
 8008eb6:	6833      	ldr	r3, [r6, #0]
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	6032      	str	r2, [r6, #0]
 8008ebc:	681e      	ldr	r6, [r3, #0]
 8008ebe:	6862      	ldr	r2, [r4, #4]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7f7 f9bc 	bl	8000240 <memchr>
 8008ec8:	b108      	cbz	r0, 8008ece <_printf_i+0x1e6>
 8008eca:	1b80      	subs	r0, r0, r6
 8008ecc:	6060      	str	r0, [r4, #4]
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ed8:	e7aa      	b.n	8008e30 <_printf_i+0x148>
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	4632      	mov	r2, r6
 8008ede:	4649      	mov	r1, r9
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	47d0      	blx	sl
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d0ad      	beq.n	8008e44 <_printf_i+0x15c>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	079b      	lsls	r3, r3, #30
 8008eec:	d413      	bmi.n	8008f16 <_printf_i+0x22e>
 8008eee:	68e0      	ldr	r0, [r4, #12]
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	bfb8      	it	lt
 8008ef6:	4618      	movlt	r0, r3
 8008ef8:	e7a6      	b.n	8008e48 <_printf_i+0x160>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4632      	mov	r2, r6
 8008efe:	4649      	mov	r1, r9
 8008f00:	4640      	mov	r0, r8
 8008f02:	47d0      	blx	sl
 8008f04:	3001      	adds	r0, #1
 8008f06:	d09d      	beq.n	8008e44 <_printf_i+0x15c>
 8008f08:	3501      	adds	r5, #1
 8008f0a:	68e3      	ldr	r3, [r4, #12]
 8008f0c:	9903      	ldr	r1, [sp, #12]
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dcf2      	bgt.n	8008efa <_printf_i+0x212>
 8008f14:	e7eb      	b.n	8008eee <_printf_i+0x206>
 8008f16:	2500      	movs	r5, #0
 8008f18:	f104 0619 	add.w	r6, r4, #25
 8008f1c:	e7f5      	b.n	8008f0a <_printf_i+0x222>
 8008f1e:	bf00      	nop
 8008f20:	080097f1 	.word	0x080097f1
 8008f24:	08009802 	.word	0x08009802

08008f28 <__sflush_r>:
 8008f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f30:	0716      	lsls	r6, r2, #28
 8008f32:	4605      	mov	r5, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	d454      	bmi.n	8008fe2 <__sflush_r+0xba>
 8008f38:	684b      	ldr	r3, [r1, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dc02      	bgt.n	8008f44 <__sflush_r+0x1c>
 8008f3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd48      	ble.n	8008fd6 <__sflush_r+0xae>
 8008f44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d045      	beq.n	8008fd6 <__sflush_r+0xae>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f50:	682f      	ldr	r7, [r5, #0]
 8008f52:	6a21      	ldr	r1, [r4, #32]
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	d030      	beq.n	8008fba <__sflush_r+0x92>
 8008f58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	0759      	lsls	r1, r3, #29
 8008f5e:	d505      	bpl.n	8008f6c <__sflush_r+0x44>
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f66:	b10b      	cbz	r3, 8008f6c <__sflush_r+0x44>
 8008f68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b0      	blx	r6
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	d106      	bne.n	8008f8a <__sflush_r+0x62>
 8008f7c:	6829      	ldr	r1, [r5, #0]
 8008f7e:	291d      	cmp	r1, #29
 8008f80:	d82b      	bhi.n	8008fda <__sflush_r+0xb2>
 8008f82:	4a2a      	ldr	r2, [pc, #168]	@ (800902c <__sflush_r+0x104>)
 8008f84:	410a      	asrs	r2, r1
 8008f86:	07d6      	lsls	r6, r2, #31
 8008f88:	d427      	bmi.n	8008fda <__sflush_r+0xb2>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	04d9      	lsls	r1, r3, #19
 8008f90:	6922      	ldr	r2, [r4, #16]
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	d504      	bpl.n	8008fa0 <__sflush_r+0x78>
 8008f96:	1c42      	adds	r2, r0, #1
 8008f98:	d101      	bne.n	8008f9e <__sflush_r+0x76>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b903      	cbnz	r3, 8008fa0 <__sflush_r+0x78>
 8008f9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fa2:	602f      	str	r7, [r5, #0]
 8008fa4:	b1b9      	cbz	r1, 8008fd6 <__sflush_r+0xae>
 8008fa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008faa:	4299      	cmp	r1, r3
 8008fac:	d002      	beq.n	8008fb4 <__sflush_r+0x8c>
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f7ff fbf2 	bl	8008798 <_free_r>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb8:	e00d      	b.n	8008fd6 <__sflush_r+0xae>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b0      	blx	r6
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	1c50      	adds	r0, r2, #1
 8008fc4:	d1c9      	bne.n	8008f5a <__sflush_r+0x32>
 8008fc6:	682b      	ldr	r3, [r5, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0c6      	beq.n	8008f5a <__sflush_r+0x32>
 8008fcc:	2b1d      	cmp	r3, #29
 8008fce:	d001      	beq.n	8008fd4 <__sflush_r+0xac>
 8008fd0:	2b16      	cmp	r3, #22
 8008fd2:	d11e      	bne.n	8009012 <__sflush_r+0xea>
 8008fd4:	602f      	str	r7, [r5, #0]
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e022      	b.n	8009020 <__sflush_r+0xf8>
 8008fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fde:	b21b      	sxth	r3, r3
 8008fe0:	e01b      	b.n	800901a <__sflush_r+0xf2>
 8008fe2:	690f      	ldr	r7, [r1, #16]
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	d0f6      	beq.n	8008fd6 <__sflush_r+0xae>
 8008fe8:	0793      	lsls	r3, r2, #30
 8008fea:	680e      	ldr	r6, [r1, #0]
 8008fec:	bf08      	it	eq
 8008fee:	694b      	ldreq	r3, [r1, #20]
 8008ff0:	600f      	str	r7, [r1, #0]
 8008ff2:	bf18      	it	ne
 8008ff4:	2300      	movne	r3, #0
 8008ff6:	eba6 0807 	sub.w	r8, r6, r7
 8008ffa:	608b      	str	r3, [r1, #8]
 8008ffc:	f1b8 0f00 	cmp.w	r8, #0
 8009000:	dde9      	ble.n	8008fd6 <__sflush_r+0xae>
 8009002:	6a21      	ldr	r1, [r4, #32]
 8009004:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009006:	4643      	mov	r3, r8
 8009008:	463a      	mov	r2, r7
 800900a:	4628      	mov	r0, r5
 800900c:	47b0      	blx	r6
 800900e:	2800      	cmp	r0, #0
 8009010:	dc08      	bgt.n	8009024 <__sflush_r+0xfc>
 8009012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	4407      	add	r7, r0
 8009026:	eba8 0800 	sub.w	r8, r8, r0
 800902a:	e7e7      	b.n	8008ffc <__sflush_r+0xd4>
 800902c:	dfbffffe 	.word	0xdfbffffe

08009030 <_fflush_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	690b      	ldr	r3, [r1, #16]
 8009034:	4605      	mov	r5, r0
 8009036:	460c      	mov	r4, r1
 8009038:	b913      	cbnz	r3, 8009040 <_fflush_r+0x10>
 800903a:	2500      	movs	r5, #0
 800903c:	4628      	mov	r0, r5
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	b118      	cbz	r0, 800904a <_fflush_r+0x1a>
 8009042:	6a03      	ldr	r3, [r0, #32]
 8009044:	b90b      	cbnz	r3, 800904a <_fflush_r+0x1a>
 8009046:	f7ff f9ad 	bl	80083a4 <__sinit>
 800904a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f3      	beq.n	800903a <_fflush_r+0xa>
 8009052:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009054:	07d0      	lsls	r0, r2, #31
 8009056:	d404      	bmi.n	8009062 <_fflush_r+0x32>
 8009058:	0599      	lsls	r1, r3, #22
 800905a:	d402      	bmi.n	8009062 <_fflush_r+0x32>
 800905c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800905e:	f7ff fb98 	bl	8008792 <__retarget_lock_acquire_recursive>
 8009062:	4628      	mov	r0, r5
 8009064:	4621      	mov	r1, r4
 8009066:	f7ff ff5f 	bl	8008f28 <__sflush_r>
 800906a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800906c:	07da      	lsls	r2, r3, #31
 800906e:	4605      	mov	r5, r0
 8009070:	d4e4      	bmi.n	800903c <_fflush_r+0xc>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d4e1      	bmi.n	800903c <_fflush_r+0xc>
 8009078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907a:	f7ff fb8b 	bl	8008794 <__retarget_lock_release_recursive>
 800907e:	e7dd      	b.n	800903c <_fflush_r+0xc>

08009080 <__swhatbuf_r>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009088:	2900      	cmp	r1, #0
 800908a:	b096      	sub	sp, #88	@ 0x58
 800908c:	4615      	mov	r5, r2
 800908e:	461e      	mov	r6, r3
 8009090:	da0d      	bge.n	80090ae <__swhatbuf_r+0x2e>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009098:	f04f 0100 	mov.w	r1, #0
 800909c:	bf14      	ite	ne
 800909e:	2340      	movne	r3, #64	@ 0x40
 80090a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090a4:	2000      	movs	r0, #0
 80090a6:	6031      	str	r1, [r6, #0]
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	b016      	add	sp, #88	@ 0x58
 80090ac:	bd70      	pop	{r4, r5, r6, pc}
 80090ae:	466a      	mov	r2, sp
 80090b0:	f000 f848 	bl	8009144 <_fstat_r>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	dbec      	blt.n	8009092 <__swhatbuf_r+0x12>
 80090b8:	9901      	ldr	r1, [sp, #4]
 80090ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090c2:	4259      	negs	r1, r3
 80090c4:	4159      	adcs	r1, r3
 80090c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ca:	e7eb      	b.n	80090a4 <__swhatbuf_r+0x24>

080090cc <__smakebuf_r>:
 80090cc:	898b      	ldrh	r3, [r1, #12]
 80090ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d0:	079d      	lsls	r5, r3, #30
 80090d2:	4606      	mov	r6, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	d507      	bpl.n	80090e8 <__smakebuf_r+0x1c>
 80090d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	2301      	movs	r3, #1
 80090e2:	6163      	str	r3, [r4, #20]
 80090e4:	b003      	add	sp, #12
 80090e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e8:	ab01      	add	r3, sp, #4
 80090ea:	466a      	mov	r2, sp
 80090ec:	f7ff ffc8 	bl	8009080 <__swhatbuf_r>
 80090f0:	9f00      	ldr	r7, [sp, #0]
 80090f2:	4605      	mov	r5, r0
 80090f4:	4639      	mov	r1, r7
 80090f6:	4630      	mov	r0, r6
 80090f8:	f7ff fbba 	bl	8008870 <_malloc_r>
 80090fc:	b948      	cbnz	r0, 8009112 <__smakebuf_r+0x46>
 80090fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009102:	059a      	lsls	r2, r3, #22
 8009104:	d4ee      	bmi.n	80090e4 <__smakebuf_r+0x18>
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	f043 0302 	orr.w	r3, r3, #2
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	e7e2      	b.n	80090d8 <__smakebuf_r+0xc>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	6020      	str	r0, [r4, #0]
 8009116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009122:	b15b      	cbz	r3, 800913c <__smakebuf_r+0x70>
 8009124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009128:	4630      	mov	r0, r6
 800912a:	f000 f81d 	bl	8009168 <_isatty_r>
 800912e:	b128      	cbz	r0, 800913c <__smakebuf_r+0x70>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	431d      	orrs	r5, r3
 8009140:	81a5      	strh	r5, [r4, #12]
 8009142:	e7cf      	b.n	80090e4 <__smakebuf_r+0x18>

08009144 <_fstat_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	@ (8009164 <_fstat_r+0x20>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7f8 fcc2 	bl	8001ada <_fstat>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d102      	bne.n	8009160 <_fstat_r+0x1c>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	b103      	cbz	r3, 8009160 <_fstat_r+0x1c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	200035d8 	.word	0x200035d8

08009168 <_isatty_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d06      	ldr	r5, [pc, #24]	@ (8009184 <_isatty_r+0x1c>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f8 fcc1 	bl	8001afa <_isatty>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_isatty_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_isatty_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	200035d8 	.word	0x200035d8

08009188 <_sbrk_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	@ (80091a4 <_sbrk_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f8 fcca 	bl	8001b2c <_sbrk>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_sbrk_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_sbrk_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	200035d8 	.word	0x200035d8

080091a8 <_init>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr

080091b4 <_fini>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr
